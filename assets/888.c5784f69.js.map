{"version":3,"file":"888.c5784f69.js","mappings":"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","sources":["webpack:///../../browser-shims/process.js","webpack:///../utils/lang-to-scope.js","webpack:///../utils/language-registry/index.js","webpack:///../utils/language-registry/syntaxes/css/index.js","webpack:///../utils/language-registry/syntaxes/html/index.js","webpack:///../utils/language-registry/syntaxes/index.js","webpack:///../utils/language-registry/syntaxes/javascript/index.js","webpack:///../utils/language-registry/syntaxes/less/index.js","webpack:///../utils/language-registry/syntaxes/marko/index.js","webpack:///../utils/language-registry/syntaxes/shell/index.js","webpack:///../utils/language-registry/syntaxes/text/index.js","webpack:///../utils/language-registry/syntaxes/typescript/index.js"],"sourcesContent":["module.exports = {\n  env: {},\n  browser: true,\n  cwd() {\n    return \"/\"\n  }\n}","module.exports = lang => {\n  if (lang === \"js\" || lang === \"javascript\" || lang === \"json\" || lang === \"jsx\") {\n    return \"source.js\";\n  } else if (lang === \"css\") {\n    return \"source.css\";\n  } else if (lang === \"html\") {\n    return \"text.html.basic\";\n  } else if (lang === \"marko\") {\n    return \"text.marko\";\n  } else if (lang === \"bash\") {\n    return \"source.shell\";\n  } else {\n    return \"text.basic\"\n  }\n}","const {\n  createOnigScanner,\n  createOnigString,\n  loadWASM\n} = require(\"vscode-oniguruma\");\nconst { INITIAL, Registry } = require(\"vscode-textmate\");\nconst tmTheme = require(\"./tmTheme.json\");\nconst syntaxes = require(\"./syntaxes\");\n\nlet tokenizers;\nlet registry;\nconst getWASM = (() => {\n  if (typeof window === \"object\") {\n    const wasmUrl = require(\"vscode-oniguruma/release/onig.wasm\").default;\n    return async function () {\n      return (await fetch(wasmUrl)).arrayBuffer();\n    }\n  } else {\n    const fs = require(\"fs\");\n    const path = require(\"path\");\n    const wasmPath = path.join(require.resolve(\"vscode-oniguruma/package.json\"), \"../release/onig.wasm\");\n    return async function () {\n      return (await fs.promises.readFile(wasmPath)).buffer;\n    }\n  }\n})();\n\nexports.syntaxes = syntaxes;\nexports.tmTheme = tmTheme;\n\nexports.getTokenizer = function getTokenizer(scopeName) {\n  assertLoaded();\n  if (!tokenizers[scopeName]) {\n    throw new Error(`No registered grammar for \"${scopeName}\"`);\n  }\n  return tokenizers[scopeName];\n}\n\nexports.getColorMap = function getColorMap() {\n  assertLoaded();\n  return registry.getColorMap();\n}\n\nexports.load = async ({ getEncodedLanguageId }) => {\n  await loadWASM(await getWASM());\n\n  tokenizers = {};\n  registry = new Registry({\n    theme: tmTheme,\n    onigLib: Promise.resolve({\n      createOnigScanner,\n      createOnigString\n    })\n  });\n\n  for (const syntax of syntaxes) {\n    const { grammarConfig } = syntax;\n    const { scopeName } = syntax.grammar;\n    const languageId = getEncodedLanguageId(scopeName);\n\n    let embeddedLanguages;\n    if (grammarConfig.embeddedLanguages) {\n      embeddedLanguages = {};\n\n      for (const embeddedScopeName of grammarConfig.embeddedLanguages) {\n        embeddedLanguages[embeddedScopeName] = getEncodedLanguageId(\n          embeddedScopeName\n        );\n      }\n    }\n\n    const grammar = await registry.addGrammar(\n      syntax.grammar,\n      undefined,\n      languageId,\n      embeddedLanguages\n    );\n\n    tokenizers[scopeName] = {\n      getInitialState() {\n        return INITIAL;\n      },\n      tokenizeEncoded(line, state) {\n        const { tokens, ruleStack: endState } = grammar.tokenizeLine2(\n          line,\n          state\n        );\n\n        return { tokens, endState };\n      }\n    };\n  }\n};\n\nfunction assertLoaded() {\n  if (!registry) {\n    throw new Error(\"You must call load() before using the registry.\");\n  }\n}","exports.grammar = require(\"./tmLanguage.json\");\nexports.grammarConfig = {};\nexports.editorConfig = {\n  comments: {\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\", notIn: [\"string\", \"comment\"] },\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    ['\"', '\"'],\n    [\"'\", \"'\"]\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\n      end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\n    }\n  }\n};\n","exports.grammar = require(\"./tmLanguage.json\");\nexports.grammarConfig = {\n  embeddedLanguages: [\"source.css\", \"source.js\"]\n}\n\nexports.editorConfig = {\n  comments: {\n    blockComment: [\"<!--\", \"-->\"]\n  },\n  brackets: [\n    [\"<!--\", \"-->\"],\n    [\"<\", \">\"],\n    [\"{\", \"}\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\" },\n    { open: '\"', close: '\"' },\n    { open: \"<!--\", close: \"-->\", notIn: [\"comment\", \"string\"] }\n  ],\n  surroundingPairs: [\n    { open: \"'\", close: \"'\" },\n    { open: '\"', close: '\"' },\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*<!--\\\\s*#region\\\\b.*-->\"),\n      end: new RegExp(\"^\\\\s*<!--\\\\s*#endregion\\\\b.*-->\")\n    }\n  }\n};\n","module.exports = [\n  require(\"./text\"),\n  require(\"./css\"),\n  require(\"./less\"),\n  require(\"./javascript\"),\n  require(\"./typescript\"),\n  require(\"./html\"),\n  require(\"./shell\"),\n  require(\"./marko\")\n]\n","exports.grammar = require(\"./tmLanguage.json\");\nexports.grammarConfig = {};\nexports.editorConfig = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"`\", close: \"`\", notIn: [\"string\", \"comment\"] },\n    { open: \"/**\", close: \" */\", notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"'\", \"'\"],\n    ['\"', '\"'],\n    [\"`\", \"`\"]\n  ],\n  autoCloseBefore: \";:.,=}])>` \\n\\t\",\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\n    }\n  }\n};\n","exports.grammar = require(\"./tmLanguage.json\");\nexports.grammarConfig = {};\nexports.editorConfig = {\n  comments: {\n    blockComment: [\"/*\", \"*/\"],\n    lineComment: \"//\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\", notIn: [\"string\", \"comment\"] },\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    ['\"', '\"'],\n    [\"'\", \"'\"]\n  ],\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"(^.*\\\\{[^}]*$)\"),\n    decreaseIndentPattern: new RegExp(\"^\\\\s*\\\\}\")\n  },\n  folding: {\n    markers: {\n      start: \"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\",\n      end: \"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\"\n    }\n  }\n};\n","exports.grammar = require(\"./tmLanguage.json\");\nexports.grammarConfig = {\n  embeddedLanguages: [\"source.css\", \"source.js\"]\n}\nexports.editorConfig = {\n  wordPattern: new RegExp(\n    \"(-?\\\\d*\\\\.\\\\d\\\\w*)|([^`~!@$^&*()=+[{\\\\]}\\\\\\\\|;:'\\\",.<>\\\\/\\\\s]+)\"\n  ),\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\n      \"<(?!\\\\?|(?:area|base|br|col|frame|hr|html|img|input|link|meta)\\\\b|[^>]*\\\\/>)([-_\\\\.A-Za-z0-9]+)(?=\\\\s|>)\\\\b[^>]*>(?!.*<\\\\/\\\\1>)|<!--(?!.*-->)|\\\\{[^}\\\"']*$\"\n    ),\n    decreaseIndentPattern: new RegExp(\n      \"^\\\\s*(<\\\\/(?!html)[-_\\\\.A-Za-z0-9]+\\\\b[^>]*>|-->|\\\\})\"\n    )\n  },\n  comments: {\n    blockComment: [\"<!--\", \"-->\"]\n  },\n  brackets: [\n    [\"<!--\", \"-->\"],\n    [\"<\", \">\"],\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"|\", \"|\"]\n  ],\n  autoClosingPairs: [\n    { open: \"<\", close: \">\" },\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"|\", close: \"|\" },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\"] },\n    { open: \"`\", close: \"`\", notIn: [\"string\", \"comment\"] },\n    { open: \"<!--\", close: \"--\", notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    { open: \"'\", close: \"'\" },\n    { open: '\"', close: '\"' },\n    { open: \"`\", close: \"`\" },\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"|\", close: \"|\" },\n    { open: \"<\", close: \">\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*<!--\\\\s*#region\\\\b.*-->\"),\n      end: new RegExp(\"^\\\\s*<!--\\\\s*#endregion\\\\b.*-->\")\n    }\n  }\n};\n","exports.grammar = require(\"./tmLanguage.json\");\nexports.grammarConfig = {};\nexports.editorConfig = {\n  comments: {\n    lineComment: \"#\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\"] },\n    { open: \"`\", close: \"`\", notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    ['\"', '\"'],\n    [\"'\", \"'\"],\n    [\"`\", \"`\"]\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\n      end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\n    }\n  }\n};\n","exports.grammar = require(\"./tmLanguage.json\");\nexports.grammarConfig = {};\nexports.editorConfig = {};\n","exports.grammar = require(\"./tmLanguage.json\");\nexports.grammarConfig = {};\nexports.editorConfig = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"`\", close: \"`\", notIn: [\"string\", \"comment\"] },\n    { open: \"/**\", close: \" */\", notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"'\", \"'\"],\n    ['\"', '\"'],\n    [\"`\", \"`\"]\n  ],\n  autoCloseBefore: \";:.,=}])>` \\n\\t\",\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\n    }\n  }\n};\n"],"names":["module","exports","env","browser","cwd","lang","createOnigScanner","createOnigString","loadWASM","require","INITIAL","Registry","tmTheme","syntaxes","tokenizers","registry","getWASM","wasmUrl","async","fetch","arrayBuffer","assertLoaded","Error","getTokenizer","scopeName","getColorMap","load","getEncodedLanguageId","theme","onigLib","Promise","resolve","syntax","grammarConfig","grammar","languageId","embeddedLanguages","embeddedScopeName","addGrammar","undefined","getInitialState","tokenizeEncoded","line","state","tokens","ruleStack","endState","tokenizeLine2","editorConfig","comments","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","lineComment","autoCloseBefore","indentationRules","increaseIndentPattern","decreaseIndentPattern","wordPattern"],"sourceRoot":""}