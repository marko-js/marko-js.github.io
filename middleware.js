/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 7102:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7102;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 908:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 908;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 1120:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 1120;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 1492:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 1492;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 8384:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 8384;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 4894:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var siteHeaderEvents = __webpack_require__(6369);

var classNames = {
  base: "headspace",
  fixed: "headspace--fixed",
  hidden: "headspace--hidden"
};

var debounce = cb => () => window.requestAnimationFrame(cb);

var tolerance = 3;
module.exports = {
  onMount() {
    siteHeaderEvents.emit("create", this);
    var scrollLast = 0;
    var startOffset = this.getEl('header').offsetHeight;
    var bannerHeight = (this.getEl('banner') || {
      offsetHeight: 0
    }).offsetHeight;
    var handleScroll = debounce(() => {
      var scrollCurrent = window.pageYOffset;

      if (scrollCurrent <= bannerHeight) {
        this.reset();
      } else if (!this.paused && scrollCurrent > startOffset) {
        var toleanceReached = Math.abs(scrollCurrent - scrollLast) >= tolerance;
        var scrollingDown = scrollCurrent > scrollLast;
        var wasAtTop = scrollLast <= startOffset;

        if (toleanceReached || scrollingDown && wasAtTop) {
          scrollCurrent > scrollLast ? this.hide() : this.fix();
        }
      }

      scrollLast = scrollCurrent;
    });
    handleScroll();
    window.addEventListener("scroll", handleScroll);
  },

  reset() {
    this.removeClass(classNames.fixed);
    this.removeClass(classNames.hidden);
    siteHeaderEvents.emit("reset");
  },

  fix() {
    this.addClass(classNames.fixed);
    this.removeClass(classNames.hidden);
    siteHeaderEvents.emit("fix");
  },

  hide() {
    this.addClass(classNames.hidden);
    siteHeaderEvents.emit("hide");
  },

  addClass(cls) {
    this.getEl('header').classList.add(cls);
  },

  removeClass(cls) {
    this.getEl('header').classList.remove(cls);
  },

  pause() {
    this.paused = true;
  },

  resume() {
    setTimeout(() => window.requestAnimationFrame(() => {
      this.paused = false;
    }));
  },

  toggleMenu() {
    siteHeaderEvents.emit('toggle-menu');
  }

};

/***/ }),

/***/ 6369:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var EventEmitter = __webpack_require__(1239);

module.exports = new EventEmitter();

/***/ }),

/***/ 7103:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var siteHeaderEvents = __webpack_require__(6369);

var forEach = [].forEach;
var filter = [].filter;
var slice = [].slice;
var siteHeaderComponent;
module.exports = {
  onMount() {
    this.preventOverscroll();
    this.listenForHeaderChanges();
    this.initScrollSpy();
  },

  initScrollSpy() {
    var headersSelector = [1, 2, 3, 4, 5, 6].map(n => ".doc-content h" + n).join(",");
    var headers = slice.call(document.querySelectorAll(headersSelector));
    var waiting = false;
    headers.length && this.subscribeTo(window).on("scroll", () => {
      if (!waiting) {
        waiting = true;
        setTimeout(() => {
          var threshold = window.innerHeight / 3;
          var closestHeader;
          var closestTop;
          headers.map(header => {
            var top = header.getBoundingClientRect().top;

            if (closestTop == null || top < threshold && Math.abs(top) < Math.abs(closestTop)) {
              closestTop = top;
              closestHeader = header;
            }
          });
          var anchor = closestHeader.id;
          var anchorEl = this.el.querySelector('a[href="#' + anchor + '"]') || this.el.querySelector("a.selected");
          var targetAnchor = anchorEl;
          var childList = targetAnchor.nextSibling;

          if (childList) {
            forEach.call(childList.querySelectorAll("a[href^=\\#]"), a => a.classList.remove("selected"));
          }

          while (targetAnchor) {
            var parentList = targetAnchor.closest("ul");
            var siblings = parentList && filter.call(parentList.querySelectorAll(":scope > li > a[href^=\\#]"), a => a !== targetAnchor);
            siblings && siblings.forEach(a => a.classList.remove("selected"));
            targetAnchor.classList.add("selected");
            targetAnchor = parentList && parentList.previousElementSibling;
          }

          this.scrollAnchorIntoView(anchorEl);
          waiting = false;
        }, 50);
      }
    });
  },

  listenForHeaderChanges() {
    forEach.call(this.el.querySelectorAll("a[href^=\\#]"), a => {
      this.subscribeTo(a).on("click", () => {
        siteHeaderComponent.hide();
        siteHeaderComponent.pause();
        siteHeaderComponent.resume();
        this.hide();
      });
    });
    var selectedLink = slice.call(this.el.querySelectorAll("a.selected")).pop();
    selectedLink && this.subscribeTo(selectedLink).on("click", e => {
      window.scrollTo(0, 0);
      siteHeaderComponent.reset();
      e.preventDefault();
    });
    this.subscribeTo(siteHeaderEvents).on("reset", () => {
      this.el.classList.remove("no-header");
      this.el.classList.remove("fixed");
      setTimeout(() => this.el.classList.remove("transition"), 0);
    }).on("fix", () => {
      this.el.classList.remove("no-header");
      this.el.classList.add("fixed");
      setTimeout(() => this.el.classList.add("transition"), 0);
    }).on("hide", () => {
      this.el.classList.add("no-header");
      this.el.classList.add("fixed");
      setTimeout(() => this.el.classList.add("transition"), 0);
    }).on("toggle-menu", () => {
      if (this.el.classList.contains("show")) {
        this.el.classList.remove("show");
        document.body.style.overflow = "";
      } else {
        this.el.classList.add("show");
      }
    }).on("create", _siteHeaderComponent => {
      siteHeaderComponent = _siteHeaderComponent;

      if (window.pageYOffset > siteHeaderComponent.el.offsetHeight) {
        this.el.classList.add("no-header");
        this.el.classList.add("fixed");
      }
    });
  },

  preventOverscroll() {
    var sidebar = this.getEl("sidebar");
    this.subscribeTo(document.body).on("wheel", e => {
      var delta = e.deltaY;
      var scrollTarget = sidebar.scrollTop + delta;
      var topY = 0;
      var bottomY = sidebar.scrollHeight - sidebar.offsetHeight;
      var atTop = scrollTarget <= topY;
      var atBottom = scrollTarget >= bottomY;

      if (delta < 0 && atTop || delta > 0 && atBottom) {
        if (e.target === sidebar || sidebar.contains(e.target)) {
          if (atTop && sidebar.scrollTop != topY) {
            sidebar.scrollTop = topY;
          } else if (atBottom && sidebar.scrollTop != bottomY) {
            sidebar.scrollTop = bottomY;
          }

          e.preventDefault();
        }
      }
    });
  },

  scrollAnchorIntoView(anchorEl) {
    var sidebar = this.getEl("sidebar");
    var anchorTop = anchorEl.offsetTop;
    var sidebarScrollTop = sidebar.scrollTop;
    var sidebarHeight = sidebar.offsetHeight;
    var sidebarScrollBottom = sidebarScrollTop + sidebarHeight;
    var targetList = anchorEl.closest("li");
    var parentList;

    while (true) {
      parentList = targetList.parentNode.closest("ul");

      if (parentList && parentList.offsetHeight < sidebarHeight) {
        targetList = parentList;
      } else {
        break;
      }
    }

    var targetTop = targetList.offsetTop;
    var targetHeight = targetList.offsetHeight;
    var targetBottom = targetTop + targetHeight;
    var targetIsFullyVisible = targetTop > sidebarScrollTop && targetBottom < sidebarScrollBottom;

    if (!targetIsFullyVisible) {
      sidebar.scrollTop = targetTop + targetHeight / 2 - sidebarHeight / 2;
    }
  },

  hide() {
    this.el.classList.remove("show");
    document.body.style.overflow = "";
  }

};

/***/ }),

/***/ 2913:
/***/ ((module) => {

module.exports = {
  switchVersion(e) {
    var location = e.target.value;

    if (location !== "current") {
      e.target.value = "current";
      window.location.href = location;
    }
  }

};

/***/ }),

/***/ 2352:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const {
  getComponentForEl
} = __webpack_require__(4661);

const localStorageUtil = __webpack_require__(4127);

module.exports = {
  changeSyntax() {
    const header = getComponentForEl(document.querySelector(".site-header"));
    const beforeScroll = document.body.scrollTop || document.documentElement.scrollTop;
    const beforePosition = this.el.offsetTop;
    header.pause();

    if (localStorageUtil.get("syntax") === "concise") {
      localStorageUtil.set("syntax", "html");
      document.body.classList.remove("concise");
    } else {
      localStorageUtil.set("syntax", "concise");
      document.body.classList.add("concise");
    }

    const afterPosition = this.el.offsetTop;
    const afterScroll = beforeScroll - beforePosition + afterPosition;
    document.documentElement.scrollTop = afterScroll;
    document.body.scrollTop = afterScroll;
    setTimeout(() => header.resume());
  }

};

/***/ }),

/***/ 80:
/***/ ((module) => {

module.exports = function getAnchorName(title, out) {
  var anchorCache = out.global.anchorCache || (out.global.anchorCache = {});
  var anchorName = title.replace(/[ \-]+/g, "-").replace(/[^A-Z0-9\-]+/gi, "").toLowerCase();
  var repeat = anchorCache[anchorName] != null ? ++anchorCache[anchorName] : anchorCache[anchorName] = 0;

  if (repeat) {
    anchorName += "_" + repeat;
  }

  return anchorName;
};

/***/ }),

/***/ 389:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const gh = __webpack_require__(8331);

module.exports = function getContributorsForFile(repo, repoFilePath) {
  var contributors = {};
  return gh(`repos/${repo}/commits?path=${repoFilePath}`).then(res => {
    res.body.forEach(contribution => {
      var author = contribution.author || contribution.commit.author;

      if (author) {
        contributors[author.login] = {
          username: author.login,
          photo: author.avatar_url,
          profile: author.html_url,
          commits: `https://github.com/${repo}/commits?path=${repoFilePath}&author=${author.login}`
        };
      }
    });
    return Object.keys(contributors).sort().map(k => contributors[k]);
  }).catch(err => {
    var message = err.response && err.response.body && err.response.body.message || "";

    if (err.statusCode === 403 && /rate limit/i.test(message)) {
      console.error("GitHub API rate limit exceeded.  You can set the GITHUB_TOKEN environment variable for a higher limit. https://github.com/settings/tokens");
      if (true) process.exit(1);
    } else {
      throw err;
    }
  });
};

/***/ }),

/***/ 6078:
/***/ ((module) => {

let taglineStatements = ["It's like HTML and JS had a perfect baby that grew up to be awesome", "Yes, you can copy and paste HTML from StackOverflow", "Server-side rendering + Client-side rendering = <b>Awesomorphic</b>", "Bringing back progressive HTML rendering to the masses"];

for (let i = 0; i < taglineStatements.length; i++) {
  taglineStatements[i] = `<span class="home-fade-in">${taglineStatements[i]}</span>`;
}

module.exports = {
  onMount() {
    const header = this.getEl("tagline");
    const originalMessage = header.innerHTML;
    const originalFadeIn = `<span class="home-fade-in">${originalMessage}</span>`;
    let currentTaglineIndex = 0;
    setInterval(() => {
      header.classList.remove("home-fade-in");
      header.classList.add("home-fade-out");
      setTimeout(() => {
        header.classList.remove("home-fade-out");
        const tagline = taglineStatements[currentTaglineIndex];

        if (currentTaglineIndex === taglineStatements.length) {
          header.innerHTML = originalFadeIn;
          currentTaglineIndex = 0;
        } else {
          header.innerHTML = tagline;
          currentTaglineIndex++;
        }
      }, 500);
    }, 6000);
  }

};

/***/ }),

/***/ 3563:
/***/ ((module) => {

var url = "https://api.github.com/repos/marko-js/marko";
module.exports = {
  onMount() {
    fetch(url).then(response => response.json()).then(repo => {
      if (repo.stargazers_count) {
        this.getEl("star-count").innerHTML = repo.stargazers_count.toLocaleString();
      }
    });
  }

};

/***/ }),

/***/ 2130:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const formatSlug = __webpack_require__(8174);

module.exports = function createOverviewTree(structure, nestedTitle) {
  let familyTree = {};

  for (let i = 0; i < structure.length; i++) {
    const section = structure[i];

    for (let j = 0; j < section.docs.length; j++) {
      const doc = section.docs[j];

      if (typeof doc === "object") {
        const overviewTitle = `${formatSlug(section.title)}-${formatSlug(doc.title)}-overview`;
        const nestedList = createOverviewTree([doc], overviewTitle);
        familyTree = Object.assign({}, familyTree, nestedList);
      } else if (typeof doc === "string") {
        const key = formatSlug(doc.toUpperCase());
        familyTree[key] = {};

        if (nestedTitle) {
          familyTree[key][nestedTitle] = true;
        } else {
          familyTree[key][`${formatSlug(section.title.toUpperCase())}-overview`] = true;
        }
      }
    }
  }

  return familyTree;
};

/***/ }),

/***/ 8174:
/***/ ((module) => {

module.exports = name => {
  return name.replace(/[^\w\d\s\.-]/g, "").replace(/[\s\.]+/g, "-").toLowerCase();
};

/***/ }),

/***/ 4127:
/***/ ((__unused_webpack_module, exports) => {

function getMarkoWebsiteKey(key) {
  return `markojs-website:${key}`;
}

exports.get = key => localStorage.getItem(getMarkoWebsiteKey(key));

exports.set = (key, value) => localStorage.setItem(getMarkoWebsiteKey(key), value);

exports.getMarkoWebsiteKey = getMarkoWebsiteKey;

/***/ }),

/***/ 9359:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 9359;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 1348:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 1348;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 6579:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 6579;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 6646:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 6646;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7209:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7209;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 9720:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 9720;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 8922:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 8922;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 6027:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 6027;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 3370:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 3370;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 4625:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 4625;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 9112:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 9112;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 8359:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 8359;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7996:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7996;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 4344:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 4344;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 8033:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 8033;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 8772:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 8772;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7564:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7564;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 2829:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 2829;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 1598:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 1598;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 1966:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 1966;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 8828:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 8828;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 6551:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 6551;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 1502:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 1502;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 3437:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 3437;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7589:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7589;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 1242:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 1242;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 6481:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 6481;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 8431:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 8431;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 3481:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 3481;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7133:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7133;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 5218:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 5218;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 8109:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 8109;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 3272:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 3272;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 262:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./component-browser.js": 4894
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 262;

/***/ }),

/***/ 3514:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 3514;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 6043:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./component-browser.js": 2913
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 6043;

/***/ }),

/***/ 1459:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./component-browser.js": 7103
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 1459;

/***/ }),

/***/ 6835:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 6835;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 5480:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 5480;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7600:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./component-browser.js": 2352
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 7600;

/***/ }),

/***/ 8829:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 8829;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 2727:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 2727;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 4491:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 4491;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 9726:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 9726;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 2283:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 2283;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 5069:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 5069;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 1851:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 1851;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7566:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7566;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 5719:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 5719;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 5098:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 5098;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 6545:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 6545;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 8792:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 8792;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 9003:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 9003;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 539:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 539;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 9869:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 9869;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7443:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7443;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 1309:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 1309;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 2948:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 2948;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7241:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./component-browser.js": 3563
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 7241;

/***/ }),

/***/ 9251:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./component-browser.js": 6078
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 9251;

/***/ }),

/***/ 4226:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 4226;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 2687:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 2687;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 9233:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 9233;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 9964:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 9964;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 9253:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 9253;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 3820:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 3820;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 4361:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 4361;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7517:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7517;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 5061:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 5061;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 8598:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 8598;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7094:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7094;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 1030:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 1030;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 4811:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 4811;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7810:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7810;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 678:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 678;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7090:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 7090;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 2677:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 2677;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 9779:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 9779;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 1387:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 1387;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 7880:
/***/ ((module) => {

"use strict";
module.exports = require("@babel/runtime/helpers/interopRequireDefault");

/***/ }),

/***/ 8614:
/***/ ((module) => {

"use strict";
module.exports = require("connect-gzip-static");

/***/ }),

/***/ 1239:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 8331:
/***/ ((module) => {

"use strict";
module.exports = require("gh-got");

/***/ }),

/***/ 4661:
/***/ ((module) => {

"use strict";
module.exports = require("marko/components");

/***/ }),

/***/ 1017:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/assets/";
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
global.BROWSER_ENVS = [{ 
                  env: "production", 
                  test: null 
                }]
})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// NAMESPACE OBJECT: ../../examples/examples/color-picker/README.md
var README_namespaceObject = {};
__webpack_require__.r(README_namespaceObject);
__webpack_require__.d(README_namespaceObject, {
  "default": () => (README),
  "title": () => (title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/10-awesome-marko-features.md
var _10_awesome_marko_features_namespaceObject = {};
__webpack_require__.r(_10_awesome_marko_features_namespaceObject);
__webpack_require__.d(_10_awesome_marko_features_namespaceObject, {
  "default": () => (_10_awesome_marko_features),
  "title": () => (_10_awesome_marko_features_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/body-content.md
var body_content_namespaceObject = {};
__webpack_require__.r(body_content_namespaceObject);
__webpack_require__.d(body_content_namespaceObject, {
  "default": () => (body_content),
  "title": () => (body_content_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/class-components.md
var class_components_namespaceObject = {};
__webpack_require__.r(class_components_namespaceObject);
__webpack_require__.d(class_components_namespaceObject, {
  "default": () => (class_components),
  "title": () => (class_components_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/cloudflare-workers.md
var cloudflare_workers_namespaceObject = {};
__webpack_require__.r(cloudflare_workers_namespaceObject);
__webpack_require__.d(cloudflare_workers_namespaceObject, {
  "default": () => (cloudflare_workers),
  "title": () => (cloudflare_workers_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/compiler.md
var compiler_namespaceObject = {};
__webpack_require__.r(compiler_namespaceObject);
__webpack_require__.d(compiler_namespaceObject, {
  "default": () => (compiler),
  "title": () => (compiler_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/concise.md
var concise_namespaceObject = {};
__webpack_require__.r(concise_namespaceObject);
__webpack_require__.d(concise_namespaceObject, {
  "default": () => (concise),
  "title": () => (concise_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/conditionals-and-lists.md
var conditionals_and_lists_namespaceObject = {};
__webpack_require__.r(conditionals_and_lists_namespaceObject);
__webpack_require__.d(conditionals_and_lists_namespaceObject, {
  "default": () => (conditionals_and_lists),
  "title": () => (conditionals_and_lists_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/core-tags.md
var core_tags_namespaceObject = {};
__webpack_require__.r(core_tags_namespaceObject);
__webpack_require__.d(core_tags_namespaceObject, {
  "default": () => (core_tags),
  "title": () => (core_tags_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/custom-tags.md
var custom_tags_namespaceObject = {};
__webpack_require__.r(custom_tags_namespaceObject);
__webpack_require__.d(custom_tags_namespaceObject, {
  "default": () => (custom_tags),
  "title": () => (custom_tags_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/editor-plugins.md
var editor_plugins_namespaceObject = {};
__webpack_require__.r(editor_plugins_namespaceObject);
__webpack_require__.d(editor_plugins_namespaceObject, {
  "default": () => (editor_plugins),
  "title": () => (editor_plugins_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/events.md
var events_namespaceObject = {};
__webpack_require__.r(events_namespaceObject);
__webpack_require__.d(events_namespaceObject, {
  "default": () => (events),
  "title": () => (events_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/express.md
var express_namespaceObject = {};
__webpack_require__.r(express_namespaceObject);
__webpack_require__.d(express_namespaceObject, {
  "default": () => (express),
  "title": () => (express_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/fastify.md
var fastify_namespaceObject = {};
__webpack_require__.r(fastify_namespaceObject);
__webpack_require__.d(fastify_namespaceObject, {
  "default": () => (fastify),
  "title": () => (fastify_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/getting-started.md
var getting_started_namespaceObject = {};
__webpack_require__.r(getting_started_namespaceObject);
__webpack_require__.d(getting_started_namespaceObject, {
  "default": () => (getting_started),
  "title": () => (getting_started_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/http.md
var http_namespaceObject = {};
__webpack_require__.r(http_namespaceObject);
__webpack_require__.d(http_namespaceObject, {
  "default": () => (http),
  "title": () => (http_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/installing.md
var installing_namespaceObject = {};
__webpack_require__.r(installing_namespaceObject);
__webpack_require__.d(installing_namespaceObject, {
  "default": () => (installing),
  "title": () => (installing_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/koa.md
var koa_namespaceObject = {};
__webpack_require__.r(koa_namespaceObject);
__webpack_require__.d(koa_namespaceObject, {
  "default": () => (koa),
  "title": () => (koa_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/lasso.md
var lasso_namespaceObject = {};
__webpack_require__.r(lasso_namespaceObject);
__webpack_require__.d(lasso_namespaceObject, {
  "default": () => (lasso),
  "title": () => (lasso_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/marko-5-upgrade.md
var marko_5_upgrade_namespaceObject = {};
__webpack_require__.r(marko_5_upgrade_namespaceObject);
__webpack_require__.d(marko_5_upgrade_namespaceObject, {
  "default": () => (marko_5_upgrade),
  "title": () => (marko_5_upgrade_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/marko-json.md
var marko_json_namespaceObject = {};
__webpack_require__.r(marko_json_namespaceObject);
__webpack_require__.d(marko_json_namespaceObject, {
  "default": () => (marko_json),
  "title": () => (marko_json_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/marko-vs-react.md
var marko_vs_react_namespaceObject = {};
__webpack_require__.r(marko_vs_react_namespaceObject);
__webpack_require__.d(marko_vs_react_namespaceObject, {
  "default": () => (marko_vs_react),
  "title": () => (marko_vs_react_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/redux.md
var redux_namespaceObject = {};
__webpack_require__.r(redux_namespaceObject);
__webpack_require__.d(redux_namespaceObject, {
  "default": () => (redux),
  "title": () => (redux_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/rendering.md
var rendering_namespaceObject = {};
__webpack_require__.r(rendering_namespaceObject);
__webpack_require__.d(rendering_namespaceObject, {
  "default": () => (rendering),
  "title": () => (rendering_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/rollup.md
var rollup_namespaceObject = {};
__webpack_require__.r(rollup_namespaceObject);
__webpack_require__.d(rollup_namespaceObject, {
  "default": () => (rollup),
  "title": () => (rollup_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/state.md
var state_namespaceObject = {};
__webpack_require__.r(state_namespaceObject);
__webpack_require__.d(state_namespaceObject, {
  "default": () => (state),
  "title": () => (state_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/styles.md
var styles_namespaceObject = {};
__webpack_require__.r(styles_namespaceObject);
__webpack_require__.d(styles_namespaceObject, {
  "default": () => (styles),
  "title": () => (styles_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/syntax.md
var syntax_namespaceObject = {};
__webpack_require__.r(syntax_namespaceObject);
__webpack_require__.d(syntax_namespaceObject, {
  "default": () => (syntax),
  "title": () => (syntax_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/troubleshooting-streaming.md
var troubleshooting_streaming_namespaceObject = {};
__webpack_require__.r(troubleshooting_streaming_namespaceObject);
__webpack_require__.d(troubleshooting_streaming_namespaceObject, {
  "default": () => (troubleshooting_streaming),
  "title": () => (troubleshooting_streaming_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/vite.md
var vite_namespaceObject = {};
__webpack_require__.r(vite_namespaceObject);
__webpack_require__.d(vite_namespaceObject, {
  "default": () => (vite),
  "title": () => (vite_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/webpack.md
var webpack_namespaceObject = {};
__webpack_require__.r(webpack_namespaceObject);
__webpack_require__.d(webpack_namespaceObject, {
  "default": () => (webpack),
  "title": () => (webpack_title)
});

// NAMESPACE OBJECT: ../../node_modules/marko/docs/why-is-marko-fast.md
var why_is_marko_fast_namespaceObject = {};
__webpack_require__.r(why_is_marko_fast_namespaceObject);
__webpack_require__.d(why_is_marko_fast_namespaceObject, {
  "default": () => (why_is_marko_fast),
  "title": () => (why_is_marko_fast_title)
});

// NAMESPACE OBJECT: ../../browser-shims/v6/translator.js
var translator_namespaceObject = {};
__webpack_require__.r(translator_namespaceObject);
__webpack_require__.d(translator_namespaceObject, {
  "analyze": () => (analyze),
  "taglibs": () => (taglibs),
  "translate": () => (translate)
});

;// CONCATENATED MODULE: external "marko/dist/runtime/html/index.js"
const index_js_namespaceObject = require("marko/dist/runtime/html/index.js");
;// CONCATENATED MODULE: ../../node_modules/@marko/build/dist/files/parent-dir.png
/* harmony default export */ const parent_dir = (__webpack_require__.p + "3486dd39.png");
;// CONCATENATED MODULE: ../../node_modules/@marko/build/dist/files/dir.png
/* harmony default export */ const files_dir = (__webpack_require__.p + "bbafa975.png");
;// CONCATENATED MODULE: ../../node_modules/@marko/build/dist/files/file.png
/* harmony default export */ const files_file = (__webpack_require__.p + "6a44b7bf.png");
;// CONCATENATED MODULE: external "marko/dist/runtime/html/helpers/escape-xml.js"
const escape_xml_js_namespaceObject = require("marko/dist/runtime/html/helpers/escape-xml.js");
;// CONCATENATED MODULE: external "marko/dist/runtime/html/helpers/attr.js"
const attr_js_namespaceObject = require("marko/dist/runtime/html/helpers/attr.js");
var attr_js_default = /*#__PURE__*/__webpack_require__.n(attr_js_namespaceObject);
;// CONCATENATED MODULE: external "marko/dist/core-tags/components/init-components-tag.js"
const init_components_tag_js_namespaceObject = require("marko/dist/core-tags/components/init-components-tag.js");
var init_components_tag_js_default = /*#__PURE__*/__webpack_require__.n(init_components_tag_js_namespaceObject);
;// CONCATENATED MODULE: external "marko/dist/runtime/helpers/render-tag.js"
const render_tag_js_namespaceObject = require("marko/dist/runtime/helpers/render-tag.js");
var render_tag_js_default = /*#__PURE__*/__webpack_require__.n(render_tag_js_namespaceObject);
;// CONCATENATED MODULE: external "marko/dist/core-tags/core/await/reorderer-renderer.js"
const reorderer_renderer_js_namespaceObject = require("marko/dist/core-tags/core/await/reorderer-renderer.js");
var reorderer_renderer_js_default = /*#__PURE__*/__webpack_require__.n(reorderer_renderer_js_namespaceObject);
;// CONCATENATED MODULE: external "marko/dist/core-tags/components/preferred-script-location-tag.js"
const preferred_script_location_tag_js_namespaceObject = require("marko/dist/core-tags/components/preferred-script-location-tag.js");
var preferred_script_location_tag_js_default = /*#__PURE__*/__webpack_require__.n(preferred_script_location_tag_js_namespaceObject);
;// CONCATENATED MODULE: external "marko/dist/runtime/components/renderer.js"
const renderer_js_namespaceObject = require("marko/dist/runtime/components/renderer.js");
var renderer_js_default = /*#__PURE__*/__webpack_require__.n(renderer_js_namespaceObject);
;// CONCATENATED MODULE: ../../node_modules/@marko/build/dist/files/dir-index.marko


const _marko_componentType = "C1oCC1Si",
      _marko_template = (0,index_js_namespaceObject.t)(_marko_componentType);

/* harmony default export */ const dir_index_marko = (_marko_template);










const _marko_component = {};
_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<!DOCTYPE html><html lang=en><head><meta charset=UTF-8><meta name=viewport content="width=device-width, initial-scale=1.0"><meta http-equiv=X-UA-Compatible content=ie=edge><title>Index of ${(0,escape_xml_js_namespaceObject.x)(input.pathname)}</title>`);
  out.global.___renderAssets && out.global.___renderAssets(out);
  out.w("</head><body>");
  {
    out.w("<h1>Index of <nav>");
    {
      let _i = 0;
      const all = input.pathname.replace(/^\/|\/$/, "").split("/");

      for (const part of all) {
        let i = _i++;
        const _keyScope = `[${i}]`;

        if (i === 0 && part) {
          out.w("<a href=/ >/</a>");
        }

        const _tagName = i < all.length - 1 ? "a" : null;

        if (_tagName) out.w(`<${_tagName}${attr_js_default()("href", `/${all.slice(0, i + 1).join("/")}`)}>`);else out.bf(`f_${"10" + _keyScope}`, _component, 1);
        out.w(`${(0,escape_xml_js_namespaceObject.x)(part)}/`);
        if (_tagName) out.w(`</${_tagName}>`);else out.ef();
      }
    }
    out.w("</nav></h1>");
    const root = input.pathname.replace(/\/$/, "");
    out.w("<main>");
    {
      if (root) {
        out.w(`<a href=.><img${attr_js_default()("src", parent_dir)}><span>Parent Directory</span></a>`);
      }

      let _keyValue = 0;

      for (const dir of input.params.dirs) {
        const _keyScope2 = `[${_keyValue++}]`;
        out.w(`<a${attr_js_default()("href", `${root}/${dir}`)}${attr_js_default()("title", `${dir}/`)}><img${attr_js_default()("src", files_dir)}><span>${(0,escape_xml_js_namespaceObject.x)(dir)}/</span></a>`);
      }

      let _keyValue2 = 0;

      for (const file of input.params.files) {
        const _keyScope3 = `[${_keyValue2++}]`;
        out.w(`<a${attr_js_default()("href", `${root}/${file}`)}${attr_js_default()("title", `${file}.marko`)}><img${attr_js_default()("src", files_file)}><span>${(0,escape_xml_js_namespaceObject.x)(file)}.marko</span></a>`);
      }

      let _keyValue3 = 0;

      for (let _steps = (4 - 0) / 1, _step = 0; _step <= _steps; _step++) {
        const _keyScope4 = `[${_keyValue3++}]`;
        out.w("<span></span>");
      }
    }
    out.w("</main><footer>Icons by <a href=https://icons8.com>icons8</a></footer>");

    render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "24");

    render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "25");

    render_tag_js_default()((preferred_script_location_tag_js_default()), {}, out, _componentDef, "26");
  }
  out.w("</body></html>");
}, {
  t: _marko_componentType,
  i: true
}, _marko_component);
__webpack_require__(1492)
;// CONCATENATED MODULE: ../../node_modules/@marko/webpack/dist/loader/index.js!?manifest
/* harmony default export */ const index_js_manifest = ({
  getAssets(entry) {
    return this.build[entry];
  },
  build: {"[name]_GraI":{"css":["c1768f68.css"],"js":["666.73238e65.js","323.2fde299f.js","987.ae467f67.js"]},"[name]_HOqm":{"css":["2855a173.css"],"js":["666.73238e65.js","323.2fde299f.js","519.d5c15df6.js","690.0f799556.js"]},"[name]_ZMau":{"css":["67b9b316.css"],"js":["666.73238e65.js","323.2fde299f.js","519.d5c15df6.js","683.559cd44d.js"]},"code-block-marko_UUum":{"css":["ff15f5e4.css"],"js":["666.73238e65.js","323.2fde299f.js","598.6b6c14f3.js"]},"dir-index_C1oC":{"css":["31fa76ad.css"],"js":["666.73238e65.js","450.733d931b.js"]},"index_WEBG":{"css":["0df18775.css"],"js":["666.73238e65.js","323.2fde299f.js","117.aee22ba8.js"]},"playground_mdf-":{"css":["b3842888.css"],"js":["666.73238e65.js","323.2fde299f.js","519.d5c15df6.js","244.212c2a4e.js"]},"try-online-new_1yH9":{"js":["666.73238e65.js","366.fe11505c.js"]},"try-online_gkPN":{"css":["9a015802.css"],"js":["666.73238e65.js","323.2fde299f.js","748.f1275d0a.js"]},"tutorials_HA8R":{"css":["1b14471d.css"],"js":["666.73238e65.js","323.2fde299f.js","708.b4a996f0.js"]},"v6_--pM":{"css":["b3842888.css"],"js":["666.73238e65.js","323.2fde299f.js","519.d5c15df6.js","103.ff50dbb3.js","422.d7da155e.js","664.75ef5a66.js"]}}
});
;// CONCATENATED MODULE: external "marko/dist/core-tags/core/__flush_here_and_after__.js"
const _flush_here_and_after_js_namespaceObject = require("marko/dist/core-tags/core/__flush_here_and_after__.js");
var _flush_here_and_after_js_default = /*#__PURE__*/__webpack_require__.n(_flush_here_and_after_js_namespaceObject);
;// CONCATENATED MODULE: ../../node_modules/@marko/build/dist/files/dir-index.marko?server-entry


const dir_index_marko_server_entry_marko_componentType = "EHQcPIlB",
      dir_index_marko_server_entry_marko_template = (0,index_js_namespaceObject.t)(dir_index_marko_server_entry_marko_componentType);

/* harmony default export */ const dir_index_marko_server_entry = ((/* unused pure expression or super */ null && (dir_index_marko_server_entry_marko_template)));



const crossOriginAttr = new URL(__webpack_require__.p, "file:").protocol === "file:" ? "" : " crossorigin";

function renderAssets(out) {
  const entries = this.___entries;
  this.___entries = undefined;

  if (entries) {
    const buildName = this.buildName;
    const nonce = this.cspNonce;
    const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : "";
    const written = this.___writtenAssets || (this.___writtenAssets = new Set());
    let scripts = "";
    let styles = "";

    for (const entry of entries) {
      const assets = index_js_manifest.getAssets(entry, buildName);

      if (assets.js) {
        for (const href of assets.js) {
          if (!written.has(href)) {
            written.add(href);
            scripts += `<script src=${JSON.stringify(__webpack_require__.p + href)}${nonceAttr + crossOriginAttr} async></script>`;
          }
        }
      }

      if (assets.css) {
        for (const href of assets.css) {
          if (!written.has(href)) {
            written.add(href);
            styles += `<link rel="stylesheet" href=${JSON.stringify(__webpack_require__.p + href)}>`;
          }
        }
      }
    }

    out.write(scripts + styles);
  }
}






const dir_index_marko_server_entry_marko_component = {};
dir_index_marko_server_entry_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.global.___renderAssets = renderAssets;
  (out.global.___entries || (out.global.___entries = [])).push("dir-index_C1oC");

  render_tag_js_default()((_flush_here_and_after_js_default()), {
    "renderBody": out => {
      out.global.___renderAssets && out.global.___renderAssets(out);
    }
  }, out, _componentDef, "0");

  render_tag_js_default()(dir_index_marko, input, out, _componentDef, "1");

  render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "2");

  render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "3");
}, {
  t: dir_index_marko_server_entry_marko_componentType,
  i: true
}, dir_index_marko_server_entry_marko_component);
;// CONCATENATED MODULE: ../logos/marko.svg
/* harmony default export */ const marko = (__webpack_require__.p + "91bc26e5.svg");
;// CONCATENATED MODULE: ./index/components/home-hero/marko-text.svg
/* harmony default export */ const marko_text = (__webpack_require__.p + "7443bd32.svg");
;// CONCATENATED MODULE: external "marko/dist/runtime/html/helpers/data-marko.js"
const data_marko_js_namespaceObject = require("marko/dist/runtime/html/helpers/data-marko.js");
var data_marko_js_default = /*#__PURE__*/__webpack_require__.n(data_marko_js_namespaceObject);
;// CONCATENATED MODULE: ../logos/github.svg
/* harmony default export */ const github = (__webpack_require__.p + "0bc571bc.svg");
;// CONCATENATED MODULE: ./index/components/home-hero/components/github-link/index.marko


const index_marko_marko_componentType = "oilsSSYQ",
      index_marko_marko_template = (0,index_js_namespaceObject.t)(index_marko_marko_componentType);

/* harmony default export */ const index_marko = (index_marko_marko_template);




const index_marko_marko_component = {};
index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<a href=https://github.com/marko-js/marko class=github-link><img${attr_js_default()("src", github)} alt><span class=text>GitHub</span><span${data_marko_js_default()(out, _componentDef, 0, "@star-count", _componentDef)} class=stars></span></a>`);
}, {
  t: index_marko_marko_componentType,
  s: true
}, index_marko_marko_component);
__webpack_require__(7241)
;// CONCATENATED MODULE: ./index/components/home-hero/index.marko


const home_hero_index_marko_marko_componentType = "HStp62jU",
      home_hero_index_marko_marko_template = (0,index_js_namespaceObject.t)(home_hero_index_marko_marko_componentType);

/* harmony default export */ const home_hero_index_marko = (home_hero_index_marko_marko_template);







const home_hero_index_marko_marko_component = {};
home_hero_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<header class=home-header><img${attr_js_default()("src", marko)} alt class=logo><div class=header-content><img${attr_js_default()("src", marko_text)} alt=Marko class=logo-text><h1${data_marko_js_default()(out, _componentDef, 0, "@tagline", _componentDef)}><span>A declarative, HTML-based language<br>that makes building web apps fun</span></h1><div class=actions><a href=/docs/getting-started/  class="button get-started"><span>Get started</span></a>`);

  render_tag_js_default()(index_marko, {}, out, _componentDef, "9");

  out.w("</div></div></header>");
}, {
  t: home_hero_index_marko_marko_componentType,
  s: true
}, home_hero_index_marko_marko_component);
__webpack_require__(9251)
;// CONCATENATED MODULE: ./index/components/home-features/index.marko


const home_features_index_marko_marko_componentType = "FS1oMByu",
      home_features_index_marko_marko_template = (0,index_js_namespaceObject.t)(home_features_index_marko_marko_componentType);

/* harmony default export */ const home_features_index_marko = (home_features_index_marko_marko_template);

const home_features_index_marko_marko_component = {};
home_features_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<header class=home-features><div class=feature><h2 class=blue>Familiar</h2><p>If you know HTML, CSS, and Javascript, you know Marko</p></div><div class=feature><h2 class=red>Performant</h2><p>Streaming, partial hydration, an optimizing compiler, & a small runtime</p></div><div class=feature><h2 class=yellow>Scalable</h2><p>Start with simple HTML templates and add powerful components as needed</p></div><div class=feature><h2 class=green>Trusted</h2><p>Marko is powering high-traffic websites like ebay.com</p></div></header>");
}, {
  t: home_features_index_marko_marko_componentType,
  i: true
}, home_features_index_marko_marko_component);
__webpack_require__(2948)
;// CONCATENATED MODULE: ./index/components/home-language/components/counter-example/index.marko


const counter_example_index_marko_marko_componentType = "UC5EWL3e",
      counter_example_index_marko_marko_template = (0,index_js_namespaceObject.t)(counter_example_index_marko_marko_componentType);

/* harmony default export */ const counter_example_index_marko = (counter_example_index_marko_marko_template);


const counter_example_index_marko_marko_component = {
  onCreate() {
    this.state = {
      count: 0
    };
  },

  increment() {
    this.state.count++;
  }

};
counter_example_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<div>${(0,escape_xml_js_namespaceObject.x)(state.count)}</div><button>Click me!</button>`);
}, {
  t: counter_example_index_marko_marko_componentType
}, counter_example_index_marko_marko_component);
__webpack_require__(2687)
// EXTERNAL MODULE: ../components/heading/getAnchorName.js
var getAnchorName = __webpack_require__(80);
var getAnchorName_default = /*#__PURE__*/__webpack_require__.n(getAnchorName);
;// CONCATENATED MODULE: external "marko/dist/runtime/helpers/dynamic-tag.js"
const dynamic_tag_js_namespaceObject = require("marko/dist/runtime/helpers/dynamic-tag.js");
var dynamic_tag_js_default = /*#__PURE__*/__webpack_require__.n(dynamic_tag_js_namespaceObject);
;// CONCATENATED MODULE: ../components/heading/index.marko


const heading_index_marko_marko_componentType = "yiZmRPfF",
      heading_index_marko_marko_template = (0,index_js_namespaceObject.t)(heading_index_marko_marko_componentType);

/* harmony default export */ const heading_index_marko = (heading_index_marko_marko_template);





const heading_index_marko_marko_component = {};
heading_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  var className = input['class'];
  var text = input.text;
  var anchorName = input.anchorName || getAnchorName_default()(text, out);

  dynamic_tag_js_default()(out, input.tag, () => ({
    "class": ['heading', className]
  }), out => {
    out.w(`<a${attr_js_default()("name", anchorName)} class=anchor${attr_js_default()("href", `#${anchorName}`)}><span class=header-link></span></a>`);

    if (text) {
      out.w((0,escape_xml_js_namespaceObject.x)(text));
    } else {
      dynamic_tag_js_default()(out, input.renderBody, null, null, null, null, _componentDef, "3");
    }
  }, null, null, _componentDef, "0");
}, {
  t: heading_index_marko_marko_componentType,
  i: true
}, heading_index_marko_marko_component);
__webpack_require__(2727)
;// CONCATENATED MODULE: external "marko/dist/runtime/helpers/class-value.js"
const class_value_js_namespaceObject = require("marko/dist/runtime/helpers/class-value.js");
var class_value_js_default = /*#__PURE__*/__webpack_require__.n(class_value_js_namespaceObject);
;// CONCATENATED MODULE: ./index/components/home-feature-block/index.marko


const home_feature_block_index_marko_marko_componentType = "jphCNwO4",
      home_feature_block_index_marko_marko_template = (0,index_js_namespaceObject.t)(home_feature_block_index_marko_marko_componentType);

/* harmony default export */ const home_feature_block_index_marko = (home_feature_block_index_marko_marko_template);







const home_feature_block_index_marko_marko_component = {};
home_feature_block_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<section${attr_js_default()("class", class_value_js_default()([input.class, input.align && `home-feature-block-${input.align}`, !input.action && `home-feature-block-actionless`, "home-feature-block"]))}><div class=home-feature-block-container><div class=home-feature-block-content>`);

  render_tag_js_default()(heading_index_marko, {
    "tag": "h1",
    "class": "home-feature-block-title",
    ...input.title
  }, out, _componentDef, "3");

  out.w("<div class=home-feature-block-content-body>");

  dynamic_tag_js_default()(out, input.content, null, null, null, null, _componentDef, "5");

  out.w(`</div></div><div${attr_js_default()("class", class_value_js_default()(["home-feature-block-visual", input.visual.class]))}>`);

  dynamic_tag_js_default()(out, input.visual, null, null, null, null, _componentDef, "7");

  out.w("</div>");

  if (input.action) {
    out.w(`<div class=home-feature-block-action><a${attr_js_default()("class", class_value_js_default()(input.action.class))}${attr_js_default()("href", input.action.href)}>${(0,escape_xml_js_namespaceObject.x)(input.action.text || "Learn More")}</a></div>`);
  }

  out.w("</div>");

  dynamic_tag_js_default()(out, input.breakout, null, null, null, null, _componentDef, "10");

  out.w("</section>");
}, {
  t: home_feature_block_index_marko_marko_componentType,
  i: true
}, home_feature_block_index_marko_marko_component);
__webpack_require__(1309)
;// CONCATENATED MODULE: ./index/components/home-language/index.marko


const home_language_index_marko_marko_componentType = "Mj2y1EJW",
      home_language_index_marko_marko_template = (0,index_js_namespaceObject.t)(home_language_index_marko_marko_componentType);

/* harmony default export */ const home_language_index_marko = (home_language_index_marko_marko_template);




const home_language_index_marko_marko_component = {};
home_language_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  render_tag_js_default()(home_feature_block_index_marko, {
    "class": "home-language",
    "title": {
      "text": "HTML Reimagined",
      "anchorName": "language"
    },
    "content": {
      "renderBody": out => {
        out.w("<p>Marko is HTML re-imagined as a language for building dynamic and reactive user interfaces. Just about any valid HTML is valid Marko, but Marko extends the HTML language to allow building modern applications in a declarative way.</p>");
      }
    },
    "visual": {
      "class": "home-language__examples",
      "renderBody": out => {
        out.w("<figure><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>doctype</span> <span style=color:#A6E22E>html</span>>\n&lt;<span style=color:#FF4185>html</span>>\n&lt;<span style=color:#FF4185>head</span>>\n    &lt;<span style=color:#FF4185>title</span>>Hello Marko&lt;/<span style=color:#FF4185>title</span>>\n&lt;/<span style=color:#FF4185>head</span>>\n&lt;<span style=color:#FF4185>body</span>>\n    &lt;<span style=color:#FF4185>h1</span>>My favorite colors&lt;/<span style=color:#FF4185>h1</span>>\n    &lt;<span style=color:#FF4185>ul</span>>\n        &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span>[<span style=color:#FFF066>\"red\"</span>, <span style=color:#FFF066>\"green\"</span>, <span style=color:#FFF066>\"blue\"</span>]>\n            &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>`color:</span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>>\n                <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span>.<span style=color:#A6E22E>toUpperCase</span>()<span style=color:#66D9EF>}</span>\n            &lt;/<span style=color:#FF4185>li</span>>\n        &lt;/<span style=color:#FF4185>for</span>>\n    &lt;/<span style=color:#FF4185>ul</span>>\n    &lt;<span style=color:#FF4185>shared-footer</span>/>\n&lt;/<span style=color:#FF4185>body</span>>\n&lt;/<span style=color:#FF4185>html</span>>\n</pre><figcaption>HTML Templates, Custom Tags, & Javascript Expressions</figcaption></figure><figure><div class=home-language__interactive-container><div class=home-language__interactive-example>");

        render_tag_js_default()(counter_example_index_marko, {}, out, _componentDef, "8");

        out.w("</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> { count: <span style=color:#AE81FF>0</span> };\n  }\n  <span style=color:#A6E22E>increment</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#FF4185>++</span>;\n  }\n}\n&lt;<span style=color:#FF4185>div</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>div</span>>\n&lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>)>\n  Click me!\n&lt;/<span style=color:#FF4185>button</span>>\n</pre></div><figcaption>Interactive Logic & Reactive Values</figcaption></figure>");
      }
    }
  }, out, _componentDef, "0");
}, {
  t: home_language_index_marko_marko_componentType,
  i: true
}, home_language_index_marko_marko_component);
__webpack_require__(9233)
;// CONCATENATED MODULE: ./index/components/home-demo-page/product.png
/* harmony default export */ const product = (__webpack_require__.p + "2ff006d2.png");
;// CONCATENATED MODULE: ./index/components/home-demo-page/x.svg
/* harmony default export */ const x = (__webpack_require__.p + "886b7024.svg");
;// CONCATENATED MODULE: external "marko/dist/runtime/helpers/style-value.js"
const style_value_js_namespaceObject = require("marko/dist/runtime/helpers/style-value.js");
var style_value_js_default = /*#__PURE__*/__webpack_require__.n(style_value_js_namespaceObject);
;// CONCATENATED MODULE: ./index/components/home-demo-page/index.marko


const home_demo_page_index_marko_marko_componentType = "z630EEW4",
      home_demo_page_index_marko_marko_template = (0,index_js_namespaceObject.t)(home_demo_page_index_marko_marko_componentType);

/* harmony default export */ const home_demo_page_index_marko = (home_demo_page_index_marko_marko_template);







const home_demo_page_index_marko_marko_component = {};
home_demo_page_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  const progress = input.buffered ? Math.floor(input.progress / 0.9) : input.progress / 0.9;
  out.w(`<div${attr_js_default()("class", class_value_js_default()(["demo-page-wrapper", input.class]))} role=img${attr_js_default()("aria-label", input.label)}> <div aria-hidden=true${attr_js_default()("class", class_value_js_default()(["demo-page-container", {
    "demo-page-hydrate-all": input.hydrateAll,
    "demo-page-hydrate-partial": input.hydratePartial
  }]))}>`);

  if (input.progress >= 0) {
    out.w(`<div${attr_js_default()("style", style_value_js_default()({
      transform: `scaleX(${Math.min(1, input.progress * (input.buffered ? 1 : 1 / 0.9))})`
    }))} class=demo-page-progress></div>`);
  }

  out.w(`<div${attr_js_default()("class", class_value_js_default()(["demo-page-header demo-page-delay-1", {
    "demo-page-loading": progress < 0.1
  }]))}><div class="demo-page-link demo-page-delay-2">All Products</div><div class="demo-page-logo demo-page-delay-3">BuyItNow</div><div class="demo-page-cart demo-page-delay-4 demo-page-hydrated">Cart (0)</div></div><div${attr_js_default()("class", class_value_js_default()(["demo-page-product demo-page-delay-5", {
    "demo-page-loading": progress < 0.4
  }]))}><img${attr_js_default()("class", class_value_js_default()(["demo-page-image", {
    "demo-page-lowres": progress < 0.6 || input.buffered && input.progress < 1
  }]))}${attr_js_default()("src", product)} alt><div class="demo-page-description demo-page-delay-6"><span class=demo-page-description-title>Google Home - $79</span><div class="demo-page-description-button demo-page-delay-7 demo-page-hydrated">Add to Cart</div><span class=demo-page-description-text>Hands-free help around the house. Google Home is a smart speaker with the Google Assistant built in. So whenever you need help, it's by your side</span></div></div><div${attr_js_default()("class", class_value_js_default()(["demo-page-review demo-page-delay-8", {
    "demo-page-loading": progress < 0.8
  }]))}><div class="demo-page-rating demo-page-delay-9">\u2605\u2605\u2605\u2605\u2606</div><span class=demo-page-description-text><strong>Cool gadget</strong> Google has created a nice device that provides music and information by voice control. The microphone is very good and will usually pick up commands from across the room. The speakers sound surprisingly good for such a small device. I wish it had tone control though.</span></div><div${attr_js_default()("class", class_value_js_default()(["demo-page-review demo-page-delay-10", {
    "demo-page-loading": progress < 1
  }]))}><div class="demo-page-rating demo-page-delay-11">\u2605\u2605\u2605\u2605\u2605</div><span class=demo-page-description-text><strong>Incredible sound profile!</strong> Easy setup, great sound for any room size. Adjustable bass and treble. Currently have two paired up for better whole house sound. </span></div><div${attr_js_default()("class", class_value_js_default()(["demo-page-footer demo-page-delay-12", {
    "demo-page-loading": progress < 0.1
  }]))}><div class=demo-page-delay-13>About</div><div class=demo-page-delay-14>Security</div><div class=demo-page-delay-15>Policies</div><div class=demo-page-delay-16>Help</div><div class=demo-page-delay-17>Sitemap</div></div></div>`);

  if (input.buffered || input.hydrateAll) {
    out.w(`<div class=demo-page-other><div class=demo-page-icon-inner><img${attr_js_default()("src", x)} alt></div></div>`);
  } else {
    out.w(`<div class=demo-page-marko><div class=demo-page-icon-inner><img${attr_js_default()("src", marko)} alt></div></div>`);
  }

  out.w("</div>");
}, {
  t: home_demo_page_index_marko_marko_componentType,
  i: true
}, home_demo_page_index_marko_marko_component);
__webpack_require__(7443)
;// CONCATENATED MODULE: ./index/components/home-streaming/components/scroll-locked-stream-example/index.marko


const scroll_locked_stream_example_index_marko_marko_componentType = "O2xM2/Zw",
      scroll_locked_stream_example_index_marko_marko_template = (0,index_js_namespaceObject.t)(scroll_locked_stream_example_index_marko_marko_componentType);

/* harmony default export */ const scroll_locked_stream_example_index_marko = (scroll_locked_stream_example_index_marko_marko_template);





const scroll_locked_stream_example_index_marko_marko_component = {
  onCreate() {
    this.state = {
      progress: 0.1
    };
  },

  onMount() {
    this.observer = new IntersectionObserver(entries => {
      if (entries[0].intersectionRatio <= 0) {
        this.cleanProgress();
      } else {
        this.initProgress();
      }
    });
    this.observer.observe(this.getEl("root"));
  },

  onDestroy() {
    this.cleanProgress();
    this.observer.disconnect();
  },

  initProgress() {
    const updateProgress = () => {
      this.state.progress = (this.state.progress + 0.004) % 1.5;
      this.frame = requestAnimationFrame(updateProgress);
    };

    this.frame = requestAnimationFrame(updateProgress);
  },

  cleanProgress() {
    cancelAnimationFrame(this.frame);
  }

};
scroll_locked_stream_example_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<div${attr_js_default()("class", class_value_js_default()(["scroll-locked-stream-example", input.class]))}>`);

  render_tag_js_default()(home_demo_page_index_marko, {
    "progress": state.progress,
    "buffered": true,
    "label": "Buffered pages don't show content as it loads"
  }, out, _componentDef, "0");

  render_tag_js_default()(home_demo_page_index_marko, {
    "progress": state.progress,
    "label": "Streaming pages show content incrementally",
    "class": "scroll-locked-progressive"
  }, out, _componentDef, "1");

  out.w("</div>");
}, {
  t: scroll_locked_stream_example_index_marko_marko_componentType
}, scroll_locked_stream_example_index_marko_marko_component);
__webpack_require__(9253)
;// CONCATENATED MODULE: ./index/components/home-streaming/index.marko


const home_streaming_index_marko_marko_componentType = "oXi1CFEM",
      home_streaming_index_marko_marko_template = (0,index_js_namespaceObject.t)(home_streaming_index_marko_marko_componentType);

/* harmony default export */ const home_streaming_index_marko = (home_streaming_index_marko_marko_template);




const home_streaming_index_marko_marko_component = {};
home_streaming_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  render_tag_js_default()(home_feature_block_index_marko, {
    "align": "left",
    "class": "home-streaming",
    "title": {
      "text": "Progressive Rendering",
      "anchorName": "streaming"
    },
    "content": {
      "renderBody": out => {
        out.w("<p>Marko streams content to your users as soon as it\u2019s ready. No waiting for client side JavaScript bundles or data requests to start rendering. HTML, assets, and images are loaded as soon as possible with asynchronous data loading in as it completes. </p>");
      }
    },
    "visual": {
      "renderBody": out => {
        render_tag_js_default()(scroll_locked_stream_example_index_marko, {
          "class": "home-streaming-example"
        }, out, _componentDef, "2");
      }
    },
    "action": {
      "href": "https://dev.to/ryansolid/server-rendering-in-javascript-optimizing-performance-1jnk"
    }
  }, out, _componentDef, "0");
}, {
  t: home_streaming_index_marko_marko_componentType,
  i: true
}, home_streaming_index_marko_marko_component);
__webpack_require__(3820)
;// CONCATENATED MODULE: ./index/components/home-hydration/index.marko


const home_hydration_index_marko_marko_componentType = "Vzg+UK9V",
      home_hydration_index_marko_marko_template = (0,index_js_namespaceObject.t)(home_hydration_index_marko_marko_componentType);

/* harmony default export */ const home_hydration_index_marko = (home_hydration_index_marko_marko_template);




const home_hydration_index_marko_marko_component = {};
home_hydration_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  render_tag_js_default()(home_feature_block_index_marko, {
    "align": "right",
    "class": "home-hydration",
    "title": {
      "text": "Code Elimination",
      "anchorName": "hydration"
    },
    "content": {
      "renderBody": out => {
        out.w("<p>Marko only sends the code for interactive components to the browser. Its compiler automatically detects which components only need to be rendered on the server. This means less to download and less to execute. Your users can enjoy top tier performance regardless of their devices or networks.</p>");
      }
    },
    "visual": {
      "renderBody": out => {
        render_tag_js_default()(home_demo_page_index_marko, {
          "hydrateAll": true,
          "label": "Traditional hydration sends and re-excutes the code for all components",
          "class": "home-hydration-example"
        }, out, _componentDef, "2");

        render_tag_js_default()(home_demo_page_index_marko, {
          "hydratePartial": true,
          "label": "Marko's hydration only sends the code for interactive components",
          "class": "home-hydration-example"
        }, out, _componentDef, "3");
      }
    },
    "action": {
      "href": "https://medium.com/@mlrawlings/maybe-you-dont-need-that-spa-f2c659bc7fec"
    }
  }, out, _componentDef, "0");
}, {
  t: home_hydration_index_marko_marko_componentType,
  i: true
}, home_hydration_index_marko_marko_component);
__webpack_require__(4226)
;// CONCATENATED MODULE: ./index/components/home-performance/arrow.svg
/* harmony default export */ const arrow = (__webpack_require__.p + "7c1cc740.svg");
;// CONCATENATED MODULE: ./index/components/home-performance/index.marko


const home_performance_index_marko_marko_componentType = "fgCxEVmZ",
      home_performance_index_marko_marko_template = (0,index_js_namespaceObject.t)(home_performance_index_marko_marko_componentType);

/* harmony default export */ const home_performance_index_marko = (home_performance_index_marko_marko_template);





const home_performance_index_marko_marko_component = {};
home_performance_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  render_tag_js_default()(home_feature_block_index_marko, {
    "class": "home-performance",
    "title": {
      "text": "Tailored Performance",
      "anchorName": "performance"
    },
    "content": {
      "renderBody": out => {
        out.w("<p>Marko's compiler generates code tailored to where it is going to run. You write your code once and it is optimized for both the server and browser. This is especially apparent on the server where Marko is several times faster than other popular solutions.</p>");
      }
    },
    "visual": {
      "renderBody": out => {
        out.w(`<div role=img aria-label="Marko templates are compiled to generate HTML Strings on the server and VDOM Nodes in the browser" class=home-performance-example><div class=home-performance-input><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span>>\n  &lt;<span style=color:#FF4185>h2</span>>Images&lt;/<span style=color:#FF4185>h2</span>>\n  &lt;<span style=color:#FF4185>div</span>>\n    &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>item</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>items</span>>\n      &lt;<span style=color:#FF4185>div</span> <span style=color:#66D9EF>on-click</span>(() <span style=color:#66D9EF>=></span> <span style=color:#A6E22E>alert</span>(<span style=color:#FFFFFF>item</span>.<span style=color:#FFFFFF>title</span>), <span style=color:#FFFFFF>item</span>)>\n        &lt;<span style=color:#FF4185>img</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>item</span>.<span style=color:#FFFFFF>img</span> <span style=color:#A6E22E>alt</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>""</span> />\n      &lt;/<span style=color:#FF4185>div</span>>\n    &lt;/<span style=color:#FF4185>for</span>>\n  &lt;/<span style=color:#FF4185>div</span>>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre></div><div class=home-performance-arrow><img${attr_js_default()("src", arrow)} alt></div><div class=home-performance-outputs><div class=home-performance-html><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>write</span>(<span style=color:#FFF066>"&lt;div>&lt;h2>Images&lt;/h2>&lt;div>"</span>);\n<span style=color:#FF4185>for</span> (<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>item</span> <span style=color:#FF4185>of</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>items</span>) {\n  <span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>write</span>(<span style=color:#FFF066>\`&lt;div>&lt;img</span><span style=color:#66D9EF>\${</span><span style=color:#A6E22E>_marko_attr</span><span style=color:#FFF066>(</span><span style=color:#FFF066>"src"</span><span style=color:#FFF066>, </span><span style=color:#FFFFFF>item</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>img</span><span style=color:#FFF066>)</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>>&lt;/div>\`</span>);\n}\n<span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>write</span>(<span style=color:#FFF066>"&lt;/div>&lt;/div>"</span>);\n</pre><div class=home-performance-output-overlay>HTML Strings <small>on the server</small></div></div><div class=home-performance-vdom><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>beginElement</span>(<span style=color:#FFF066>"div"</span>, <span style=color:#AE81FF>null</span>, <span style=color:#FFF066>"0"</span>, <span style=color:#FFFFFF>component</span>);\n<span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>beginElement</span>(<span style=color:#FFF066>"h2"</span>, <span style=color:#AE81FF>null</span>, <span style=color:#FFF066>"1"</span>, <span style=color:#FFFFFF>component</span>);\n<span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>text</span>(<span style=color:#FFF066>"Images"</span>, <span style=color:#FFFFFF>component</span>);\n<span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>endElement</span>();\n<span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>beginElement</span>(<span style=color:#FFF066>"div"</span>, <span style=color:#AE81FF>null</span>, <span style=color:#FFF066>"2"</span>, <span style=color:#FFFFFF>component</span>);\n{\n  <span style=color:#66D9EF>let</span> <span style=color:#FFFFFF>_keyValue</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>0</span>;\n  <span style=color:#FF4185>for</span> (<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>item</span> <span style=color:#FF4185>of</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>items</span>) {\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>_keyScope</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>\`[</span><span style=color:#66D9EF>\${</span><span style=color:#FFFFFF>_keyValue</span><span style=color:#FF4185>++</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>]\`</span>;\n    <span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>beginElement</span>(<span style=color:#FFF066>"div"</span>, <span style=color:#AE81FF>null</span>, <span style=color:#FFF066>"3"</span> <span style=color:#FF4185>+</span> <span style=color:#FFFFFF>_keyScope</span>, <span style=color:#FFFFFF>component</span>, <span style=color:#AE81FF>null</span>, <span style=color:#AE81FF>0</span>, {\n      onclick: <span style=color:#FFFFFF>_component</span>.<span style=color:#A6E22E>d</span>(<span style=color:#FFF066>"click"</span>, <span style=color:#FFF066>"onBannerClick"</span>, <span style=color:#AE81FF>false</span>, [<span style=color:#FFFFFF>item</span>]),\n    });\n    <span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>element</span>(<span style=color:#FFF066>"img"</span>, { src: <span style=color:#FFFFFF>item</span>.<span style=color:#FFFFFF>img</span> }, <span style=color:#FFF066>"4"</span> <span style=color:#FF4185>+</span> <span style=color:#FFFFFF>_keyScope</span>, <span style=color:#FFFFFF>component</span>, <span style=color:#AE81FF>0</span>);\n    <span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>endElement</span>();\n  }\n}\n<span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>endElement</span>();\n<span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>endElement</span>();\n</pre><div class=home-performance-output-overlay>VDOM Nodes <small>in the browser</small></div></div></div></div>`);
      }
    },
    "action": {
      "href": "https://github.com/marko-js/isomorphic-ui-benchmarks",
      "text": "See the Benchmarks"
    }
  }, out, _componentDef, "0");
}, {
  t: home_performance_index_marko_marko_componentType,
  i: true
}, home_performance_index_marko_marko_component);
__webpack_require__(9964)
;// CONCATENATED MODULE: ./index/components/home-tooling/screen.png
/* harmony default export */ const screen = (__webpack_require__.p + "92c4e05e.png");
;// CONCATENATED MODULE: ./index/components/home-tooling/index.marko


const home_tooling_index_marko_marko_componentType = "2dXGayo5",
      home_tooling_index_marko_marko_template = (0,index_js_namespaceObject.t)(home_tooling_index_marko_marko_componentType);

/* harmony default export */ const home_tooling_index_marko = (home_tooling_index_marko_marko_template);





const home_tooling_index_marko_marko_component = {};
home_tooling_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  render_tag_js_default()(home_feature_block_index_marko, {
    "align": "right",
    "class": "home-tooling",
    "title": {
      "text": "Editor Support",
      "anchorName": "tooling"
    },
    "content": {
      "renderBody": out => {
        out.w("<p>Marko provides <a href=https://marketplace.visualstudio.com/items?itemName=Marko-JS.marko-vscode title=\"Marko VSCode Extension\">first-class support</a> for the VSCode editor including syntax highlighting, Autocompletion, Hyperclick to quickly jump to referenced files, and Pretty printing to keep your code readable.</p><p>Community plugins also provide syntax highlighting for Sublime, Atom, Webstorm &amp; others!</p>");
      }
    },
    "visual": {
      "class": "home-tooling__screenshot-window",
      "renderBody": out => {
        out.w(`<div class=home-tooling__screenshot-title><div class=red></div><div class=yellow></div><div class=green></div></div><div class=home-tooling__screenshot-screen><img${attr_js_default()("src", screen)} alt></div>`);
      }
    },
    "action": {
      "href": "/docs/editor-plugins",
      "text": "View editor plugins"
    }
  }, out, _componentDef, "0");
}, {
  t: home_tooling_index_marko_marko_componentType,
  i: true
}, home_tooling_index_marko_marko_component);
__webpack_require__(4361)
// EXTERNAL MODULE: external "gh-got"
var external_gh_got_ = __webpack_require__(8331);
var external_gh_got_default = /*#__PURE__*/__webpack_require__.n(external_gh_got_);
;// CONCATENATED MODULE: ../logos/stackoverflow.svg
/* harmony default export */ const stackoverflow = (__webpack_require__.p + "0bfc2ee7.svg");
;// CONCATENATED MODULE: ../logos/discord.svg
/* harmony default export */ const discord = (__webpack_require__.p + "78800ea4.svg");
;// CONCATENATED MODULE: ../logos/twitter.svg
/* harmony default export */ const twitter = (__webpack_require__.p + "82b09e37.svg");
;// CONCATENATED MODULE: external "marko/dist/core-tags/core/await/renderer.js"
const await_renderer_js_namespaceObject = require("marko/dist/core-tags/core/await/renderer.js");
var await_renderer_js_default = /*#__PURE__*/__webpack_require__.n(await_renderer_js_namespaceObject);
;// CONCATENATED MODULE: ./index/components/home-community/index.marko


const home_community_index_marko_marko_componentType = "nqj++zlY",
      home_community_index_marko_marko_template = (0,index_js_namespaceObject.t)(home_community_index_marko_marko_componentType);

/* harmony default export */ const home_community_index_marko = (home_community_index_marko_marko_template);










const home_community_index_marko_marko_component = {};
home_community_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  render_tag_js_default()(home_feature_block_index_marko, {
    "colors": ["#fff"],
    "title": {
      "text": "Join the Community",
      "anchorName": "community",
      "class": "home-community__title"
    },
    "content": {
      "renderBody": out => {
        out.w("<p>Need help? Want to contribute? Get involved in the Marko Community!</p>");
      }
    },
    "visual": {
      "renderBody": out => {
        out.w(`<div class=home-community__locations><div class=home-community__location><a href=https://stackoverflow.com/questions/tagged/marko class=home-community__logo><img${attr_js_default()("src", stackoverflow)} alt=StackOverflow></a><span>Ask & answer StackOverflow questions with the <a href=https://stackoverflow.com/questions/tagged/marko>marko tag</a></span></div><div class=home-community__location><a href=https://discord.gg/marko class=home-community__logo><img${attr_js_default()("src", discord)} alt=Discord></a><span>Hang out in our <a href=https://discord.gg/marko>Discord server</a>, ask questions, & discuss project direction</span></div><div class=home-community__location><a href=https://twitter.com/search?q=%23markojs%20OR%20%40markodevteam&f=live class=home-community__logo><img${attr_js_default()("src", twitter)} alt=Twitter></a><span>Tweet to <a href=https://twitter.com/MarkoDevTeam>@MarkoDevTeam</a> or with the <a href=https://twitter.com/search?q=%23markojs%20OR%20%40markodevteam&f=live>#markojs</a> hashtag</span></div><div class=home-community__location><a href=https://github.com/marko-js/marko class=home-community__logo><img${attr_js_default()("src", github)} alt=GitHub></a><span>Browse the code, open issues, & make pull requests on the <a href=https://github.com/marko-js/marko>GitHub repo</a></span></div></div>`);
      }
    },
    "breakout": {
      "renderBody": out => {
        out.w("<div class=home-community__contributors>");

        render_tag_js_default()((await_renderer_js_default()), {
          "_provider": external_gh_got_default()('/repos/marko-js/marko/contributors?per_page=100'),
          "_name": "ghGot('/repos/marko-js/marko/contributors?per_page=100')",
          "then": {
            "renderBody": (out, {
              body
            }) => {
              let _keyValue = 0;

              for (const contributor of body) {
                const _keyScope = `[${_keyValue++}]`;
                out.w(`<img${attr_js_default()("src", `${contributor.avatar_url}&s=64`)}${attr_js_default()("alt", contributor.login)} loading=lazy>`);
              }
            }
          }
        }, out, _componentDef, "25");

        out.w("</div>");
      }
    }
  }, out, _componentDef, "0");
}, {
  t: home_community_index_marko_marko_componentType,
  i: true
}, home_community_index_marko_marko_component);
__webpack_require__(9869)
;// CONCATENATED MODULE: ../components/app-layout/favicon.png
/* harmony default export */ const favicon = (__webpack_require__.p + "d78b83f1.png");
;// CONCATENATED MODULE: ../components/app-layout/components/skip-link/index.marko


const skip_link_index_marko_marko_componentType = "/oqMW3tL",
      skip_link_index_marko_marko_template = (0,index_js_namespaceObject.t)(skip_link_index_marko_marko_componentType);

/* harmony default export */ const skip_link_index_marko = (skip_link_index_marko_marko_template);


const skip_link_index_marko_marko_component = {};
skip_link_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<a${attr_js_default()("href", `#${input.anchor}`)} id=skip-link>Skip to main content</a>`);
}, {
  t: skip_link_index_marko_marko_componentType,
  i: true
}, skip_link_index_marko_marko_component);
__webpack_require__(6835)
;// CONCATENATED MODULE: ../components/app-layout/components/layout-search/index.marko


const layout_search_index_marko_marko_componentType = "HkYzEWAp",
      layout_search_index_marko_marko_template = (0,index_js_namespaceObject.t)(layout_search_index_marko_marko_componentType);

/* harmony default export */ const layout_search_index_marko = (layout_search_index_marko_marko_template);



const layout_search_index_marko_marko_component = {};
layout_search_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<form${attr_js_default()("class", class_value_js_default()(["SiteSearch", input.class]))} role=search action=https://google.com/search><svg width=1em height=1em viewBox="0 0 64 64" fill=none stroke=#595959 stroke-width=5 focusable=false class=SiteSearch-icon><path d="M41 39a1 1 0 0 0-27-27 1 1 0 0 0 27 27l15 16-2 2-15-15" /></svg><input name=q type=search placeholder="search docs\u2026" pattern=.*?\\S+.*? title="Enter something to search for" required autocapitalize=off class=SiteSearch-input><button name=q value=site:markojs.com class=SiteSearch-submit>Go</button></form>`);
}, {
  t: layout_search_index_marko_marko_componentType,
  i: true
}, layout_search_index_marko_marko_component);
__webpack_require__(3514)
;// CONCATENATED MODULE: ../components/app-layout/components/layout-header/index.marko


const layout_header_index_marko_marko_componentType = "OIKmBXjW",
      layout_header_index_marko_marko_template = (0,index_js_namespaceObject.t)(layout_header_index_marko_marko_componentType);

/* harmony default export */ const layout_header_index_marko = (layout_header_index_marko_marko_template);






const layout_header_index_marko_marko_component = {};
layout_header_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<header${data_marko_js_default()(out, _componentDef, 0, "@header", _componentDef)} class=site-header><div class=content><a href=/ ><img${attr_js_default()("src", marko)} alt="Marko Home" class=site-logo></a><div class=stuff><nav class=site-menu><a href=/docs/getting-started/ >Docs</a><a href=/try-online>Try Online</a><a href=https://github.com/marko-js/marko>GitHub</a>`);

  render_tag_js_default()(layout_search_index_marko, {
    "class": "search"
  }, out, _componentDef, "8");

  out.w(`</nav><button${data_marko_js_default()(out, _componentDef, {
    "onclick": _componentDef.d("click", "toggleMenu", false)
  })} class=menu>&#9776;</button></div></div></header>`);
}, {
  t: layout_header_index_marko_marko_componentType,
  s: true
}, layout_header_index_marko_marko_component);
__webpack_require__(262)
;// CONCATENATED MODULE: external "marko/docs/structure.json"
const structure_json_namespaceObject = require("marko/docs/structure.json");
var structure_json_default = /*#__PURE__*/__webpack_require__.n(structure_json_namespaceObject);
// EXTERNAL MODULE: ../utils/format-slug.js
var format_slug = __webpack_require__(8174);
var format_slug_default = /*#__PURE__*/__webpack_require__.n(format_slug);
// EXTERNAL MODULE: ../utils/create-overview-tree.js
var create_overview_tree = __webpack_require__(2130);
var create_overview_tree_default = /*#__PURE__*/__webpack_require__.n(create_overview_tree);
;// CONCATENATED MODULE: external "marko/dist/runtime/helpers/to-string.js"
const to_string_js_namespaceObject = require("marko/dist/runtime/helpers/to-string.js");
var to_string_js_default = /*#__PURE__*/__webpack_require__.n(to_string_js_namespaceObject);
;// CONCATENATED MODULE: external "marko/package.json"
const package_json_namespaceObject = require("marko/package.json");
;// CONCATENATED MODULE: ../components/app-layout/components/layout-sidebar/components/version-switcher/index.marko


const version_switcher_index_marko_marko_componentType = "07hv1F0+",
      version_switcher_index_marko_marko_template = (0,index_js_namespaceObject.t)(version_switcher_index_marko_marko_componentType);

/* harmony default export */ const version_switcher_index_marko = (version_switcher_index_marko_marko_template);




const version_switcher_index_marko_marko_component = {};
version_switcher_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<select${data_marko_js_default()(out, _componentDef, {
    "onchange": _componentDef.d("change", 'switchVersion', false)
  })}><option value=current selected>${(0,escape_xml_js_namespaceObject.x)(package_json_namespaceObject.version)}</option><option value=http://marko-v4.github.io/docs/ >4.x</option><option value=http://v3.markojs.com/docs/ >3.x</option><option value=http://marko-v2.github.io/docs/ >2.x</option></select>`);
}, {
  t: version_switcher_index_marko_marko_componentType,
  s: true
}, version_switcher_index_marko_marko_component);
__webpack_require__(6043)
;// CONCATENATED MODULE: ../components/app-layout/components/layout-sidebar/index.marko


const layout_sidebar_index_marko_marko_componentType = "mFesaajv",
      layout_sidebar_index_marko_marko_template = (0,index_js_namespaceObject.t)(layout_sidebar_index_marko_marko_componentType);

/* harmony default export */ const layout_sidebar_index_marko = (layout_sidebar_index_marko_marko_template);



const parentTree = create_overview_tree_default()((structure_json_default()));

function getDocData(currentDoc, section, doc) {
  let docSlug;
  let selected;
  let docTitle = doc;

  if (typeof doc === 'object') {
    docTitle = doc.title;
    let sectionTitleSlug = format_slug_default()(section.title);
    let titleSlug = format_slug_default()(docTitle);
    docSlug = `${sectionTitleSlug}-${titleSlug}-overview`;
    selected = parentTree[currentDoc] && parentTree[currentDoc][docSlug] || docSlug === currentDoc;
  } else {
    docSlug = format_slug_default()(docTitle);
    selected = docSlug === currentDoc;
  }

  docSlug += '/';
  return {
    docTitle,
    docSlug,
    selected
  };
}











const layout_sidebar_index_marko_marko_component = {};
layout_sidebar_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  function _sidebarOverview(out, {
    structure,
    isNested
  }) {
    let _keyValue = 0;

    for (const section of structure) {
      const _keyScope = `[${_keyValue++}]`;
      out.w(`<ul${attr_js_default()("class", class_value_js_default()(isNested ? "toc toc-level1" : "toc-level0"))}>`);
      {
        if (!isNested) {
          out.w("<li class=section>");
          {
            let title = section.title.toUpperCase();
            let overviewSlug = format_slug_default()(title);
            out.w(`<a${attr_js_default()("href", `/docs/${overviewSlug}-overview/`)}>${(0,escape_xml_js_namespaceObject.x)(title)}</a>`);
          }
          out.w("</li>");
        }

        let _keyValue2 = 0;

        for (const doc of section.docs) {
          const _keyScope2 = `[${_keyValue2++ + _keyScope}]`;
          out.w("<li>");
          {
            let {
              docTitle,
              docSlug,
              selected
            } = getDocData(input.currentDoc, section, doc);
            out.w(`<a${attr_js_default()("class", class_value_js_default()({
              selected
            }))}${attr_js_default()("href", `/docs/${docSlug}`)}>${(0,escape_xml_js_namespaceObject.x)(docTitle)}</a>`);

            if (selected) {
              if (typeof doc === 'object') {
                dynamic_tag_js_default()(out, _sidebarOverview, () => ({
                  "structure": [doc],
                  "isNested": true
                }), null, null, null, _componentDef, "6" + _keyScope2);
              } else if (typeof doc === 'string') {
                out.w(to_string_js_default()(input.toc));
              }
            }
          }
          out.w("</li>");
        }
      }
      out.w("</ul>");
    }
  }

  out.w(`<div${data_marko_js_default()(out, _componentDef, 0, "@sidebar", _componentDef)}${attr_js_default()("class", class_value_js_default()(["doc-sidebar", input.class]))}><button${data_marko_js_default()(out, _componentDef, {
    "onclick": _componentDef.d("click", 'hide', false)
  })} class=close>&#10005;</button><h1>Marko `);

  render_tag_js_default()(version_switcher_index_marko, {}, out, _componentDef, "9");

  out.w("</h1>");

  render_tag_js_default()(layout_search_index_marko, {
    "class": "search"
  }, out, _componentDef, "10");

  dynamic_tag_js_default()(out, _sidebarOverview, () => ({
    "structure": (structure_json_default())
  }), null, null, null, _componentDef, "11");

  out.w("</div>");
}, {
  t: layout_sidebar_index_marko_marko_componentType,
  s: true
}, layout_sidebar_index_marko_marko_component);
__webpack_require__(1459)
;// CONCATENATED MODULE: ../components/app-footer/openjsf.svg
/* harmony default export */ const openjsf = (__webpack_require__.p + "6876aea9.svg");
;// CONCATENATED MODULE: ../components/app-footer/osi.svg
/* harmony default export */ const osi = (__webpack_require__.p + "1b70b500.svg");
;// CONCATENATED MODULE: ../components/app-footer/ebay.svg
/* harmony default export */ const ebay = (__webpack_require__.p + "339b8a9e.svg");
;// CONCATENATED MODULE: ../components/app-footer/index.marko


const app_footer_index_marko_marko_componentType = "TUdiMyv1",
      app_footer_index_marko_marko_template = (0,index_js_namespaceObject.t)(app_footer_index_marko_marko_componentType);

/* harmony default export */ const app_footer_index_marko = (app_footer_index_marko_marko_template);






const app_footer_index_marko_marko_component = {};
app_footer_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<footer${attr_js_default()("class", class_value_js_default()(["site-footer", input.class]))}><a href=https://openjsf.org/  class=openjsf><img${attr_js_default()("src", openjsf)} alt> <span><span class=bold>OpenJS</span>&nbsp;<span class=light>Foundation</span></span></a><div class=separator></div><a href=https://github.com/marko-js/marko/blob/main/LICENSE class=osi><img${attr_js_default()("src", osi)} alt> MIT&nbsp;License</a><div class=separator></div><a href=https://github.com/eBay class=ebay><img${attr_js_default()("src", ebay)} alt=eBay> open&nbsp;source</a></footer>`);
}, {
  t: app_footer_index_marko_marko_componentType,
  i: true
}, app_footer_index_marko_marko_component);
__webpack_require__(8109)
;// CONCATENATED MODULE: ../components/app-layout/components/google-analytics/index.marko


const google_analytics_index_marko_marko_componentType = "gYe4sOI0",
      google_analytics_index_marko_marko_template = (0,index_js_namespaceObject.t)(google_analytics_index_marko_marko_componentType);

/* harmony default export */ const google_analytics_index_marko = (google_analytics_index_marko_marko_template);


const google_analytics_index_marko_marko_component = {};
google_analytics_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  const {
    trackingId,
    domain
  } = input;

  if (trackingId && domain) {
    out.w(`<script>\n    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n    ga('create', '${to_string_js_default()(trackingId)}', '${to_string_js_default()(domain)}');\n    ga('send', 'pageview');\n  </script>`);
  }
}, {
  t: google_analytics_index_marko_marko_componentType,
  i: true
}, google_analytics_index_marko_marko_component);
__webpack_require__(3272)
;// CONCATENATED MODULE: ../components/discord-link/index.marko


const discord_link_index_marko_marko_componentType = "AsCwjfza",
      discord_link_index_marko_marko_template = (0,index_js_namespaceObject.t)(discord_link_index_marko_marko_componentType);

/* harmony default export */ const discord_link_index_marko = (discord_link_index_marko_marko_template);



const discord_link_index_marko_marko_component = {};
discord_link_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<a href=https://discord.gg/marko target=_blank class=discord-button><img${attr_js_default()("src", discord)} alt="Chat in Marko's Discord Server"></a>`);
}, {
  t: discord_link_index_marko_marko_componentType,
  i: true
}, discord_link_index_marko_marko_component);
__webpack_require__(8829)
;// CONCATENATED MODULE: ../components/app-layout/index.marko


const app_layout_index_marko_marko_componentType = "Z1tTMg7Q",
      app_layout_index_marko_marko_template = (0,index_js_namespaceObject.t)(app_layout_index_marko_marko_componentType);

/* harmony default export */ const app_layout_index_marko = (app_layout_index_marko_marko_template);
const mainContentId = 'main';
const isPrPreview = process.env.PR_PREVIEW;
















const app_layout_index_marko_marko_component = {};
app_layout_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<!doctype html><html lang=en><head><meta charset=UTF-8><title>${(0,escape_xml_js_namespaceObject.x)(input.title ? input.title + " | Marko" : "Marko")}</title><link rel=icon type=image/png sizes=32x32${attr_js_default()("href", favicon)}><meta name=viewport content="width=device-width, initial-scale=1">`);

  if (isPrPreview) {
    out.w("<meta name=robots content=none>");
  }

  out.w("<meta name=description content=\"Marko is a friendly (and fast!) UI library that makes building web apps fun.\"><script>\n      if (window.self !== window.top) {\n        document.documentElement.classList.add(\"iframe\");\n      }\n    </script>");
  out.global.___renderAssets && out.global.___renderAssets(out);
  out.w(`</head><body${attr_js_default()("class", class_value_js_default()(input.class))}>`);

  render_tag_js_default()(skip_link_index_marko, {
    "anchor": mainContentId
  }, out, _componentDef, "10");

  render_tag_js_default()(layout_header_index_marko, {}, out, _componentDef, "11");

  render_tag_js_default()(layout_sidebar_index_marko, {
    "currentDoc": input.currentDoc,
    "toc": input.toc
  }, out, _componentDef, "12");

  out.w("<main id=main tabindex=-1 class=content>");

  dynamic_tag_js_default()(out, input.renderBody, null, null, null, null, _componentDef, "14");

  out.w("</main>");

  if (input.footer !== false) {
    render_tag_js_default()(app_footer_index_marko, {}, out, _componentDef, "15");
  }

  render_tag_js_default()(google_analytics_index_marko, {
    "trackingId": "UA-66854919-1",
    "domain": "markojs.com"
  }, out, _componentDef, "16");

  if (input.discord !== false) {
    render_tag_js_default()(discord_link_index_marko, {}, out, _componentDef, "17");
  }

  render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "18");

  render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "19");

  render_tag_js_default()((preferred_script_location_tag_js_default()), {}, out, _componentDef, "20");

  out.w("</body></html>");
}, {
  t: app_layout_index_marko_marko_componentType,
  i: true
}, app_layout_index_marko_marko_component);
__webpack_require__(5480)
;// CONCATENATED MODULE: ./index/index.marko


const index_index_marko_marko_componentType = "WEBG6A5X",
      index_index_marko_marko_template = (0,index_js_namespaceObject.t)(index_index_marko_marko_componentType);

/* harmony default export */ const index_index_marko = (index_index_marko_marko_template);











const index_index_marko_marko_component = {};
index_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  render_tag_js_default()(app_layout_index_marko, {
    "class": "home",
    "renderBody": out => {
      render_tag_js_default()(home_hero_index_marko, {}, out, _componentDef, "1");

      render_tag_js_default()(home_features_index_marko, {}, out, _componentDef, "2");

      render_tag_js_default()(home_language_index_marko, {}, out, _componentDef, "3");

      render_tag_js_default()(home_streaming_index_marko, {}, out, _componentDef, "4");

      render_tag_js_default()(home_hydration_index_marko, {}, out, _componentDef, "5");

      render_tag_js_default()(home_performance_index_marko, {}, out, _componentDef, "6");

      render_tag_js_default()(home_tooling_index_marko, {}, out, _componentDef, "7");

      render_tag_js_default()(home_community_index_marko, {}, out, _componentDef, "8");
    }
  }, out, _componentDef, "0");
}, {
  t: index_index_marko_marko_componentType,
  i: true
}, index_index_marko_marko_component);
__webpack_require__(7517)
;// CONCATENATED MODULE: ./index/index.marko?server-entry


const index_marko_server_entry_marko_componentType = "LdmBbOpH",
      index_marko_server_entry_marko_template = (0,index_js_namespaceObject.t)(index_marko_server_entry_marko_componentType);

/* harmony default export */ const index_marko_server_entry = (index_marko_server_entry_marko_template);



const index_marko_server_entry_crossOriginAttr = new URL(__webpack_require__.p, "file:").protocol === "file:" ? "" : " crossorigin";

function index_marko_server_entry_renderAssets(out) {
  const entries = this.___entries;
  this.___entries = undefined;

  if (entries) {
    const buildName = this.buildName;
    const nonce = this.cspNonce;
    const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : "";
    const written = this.___writtenAssets || (this.___writtenAssets = new Set());
    let scripts = "";
    let styles = "";

    for (const entry of entries) {
      const assets = index_js_manifest.getAssets(entry, buildName);

      if (assets.js) {
        for (const href of assets.js) {
          if (!written.has(href)) {
            written.add(href);
            scripts += `<script src=${JSON.stringify(__webpack_require__.p + href)}${nonceAttr + index_marko_server_entry_crossOriginAttr} async></script>`;
          }
        }
      }

      if (assets.css) {
        for (const href of assets.css) {
          if (!written.has(href)) {
            written.add(href);
            styles += `<link rel="stylesheet" href=${JSON.stringify(__webpack_require__.p + href)}>`;
          }
        }
      }
    }

    out.write(scripts + styles);
  }
}






const index_marko_server_entry_marko_component = {};
index_marko_server_entry_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.global.___renderAssets = index_marko_server_entry_renderAssets;
  (out.global.___entries || (out.global.___entries = [])).push("index_WEBG");

  render_tag_js_default()((_flush_here_and_after_js_default()), {
    "renderBody": out => {
      out.global.___renderAssets && out.global.___renderAssets(out);
    }
  }, out, _componentDef, "0");

  render_tag_js_default()(index_index_marko, input, out, _componentDef, "1");

  render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "2");

  render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "3");
}, {
  t: index_marko_server_entry_marko_componentType,
  i: true
}, index_marko_server_entry_marko_component);
;// CONCATENATED MODULE: external "@marko/tags-api-preview/dist/components/return"
const return_namespaceObject = require("@marko/tags-api-preview/dist/components/return");
var return_default = /*#__PURE__*/__webpack_require__.n(return_namespaceObject);
;// CONCATENATED MODULE: external "lz-string"
const external_lz_string_namespaceObject = require("lz-string");
;// CONCATENATED MODULE: external "@marko/tags-api-preview/dist/transform/cached-function"
const cached_function_namespaceObject = require("@marko/tags-api-preview/dist/transform/cached-function");
;// CONCATENATED MODULE: ./playground/components/hash-value.marko


const hash_value_marko_marko_componentType = "41NMzc7K",
      hash_value_marko_marko_template = (0,index_js_namespaceObject.t)(hash_value_marko_marko_componentType);

/* harmony default export */ const hash_value_marko = (hash_value_marko_marko_template);



const hash_value_marko_marko_component = {
  onCreate() {
    this.state = {};
  }

};
hash_value_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component2, state) {
  var _component = _component2,
      _state = state;
  const {
    default: defaultValue
  } = input;

  const value = (() => {
    try {
      if (false) {}
    } catch (e) {
      console.error(e);
    }
  })() || defaultValue;

  input._return && input._return({
    "default": value,
    "defaultChange": _ => value = _
  }, 1);
}, {
  t: hash_value_marko_marko_componentType
}, hash_value_marko_marko_component);
__webpack_require__(5061)
;// CONCATENATED MODULE: external "@marko/tags-api-preview/dist/util/replace-assignments"
const replace_assignments_namespaceObject = require("@marko/tags-api-preview/dist/util/replace-assignments");
var replace_assignments_default = /*#__PURE__*/__webpack_require__.n(replace_assignments_namespaceObject);
;// CONCATENATED MODULE: external "@marko/tags-api-preview/dist/transform/native-tag-var"
const native_tag_var_namespaceObject = require("@marko/tags-api-preview/dist/transform/native-tag-var");
var native_tag_var_default = /*#__PURE__*/__webpack_require__.n(native_tag_var_namespaceObject);
;// CONCATENATED MODULE: ../../node_modules/@marko/tags-api-preview/dist/components/_instance/index.marko


const _instance_index_marko_marko_componentType = "5FjBrxm1",
      _instance_index_marko_marko_template = (0,index_js_namespaceObject.t)(_instance_index_marko_marko_componentType);

/* harmony default export */ const _instance_index_marko = (_instance_index_marko_marko_template);

const _instance_index_marko_marko_component = {
  onCreate() {
    this.state = {};
  }

};
_instance_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  var componentDef = _componentDef;
  input.renderBody(out, componentDef, _component, state);
}, {
  t: _instance_index_marko_marko_componentType
}, _instance_index_marko_marko_component);
__webpack_require__(8384)
;// CONCATENATED MODULE: ../components/repl/components/file-tabs.marko


const file_tabs_marko_marko_componentType = "6o3N4O4f",
      file_tabs_marko_marko_template = (0,index_js_namespaceObject.t)(file_tabs_marko_marko_componentType);

/* harmony default export */ const file_tabs_marko = (file_tabs_marko_marko_template);








const file_tabs_marko_marko_component = {
  onCreate() {
    this.state = {};
  }

};
file_tabs_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component4, state) {
  var _component = _component4,
      _state = state;
  const {
    "selectedIndexChange": _selectedIndexChange,
    "filesChange": _filesChange,
    files: externalFiles,
    selectedIndex: externalSelected
  } = input;
  const files = externalFiles;
  const selectedIndex = externalSelected;
  const selectedFile = files[selectedIndex];
  out.w("<div class=file-tabs>");
  {
    const nextId = 1;
    let _index = 0;

    for (const file of files) {
      let index = _index++;
      const _keyScope = `[${index}]`;

      render_tag_js_default()(_instance_index_marko, {
        "renderBody": (out, _nestedComponentDef, _component2, _state2) => {
          var _componentDef = _nestedComponentDef,
              _component4 = _component2;
          const editing = false;
          const selected = selectedFile === file;
          const mutable = index > 0;
          out.w(`<div${attr_js_default()("class", class_value_js_default()(["file-tab", {
            selected
          }]))}>`);

          if (!editing || !selected || !mutable) {
            out.w((0,escape_xml_js_namespaceObject.x)(file.name));
          } else {
            render_tag_js_default()(_instance_index_marko, {
              "renderBody": (out, _nestedComponentDef2, _component3, _state3) => {
                var _componentDef = _nestedComponentDef2,
                    _component4 = _component3;
                const name = file.name;

                const finishRename = (0,cached_function_namespaceObject.cache)((0,cached_function_namespaceObject.cached)(_component3, [name, files]) || function () {
                  const modifiedFile = { ...file,
                    name,
                    path: file.path.replace(file.name, name)
                  };
                  files = [...files.slice(0, index), modifiedFile, ...files.slice(index + 1)];
                  editing = false;
                });

                const nameInput = native_tag_var_default()(_component3, "0");

                out.w(`<input type=text${attr_js_default()("size", name.length)}${attr_js_default()("value", name)}>`);
              }
            }, out, _componentDef, "3" + _keyScope);
          }

          if (mutable) {
            out.w("<button class=file-close>&times;</button>");
          }

          out.w("</div>");
        }
      }, out, _componentDef, "1" + _keyScope);
    }

    out.w("<button class=new-file>+</button>");
  }
  out.w("</div>");
}, {
  t: file_tabs_marko_marko_componentType
}, file_tabs_marko_marko_component);
__webpack_require__(9726)
;// CONCATENATED MODULE: ../components/repl/components/pane.marko


const pane_marko_marko_componentType = "QAUP5peK",
      pane_marko_marko_template = (0,index_js_namespaceObject.t)(pane_marko_marko_componentType);

/* harmony default export */ const pane_marko = (pane_marko_marko_template);


const pane_marko_marko_component = {};
pane_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  const {
    actions,
    body
  } = input;
  out.w("<div class=pane><div class=pane-actions>");

  dynamic_tag_js_default()(out, actions.renderBody, null, null, null, null, _componentDef, "2");

  out.w("</div><div class=pane-divider></div><div class=pane-body>");

  dynamic_tag_js_default()(out, body.renderBody, null, null, null, null, _componentDef, "5");

  out.w("</div></div>");
}, {
  t: pane_marko_marko_componentType,
  i: true
}, pane_marko_marko_component);
__webpack_require__(5069)
;// CONCATENATED MODULE: ../components/repl/components/controllable-select.marko


const controllable_select_marko_marko_componentType = "rRMAwOPg",
      controllable_select_marko_marko_template = (0,index_js_namespaceObject.t)(controllable_select_marko_marko_componentType);

/* harmony default export */ const controllable_select_marko = (controllable_select_marko_marko_template);






const controllable_select_marko_marko_component = {
  onCreate() {
    this.state = {};
  }

};
controllable_select_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component2, state) {
  var _component = _component2,
      _state = state;
  const {
    value,
    valueChange,
    renderBody,
    class: className
  } = input;

  const el = native_tag_var_default()(_component, "0");

  out.w(`<select${attr_js_default()("class", class_value_js_default()(className))}>`);

  dynamic_tag_js_default()(out, renderBody, null, null, null, null, _componentDef, "0");

  out.w("</select>");
}, {
  t: controllable_select_marko_marko_componentType
}, controllable_select_marko_marko_component);
__webpack_require__(4491)
;// CONCATENATED MODULE: external "@marko/tags-api-preview/dist/translate/native-tag-handlers"
const native_tag_handlers_namespaceObject = require("@marko/tags-api-preview/dist/translate/native-tag-handlers");
var native_tag_handlers_default = /*#__PURE__*/__webpack_require__.n(native_tag_handlers_namespaceObject);
;// CONCATENATED MODULE: external "marko/dist/runtime/html/helpers/attrs.js"
const attrs_js_namespaceObject = require("marko/dist/runtime/html/helpers/attrs.js");
var attrs_js_default = /*#__PURE__*/__webpack_require__.n(attrs_js_namespaceObject);
;// CONCATENATED MODULE: ../components/repl/components/playground-link.marko


const playground_link_marko_marko_componentType = "ftG9dvL8",
      playground_link_marko_marko_template = (0,index_js_namespaceObject.t)(playground_link_marko_marko_componentType);

/* harmony default export */ const playground_link_marko = (playground_link_marko_marko_template);





const playground_link_marko_marko_component = {};
playground_link_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  const {
    files,
    ...attrs
  } = input;
  var _meta = {};
  out.w(`<a${data_marko_js_default()(out, _componentDef, { ..._meta
  })}${attrs_js_default()(native_tag_handlers_default()({ ...attrs,
    "href": `/playground/#${(0,external_lz_string_namespaceObject.compressToEncodedURIComponent)(JSON.stringify(files))}`,
    "target": "_top",
    "class": "playground-link"
  }))}><span>Open in playground </span>\u2197</a>`);
}, {
  t: playground_link_marko_marko_componentType,
  i: true
}, playground_link_marko_marko_component);
__webpack_require__(1851)
;// CONCATENATED MODULE: ../components/repl/components/match-media.marko


const match_media_marko_marko_componentType = "dL815V5K",
      match_media_marko_marko_template = (0,index_js_namespaceObject.t)(match_media_marko_marko_componentType);

/* harmony default export */ const match_media_marko = (match_media_marko_marko_template);


const match_media_marko_marko_component = {
  onCreate() {
    this.state = {};
  }

};
match_media_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component2, state) {
  var _component = _component2,
      _state = state;
  const {
    default: query,
    fallback
  } = input;
  const isMatch =  false ? 0 : fallback;
  input._return && input._return({
    "default": isMatch
  }, 1);
}, {
  t: match_media_marko_marko_componentType
}, match_media_marko_marko_component);
__webpack_require__(2283)
;// CONCATENATED MODULE: ../components/repl/components/resizable-panes.marko


const resizable_panes_marko_marko_componentType = "V970f081",
      resizable_panes_marko_marko_template = (0,index_js_namespaceObject.t)(resizable_panes_marko_marko_componentType);

/* harmony default export */ const resizable_panes_marko = (resizable_panes_marko_marko_template);












const resizable_panes_marko_marko_component = {
  onCreate() {
    this.state = {};
  }

};
resizable_panes_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component3, state) {
  var _component = _component3,
      _state = state;
  const {
    left,
    right
  } = input;
  const editorSize = 0.5;
  const resizing = false;

  var _matchMediaReturn = return_default()(_component);

  render_tag_js_default()(match_media_marko, {
    "default": "(max-aspect-ratio: 1/1)",
    "_return": _matchMediaReturn
  }, out, _componentDef, "0");

  const {
    default: isVertical
  } = _matchMediaReturn();

  const container = native_tag_var_default()(_component, "0");

  out.w(`<div${attr_js_default()("class", class_value_js_default()(["panes", resizing && "resizing"]))}>`);
  var _meta = {};
  out.w(`<div${attrs_js_default()(native_tag_handlers_default()({ ...left,
    "style": `flex-grow:${editorSize}`
  }))}>`);

  dynamic_tag_js_default()(out, left.renderBody, null, null, null, null, _componentDef, "2");

  out.w("</div><div class=divider><div class=inner></div></div>");
  var _meta2 = {};
  out.w(`<div${attrs_js_default()(native_tag_handlers_default()({ ...right,
    "style": `flex-grow:${1 - editorSize}`
  }))}>`);

  dynamic_tag_js_default()(out, right.renderBody, null, null, null, null, _componentDef, "6");

  out.w("</div></div>");

  if (resizing) {
    render_tag_js_default()(_instance_index_marko, {
      "renderBody": (out, _nestedComponentDef, _component2, _state2) => {
        var _componentDef = _nestedComponentDef,
            _component3 = _component2;
      }
    }, out, _componentDef, "7");
  }
}, {
  t: resizable_panes_marko_marko_componentType
}, resizable_panes_marko_marko_component);
__webpack_require__(7566)
;// CONCATENATED MODULE: ../components/repl/index.marko


const repl_index_marko_marko_componentType = "Y/QiYO60",
      repl_index_marko_marko_template = (0,index_js_namespaceObject.t)(repl_index_marko_marko_componentType);

/* harmony default export */ const repl_index_marko = (repl_index_marko_marko_template);











const repl_index_marko_marko_component = {
  onCreate() {
    this.state = {};
  }

};
repl_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component4, state) {
  var _component = _component4,
      _state = state;
  const {
    "filesChange": _filesChange,
    getCompilerOptions,
    files
  } = input;
  const selectedIndex = 0;
  const previewType = "preview";
  const debounce = false;
  const selectedFile = files[selectedIndex];

  render_tag_js_default()(resizable_panes_marko, {
    "left": {
      "class": "editor-container",
      "renderBody": out => {
        render_tag_js_default()(pane_marko, {
          "actions": {
            "renderBody": out => {
              render_tag_js_default()(file_tabs_marko, {
                "files": files,
                "filesChange": _filesChange,
                "selectedIndex": selectedIndex,
                "selectedIndexChange": _ => selectedIndex = _
              }, out, _componentDef, "2");
            }
          },
          "body": {
            "renderBody": out => {
              render_tag_js_default()(_instance_index_marko, {
                "renderBody": (out, _nestedComponentDef, _component2, _state2) => {
                  var _componentDef = _nestedComponentDef,
                      _component4 = _component2;
                  const activeEditor = null;

                  dynamic_tag_js_default()(out, activeEditor, () => ({
                    "value": selectedFile.content,
                    "filename": selectedFile.path,
                    "valueChange": (0,cached_function_namespaceObject.cache)((0,cached_function_namespaceObject.cached)(_component2, [selectedFile, files, selectedIndex]) || function (content) {
                      const modifiedFile = { ...selectedFile,
                        content
                      };

                      replace_assignments_default()(_filesChange, [...files.slice(0, selectedIndex), modifiedFile, ...files.slice(selectedIndex + 1)]);

                      debounce = true;
                    })
                  }), null, null, null, _componentDef, "4");
                }
              }, out, _componentDef, "3");
            }
          }
        }, out, _componentDef, "1");
      }
    },
    "right": {
      "renderBody": out => {
        render_tag_js_default()(pane_marko, {
          "actions": {
            "renderBody": out => {
              render_tag_js_default()(controllable_select_marko, {
                "value": previewType,
                "valueChange": function (value) {
                  previewType = value;
                  debounce = false;
                },
                "class": "preview-select",
                "renderBody": out => {
                  out.w("<option value=preview>App Preview</option><option value=compiled-html>Compiled (HTML)</option><option value=compiled-vdom>Compiled (DOM)</option>");
                }
              }, out, _componentDef, "6");

              render_tag_js_default()(playground_link_marko, {
                "files": files
              }, out, _componentDef, "10");
            }
          },
          "body": {
            "renderBody": out => {
              render_tag_js_default()(_instance_index_marko, {
                "renderBody": (out, _nestedComponentDef2, _component3, _state3) => {
                  var _componentDef = _nestedComponentDef2,
                      _component4 = _component3;
                  const preview = null;

                  dynamic_tag_js_default()(out, preview, () => ({
                    "type": previewType,
                    "files": files,
                    "selectedFile": selectedFile,
                    "getCompilerOptions": getCompilerOptions,
                    "debounce": debounce
                  }), null, null, null, _componentDef, "12");
                }
              }, out, _componentDef, "11");
            }
          }
        }, out, _componentDef, "5");
      }
    }
  }, out, _componentDef, "0");
}, {
  t: repl_index_marko_marko_componentType
}, repl_index_marko_marko_component);
__webpack_require__(5719)
;// CONCATENATED MODULE: ./playground/components/playground.marko


const playground_marko_marko_componentType = "/+j3nP/e",
      playground_marko_marko_template = (0,index_js_namespaceObject.t)(playground_marko_marko_componentType);

/* harmony default export */ const playground_marko = (playground_marko_marko_template);





const playground_marko_marko_component = {
  onCreate() {
    this.state = {};
  }

};
playground_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component2, state) {
  var _component = _component2,
      _state = state;

  var _hashValueReturn = return_default()(_component);

  render_tag_js_default()(hash_value_marko, {
    "default": [{
      name: "index.marko",
      path: "/components/index.marko",
      content: "<let/count=0/>\n<button onClick() { count++ }>\n  ${count}\n</button>"
    }],
    "_return": _hashValueReturn
  }, out, _componentDef, "0");

  const {
    "defaultChange": _defaultChange,
    default: files
  } = _hashValueReturn();

  render_tag_js_default()(repl_index_marko, {
    "files": files,
    "filesChange": _defaultChange
  }, out, _componentDef, "1");
}, {
  t: playground_marko_marko_componentType
}, playground_marko_marko_component);
__webpack_require__(8598)
;// CONCATENATED MODULE: ./playground/index.marko


const playground_index_marko_marko_componentType = "mdf+M9hP",
      playground_index_marko_marko_template = (0,index_js_namespaceObject.t)(playground_index_marko_marko_componentType);

/* harmony default export */ const playground_index_marko = (playground_index_marko_marko_template);




const playground_index_marko_marko_component = {};
playground_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  render_tag_js_default()(app_layout_index_marko, {
    "title": "Try online",
    "footer": false,
    "discord": false,
    "renderBody": out => {
      render_tag_js_default()(playground_marko, {}, out, _componentDef, "1");
    }
  }, out, _componentDef, "0");

  out.w("<style>\n  html {\n    overflow: hidden;\n  }\n\n  .iframe body {\n    padding: 0;\n  }\n\n  .iframe .site-header {\n    display:none;\n  }\n\n  .playground-link:not(.iframe .playground-link) {\n    display: none\n  }\n</style>");
}, {
  t: playground_index_marko_marko_componentType,
  i: true
}, playground_index_marko_marko_component);
__webpack_require__(4811)
;// CONCATENATED MODULE: ./playground/index.marko?server-entry


const playground_index_marko_server_entry_marko_componentType = "aO8RnNeq",
      playground_index_marko_server_entry_marko_template = (0,index_js_namespaceObject.t)(playground_index_marko_server_entry_marko_componentType);

/* harmony default export */ const playground_index_marko_server_entry = (playground_index_marko_server_entry_marko_template);



const playground_index_marko_server_entry_crossOriginAttr = new URL(__webpack_require__.p, "file:").protocol === "file:" ? "" : " crossorigin";

function playground_index_marko_server_entry_renderAssets(out) {
  const entries = this.___entries;
  this.___entries = undefined;

  if (entries) {
    const buildName = this.buildName;
    const nonce = this.cspNonce;
    const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : "";
    const written = this.___writtenAssets || (this.___writtenAssets = new Set());
    let scripts = "";
    let styles = "";

    for (const entry of entries) {
      const assets = index_js_manifest.getAssets(entry, buildName);

      if (assets.js) {
        for (const href of assets.js) {
          if (!written.has(href)) {
            written.add(href);
            scripts += `<script src=${JSON.stringify(__webpack_require__.p + href)}${nonceAttr + playground_index_marko_server_entry_crossOriginAttr} async></script>`;
          }
        }
      }

      if (assets.css) {
        for (const href of assets.css) {
          if (!written.has(href)) {
            written.add(href);
            styles += `<link rel="stylesheet" href=${JSON.stringify(__webpack_require__.p + href)}>`;
          }
        }
      }
    }

    out.write(scripts + styles);
  }
}






const playground_index_marko_server_entry_marko_component = {};
playground_index_marko_server_entry_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.global.___renderAssets = playground_index_marko_server_entry_renderAssets;
  (out.global.___entries || (out.global.___entries = [])).push("playground_mdf-");

  render_tag_js_default()((_flush_here_and_after_js_default()), {
    "renderBody": out => {
      out.global.___renderAssets && out.global.___renderAssets(out);
    }
  }, out, _componentDef, "0");

  render_tag_js_default()(playground_index_marko, input, out, _componentDef, "1");

  render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "2");

  render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "3");
}, {
  t: playground_index_marko_server_entry_marko_componentType,
  i: true
}, playground_index_marko_server_entry_marko_component);
;// CONCATENATED MODULE: ../../node_modules/@marko-tags/subscribe/index.marko


const subscribe_index_marko_marko_componentType = "ywutLLeS",
      subscribe_index_marko_marko_template = (0,index_js_namespaceObject.t)(subscribe_index_marko_marko_componentType);

/* harmony default export */ const subscribe_index_marko = (subscribe_index_marko_marko_template);

const subscribe_index_marko_marko_component = {
  onMount() {
    this.listen(this.input);
  },

  onInput(input) {
    if (this.target && this.target !== input.to) {
      this.onDestroy();
      this.listen(input);
    }
  },

  onDestroy() {
    this.subscription.removeAllListeners();
  },

  listen(input) {
    var target = this.target = input.to;
    var subscription = this.subscription = this.subscribeTo(target);
    var events = input.__events;
    var len = events.length;

    for (var i = 0; i < len; i += 2) {
      var method = events[i];
      var name = events[i + 1];
      subscription[method](name, this.emit.bind(this, name));
    }
  }

};
subscribe_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {}, {
  t: subscribe_index_marko_marko_componentType
}, subscribe_index_marko_marko_component);
__webpack_require__(1120)
;// CONCATENATED MODULE: ./try-online/components/loader/index.marko


const loader_index_marko_marko_componentType = "kW7iJzWN",
      loader_index_marko_marko_template = (0,index_js_namespaceObject.t)(loader_index_marko_marko_componentType);

/* harmony default export */ const loader_index_marko = (loader_index_marko_marko_template);




const loader_index_marko_marko_component = {
  onCreate() {
    this.state = {
      component: undefined,
      show: false
    };
  },

  async onMount() {
    const rootComponent =  false && (0);
    await rootComponent.loading;
    this.state.component = rootComponent;
    this.checkIfLargeEnough();
  },

  checkIfLargeEnough() {
    var windowSize = document.body.innerWidth || document.body.clientWidth;
    this.state.show = windowSize > 1000;
  }

};
loader_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  if (state.component) {
    if (state.show) {
      dynamic_tag_js_default()(out, state.component, () => ({
        "examples": input.examples
      }), null, null, null, _componentDef, "0");
    } else {
      render_tag_js_default()(subscribe_index_marko, {
        "to":  false && 0,
        "__events": ["on", "resize"]
      }, out, _componentDef, "1", [["resize", "checkIfLargeEnough", false]]);

      out.w("<div class=too-small><div class=overlay><h1>Screen width too small</h1><h2>Please increase the window size or rotate to load.</h2><h3>If you are on a mobile phone, please open on a desktop</h3><h4><a href=/docs/getting-started/ >View Docs</a></h4></div></div>");
    }
  } else {
    out.w("<div class=try-loader-container><div class=try-loader><span class=green-loader></span></div></div>");
  }
}, {
  t: loader_index_marko_marko_componentType
}, loader_index_marko_marko_component);
__webpack_require__(678)
;// CONCATENATED MODULE: ./try-online/index.marko


const try_online_index_marko_marko_componentType = "gkPNJYwS",
      try_online_index_marko_marko_template = (0,index_js_namespaceObject.t)(try_online_index_marko_marko_componentType);

/* harmony default export */ const try_online_index_marko = (try_online_index_marko_marko_template);




const try_online_index_marko_marko_component = {};
try_online_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  render_tag_js_default()(app_layout_index_marko, {
    "title": "Try online",
    "footer": false,
    "discord": false,
    "renderBody": out => {
      render_tag_js_default()(loader_index_marko, {}, out, _componentDef, "1");
    }
  }, out, _componentDef, "0");
}, {
  t: try_online_index_marko_marko_componentType,
  i: true
}, try_online_index_marko_marko_component);
__webpack_require__(7090)
;// CONCATENATED MODULE: ./try-online/index.marko?server-entry


const try_online_index_marko_server_entry_marko_componentType = "8useJkp3",
      try_online_index_marko_server_entry_marko_template = (0,index_js_namespaceObject.t)(try_online_index_marko_server_entry_marko_componentType);

/* harmony default export */ const try_online_index_marko_server_entry = (try_online_index_marko_server_entry_marko_template);



const try_online_index_marko_server_entry_crossOriginAttr = new URL(__webpack_require__.p, "file:").protocol === "file:" ? "" : " crossorigin";

function try_online_index_marko_server_entry_renderAssets(out) {
  const entries = this.___entries;
  this.___entries = undefined;

  if (entries) {
    const buildName = this.buildName;
    const nonce = this.cspNonce;
    const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : "";
    const written = this.___writtenAssets || (this.___writtenAssets = new Set());
    let scripts = "";
    let styles = "";

    for (const entry of entries) {
      const assets = index_js_manifest.getAssets(entry, buildName);

      if (assets.js) {
        for (const href of assets.js) {
          if (!written.has(href)) {
            written.add(href);
            scripts += `<script src=${JSON.stringify(__webpack_require__.p + href)}${nonceAttr + try_online_index_marko_server_entry_crossOriginAttr} async></script>`;
          }
        }
      }

      if (assets.css) {
        for (const href of assets.css) {
          if (!written.has(href)) {
            written.add(href);
            styles += `<link rel="stylesheet" href=${JSON.stringify(__webpack_require__.p + href)}>`;
          }
        }
      }
    }

    out.write(scripts + styles);
  }
}






const try_online_index_marko_server_entry_marko_component = {};
try_online_index_marko_server_entry_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.global.___renderAssets = try_online_index_marko_server_entry_renderAssets;
  (out.global.___entries || (out.global.___entries = [])).push("try-online_gkPN");

  render_tag_js_default()((_flush_here_and_after_js_default()), {
    "renderBody": out => {
      out.global.___renderAssets && out.global.___renderAssets(out);
    }
  }, out, _componentDef, "0");

  render_tag_js_default()(try_online_index_marko, input, out, _componentDef, "1");

  render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "2");

  render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "3");
}, {
  t: try_online_index_marko_server_entry_marko_componentType,
  i: true
}, try_online_index_marko_server_entry_marko_component);
;// CONCATENATED MODULE: ./try-online-new/index.marko


const try_online_new_index_marko_marko_componentType = "1yH9Zelv",
      try_online_new_index_marko_marko_template = (0,index_js_namespaceObject.t)(try_online_new_index_marko_marko_componentType);

/* harmony default export */ const try_online_new_index_marko = (try_online_new_index_marko_marko_template);

const try_online_new_index_marko_marko_component = {};
try_online_new_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<script>\n  window.location.href = window.location.href.replace(\"/try-online-new\", \"/playground\");\n</script>");
}, {
  t: try_online_new_index_marko_marko_componentType,
  i: true
}, try_online_new_index_marko_marko_component);
__webpack_require__(7810)
;// CONCATENATED MODULE: ./try-online-new/index.marko?server-entry


const try_online_new_index_marko_server_entry_marko_componentType = "3/XxqoN+",
      try_online_new_index_marko_server_entry_marko_template = (0,index_js_namespaceObject.t)(try_online_new_index_marko_server_entry_marko_componentType);

/* harmony default export */ const try_online_new_index_marko_server_entry = (try_online_new_index_marko_server_entry_marko_template);



const try_online_new_index_marko_server_entry_crossOriginAttr = new URL(__webpack_require__.p, "file:").protocol === "file:" ? "" : " crossorigin";

function try_online_new_index_marko_server_entry_renderAssets(out) {
  const entries = this.___entries;
  this.___entries = undefined;

  if (entries) {
    const buildName = this.buildName;
    const nonce = this.cspNonce;
    const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : "";
    const written = this.___writtenAssets || (this.___writtenAssets = new Set());
    let scripts = "";
    let styles = "";

    for (const entry of entries) {
      const assets = index_js_manifest.getAssets(entry, buildName);

      if (assets.js) {
        for (const href of assets.js) {
          if (!written.has(href)) {
            written.add(href);
            scripts += `<script src=${JSON.stringify(__webpack_require__.p + href)}${nonceAttr + try_online_new_index_marko_server_entry_crossOriginAttr} async></script>`;
          }
        }
      }

      if (assets.css) {
        for (const href of assets.css) {
          if (!written.has(href)) {
            written.add(href);
            styles += `<link rel="stylesheet" href=${JSON.stringify(__webpack_require__.p + href)}>`;
          }
        }
      }
    }

    out.write(scripts + styles);
  }
}






const try_online_new_index_marko_server_entry_marko_component = {};
try_online_new_index_marko_server_entry_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.global.___renderAssets = try_online_new_index_marko_server_entry_renderAssets;
  (out.global.___entries || (out.global.___entries = [])).push("try-online-new_1yH9");

  render_tag_js_default()((_flush_here_and_after_js_default()), {
    "renderBody": out => {
      out.global.___renderAssets && out.global.___renderAssets(out);
    }
  }, out, _componentDef, "0");

  render_tag_js_default()(try_online_new_index_marko, input, out, _componentDef, "1");

  render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "2");

  render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "3");
}, {
  t: try_online_new_index_marko_server_entry_marko_componentType,
  i: true
}, try_online_new_index_marko_server_entry_marko_component);
;// CONCATENATED MODULE: ./tutorials/tutorials.js
/* harmony default export */ const tutorials = ({
  loops: {
    title: 'Loops',
    description: 'Loops are a way to repeat a block of code multiple times.',
    level: 'beginner',
    time: '5 minutes',
    category: 'basics',
    steps: [{
      title: 'For ... of',
      content: 'The for tag with an of attribute is used to loop through an array.',
      before: [{
        name: "index.marko",
        path: "/components/index.marko",
        content: "<ul>\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n</ul>"
      }],
      after: [{
        name: "index.marko",
        path: "/components/index.marko",
        content: `<ul>\n  <for|text| of=["One", "Two", "Three"]>\n    <li>\${text}</li>\n  </for>\n</ul>`
      }]
    }, {
      title: 'For ... in',
      content: 'The for tag with an in attribute is used to loop through an object\'s keys.',
      before: [{
        name: "index.marko",
        path: "/components/index.marko",
        content: `<ul>\n  <li>One: 1</li>\n  <li>Two: 2</li>\n  <li>Three: 3</li>\n</ul>`
      }],
      after: [{
        name: "index.marko",
        path: "/components/index.marko",
        content: `<ul>\n  <for|key, value| in={"One": 1, "Two": 2, "Three": 3}>\n    <li>\${key}: \${value}</li>\n  </for>\n</ul>`
      }]
    }]
  }
});
;// CONCATENATED MODULE: ./tutorials/index.marko


const tutorials_index_marko_marko_componentType = "HA8RMSpU",
      tutorials_index_marko_marko_template = (0,index_js_namespaceObject.t)(tutorials_index_marko_marko_componentType);

/* harmony default export */ const tutorials_index_marko = (tutorials_index_marko_marko_template);






const tutorials_index_marko_marko_component = {};
tutorials_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  render_tag_js_default()(app_layout_index_marko, {
    "title": "Tutorials",
    "footer": false,
    "discord": false,
    "renderBody": out => {
      out.w("<h1>Tutorials</h1>");

      for (const name in tutorials) {
        const {
          title,
          description,
          level,
          time
        } = tutorials[name];
        const _keyScope = `[${name}]`;
        out.w(`<a${attr_js_default()("href", `/tutorials/${name}`)} class=tutorial-link><span class=tutorial-title>${(0,escape_xml_js_namespaceObject.x)(title)}</span><span class=tutorial-description>${(0,escape_xml_js_namespaceObject.x)(description)}</span><span class=tutorial-footer><span class=tutorial-level>${(0,escape_xml_js_namespaceObject.x)(level)}</span><span class=tutorial-time>${(0,escape_xml_js_namespaceObject.x)(time)}</span></span></a>`);
      }
    }
  }, out, _componentDef, "0");
}, {
  t: tutorials_index_marko_marko_componentType,
  i: true
}, tutorials_index_marko_marko_component);
__webpack_require__(1387)
;// CONCATENATED MODULE: ./tutorials/index.marko?server-entry


const tutorials_index_marko_server_entry_marko_componentType = "0IkGYGmF",
      tutorials_index_marko_server_entry_marko_template = (0,index_js_namespaceObject.t)(tutorials_index_marko_server_entry_marko_componentType);

/* harmony default export */ const tutorials_index_marko_server_entry = (tutorials_index_marko_server_entry_marko_template);



const tutorials_index_marko_server_entry_crossOriginAttr = new URL(__webpack_require__.p, "file:").protocol === "file:" ? "" : " crossorigin";

function tutorials_index_marko_server_entry_renderAssets(out) {
  const entries = this.___entries;
  this.___entries = undefined;

  if (entries) {
    const buildName = this.buildName;
    const nonce = this.cspNonce;
    const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : "";
    const written = this.___writtenAssets || (this.___writtenAssets = new Set());
    let scripts = "";
    let styles = "";

    for (const entry of entries) {
      const assets = index_js_manifest.getAssets(entry, buildName);

      if (assets.js) {
        for (const href of assets.js) {
          if (!written.has(href)) {
            written.add(href);
            scripts += `<script src=${JSON.stringify(__webpack_require__.p + href)}${nonceAttr + tutorials_index_marko_server_entry_crossOriginAttr} async></script>`;
          }
        }
      }

      if (assets.css) {
        for (const href of assets.css) {
          if (!written.has(href)) {
            written.add(href);
            styles += `<link rel="stylesheet" href=${JSON.stringify(__webpack_require__.p + href)}>`;
          }
        }
      }
    }

    out.write(scripts + styles);
  }
}






const tutorials_index_marko_server_entry_marko_component = {};
tutorials_index_marko_server_entry_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.global.___renderAssets = tutorials_index_marko_server_entry_renderAssets;
  (out.global.___entries || (out.global.___entries = [])).push("tutorials_HA8R");

  render_tag_js_default()((_flush_here_and_after_js_default()), {
    "renderBody": out => {
      out.global.___renderAssets && out.global.___renderAssets(out);
    }
  }, out, _componentDef, "0");

  render_tag_js_default()(tutorials_index_marko, input, out, _componentDef, "1");

  render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "2");

  render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "3");
}, {
  t: tutorials_index_marko_server_entry_marko_componentType,
  i: true
}, tutorials_index_marko_server_entry_marko_component);
;// CONCATENATED MODULE: ../components/code-block-marko/index.marko


const code_block_marko_index_marko_marko_componentType = "UUumdCIE",
      code_block_marko_index_marko_marko_template = (0,index_js_namespaceObject.t)(code_block_marko_index_marko_marko_componentType);

/* harmony default export */ const code_block_marko_index_marko = (code_block_marko_index_marko_marko_template);



const code_block_marko_index_marko_marko_component = {};
code_block_marko_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<div class=marko-code-block><button${data_marko_js_default()(out, _componentDef, {
    "onclick": _componentDef.d("click", 'changeSyntax', false)
  })} title="Switch Syntax" class=switch-syntax>\u21C4</button><div class="code html">${to_string_js_default()(input.html)}</div><div class="code concise">${to_string_js_default()(input.concise)}</div></div>`);
}, {
  t: code_block_marko_index_marko_marko_componentType,
  s: true
}, code_block_marko_index_marko_marko_component);
__webpack_require__(7600)
;// CONCATENATED MODULE: ../utils/toc-registry.js
/* harmony default export */ const toc_registry = (new Map());
;// CONCATENATED MODULE: ../components/code-block-marko/index.marko?server-entry


const code_block_marko_index_marko_server_entry_marko_componentType = "JYaEh85d",
      code_block_marko_index_marko_server_entry_marko_template = (0,index_js_namespaceObject.t)(code_block_marko_index_marko_server_entry_marko_componentType);

/* harmony default export */ const code_block_marko_index_marko_server_entry = (code_block_marko_index_marko_server_entry_marko_template);



const code_block_marko_index_marko_server_entry_crossOriginAttr = new URL(__webpack_require__.p, "file:").protocol === "file:" ? "" : " crossorigin";

function code_block_marko_index_marko_server_entry_renderAssets(out) {
  const entries = this.___entries;
  this.___entries = undefined;

  if (entries) {
    const buildName = this.buildName;
    const nonce = this.cspNonce;
    const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : "";
    const written = this.___writtenAssets || (this.___writtenAssets = new Set());
    let scripts = "";
    let styles = "";

    for (const entry of entries) {
      const assets = index_js_manifest.getAssets(entry, buildName);

      if (assets.js) {
        for (const href of assets.js) {
          if (!written.has(href)) {
            written.add(href);
            scripts += `<script src=${JSON.stringify(__webpack_require__.p + href)}${nonceAttr + code_block_marko_index_marko_server_entry_crossOriginAttr} async></script>`;
          }
        }
      }

      if (assets.css) {
        for (const href of assets.css) {
          if (!written.has(href)) {
            written.add(href);
            styles += `<link rel="stylesheet" href=${JSON.stringify(__webpack_require__.p + href)}>`;
          }
        }
      }
    }

    out.write(scripts + styles);
  }
}






const code_block_marko_index_marko_server_entry_marko_component = {};
code_block_marko_index_marko_server_entry_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.global.___renderAssets = code_block_marko_index_marko_server_entry_renderAssets;
  (out.global.___entries || (out.global.___entries = [])).push("code-block-marko_UUum");

  render_tag_js_default()((_flush_here_and_after_js_default()), {
    "renderBody": out => {
      out.global.___renderAssets && out.global.___renderAssets(out);
    }
  }, out, _componentDef, "0");

  render_tag_js_default()(code_block_marko_index_marko, input, out, _componentDef, "1");

  render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "2");

  render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "3");
}, {
  t: code_block_marko_index_marko_server_entry_marko_componentType,
  i: true
}, code_block_marko_index_marko_server_entry_marko_component);
;// CONCATENATED MODULE: ../../examples/examples/color-picker/README.md


const README_marko_componentType = "sXfupxKz",
      README_marko_template = (0,index_js_namespaceObject.t)(README_marko_componentType);

/* harmony default export */ const README = (README_marko_template);

toc_registry.set("../../examples/examples/color-picker/README.md", "<ul class=\"toc toc-level1\"><li><a href=\"#introduction\">Introduction</a></li><li><a href=\"#getting-started\">Getting Started</a></li><li><a href=\"#creating-components\">Creating Components</a><ul class=\"toc toc-level2\"><li><a href=\"#child-components\">Child Components</a></li></ul></li><li><a href=\"#importing-modules\">Importing Modules</a></li><li><a href=\"#testing\">Testing</a></li><li><a href=\"#conclusion\">Conclusion</a></li><li><a href=\"#additional-resources\">Additional Resources</a></li></ul>");
const title = "Building a Color Picker Component";



const README_marko_component = {};
README_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=building-a-color-picker-component><a name=building-a-color-picker-component class=anchor href=#building-a-color-picker-component><span class=header-link></span></a>Building a Color Picker Component</h1><p align=center><img width=100% src=https://user-images.githubusercontent.com/3771924/26844826-b2334098-4ac2-11e7-81ac-ca2280ef3bbd.png></p><h2 id=introduction><a name=introduction class=anchor href=#introduction><span class=header-link></span></a>Introduction</h2><p>Marko makes building UI components extremely easy and fun! Today we are going to build a color picker component from scratch. We are going to learn how to:</p><ul><li>Create a project using <a href=https://github.com/marko-js/cli>marko-cli</a></li><li>Create a basic and customizable color picker component</li></ul><p>Our final goal for today is create this component:</p><p align=center><img src=https://image.ibb.co/gcmLFk/color_picker_complete.png></p><p><a href=/try-online/?example=Color+Picker>Try Online</a></p><h2 id=getting-started><a name=getting-started class=anchor href=#getting-started><span class=header-link></span></a>Getting Started</h2><p>The quickest way to get up and running with Marko is to use the <a href=https://github.com/marko-js/cli/blob/master/packages/create/README.md><code>@marko/create</code> cli</a>.</p><p>For this tutorial lets tell <code>@marko/create</code> to give us a basic boilerplate by running the following command:</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npx @marko/create --template basic --name color-picker-tutorial\n</pre><p>Once the create command has finished, we can move into our new directory and get a development server up and running like so:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>cd</span> ./color-picker-tutorial\nnpm run dev\n</pre><p>This should open your default browser automatically.</p><h2 id=creating-components><a name=creating-components class=anchor href=#creating-components><span class=header-link></span></a>Creating Components</h2><blockquote class=null><p>NOTE: For a more detailed documentation of components, please see the <a href=/docs/class-components/ >markojs.com components documentation</a></p></blockquote><p>In our new project, components are located in the <code>color-picker-tutorial/src/components/</code> directory. Next we need to create our component in the <code>components/</code> directory, which should look like this:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>color-picker-tutorial/\n  src/\n    components/\n      color-picker/\n        index.marko\n</pre><p>Marko also supports creating components using the file name. For example, the following is a valid directory structure:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>color-picker-tutorial/\n  src/  \n    components/\n      color-picker.marko\n</pre><p>Creating nested component directories is not required, but we recommend isolating most components in their own directories. Many components will contain additional files and tests that live alongside the component. Too many components living in a single directory will become very untidy and difficult to manage.</p><p>Let&#39;s begin by adding some initial component code to the <code>color-picker</code>.</p><p><strong>components/color-picker/index.marko</strong></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>ul</span>>\n  &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>colors</span>>\n    &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{color: <span style=color:#FFFFFF>color</span>}>\n      <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>\n    &lt;/<span style=color:#FF4185>li</span>>\n  &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>ul</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>ul</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>colors</span>\n    <span style=color:#FF4185>li</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{ color: <span style=color:#FFFFFF>color</span> } -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "44");

  out.w("<p><code>input</code> in a Marko component is the input data that is passed to the component when it is being rendered. Let&#39;s modify our <code>index</code> route to demonstrate how a parent component can use our <code>color-picker</code>:</p><p><strong>src/pages/index.marko</strong></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>html</span>>\n  &lt;<span style=color:#FF4185>head</span>>\n    &lt;<span style=color:#FF4185>title</span>>Welcome | Marko Demo&lt;/<span style=color:#FF4185>title</span>>\n  &lt;/<span style=color:#FF4185>head</span>>\n  &lt;<span style=color:#FF4185>body</span>>\n    &lt;<span style=color:#FF4185>h1</span>>Welcome to Marko!&lt;/<span style=color:#FF4185>h1</span>>\n    &lt;<span style=color:#FF4185>color-picker</span> <span style=color:#A6E22E>colors</span><span style=color:#FFFFFF>=</span>[\n      <span style=color:#FFF066>'#333745'</span>,\n      <span style=color:#FFF066>'#E63462'</span>,\n      <span style=color:#FFF066>'#FE5F55'</span>,\n      <span style=color:#FFF066>'#C7EFCF'</span>,\n      <span style=color:#FFF066>'#EEF5DB'</span>,\n      <span style=color:#FFF066>'#00B4A6'</span>,\n      <span style=color:#FFF066>'#007DB6'</span>,\n      <span style=color:#FFF066>'#FFE972'</span>,\n      <span style=color:#FFF066>'#9C7671'</span>,\n      <span style=color:#FFF066>'#0C192B'</span>\n    ]/>\n  &lt;/<span style=color:#FF4185>body</span>>\n&lt;/<span style=color:#FF4185>html</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>html</span>\n  <span style=color:#FF4185>head</span>\n    <span style=color:#FF4185>title</span> -- Welcome | Marko Demo\n  <span style=color:#FF4185>body</span>\n    <span style=color:#FF4185>h1</span> -- Welcome to Marko!\n    <span style=color:#FF4185>color-picker</span> <span style=color:#A6E22E>colors</span><span style=color:#FFFFFF>=</span>[\n      <span style=color:#FFF066>\"#333745\"</span>,\n      <span style=color:#FFF066>\"#E63462\"</span>,\n      <span style=color:#FFF066>\"#FE5F55\"</span>,\n      <span style=color:#FFF066>\"#C7EFCF\"</span>,\n      <span style=color:#FFF066>\"#EEF5DB\"</span>,\n      <span style=color:#FFF066>\"#00B4A6\"</span>,\n      <span style=color:#FFF066>\"#007DB6\"</span>,\n      <span style=color:#FFF066>\"#FFE972\"</span>,\n      <span style=color:#FFF066>\"#9C7671\"</span>,\n      <span style=color:#FFF066>\"#0C192B\"</span>,\n    <span style=color:#F8F8F0;background-color:#FF4185>]</span>\n</pre>"
  }, out, _componentDef, "51");

  out.w("<p>Our dev server will indicate that the changes are being compiled and our browser will refresh for us once the process completes. The page should now display an unordered list with list items for each of the colors that we passed as <code>input</code> to our component.</p><p align=center><img src=https://user-images.githubusercontent.com/3771924/26837085-83315144-4aaa-11e7-8a08-2863a6448134.png></p><h3 id=child-components><a name=child-components class=anchor href=#child-components><span class=header-link></span></a>Child Components</h3><p>We&#39;ve created our first component! This component will eventually have nested components. When creating components, it&#39;s strongly recommended to consider how components can be broken down into multiple components. Each component can then be independently developed and tested.</p><p>Let&#39;s split our component into the following components:</p><ul><li><code>&lt;color-picker-header&gt;</code>: The header will have the selected background color from the color picker and show the selected color&#39;s hex value</li></ul><p align=center><img src=https://image.ibb.co/kybsT5/color_picker_header.png></p><ul><li><code>&lt;color-picker-footer&gt;</code>: The footer will contain a palette of colors and an input field for changing the hex value of the header</li></ul><p align=center><img src=https://image.ibb.co/kjiT1Q/color_picker_footer.png></p><p><code>&lt;color-picker-selection&gt;</code>: The selection component is responsible for displaying an individual color box and handling the associated click events</p><p align=center><img src=https://image.ibb.co/nRvxvk/color_picker_selection.png></p><p>Marko automatically registers all components in nested <code>components/</code> directories. Our new directory structure should look like this:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>components/\n  color-picker/\n    index.marko\n  color-picker-footer/\n    index.marko\n  color-picker-header/\n    index.marko\n  color-picker-selection/\n    index.marko\n</pre><p>Let&#39;s start with with the <code>&lt;color-picker-header&gt;</code> component. We&#39;ve already determined that the header should have a specific background color and display the value of that background color in text. The color to display should be passed in as part of the input.</p><p><strong>src/components/color-picker-header/index.marko</strong></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>// Inline styles!</span>\n<span style=color:#66D9EF>style</span> {\n  <span style=color:#A6E22E>.color-picker-header</span> {\n    <span style=color:#66D9EF>width</span>: <span style=color:#AE81FF>200</span><span style=color:#FF4185>px</span>;\n    <span style=color:#66D9EF>height</span>: <span style=color:#AE81FF>100</span><span style=color:#FF4185>px</span>;\n    <span style=color:#66D9EF>border-radius</span>: <span style=color:#AE81FF>20</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>20</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span> <span style=color:#AE81FF>0</span>;\n    <span style=color:#66D9EF>font</span>: <span style=color:#AE81FF>30</span><span style=color:#FF4185>px</span> <span style=color:#66D9EF>Arial</span>;\n    <span style=color:#66D9EF>display</span>: <span style=color:#66D9EF>flex</span>;\n    <span style=color:#66D9EF>flex-direction</span>: <span style=color:#66D9EF>column</span>;\n    <span style=color:#66D9EF>text-align</span>: <span style=color:#66D9EF>center</span>;\n    <span style=color:#66D9EF>color</span>: <span style=color:#66D9EF>white</span>;\n  }\n  <span style=color:#A6E22E>.color-picker-header</span> <span style=color:#FF4185>></span> <span style=color:#FF4185>p</span> {\n    <span style=color:#66D9EF>padding-top</span>: <span style=color:#AE81FF>1.15</span><span style=color:#FF4185>em</span>;\n    <span style=color:#66D9EF>margin</span>: <span style=color:#AE81FF>0</span>;\n  }\n}\n\n<span style=color:#8F8F9E>// In Marko, we immediately start writing a single JavaScript statement by using</span>\n<span style=color:#8F8F9E>// `$`. For multiple JavaScript statements, use `$ { /* JavaScript here */ }</span>\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>color</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>color</span>;\n\n<span style=color:#8F8F9E>&lt;!-- Our markup! --></span>\n&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.color-picker-header</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{backgroundColor: <span style=color:#FFFFFF>color</span>}>\n  &lt;<span style=color:#FF4185>p</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>p</span>>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Inline styles!--></span>\n<span style=color:#66D9EF>style</span> {\n  <span style=color:#A6E22E>.color-picker-header</span> {\n    <span style=color:#66D9EF>width</span>: <span style=color:#AE81FF>200</span><span style=color:#FF4185>px</span>;\n    <span style=color:#66D9EF>height</span>: <span style=color:#AE81FF>100</span><span style=color:#FF4185>px</span>;\n    <span style=color:#66D9EF>border-radius</span>: <span style=color:#AE81FF>20</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>20</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span> <span style=color:#AE81FF>0</span>;\n    <span style=color:#66D9EF>font</span>: <span style=color:#AE81FF>30</span><span style=color:#FF4185>px</span> <span style=color:#66D9EF>Arial</span>;\n    <span style=color:#66D9EF>display</span>: <span style=color:#66D9EF>flex</span>;\n    <span style=color:#66D9EF>flex-direction</span>: <span style=color:#66D9EF>column</span>;\n    <span style=color:#66D9EF>text-align</span>: <span style=color:#66D9EF>center</span>;\n    <span style=color:#66D9EF>color</span>: <span style=color:#66D9EF>white</span>;\n  }\n  <span style=color:#A6E22E>.color-picker-header</span> <span style=color:#FF4185>></span> <span style=color:#FF4185>p</span> {\n    <span style=color:#66D9EF>padding-top</span>: <span style=color:#AE81FF>1.15</span><span style=color:#FF4185>em</span>;\n    <span style=color:#66D9EF>margin</span>: <span style=color:#AE81FF>0</span>;\n  }\n}\n<span style=color:#8F8F9E>&lt;!-- In Marko, we immediately start writing a single JavaScript statement by using--></span>\n<span style=color:#8F8F9E>&lt;!-- `$`. For multiple JavaScript statements, use `$ { /* JavaScript here */ }--></span>\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>color</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>color</span>;\n<span style=color:#8F8F9E>&lt;!-- Our markup! --></span>\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>.color-picker-header</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{ backgroundColor: <span style=color:#FFFFFF>color</span> }\n  <span style=color:#FF4185>p</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "81");

  out.w("<p>That&#39;s it! Our <code>&lt;color-picker-header&gt;</code> is complete with styles and component logic. This component is small enough to be contained in a single file, but as components grow larger, we should split out the markup, component logic, and styling. We will see an example of this soon.</p><p>Now let&#39;s look at what&#39;s going on. Marko has several <a href=/docs/class-components/#lifecycle-events>lifecycle methods</a> including <code>onInput</code>, which contains a single parameter <code>input</code>. As we discussed before <code>input</code> is the data that is passed to a Marko component upon initialization. We can use inline javascript easily with <code>&#36;</code> (for a single statement) or <code>&#36; { }</code> (for multiple statements), which is great for creating variables that can be accessed inside of your template. Additionally, single file components support inline styles, so the component can truly be contained as a single unit if it&#39;s small enough.</p><p>Now we need to revisit our parent component and add the <code>&lt;color-picker-header&gt;</code> tag to it, so it will be rendered.</p><p><strong>src/components/color-picker/index.marko</strong></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onInput</span>(<span style=color:#FFAC4D>input</span>) {\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>colors</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>colors</span>;\n\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      selectedColor: <span style=color:#FFFFFF>colors</span>[<span style=color:#AE81FF>0</span>],\n      <span style=color:#FFFFFF>colors</span>\n    };\n  }\n}\n\n&lt;<span style=color:#FF4185>div</span>>\n  &lt;<span style=color:#FF4185>color-picker-header</span> <span style=color:#A6E22E>color</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>selectedColor</span>/>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onInput</span>(<span style=color:#FFAC4D>input</span>) {\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>colors</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>colors</span>;\n\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      selectedColor: <span style=color:#FFFFFF>colors</span>[<span style=color:#AE81FF>0</span>],\n      <span style=color:#FFFFFF>colors</span>,\n    };\n  }\n}\n\n<span style=color:#FF4185>div</span>\n  <span style=color:#FF4185>color-picker-header</span> <span style=color:#A6E22E>color</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>selectedColor</span>\n</pre>"
  }, out, _componentDef, "95");

  out.w("<p>Marko will automatically watch the <code>state</code> object for changes using getters and setters, and if the state changes then the UI component will be re-rendered and the DOM will automatically be updated.</p><p>We should now see the rendered <code>&lt;color-picker-header&gt;</code> with a gray background like so:</p><p align=center><img src=https://image.ibb.co/kybsT5/color_picker_header.png></p><p>Now let&#39;s create the <code>&lt;color-picker-selection&gt;</code> component, which will be used inside of the <code>&lt;color-picker-footer&gt;</code>:</p><p><strong>src/components/color-picker-selection/index.marko</strong></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>handleColorSelected</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'color-selected'</span>);\n  }\n}\n\n<span style=color:#66D9EF>style</span> {\n  <span style=color:#A6E22E>.color-picker-selection</span> {\n    <span style=color:#66D9EF>width</span>: <span style=color:#AE81FF>25</span><span style=color:#FF4185>px</span>;\n    <span style=color:#66D9EF>height</span>: <span style=color:#AE81FF>25</span><span style=color:#FF4185>px</span>;\n    <span style=color:#66D9EF>border-radius</span>: <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span>;\n    <span style=color:#66D9EF>display</span>: <span style=color:#66D9EF>flex</span>;\n    <span style=color:#66D9EF>flex-direction</span>: <span style=color:#66D9EF>column</span>;\n    <span style=color:#66D9EF>margin</span>: <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span>;\n    <span style=color:#66D9EF>float</span>: <span style=color:#66D9EF>left</span>;\n  }\n}\n\n&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.color-picker-selection</span>\n  <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'handleColorSelected'</span>)\n  <span style=color:#66D9EF>on-touchstart</span>(<span style=color:#FFF066>'handleColorSelected'</span>)\n  <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{\n    backgroundColor: <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>color</span>\n  }/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>handleColorSelected</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>\"color-selected\"</span>);\n  }\n}\n<span style=color:#66D9EF>style</span> {\n  <span style=color:#A6E22E>.color-picker-selection</span> {\n    <span style=color:#66D9EF>width</span>: <span style=color:#AE81FF>25</span><span style=color:#FF4185>px</span>;\n    <span style=color:#66D9EF>height</span>: <span style=color:#AE81FF>25</span><span style=color:#FF4185>px</span>;\n    <span style=color:#66D9EF>border-radius</span>: <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span>;\n    <span style=color:#66D9EF>display</span>: <span style=color:#66D9EF>flex</span>;\n    <span style=color:#66D9EF>flex-direction</span>: <span style=color:#66D9EF>column</span>;\n    <span style=color:#66D9EF>margin</span>: <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span>;\n    <span style=color:#66D9EF>float</span>: <span style=color:#66D9EF>left</span>;\n  }\n}\n\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>.color-picker-selection</span> [\n  <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"handleColorSelected\"</span>)\n  <span style=color:#66D9EF>on-touchstart</span>(<span style=color:#FFF066>\"handleColorSelected\"</span>)\n  <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{\n    backgroundColor: <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>color</span>,\n  }\n]\n</pre>"
  }, out, _componentDef, "107");

  out.w("<p>In this component, we&#39;ve introduced <code>on-click</code> and <code>on-touchstart</code> listeners and a single event handler function. <a href=/docs/events/ >Marko components inherit from EventEmitter</a>. When this color is selected, it will emit a <code>click</code> event and get handled by the <code>handleColorSelected</code> function. The handler then emits a <code>color-selected</code> event to be handled by its parent. We will eventually write code to relay this information back to the <code>&lt;color-picker-header&gt;</code>, so its background color and text can be changed.</p><p>We are ready to create our final component, <code>&lt;color-picker-footer&gt;</code>. This component is going to contain a bit more logic than the other components, so let&#39;s split it out into multiple files:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>components/\n  color-picker/\n    components/\n      color-picker-footer/\n        component.js\n        index.marko\n        style.css\n      ...\n    ...\n</pre><p><strong>src/components/color-picker-footer/index.marko</strong></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>colors</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>colors</span>;\n\n&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.color-picker-footer</span>>\n  &lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.color-picker-selection-container</span>>\n    &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>>\n      &lt;<span style=color:#FF4185>div</span>>\n<span style=color:#8F8F9E>        &lt;!--</span>\n<span style=color:#8F8F9E>        Listen for the `color-selected` event emitted from the</span>\n<span style=color:#8F8F9E>        &lt;color-picker-selection> component and handle it in this</span>\n<span style=color:#8F8F9E>        component's `handleColorSelected` method.</span>\n<span style=color:#8F8F9E>        NOTE: We pass along the `color` to the event handler method</span>\n<span style=color:#8F8F9E>        --></span>\n        &lt;<span style=color:#FF4185>color-picker-selection</span>\n          <span style=color:#A6E22E>color</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>color</span>\n          <span style=color:#66D9EF>on-color-selected</span>(<span style=color:#FFF066>'handleColorSelected'</span>, <span style=color:#FFFFFF>color</span>)/>\n      &lt;/<span style=color:#FF4185>div</span>>\n    &lt;/<span style=color:#FF4185>for</span>>\n    &lt;<span style=color:#FF4185>input</span>\n      <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"hexInput\"</span>\n      <span style=color:#A6E22E>placeholder</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Hex value\"</span>\n      <span style=color:#66D9EF>on-input</span>(<span style=color:#FFF066>'handleHexInput'</span>)/>\n  &lt;/<span style=color:#FF4185>div</span>>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>colors</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>colors</span>;\n\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>.color-picker-footer</span>\n  <span style=color:#FF4185>div</span><span style=color:#A6E22E>.color-picker-selection-container</span>\n    <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>\n      <span style=color:#FF4185>div</span>\n<span style=color:#8F8F9E>        &lt;!--</span>\n<span style=color:#8F8F9E>        Listen for the `color-selected` event emitted from the</span>\n<span style=color:#8F8F9E>        &lt;color-picker-selection> component and handle it in this</span>\n<span style=color:#8F8F9E>        component's `handleColorSelected` method.</span>\n<span style=color:#8F8F9E>        NOTE: We pass along the `color` to the event handler method</span>\n<span style=color:#8F8F9E>        --></span>\n        <span style=color:#FF4185>color-picker-selection</span> [\n          <span style=color:#A6E22E>color</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>color</span>\n          <span style=color:#66D9EF>on-color-selected</span>(<span style=color:#FFF066>\"handleColorSelected\"</span>, <span style=color:#FFFFFF>color</span>)\n        <span style=color:#F8F8F0;background-color:#FF4185>]</span>\n    <span style=color:#FF4185>input</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"hexInput\"</span> <span style=color:#A6E22E>placeholder</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Hex value\"</span> <span style=color:#66D9EF>on-input</span>(<span style=color:#FFF066>\"handleHexInput\"</span>)\n</pre>"
  }, out, _componentDef, "120");

  out.w("<p>In the <code>&lt;color-picker-footer&gt;</code> component we need to iterate over each color that was passed as input in <code>colors</code>. For each color, we create a <code>&lt;color-picker-selection&gt;</code> component and pass the color using the <code>color</code> attribute. Additionally, we are listening for the <code>color-selected</code> event emitted from the <code>&lt;color-picker-selection&gt;</code> component and handling it in our own <code>handleColorSelected</code> method. We provide the <code>color</code> as the second argument so that it will be available to the event handler method. We also have added an <code>input</code> field and a <code>on-input</code> listener, which will trigger a change to the selected color when the user manually enters a hex color value.</p><p><strong>src/components/color-picker-footer/component.js</strong></p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>module</span>.<span style=color:#66D9EF>exports</span> <span style=color:#FFFFFF>=</span> <span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>handleColorSelected</span> (<span style=color:#FFAC4D>color</span>) {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'color-selected'</span>, <span style=color:#FFFFFF>color</span>);\n  }\n  <span style=color:#A6E22E>handleHexInput</span> () {\n    <span style=color:#66D9EF>let</span> <span style=color:#FFFFFF>hexInput</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>getEl</span>(<span style=color:#FFF066>'hexInput'</span>).<span style=color:#FFFFFF>value</span>;\n\n    <span style=color:#FF4185>if</span> (<span style=color:#FF4185>!</span><span style=color:#FFFFFF>hexInput</span>.<span style=color:#A6E22E>startsWith</span>(<span style=color:#FFF066>'#'</span>)) {\n      <span style=color:#FFFFFF>hexInput</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>'#'</span> <span style=color:#FF4185>+</span> <span style=color:#FFFFFF>hexInput</span>;\n    }\n\n    <span style=color:#FF4185>if</span> (<span style=color:#FF4185>!</span><span style=color:#A6E22E>isValidHexValue</span>(<span style=color:#FFFFFF>hexInput</span>)) {\n      <span style=color:#FFFFFF>hexInput</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>colors</span>[<span style=color:#AE81FF>0</span>];\n    }\n\n    <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'color-selected'</span>, <span style=color:#FFFFFF>hexInput</span>);\n  }\n};\n\n<span style=color:#66D9EF>function</span> <span style=color:#A6E22E>isValidHexValue</span> (<span style=color:#FFAC4D>hexValue</span>) {\n  <span style=color:#FF4185>return</span><span style=color:#FFF066> /</span><span style=color:#FF4185>^</span><span style=color:#FFF066>#</span><span style=color:#AE81FF>[0-9A-F]</span><span style=color:#FF4185>{6}$</span><span style=color:#FFF066>/</span><span style=color:#FF4185>i</span>.<span style=color:#A6E22E>test</span>(<span style=color:#FFFFFF>hexValue</span>);\n}\n</pre><p>When the component logic is split out from the <code>index.marko</code> it needs to be exported like a standard JavaScript module. We have an <code>handleColorSelected</code> event handler, which is going to emit the event back up to the parent <code>&lt;color-picker-header&gt;</code> component. We also have an <code>handleHexInput</code> event handler with some basic validation logic. <code>handleHexInput</code> also emits <code>color-selected</code>, which will be handled the same way as the <code>color-selected</code> event when it reaches <code>&lt;color-picker-header&gt;</code>.</p><p><strong>src/components/color-picker-footer/style.css</strong></p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#A6E22E>.color-picker-footer</span> {\n  <span style=color:#66D9EF>width</span>: <span style=color:#AE81FF>200</span><span style=color:#FF4185>px</span>;\n  <span style=color:#66D9EF>height</span>: <span style=color:#AE81FF>100</span><span style=color:#FF4185>px</span>;\n  <span style=color:#66D9EF>border-radius</span>: <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>20</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>20</span><span style=color:#FF4185>px</span>;\n  <span style=color:#66D9EF>font</span>: <span style=color:#AE81FF>30</span><span style=color:#FF4185>px</span> <span style=color:#66D9EF>Arial</span>;\n  <span style=color:#66D9EF>display</span>: <span style=color:#66D9EF>flex</span>;\n  <span style=color:#66D9EF>flex-direction</span>: <span style=color:#66D9EF>column</span>;\n  <span style=color:#66D9EF>text-align</span>: <span style=color:#66D9EF>center</span>;\n  <span style=color:#66D9EF>color</span>: <span style=color:#66D9EF>white</span>;\n  <span style=color:#66D9EF>box-shadow</span>: <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>3</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>#888888</span>;\n}\n<span style=color:#A6E22E>.color-picker-selection-container</span> {\n  <span style=color:#66D9EF>width</span>: <span style=color:#AE81FF>75</span><span style=color:#FF4185>%</span>;\n  <span style=color:#66D9EF>margin</span>: <span style=color:#AE81FF>5</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>20</span><span style=color:#FF4185>px</span>;\n}\n<span style=color:#A6E22E>.color-picker-selection-container</span> <span style=color:#FF4185>input</span> {\n  <span style=color:#66D9EF>margin-top</span>: <span style=color:#AE81FF>8</span><span style=color:#FF4185>px</span>;\n  <span style=color:#66D9EF>border-radius</span>: <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span>;\n  <span style=color:#66D9EF>border-width</span>: <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>1</span><span style=color:#FF4185>px</span> <span style=color:#AE81FF>0</span><span style=color:#FF4185>px</span>;\n  <span style=color:#66D9EF>outline</span>: <span style=color:#66D9EF>none</span>;\n  <span style=color:#66D9EF>color</span>: <span style=color:#AE81FF>#A9A9A9</span>;\n}\n</pre><p>We can now finalize our component! Let&#39;s revisit the parent <code>&lt;color-picker&gt;</code> component and add the <code>&lt;color-picker-footer&gt;</code>:</p><p><strong>src/components/color-picker/index.marko</strong></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onInput</span>(<span style=color:#FFAC4D>input</span>) {\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>colors</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>colors</span>;\n\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      selectedColor: <span style=color:#FFFFFF>colors</span>[<span style=color:#AE81FF>0</span>],\n      <span style=color:#FFFFFF>colors</span>\n    };\n  }\n\n  <span style=color:#A6E22E>handleColorSelected</span>(<span style=color:#FFAC4D>color</span>) {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>selectedColor</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>color</span>;\n  }\n}\n\n&lt;<span style=color:#FF4185>div</span>>\n  &lt;<span style=color:#FF4185>color-picker-header</span> <span style=color:#A6E22E>color</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>selectedColor</span>/>\n  &lt;<span style=color:#FF4185>color-picker-footer</span> <span style=color:#A6E22E>colors</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>colors</span> <span style=color:#66D9EF>on-color-selected</span>(<span style=color:#FFF066>'handleColorSelected'</span>)/>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onInput</span>(<span style=color:#FFAC4D>input</span>) {\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>colors</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>colors</span>;\n\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      selectedColor: <span style=color:#FFFFFF>colors</span>[<span style=color:#AE81FF>0</span>],\n      <span style=color:#FFFFFF>colors</span>,\n    };\n  }\n\n  <span style=color:#A6E22E>handleColorSelected</span>(<span style=color:#FFAC4D>color</span>) {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>selectedColor</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>color</span>;\n  }\n}\n\n<span style=color:#FF4185>div</span>\n  <span style=color:#FF4185>color-picker-header</span> <span style=color:#A6E22E>color</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>selectedColor</span>\n  <span style=color:#FF4185>color-picker-footer</span> [\n    <span style=color:#A6E22E>colors</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>colors</span>\n    <span style=color:#66D9EF>on-color-selected</span>(<span style=color:#FFF066>\"handleColorSelected\"</span>)\n  <span style=color:#F8F8F0;background-color:#FF4185>]</span>\n</pre>"
  }, out, _componentDef, "150");

  out.w("<p>Finally, we&#39;ve added our <code>&lt;color-picker-footer&gt;</code>, passed the <code>state.colors</code> as <code>input</code> to it, added a <code>handleColorSelected</code> event handler for the <code>color-selected</code> event emitted from <code>&lt;color-picker-footer&gt;</code>. When we handle this event, we update the <code>state</code> of the <code>&lt;color-picker&gt;</code> component, which is passed to the <code>&lt;color-picker-header&gt;</code>.</p><p>Congratulations! You have finished your first fully reactive Marko UI component!</p><p>Our finished product:</p><p align=center><img src=https://image.ibb.co/gcmLFk/color_picker_complete.png></p><hr><p>Now let&#39;s talk about some additional topics that will turn you into a Marko pro!</p><h2 id=importing-modules><a name=importing-modules class=anchor href=#importing-modules><span class=header-link></span></a>Importing Modules</h2><p>Marko also supports importing modules. We can easily import a module using the familiar ES2015 <code>import</code> syntax for single file components.</p><p>Let&#39;s create a new helper module for generating the default colors:</p><p><strong>src/util/getDefaultColors.js</strong></p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>module</span>.<span style=color:#66D9EF>exports</span> <span style=color:#FFFFFF>=</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>getDefaultColors</span> () {\n  <span style=color:#FF4185>return</span> [\n    <span style=color:#FFF066>\"#1ABC9C\"</span>,\n    <span style=color:#FFF066>\"#2ECC71\"</span>,\n    <span style=color:#FFF066>\"#3498DB\"</span>,\n    <span style=color:#FFF066>\"#9B59B6\"</span>,\n    <span style=color:#FFF066>\"#34495E\"</span>,\n    <span style=color:#FFF066>\"#16A085\"</span>,\n    <span style=color:#FFF066>\"#27AE60\"</span>,\n    <span style=color:#FFF066>\"#2980B9\"</span>,\n    <span style=color:#FFF066>\"#8E44AD\"</span>,\n    <span style=color:#FFF066>\"#2C3E50\"</span>\n  ];\n};\n</pre><p>We can import our helper module into the <code>color-picker</code> and use the generated colors as the default when none are passed as part of the <code>input</code>:</p><p><strong>components/color-picker/index.marko</strong></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>getDefaultColors</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>'../../util/getDefaultColors'</span>;\n\n<span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onInput</span>(<span style=color:#FFAC4D>input</span>) {\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>colors</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>colors</span> <span style=color:#FF4185>||</span> <span style=color:#A6E22E>getDefaultColors</span>();\n\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      selectedColor: <span style=color:#FFFFFF>colors</span>[<span style=color:#AE81FF>0</span>],\n      <span style=color:#FFFFFF>colors</span>\n    };\n  }\n\n  <span style=color:#A6E22E>handleColorSelected</span>(<span style=color:#FFAC4D>color</span>) {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>selectedColor</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>color</span>;\n  }\n}\n\n&lt;<span style=color:#FF4185>div</span>>\n  &lt;<span style=color:#FF4185>color-picker-header</span> <span style=color:#A6E22E>color</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>selectedColor</span>/>\n  &lt;<span style=color:#FF4185>color-picker-footer</span> <span style=color:#A6E22E>colors</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>colors</span> <span style=color:#66D9EF>on-color-selected</span>(<span style=color:#FFF066>'handleColorSelected'</span>)/>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>getDefaultColors</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"../../util/getDefaultColors\"</span>;\n<span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onInput</span>(<span style=color:#FFAC4D>input</span>) {\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>colors</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>colors</span> <span style=color:#FF4185>||</span> <span style=color:#A6E22E>getDefaultColors</span>();\n\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      selectedColor: <span style=color:#FFFFFF>colors</span>[<span style=color:#AE81FF>0</span>],\n      <span style=color:#FFFFFF>colors</span>,\n    };\n  }\n\n  <span style=color:#A6E22E>handleColorSelected</span>(<span style=color:#FFAC4D>color</span>) {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>selectedColor</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>color</span>;\n  }\n}\n\n<span style=color:#FF4185>div</span>\n  <span style=color:#FF4185>color-picker-header</span> <span style=color:#A6E22E>color</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>selectedColor</span>\n  <span style=color:#FF4185>color-picker-footer</span> [\n    <span style=color:#A6E22E>colors</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>colors</span>\n    <span style=color:#66D9EF>on-color-selected</span>(<span style=color:#FFF066>\"handleColorSelected\"</span>)\n  <span style=color:#F8F8F0;background-color:#FF4185>]</span>\n</pre>"
  }, out, _componentDef, "180");

  out.w("<p>If we do not pass <code>colors</code> to the <code>&lt;color-picker&gt;</code>, the colors will default to the colors obtained our <code>getDefaultColors</code> helper.</p><p><a href=/try-online/?example=Color+Picker>Try Online: marko-color-picker</a></p><h2 id=testing><a name=testing class=anchor href=#testing><span class=header-link></span></a>Testing</h2><p>For testing Marko components we recommend using <a href=https://github.com/marko-js/testing-library>Marko Testing Library</a></p><h2 id=conclusion><a name=conclusion class=anchor href=#conclusion><span class=header-link></span></a>Conclusion</h2><p>Developing Marko UI components is fun and easy! As you&#39;re developing components, you should consider how a component can be split into multiple components. This makes developing, managing, and testing components significantly easier.</p><p>Marko gives you the tools to easily develop awesome UI components. Get started today!</p><h2 id=additional-resources><a name=additional-resources class=anchor href=#additional-resources><span class=header-link></span></a>Additional Resources</h2><ul><li><a href=https://github.com/marko-js/examples/tree/master/examples/color-picker>GitHub: marko-color-picker</a></li><li><a href=/try-online/?example=Color+Picker>Try Online: Color Picker</a></li><li><a href=https://github.com/marko-js/cli>marko-cli</a></li><li><a href=https://github.com/marko-js/testing-library>Marko Testing Library</a></li></ul><hr><blockquote class=null><p>Special thanks to <a href=https://github.com/newyork-anthonyng>Anthony Ng</a> for helping with this tutorial!</p></blockquote>");
}, {
  t: README_marko_componentType,
  i: true
}, README_marko_component);
__webpack_require__(908)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/10-awesome-marko-features.md


const _10_awesome_marko_features_marko_componentType = "zcKdZiRa",
      _10_awesome_marko_features_marko_template = (0,index_js_namespaceObject.t)(_10_awesome_marko_features_marko_componentType);

/* harmony default export */ const _10_awesome_marko_features = (_10_awesome_marko_features_marko_template);

toc_registry.set("../../node_modules/marko/docs/10-awesome-marko-features.md", "<ul class=\"toc toc-level1\"><li><ul class=\"toc toc-level2\"><li><ul class=\"toc toc-level3\"><li><a href=\"#1-shorthand-attributes\">1. Shorthand Attributes</a></li><li><a href=\"#2-all-attribute-values-are-just-javascript\">2. All attribute values are Just JavaScript™</a></li><li><a href=\"#3-isomorphic-ui-components-made-easy\">3. Isomorphic UI components made easy</a></li><li><a href=\"#4-concise-syntax\">4. Concise syntax</a></li><li><a href=\"#5-import-javascript-modules\">5. Import JavaScript modules</a></li><li><a href=\"#6-no-need-to-import-custom-tags-its-a-good-thing-trust-me\">6. No need to import custom tags</a></li><li><a href=\"#7-use-javascript-to-set-css-classes-and-styles\">7. Use JavaScript to set CSS classes and styles</a></li><li><a href=\"#8-inline-javascript-statements\">8. Inline JavaScript Statements</a></li><li><a href=\"#9-async-rendering-with-the-await-tag\">9. Async rendering with the &lt;await&gt; tag</a></li><li><a href=\"#10-server-side-rendering-is-easy\">10. Server side rendering is easy</a></li><li><a href=\"#bonus-friendly-compile-time-errors\">Bonus: Friendly compile-time errors</a></li></ul></li></ul></li></ul>");
const _10_awesome_marko_features_title = "10 Awesome Marko Features";



const _10_awesome_marko_features_marko_component = {};
_10_awesome_marko_features_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<a href=#><img src=https://cdn-images-1.medium.com/max/1000/1*Cmy6UutD5-ogL8dr1DySMQ.png alt=\"Marko logo\" width=100%></a><br><blockquote class=null><p>This article was published in August 2017. You can find the original <a href=https://medium.com/@austinkelleher/10-awesome-marko-features-afba9d094d42>&quot;10 Awesome Marko Features&quot; article here</a>!</p></blockquote><h1 id=10-awesome-marko-features><a name=10-awesome-marko-features class=anchor href=#10-awesome-marko-features><span class=header-link></span></a>10 Awesome Marko Features</h1><p><a href=/ >Marko</a> is a friendly and super fast UI library that makes building web apps<br> fun! In celebration of rapidly approaching <a href=https://github.com/marko-js/marko>5,000 stars on GitHub</a> (the ultimate open source vanity metric), here are 10 features that will make you more productive in no particular order...</p><h4 id=1-shorthand-attributes><a name=1-shorthand-attributes class=anchor href=#1-shorthand-attributes><span class=header-link></span></a>1. Shorthand Attributes</h4><p>Tired of constantly typing out <code>class</code> and <code>id</code> attributes? No need with Marko. Simply utilize the shorthand based on CSS selectors:</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>style</span> {\n  <span style=color:#A6E22E>.count</span> {\n    <span style=color:#66D9EF>color</span>:<span style=color:#AE81FF>#09c</span>;\n  }\n}\n\n<span style=color:#8F8F9E>// Equivalent to &lt;div class=\"count\"/></span>\n&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.count</span>/>\n\n<span style=color:#8F8F9E>// Equivalent to &lt;span id=\"my-id\"/></span>\n&lt;<span style=color:#FF4185>span</span><span style=color:#A6E22E>#my-id</span>/>\n\n<span style=color:#8F8F9E>// Combined</span>\n&lt;<span style=color:#FF4185>button</span><span style=color:#A6E22E>#submit.primary</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>style</span> {\n\n  <span style=color:#A6E22E>.count</span> {\n    <span style=color:#66D9EF>color</span>:<span style=color:#AE81FF>#09c</span>;\n  }\n\n}\n<span style=color:#8F8F9E>&lt;!-- Equivalent to &lt;div class=\"count\"/>--></span>\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>.count</span>\n<span style=color:#8F8F9E>&lt;!-- Equivalent to &lt;span id=\"my-id\"/>--></span>\n<span style=color:#FF4185>span</span><span style=color:#A6E22E>#my-id</span>\n<span style=color:#8F8F9E>&lt;!-- Combined--></span>\n<span style=color:#FF4185>button</span><span style=color:#A6E22E>.primary#submit</span>\n</pre>"
  }, out, _componentDef, "20");

  out.w("<h4 id=2-all-attribute-values-are-just-javascript><a name=2-all-attribute-values-are-just-javascript class=anchor href=#2-all-attribute-values-are-just-javascript><span class=header-link></span></a>2. All attribute values are Just JavaScript\u2122</h4><p>Unlike with HTML, you are not limited to string attribute values when using Marko. Attributes can have types, which makes it really easy to pass data to custom tags and it works for standard HTML tags too:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>myClassName</span>/>\n&lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"checkbox\"</span> <span style=color:#A6E22E>checked</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>isChecked</span>/>\n&lt;<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myString</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Hello\"</span>/>\n&lt;<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myNumber</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>1</span>/>\n&lt;<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myTemplateString</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>`Hello </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>/>\n&lt;<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myBoolean</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>true</span>/>\n&lt;<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myArray</span><span style=color:#FFFFFF>=</span>[<span style=color:#AE81FF>1</span>, <span style=color:#AE81FF>2</span>, <span style=color:#AE81FF>3</span>]/>\n&lt;<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myObject</span><span style=color:#FFFFFF>=</span>{hello: <span style=color:#FFF066>'world'</span>}/>\n&lt;<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myVariable</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>name</span>/>\n&lt;<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myFunctionCall</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#A6E22E>foo</span>()/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>myClassName</span>\n<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"checkbox\"</span> <span style=color:#A6E22E>checked</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>isChecked</span>\n<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myString</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Hello\"</span>\n<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myNumber</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>1</span>\n<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myTemplateString</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>`Hello </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>\n<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myBoolean</span>\n<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myArray</span><span style=color:#FFFFFF>=</span>[<span style=color:#AE81FF>1</span>, <span style=color:#AE81FF>2</span>, <span style=color:#AE81FF>3</span>]\n<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myObject</span><span style=color:#FFFFFF>=</span>{ hello: <span style=color:#FFF066>\"world\"</span> }\n<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myVariable</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>name</span>\n<span style=color:#FF4185>awesome-component</span> <span style=color:#A6E22E>myFunctionCall</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#A6E22E>foo</span>()\n</pre>"
  }, out, _componentDef, "25");

  out.w("<h4 id=3-isomorphic-ui-components-made-easy><a name=3-isomorphic-ui-components-made-easy class=anchor href=#3-isomorphic-ui-components-made-easy><span class=header-link></span></a>3. Isomorphic UI components made easy</h4><p>Tired of boilerplate code and trouble managing component input and state? Marko makes it a breeze to develop self-contained and individually testable components. Changing state is completely synchronous, so there won\u2019t be any headaches. You can also use inline styles making it very easy to develop small components quickly.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onInput</span>(<span style=color:#FFAC4D>input</span>) {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      count: <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>||</span> <span style=color:#AE81FF>0</span>\n    };\n  }\n  <span style=color:#A6E22E>increment</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#FF4185>++</span>;\n  }\n}\n\n<span style=color:#66D9EF>style</span> {\n  <span style=color:#A6E22E>.count</span> {\n    <span style=color:#66D9EF>color</span>:<span style=color:#AE81FF>#09c</span>;\n  }\n}\n\n&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.count</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>div</span>>\n&lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'increment'</span>)>\n  Click me!\n&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onInput</span>(<span style=color:#FFAC4D>input</span>) {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      count: <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>||</span> <span style=color:#AE81FF>0</span>,\n    };\n  }\n  <span style=color:#A6E22E>increment</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#FF4185>++</span>;\n  }\n}\n<span style=color:#66D9EF>style</span> {\n\n  <span style=color:#A6E22E>.count</span> {\n    <span style=color:#66D9EF>color</span>:<span style=color:#AE81FF>#09c</span>;\n  }\n\n}\n\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>.count</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>\n<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>) -- Click me!\n</pre>"
  }, out, _componentDef, "30");

  out.w("<p>Do you see references to \u201CMarko\u201D in the snippet above? Yeah, me neither.</p><p>Is your component becoming too large? Do you prefer separating your CSS, JavaScript, and markup code? No problem. You can easily <a href=/docs/class-components/#multi-file-components>rip out your code into multiple files</a>:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>components/\n  click-counter/\n    component.js\n    index.marko\n    style.css\n</pre><h4 id=4-concise-syntax><a name=4-concise-syntax class=anchor href=#4-concise-syntax><span class=header-link></span></a>4. Concise syntax</h4><p>The DOM is just a tree structure. Indentation is a great way to describe a DOM tree without having to worry about matching up beginning and ending tags. Marko lets you choose between a concise, indentation-based syntax, and a familiar HTML syntax:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Count our clicks! --></span>\n&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.count</span>>\n  &lt;<span style=color:#FF4185>p</span>>Count: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>p</span>>\n&lt;/<span style=color:#FF4185>div</span>>\n&lt;<span style=color:#FF4185>button</span><span style=color:#A6E22E>.example-button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'increment'</span>)>\n  Click me!\n&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Count our clicks! --></span>\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>.count</span>\n  <span style=color:#FF4185>p</span> -- Count: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>\n<span style=color:#FF4185>button</span><span style=color:#A6E22E>.example-button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>) -- Click me!\n</pre>"
  }, out, _componentDef, "38");

  out.w("<p>Here\u2019s the same thing with the concise syntax:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>// Count our clicks!</span>\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>.count</span>\n  <span style=color:#FF4185>p</span> -- Count: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>\n<span style=color:#FF4185>button</span><span style=color:#A6E22E>.example-button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'increment'</span>) -- Click me!\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Count our clicks!--></span>\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>.count</span>\n  <span style=color:#FF4185>p</span> -- Count: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>\n<span style=color:#FF4185>button</span><span style=color:#A6E22E>.example-button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>) -- Click me!\n</pre>"
  }, out, _componentDef, "40");

  out.w("<p>Can\u2019t make up your mind or just want to paste in that code snippet from StackOverflow? HTML syntax can be used within in the concise syntax. You\u2019ll come back and make it consistent\u2026<em>one day</em>.</p><h4 id=5-import-javascript-modules><a name=5-import-javascript-modules class=anchor href=#5-import-javascript-modules><span class=header-link></span></a>5. Import JavaScript modules</h4><p>Do you have some helper JavaScript functions that you need to use in your views? Marko lets you import any JavaScript module into your template using the same syntax as the JavaScript <code>import</code> statement without using Babel or any other build tool. No need for problematic globals (you could do that too, but please don\u2019t or your coworkers will hate you).</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>sum</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>'./utils/sum'</span>;\n\n&lt;<span style=color:#FF4185>div</span>>The sum of 2 + 3 is <span style=color:#66D9EF>${</span><span style=color:#A6E22E>sum</span>(<span style=color:#AE81FF>2</span>, <span style=color:#AE81FF>3</span>)<span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>sum</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./utils/sum\"</span>;\n\n<span style=color:#FF4185>div</span> -- The sum of 2 + 3 is <span style=color:#66D9EF>${</span><span style=color:#A6E22E>sum</span>(<span style=color:#AE81FF>2</span>, <span style=color:#AE81FF>3</span>)<span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "48");

  out.w("<h4 id=6-no-need-to-import-custom-tags-its-a-good-thing-trust-me><a name=6-no-need-to-import-custom-tags-its-a-good-thing-trust-me class=anchor href=#6-no-need-to-import-custom-tags-its-a-good-thing-trust-me><span class=header-link></span></a>6. No need to import custom tags (it\u2019s a good thing, trust me)</h4><p>Marko uses your directory structure as a method for automatically registering custom tags. This means that Marko can implicitly import tags based on where the template is located on disk. Marko will search up the directory looking for custom tags in <code>components/</code>directories similar to how Node.js discovers modules in <code>node_modules/</code> directories.</p><p>Given the following directory structure:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>components/\n  fancy-button/\n    index.marko\n  fancy-container/\n    index.marko\n</pre><p>If <code>fancy-button</code> is used inside of <code>fancy-container</code>, it will be implicitly<br> imported:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- No need to use `require` or `import` because it will implicitly import custom tags --></span>\n&lt;<span style=color:#FF4185>div</span>>\n  &lt;<span style=color:#FF4185>fancy-button</span> <span style=color:#A6E22E>color</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>buttonColor</span>/>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- No need to use `require` or `import` because it will implicitly import custom tags --></span>\n<span style=color:#FF4185>div</span>\n  <span style=color:#FF4185>fancy-button</span> <span style=color:#A6E22E>color</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>buttonColor</span>\n</pre>"
  }, out, _componentDef, "60");

  out.w("<h4 id=7-use-javascript-to-set-css-classes-and-styles><a name=7-use-javascript-to-set-css-classes-and-styles class=anchor href=#7-use-javascript-to-set-css-classes-and-styles><span class=header-link></span></a>7. Use JavaScript to set CSS classes and styles</h4><p>Setting CSS classes and styles is made easy using JavaScript! Marko will happily accept simple strings, JavaScript objects and arrays (<em>falsy values will be ignored).</em></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>fontColor</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>color</span> <span style=color:#FF4185>||</span> <span style=color:#FFF066>'blue'</span>;\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>isActive</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>active</span> <span style=color:#FF4185>===</span> <span style=color:#AE81FF>true</span>;\n\n&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span>[<span style=color:#FFF066>'person'</span>, <span style=color:#FFFFFF>isActive</span> <span style=color:#FF4185>&&</span> <span style=color:#FFF066>'active'</span>]\n  <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{color: <span style=color:#FFFFFF>fontColor</span>} />\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>fontColor</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>color</span> <span style=color:#FF4185>||</span> <span style=color:#FFF066>\"blue\"</span>;\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>isActive</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>active</span> <span style=color:#FF4185>===</span> <span style=color:#AE81FF>true</span>;\n\n<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span>[<span style=color:#FFF066>\"person\"</span>, <span style=color:#FFFFFF>isActive</span> <span style=color:#FF4185>&&</span> <span style=color:#FFF066>\"active\"</span>] <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{ color: <span style=color:#FFFFFF>fontColor</span> }\n</pre>"
  }, out, _componentDef, "66");

  out.w("<h4 id=8-inline-javascript-statements><a name=8-inline-javascript-statements class=anchor href=#8-inline-javascript-statements><span class=header-link></span></a>8. Inline JavaScript Statements</h4><p>Marko takes HTML and makes it more like JavaScript. You can exit out of HTML mode to embed a JavaScript statement by starting the line with a <code>&#36;</code>. You can use this feature to embed JavaScript variables, functions, etc. where they are needed (take that, \u201Cseparation of concerns\u201D).</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>randomNumber</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>Math</span>.<span style=color:#A6E22E>random</span>();\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>person</span> <span style=color:#FFFFFF>=</span> {\n  name: <span style=color:#FFF066>'Frank'</span>,\n  age: <span style=color:#AE81FF>32</span>\n};\n\n&lt;<span style=color:#FF4185>div</span>>Random number: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>randomNumber</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>div</span>>\n&lt;<span style=color:#FF4185>div</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span> is <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>age</span><span style=color:#66D9EF>}</span> years old&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>randomNumber</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>Math</span>.<span style=color:#A6E22E>random</span>();\n<span style=color:#FF4185>$</span> {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>person</span> <span style=color:#FFFFFF>=</span> {\n    name: <span style=color:#FFF066>\"Frank\"</span>,\n    age: <span style=color:#AE81FF>32</span>,\n  };\n}\n\n<span style=color:#FF4185>div</span> -- Random number: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>randomNumber</span><span style=color:#66D9EF>}</span>\n<span style=color:#FF4185>div</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span> is <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>age</span><span style=color:#66D9EF>}</span> years old\n</pre>"
  }, out, _componentDef, "72");

  out.w("<p>If you want to combine multiple JavaScript statements you can do that too:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>randomNumber</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>Math</span>.<span style=color:#A6E22E>random</span>();\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>person</span> <span style=color:#FFFFFF>=</span> {\n    name: <span style=color:#FFF066>'Frank'</span>,\n    age: <span style=color:#AE81FF>32</span>\n  };\n}\n\n&lt;<span style=color:#FF4185>div</span>>Random number: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>randomNumber</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>div</span>>\n&lt;<span style=color:#FF4185>div</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span> is <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>age</span><span style=color:#66D9EF>}</span> years old&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>randomNumber</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>Math</span>.<span style=color:#A6E22E>random</span>();\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>person</span> <span style=color:#FFFFFF>=</span> {\n    name: <span style=color:#FFF066>\"Frank\"</span>,\n    age: <span style=color:#AE81FF>32</span>,\n  };\n}\n\n<span style=color:#FF4185>div</span> -- Random number: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>randomNumber</span><span style=color:#66D9EF>}</span>\n<span style=color:#FF4185>div</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span> is <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>age</span><span style=color:#66D9EF>}</span> years old\n</pre>"
  }, out, _componentDef, "74");

  out.w("<h4 id=9-async-rendering-with-the-await-tag><a name=9-async-rendering-with-the-await-tag class=anchor href=#9-async-rendering-with-the-await-tag><span class=header-link></span></a>9. Async rendering with the <code>&lt;await&gt;</code> tag</h4><p>Node.js is asynchronous. Browsers are asynchronous. Why should rendering be synchronous? Pass your promise along to your template and Marko will asynchronously render parts of your view. Turns out, <a href=http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/ >this is good for performance</a>.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>searchResultsPromise</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>searchService</span>.<span style=color:#A6E22E>performSearch</span>(<span style=color:#FFFFFF>keywords</span>);\n\n&lt;<span style=color:#FF4185>await</span>(<span style=color:#FFFFFF>searchResultsPromise</span>)>\n  &lt;<span style=color:#A6E22E>@then</span>|<span style=color:#FFAC4D>person</span>|>\n    Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!\n  &lt;/<span style=color:#A6E22E>@then</span>>\n  &lt;<span style=color:#A6E22E>@catch</span>|<span style=color:#FFAC4D>err</span>|>\n    The error was: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>err</span>.<span style=color:#FFFFFF>message</span><span style=color:#66D9EF>}</span>.\n  &lt;/<span style=color:#A6E22E>@catch</span>>\n&lt;/<span style=color:#FF4185>await</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>searchResultsPromise</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>searchService</span>.<span style=color:#A6E22E>performSearch</span>(<span style=color:#FFFFFF>keywords</span>);\n\n<span style=color:#FF4185>await</span>(<span style=color:#FFFFFF>searchResultsPromise</span>)\n  <span style=color:#A6E22E>@then</span>|<span style=color:#FFAC4D>person</span>| -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!\n  <span style=color:#A6E22E>@catch</span>|<span style=color:#FFAC4D>err</span>| -- The error was: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>err</span>.<span style=color:#FFFFFF>message</span><span style=color:#66D9EF>}</span>.\n</pre>"
  }, out, _componentDef, "81");

  out.w("<h4 id=10-server-side-rendering-is-easy><a name=10-server-side-rendering-is-easy class=anchor href=#10-server-side-rendering-is-easy><span class=header-link></span></a>10. Server side rendering is easy</h4><p>Can\u2019t decide if you want to do server-side rendering or client-side rendering? Why are we even talking about this in 2017? It doesn\u2019t matter. Seriously, just do both. Marko makes this a no-brainer since you can render a Marko template directly to a stream (oh, and Marko will automatically mount UI components rendered on the server when the page loads in the browser):</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"@marko/compiler/register\"</span>); <span style=color:#8F8F9E>// require .marko files!</span>\n\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>http</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"http\"</span>);\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>template</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"./template\"</span>);\n\n<span style=color:#FFFFFF>http</span>\n  .<span style=color:#A6E22E>createServer</span>()\n  .<span style=color:#A6E22E>on</span>(<span style=color:#FFF066>\"request\"</span>, (<span style=color:#FFAC4D>req</span>, <span style=color:#FFAC4D>res</span>) <span style=color:#66D9EF>=></span> {\n    <span style=color:#FFFFFF>template</span>.<span style=color:#A6E22E>render</span>(\n      {\n        name: <span style=color:#FFF066>\"Frank\"</span>,\n        count: <span style=color:#AE81FF>30</span>,\n        colors: [<span style=color:#FFF066>\"red\"</span>, <span style=color:#FFF066>\"green\"</span>, <span style=color:#FFF066>\"blue\"</span>]\n      },\n      <span style=color:#FFFFFF>res</span>\n    );\n  })\n  .<span style=color:#A6E22E>listen</span>(<span style=color:#AE81FF>8080</span>);\n</pre><h4 id=bonus-friendly-compile-time-errors><a name=bonus-friendly-compile-time-errors class=anchor href=#bonus-friendly-compile-time-errors><span class=header-link></span></a>Bonus: Friendly compile-time errors</h4><p>We all make mistakes <em>every now and then</em>. Typo in your custom tag? Forgot an ending tag? No worries! Marko will give you a friendly error message and point you right to the problematic code.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Ahhhh typo! This should be &lt;fancy-button/> --></span>\n&lt;<span style=color:#FF4185>fancy-buttn</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Ahhhh typo! This should be &lt;fancy-button/> --></span>\n<span style=color:#FF4185>fancy-buttn</span>\n</pre>"
  }, out, _componentDef, "91");

  out.w("<p>You may have missed it, but it was obvious to Marko:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>Unrecognized tag: fancy-buttn \u2014 More details: https://github.com/marko-js/marko/wiki/Error:-Unrecognized-Tag at line 2 col 1\n</pre><p>Coming soon: auto correction and autonomous coding</p><hr><p><a href=https://commons.wikimedia.org/wiki/File:Amanhecer_no_Hercules_--.jpg><em>Cover image from Wikipedia</em></a></p>");
}, {
  t: _10_awesome_marko_features_marko_componentType,
  i: true
}, _10_awesome_marko_features_marko_component);
__webpack_require__(9359)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/body-content.md


const body_content_marko_componentType = "MNBSZIb1",
      body_content_marko_template = (0,index_js_namespaceObject.t)(body_content_marko_componentType);

/* harmony default export */ const body_content = (body_content_marko_template);

toc_registry.set("../../node_modules/marko/docs/body-content.md", "<ul class=\"toc toc-level1\"><li><a href=\"#rendering-body-content\">Rendering body content</a></li><li><a href=\"#passing-attributes-to-body-content\">Passing attributes to body content</a></li><li><a href=\"#named-body-content\">Named body content</a><ul class=\"toc toc-level2\"><li><a href=\"#repeated-attribute-tags\">Repeated attribute tags</a></li><li><a href=\"#attributes-on-attribute-tags\">Attributes on attribute tags</a></li><li><a href=\"#nested-attribute-tags\">Nested attribute tags</a></li><li><a href=\"#dynamic-attribute-tags\">Dynamic attribute tags</a></li></ul></li></ul>");
const body_content_title = "Body content";



const body_content_marko_component = {};
body_content_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=body-content><a name=body-content class=anchor href=#body-content><span class=header-link></span></a>Body content</h1><p>We&#39;re used to passing body content to HTML tags. When you do this, the tag has control over where and when this content is rendered. A good example of this is the <a href=https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details>HTML <code>&lt;details&gt;</code> element</a>:</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>details</span>>\n  &lt;<span style=color:#FF4185>summary</span>>Hello &lt;<span style=color:#FF4185>strong</span>>World&lt;/<span style=color:#FF4185>strong</span>>&lt;/<span style=color:#FF4185>summary</span>>\n  This is some &lt;<span style=color:#FF4185>em</span>>content&lt;/<span style=color:#FF4185>em</span>> that can be toggled.\n&lt;/<span style=color:#FF4185>details</span>>\n</pre><p>This is what it renders (try clicking it):</p><hr><details><summary>Hello <strong>World</strong></summary> This is some <em>content</em> that can be toggled.</details><hr><p>Custom tags can also receive content in the same way. This allows a component to give its user full control over <em>how</em> some section of the content is rendered, but control <em>where</em>, <em>when</em>, and with <em>what</em> data it is rendered. This feature is necessary to build composable components like overlays, layouts, dropdowns, etc. Imagine a <code>&lt;table&gt;</code> that didn&#39;t give you control over how its cells were rendered. That would be pretty limited!</p><h2 id=rendering-body-content><a name=rendering-body-content class=anchor href=#rendering-body-content><span class=header-link></span></a>Rendering body content</h2><p>When a custom tag is passed body content, it is received as a special <code>renderBody</code> property on the component&#39;s <code>input</code>. You can include this content anywhere in your component by using the <a href=/docs/syntax/#dynamic-tagname><code>&lt;&#36;{dynamic}&gt;</code> syntax</a>.</p><div class=code-block-filename>components/fancy-container.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"container fancy\"</span>>\n    &lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span>/>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span><span style=color:#A6E22E>.container.fancy</span>\n  <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "29");

  out.w("<p>If we were to use this tag like this:</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>fancy-container</span>>\n    &lt;<span style=color:#FF4185>p</span>>Content goes here...&lt;/<span style=color:#FF4185>p</span>>\n&lt;/<span style=color:#FF4185>fancy-container</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>fancy-container</span>\n  <span style=color:#FF4185>p</span> -- Content goes here...\n</pre>"
  }, out, _componentDef, "32");

  out.w("<p>The rendered output would be:</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"container fancy\"</span>>&lt;<span style=color:#FF4185>p</span>>Content goes here...&lt;/<span style=color:#FF4185>p</span>>&lt;/<span style=color:#FF4185>div</span>>\n</pre><p>This is a pretty basic example, but you can imagine how this could be incorporated into a more advanced component to render passed content where/when needed.</p><blockquote class=protip><p><strong>ProTip:</strong> Body content can be rendered multiple times. Or not at all.</p></blockquote><h2 id=passing-attributes-to-body-content><a name=passing-attributes-to-body-content class=anchor href=#passing-attributes-to-body-content><span class=header-link></span></a>Passing attributes to body content</h2><p>When rendering body content with <code>&lt;&#36;{dynamic}&gt;</code>, attributes may also be passed:</p><div class=code-block-filename>components/random-value.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- heh, it's not actually random --></span>\n&lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span> <span style=color:#A6E22E>number</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>1337</span> />\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- heh, it's not actually random --></span>\n<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span> <span style=color:#A6E22E>number</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>1337</span>\n</pre>"
  }, out, _componentDef, "45");

  out.w("<p>These attribute values can be received as a <a href=/docs/syntax/#parameters>tag parameter</a>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>random-value</span>|{ <span style=color:#FFAC4D>number</span> }|>\n    The number is <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>number</span><span style=color:#66D9EF>}</span>\n&lt;/<span style=color:#FF4185>random-value</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>random-value</span>|{ <span style=color:#FFAC4D>number</span> }| -- The number is <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>number</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "48");

  out.w("<blockquote class=protip><p><strong>ProTip:</strong> Some tags (like the above tag) may not render anything except their body content with some data. This can be quite useful, just look at the <code>&lt;for&gt;</code> and <code>&lt;await&gt;</code> tags!</p></blockquote><h2 id=named-body-content><a name=named-body-content class=anchor href=#named-body-content><span class=header-link></span></a>Named body content</h2><p>You can also pass named content sections to a tag using <a href=/docs/syntax/#attribute-tag>attribute tags</a> which are denoted by the <code>@</code> prefix.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>layout</span>>\n    &lt;<span style=color:#A6E22E>@heading</span>>\n        &lt;<span style=color:#FF4185>h1</span>>Hello Marko&lt;/<span style=color:#FF4185>h1</span>>\n    &lt;/<span style=color:#A6E22E>@heading</span>>\n    &lt;<span style=color:#A6E22E>@content</span>>\n        &lt;<span style=color:#FF4185>p</span>>...&lt;/<span style=color:#FF4185>p</span>>\n    &lt;/<span style=color:#A6E22E>@content</span>>\n&lt;/<span style=color:#FF4185>layout</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>layout</span>\n  <span style=color:#A6E22E>@heading</span>\n    <span style=color:#FF4185>h1</span> -- Hello Marko\n  <span style=color:#A6E22E>@content</span>\n    <span style=color:#FF4185>p</span> -- ...\n</pre>"
  }, out, _componentDef, "60");

  out.w("<p>Like attributes, these attribute tags are received as <code>input.heading</code> and <code>input.content</code>, but they each have a <code>renderBody</code> property which we can now use:</p><div class=code-block-filename>components/layout.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>doctype</span> <span style=color:#A6E22E>html</span>>\n&lt;<span style=color:#FF4185>html</span>>\n    &lt;<span style=color:#FF4185>body</span>>\n        &lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>heading</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span>/>\n        &lt;<span style=color:#FF4185>hr</span>/>\n        &lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>content</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span>/>\n    &lt;/<span style=color:#FF4185>body</span>>\n&lt;/<span style=color:#FF4185>html</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>doctype</span> <span style=color:#A6E22E>html</span>>\n<span style=color:#FF4185>html</span>\n  <span style=color:#FF4185>body</span>\n    <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>heading</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span>\n    <span style=color:#FF4185>hr</span>\n    <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>content</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "66");

  out.w("<blockquote class=protip><p><strong>ProTip:</strong> The <code>renderBody</code> property can be omitted. You could use <code>&lt;&#36;{input.heading}/&gt;</code>, for example.</p></blockquote><h3 id=repeated-attribute-tags><a name=repeated-attribute-tags class=anchor href=#repeated-attribute-tags><span class=header-link></span></a>Repeated attribute tags</h3><p>It is sometimes useful to allow multiple of the same attribute tag to be passed. This would allow us to, for example, build a custom table component which would allow its user to specify any number of columns, while still giving ther user control over how each column is rendered:</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>fancy-table</span> <span style=color:#A6E22E>data</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>people</span>>\n    &lt;<span style=color:#A6E22E>@column</span>|<span style=color:#FFAC4D>person</span>|>\n        Name: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n    &lt;/<span style=color:#A6E22E>@column</span>>\n    &lt;<span style=color:#A6E22E>@column</span>|<span style=color:#FFAC4D>person</span>|>\n        Age: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>age</span><span style=color:#66D9EF>}</span>\n    &lt;/<span style=color:#A6E22E>@column</span>>\n&lt;/<span style=color:#FF4185>fancy-table</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>fancy-table</span> <span style=color:#A6E22E>data</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>people</span>\n  <span style=color:#A6E22E>@column</span>|<span style=color:#FFAC4D>person</span>| -- Name: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n  <span style=color:#A6E22E>@column</span>|<span style=color:#FFAC4D>person</span>| -- Age: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>age</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "77");

  out.w("<p>In order to receive multiple of the same attribute tag, you need to specify that the attribute tag can be repeated in a <a href=/docs/marko-json/#single-component-definition><code>marko-tag.json</code></a> file.</p><div class=code-block-filename>components/fancy-table/marko-tag.json</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n    <span style=color:#FFF066>\"@data\"</span>: <span style=color:#FFF066>\"array\"</span>,\n    <span style=color:#FFF066>\"&lt;column>\"</span>: {\n        <span style=color:#FFF066>\"is-repeated\"</span>: <span style=color:#AE81FF>true</span>\n    }\n}\n</pre><p>We can then use the <code>&lt;for&gt;</code> tag to render the body content into table, passing the row data to each column&#39;s body.</p><div class=code-block-filename>components/fancy-table/index.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>table</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"fancy\"</span>>\n    &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>row</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>data</span>>\n        &lt;<span style=color:#FF4185>tr</span>>\n<div class=line-highlight>            &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>column</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>column</span>></div><div class=line-highlight>                &lt;<span style=color:#FF4185>td</span>></div><div class=line-highlight>                    &lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>column</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span> <span style=color:#FF4185>...</span><span style=color:#FFFFFF>row</span>/></div><div class=line-highlight>                &lt;/<span style=color:#FF4185>td</span>></div><div class=line-highlight>            &lt;/<span style=color:#FF4185>for</span>></div>        &lt;/<span style=color:#FF4185>tr</span>>\n    &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>table</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>table</span><span style=color:#A6E22E>.fancy</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>row</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>data</span>\n    <span style=color:#FF4185>tr</span>\n      <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>column</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>column</span>\n        <span style=color:#FF4185>td</span>\n          <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>column</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span> <span style=color:#FF4185>...</span><span style=color:#FFFFFF>row</span>\n</pre>"
  }, out, _componentDef, "85");

  out.w("<p>We now have a working <code>&lt;fancy-table&gt;</code>. Let&#39;s see what it renders:</p><div class=code-block-filename>Example Data</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>[\n  {\n    name: <span style=color:#FFF066>\"Patrick\"</span>,\n    age: <span style=color:#AE81FF>63</span>\n  },\n  {\n    name: <span style=color:#FFF066>\"Austin\"</span>,\n    age: <span style=color:#AE81FF>12</span>\n  }\n];\n</pre><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>table</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"fancy\"</span>>\n  &lt;<span style=color:#FF4185>tr</span>>\n    &lt;<span style=color:#FF4185>td</span>>Name: Patrick&lt;/<span style=color:#FF4185>td</span>>\n    &lt;<span style=color:#FF4185>td</span>>Age: 63&lt;/<span style=color:#FF4185>td</span>>\n  &lt;/<span style=color:#FF4185>tr</span>>\n  &lt;<span style=color:#FF4185>tr</span>>\n    &lt;<span style=color:#FF4185>td</span>>Name: Austin&lt;/<span style=color:#FF4185>td</span>>\n    &lt;<span style=color:#FF4185>td</span>>Age: 12&lt;/<span style=color:#FF4185>td</span>>\n  &lt;/<span style=color:#FF4185>tr</span>>\n&lt;/<span style=color:#FF4185>table</span>>\n</pre><h3 id=attributes-on-attribute-tags><a name=attributes-on-attribute-tags class=anchor href=#attributes-on-attribute-tags><span class=header-link></span></a>Attributes on attribute tags</h3><p>If you look at our previous example, we had to prefix each cell with the column label. It would be better if we could give a name to each column instead and only render that once.</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>fancy-table</span>>\n    &lt;<span style=color:#A6E22E>@column</span>|<span style=color:#FFAC4D>person</span>| <span style=color:#A6E22E>heading</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Name\"</span>>\n        <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n    &lt;/<span style=color:#A6E22E>@column</span>>\n    &lt;<span style=color:#A6E22E>@column</span>|<span style=color:#FFAC4D>person</span>| <span style=color:#A6E22E>heading</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Age\"</span>>\n        <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>age</span><span style=color:#66D9EF>}</span>\n    &lt;/<span style=color:#A6E22E>@column</span>>\n&lt;/<span style=color:#FF4185>fancy-table</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>fancy-table</span>\n  <span style=color:#A6E22E>@column</span>|<span style=color:#FFAC4D>person</span>| <span style=color:#A6E22E>heading</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Name\"</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n  <span style=color:#A6E22E>@column</span>|<span style=color:#FFAC4D>person</span>| <span style=color:#A6E22E>heading</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Age\"</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>age</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "95");

  out.w("<p>Now, each object in the <code>input.column</code> array will contain a <code>heading</code> property in addition to its <code>renderBody</code>. We can use another <code>&lt;for&gt;</code> and render the headings in <code>&lt;th&gt;</code> tags:</p><div class=code-block-filename>components/fancy-table/index.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>table</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"fancy\"</span>>\n    &lt;<span style=color:#FF4185>tr</span>>\n<div class=line-highlight>        &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>column</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>column</span>></div><div class=line-highlight>            &lt;<span style=color:#FF4185>th</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>column</span>.<span style=color:#FFFFFF>heading</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>th</span>></div><div class=line-highlight>        &lt;/<span style=color:#FF4185>for</span>></div>    &lt;/<span style=color:#FF4185>tr</span>>\n    &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>row</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>data</span>>\n        &lt;<span style=color:#FF4185>tr</span>>\n            &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>column</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>column</span>>\n                &lt;<span style=color:#FF4185>td</span>>\n                    &lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>column</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span> <span style=color:#FF4185>...</span><span style=color:#FFFFFF>row</span>/>\n                &lt;/<span style=color:#FF4185>td</span>>\n            &lt;/<span style=color:#FF4185>for</span>>\n        &lt;/<span style=color:#FF4185>tr</span>>\n    &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>table</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>table</span><span style=color:#A6E22E>.fancy</span>\n  <span style=color:#FF4185>tr</span>\n    <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>column</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>column</span>\n      <span style=color:#FF4185>th</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>column</span>.<span style=color:#FFFFFF>heading</span><span style=color:#66D9EF>}</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>row</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>data</span>\n    <span style=color:#FF4185>tr</span>\n      <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>column</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>column</span>\n        <span style=color:#FF4185>td</span>\n          <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>column</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span> <span style=color:#FF4185>...</span><span style=color:#FFFFFF>row</span>\n</pre>"
  }, out, _componentDef, "103");

  out.w("<p>We&#39;ll now get a row of headings when we render our <code>&lt;fancy-table&gt;</code></p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>table</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"fancy\"</span>>\n  &lt;<span style=color:#FF4185>tr</span>>\n    &lt;<span style=color:#FF4185>th</span>>Name&lt;/<span style=color:#FF4185>th</span>>\n    &lt;<span style=color:#FF4185>th</span>>Age&lt;/<span style=color:#FF4185>th</span>>\n  &lt;/<span style=color:#FF4185>tr</span>>\n  &lt;<span style=color:#FF4185>tr</span>>\n    &lt;<span style=color:#FF4185>td</span>>Patrick&lt;/<span style=color:#FF4185>td</span>>\n    &lt;<span style=color:#FF4185>td</span>>63&lt;/<span style=color:#FF4185>td</span>>\n  &lt;/<span style=color:#FF4185>tr</span>>\n  &lt;<span style=color:#FF4185>tr</span>>\n    &lt;<span style=color:#FF4185>td</span>>Austin&lt;/<span style=color:#FF4185>td</span>>\n    &lt;<span style=color:#FF4185>td</span>>12&lt;/<span style=color:#FF4185>td</span>>\n  &lt;/<span style=color:#FF4185>tr</span>>\n&lt;/<span style=color:#FF4185>table</span>>\n</pre><h3 id=nested-attribute-tags><a name=nested-attribute-tags class=anchor href=#nested-attribute-tags><span class=header-link></span></a>Nested attribute tags</h3><p>Continuing to build on our example, what if we want to add some custom content or even components into the column headings? In this case, we can extend our <code>&lt;fancy-table&gt;</code> to use nested attribute tags. We&#39;ll now have <code>&lt;@heading&gt;</code> and <code>&lt;@cell&gt;</code> tags nested under <code>&lt;@column&gt;</code>. This gives users of our tag full control over how to render both column headings and the cells within the column!</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>fancy-table</span>>\n    &lt;<span style=color:#A6E22E>@column</span>>\n<div class=line-highlight>        &lt;<span style=color:#A6E22E>@heading</span>></div><div class=line-highlight>            &lt;<span style=color:#FF4185>app-icon</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"profile\"</span>/> Name</div><div class=line-highlight>        &lt;/<span style=color:#A6E22E>@heading</span>></div><div class=line-highlight>        &lt;<span style=color:#A6E22E>@cell</span>|<span style=color:#FFAC4D>person</span>|></div><div class=line-highlight>            <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span></div><div class=line-highlight>        &lt;/<span style=color:#A6E22E>@cell</span>></div>    &lt;/<span style=color:#A6E22E>@column</span>>\n    &lt;<span style=color:#A6E22E>@column</span>>\n        &lt;<span style=color:#A6E22E>@heading</span>>\n            &lt;<span style=color:#FF4185>app-icon</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"calendar\"</span>/> Age\n        &lt;/<span style=color:#A6E22E>@heading</span>>\n        &lt;<span style=color:#A6E22E>@cell</span>|<span style=color:#FFAC4D>person</span>|>\n            <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>age</span><span style=color:#66D9EF>}</span>\n        &lt;/<span style=color:#A6E22E>@cell</span>>\n    &lt;/<span style=color:#A6E22E>@column</span>>\n&lt;/<span style=color:#FF4185>fancy-table</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>fancy-table</span>\n  <span style=color:#A6E22E>@column</span>\n    <span style=color:#A6E22E>@heading</span>\n      <span style=color:#FF4185>app-icon</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"profile\"</span>\n      --  Name\n    <span style=color:#A6E22E>@cell</span>|<span style=color:#FFAC4D>person</span>| -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n  <span style=color:#A6E22E>@column</span>\n    <span style=color:#A6E22E>@heading</span>\n      <span style=color:#FF4185>app-icon</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"calendar\"</span>\n      --  Age\n    <span style=color:#A6E22E>@cell</span>|<span style=color:#FFAC4D>person</span>| -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>age</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "116");

  out.w("<p>Now instead of rendering the heading as text, we&#39;ll render the heading&#39;s body content.</p><div class=code-block-filename>components/fancy-table/index.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>table</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"fancy\"</span>>\n    &lt;<span style=color:#FF4185>tr</span>>\n        &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>column</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>column</span>>\n            &lt;<span style=color:#FF4185>th</span>>\n<div class=line-highlight>                &lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>column</span>.<span style=color:#FFFFFF>heading</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span>/></div>            &lt;/<span style=color:#FF4185>th</span>>\n        &lt;/<span style=color:#FF4185>for</span>>\n    &lt;/<span style=color:#FF4185>tr</span>>\n    &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>row</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>data</span>>\n        &lt;<span style=color:#FF4185>tr</span>>\n            &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>column</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>column</span>>\n                &lt;<span style=color:#FF4185>td</span>>\n                    &lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>column</span>.<span style=color:#FFFFFF>cell</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span> <span style=color:#FF4185>...</span><span style=color:#FFFFFF>row</span>/>\n                &lt;/<span style=color:#FF4185>td</span>>\n            &lt;/<span style=color:#FF4185>for</span>>\n        &lt;/<span style=color:#FF4185>tr</span>>\n    &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>table</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>table</span><span style=color:#A6E22E>.fancy</span>\n  <span style=color:#FF4185>tr</span>\n    <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>column</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>column</span>\n      <span style=color:#FF4185>th</span>\n        <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>column</span>.<span style=color:#FFFFFF>heading</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>row</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>data</span>\n    <span style=color:#FF4185>tr</span>\n      <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>column</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>column</span>\n        <span style=color:#FF4185>td</span>\n          <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>column</span>.<span style=color:#FFFFFF>cell</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span> <span style=color:#FF4185>...</span><span style=color:#FFFFFF>row</span>\n</pre>"
  }, out, _componentDef, "119");

  out.w("<p>Our headings can now include icons (and anything else)!</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>table</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"fancy\"</span>>\n  &lt;<span style=color:#FF4185>tr</span>>\n    &lt;<span style=color:#FF4185>th</span>>&lt;<span style=color:#FF4185>img</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"icon\"</span> <span style=color:#A6E22E>src</span>=<span style=color:#FFF066>\"profile.svg\"</span> /> Name&lt;/<span style=color:#FF4185>th</span>>\n    &lt;<span style=color:#FF4185>th</span>>&lt;<span style=color:#FF4185>img</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"icon\"</span> <span style=color:#A6E22E>src</span>=<span style=color:#FFF066>\"calendar.svg\"</span> /> Age&lt;/<span style=color:#FF4185>th</span>>\n  &lt;/<span style=color:#FF4185>tr</span>>\n  &lt;<span style=color:#FF4185>tr</span>>\n    &lt;<span style=color:#FF4185>td</span>>Patrick&lt;/<span style=color:#FF4185>td</span>>\n    &lt;<span style=color:#FF4185>td</span>>63&lt;/<span style=color:#FF4185>td</span>>\n  &lt;/<span style=color:#FF4185>tr</span>>\n  &lt;<span style=color:#FF4185>tr</span>>\n    &lt;<span style=color:#FF4185>td</span>>Austin&lt;/<span style=color:#FF4185>td</span>>\n    &lt;<span style=color:#FF4185>td</span>>12&lt;/<span style=color:#FF4185>td</span>>\n  &lt;/<span style=color:#FF4185>tr</span>>\n&lt;/<span style=color:#FF4185>table</span>>\n</pre><h3 id=dynamic-attribute-tags><a name=dynamic-attribute-tags class=anchor href=#dynamic-attribute-tags><span class=header-link></span></a>Dynamic attribute tags</h3><p>The flexibility of the <code>&lt;fancy-table&gt;</code> is great if you want to render columns differently or have columns that display the data in a special way (such as displaying an age derived from a date of birth). However, if all columns are basically the same, the user might feel they&#39;re repeating themselves. As you might expect, you can use <code>&lt;for&gt;</code> (and <code>&lt;if&gt;</code>) to dynamically render attribute tags.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>columns</span> <span style=color:#FFFFFF>=</span> [{\n    property: <span style=color:#FFF066>\"name\"</span>,\n    title: <span style=color:#FFF066>\"Name\"</span>,\n    icon: <span style=color:#FFF066>\"profile\"</span>\n}, {\n    property: <span style=color:#FFF066>\"age\"</span>,\n    title: <span style=color:#FFF066>\"Age\"</span>,\n    icon: <span style=color:#FFF066>\"calendar\"</span>\n}]\n\n&lt;<span style=color:#FF4185>fancy-table</span>>\n    &lt;<span style=color:#FF4185>for</span>|{ <span style=color:#FFAC4D>property</span>, <span style=color:#FFAC4D>title</span>, <span style=color:#FFAC4D>icon</span> }|>\n        &lt;<span style=color:#A6E22E>@column</span>>\n            &lt;<span style=color:#A6E22E>@heading</span>>\n                &lt;<span style=color:#FF4185>app-icon</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>icon</span>/> <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>title</span><span style=color:#66D9EF>}</span>\n            &lt;/<span style=color:#A6E22E>@heading</span>>\n            &lt;<span style=color:#A6E22E>@cell</span>|<span style=color:#FFAC4D>person</span>|>\n                <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>[<span style=color:#FFFFFF>property</span>]<span style=color:#66D9EF>}</span>\n            &lt;/<span style=color:#A6E22E>@cell</span>>\n        &lt;/<span style=color:#A6E22E>@column</span>>\n    &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>fancy-table</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>columns</span> <span style=color:#FFFFFF>=</span> [\n    {\n      property: <span style=color:#FFF066>\"name\"</span>,\n      title: <span style=color:#FFF066>\"Name\"</span>,\n      icon: <span style=color:#FFF066>\"profile\"</span>,\n    },\n    {\n      property: <span style=color:#FFF066>\"age\"</span>,\n      title: <span style=color:#FFF066>\"Age\"</span>,\n      icon: <span style=color:#FFF066>\"calendar\"</span>,\n    },\n  ];\n}\n\n<span style=color:#FF4185>fancy-table</span>\n  <span style=color:#FF4185>for</span>|{ <span style=color:#FFAC4D>property</span>, <span style=color:#FFAC4D>title</span>, <span style=color:#FFAC4D>icon</span> }|\n    <span style=color:#A6E22E>@column</span>\n      <span style=color:#A6E22E>@heading</span>\n        <span style=color:#FF4185>app-icon</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>icon</span>\n        -- <span style=color:#66D9EF>${</span><span style=color:#FFF066>\" \"</span><span style=color:#66D9EF>}${</span><span style=color:#FFFFFF>title</span><span style=color:#66D9EF>}</span>\n      <span style=color:#A6E22E>@cell</span>|<span style=color:#FFAC4D>person</span>| -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>[<span style=color:#FFFFFF>property</span>]<span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "129");
}, {
  t: body_content_marko_componentType,
  i: true
}, body_content_marko_component);
__webpack_require__(1348)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/component-diagram.svg
/* harmony default export */ const component_diagram = (__webpack_require__.p + "3ed75ffc.svg");
;// CONCATENATED MODULE: ../../node_modules/marko/docs/class-components.md


const class_components_marko_componentType = "lgBH+uxO",
      class_components_marko_template = (0,index_js_namespaceObject.t)(class_components_marko_componentType);

/* harmony default export */ const class_components = (class_components_marko_template);

toc_registry.set("../../node_modules/marko/docs/class-components.md", "<ul class=\"toc toc-level1\"><li><a href=\"#ui-component-diagram\">UI component diagram</a></li><li><a href=\"#component-structure\">Component structure</a></li><li><a href=\"#server-side-rendering\">Server-side rendering</a></li><li><a href=\"#single-file-components\">Single-file components</a><ul class=\"toc toc-level2\"><li><a href=\"#styles\">Styles</a></li></ul></li><li><a href=\"#multi-file-components\">Multi-file components</a><ul class=\"toc toc-level2\"><li><a href=\"#supporting-files\">Supporting files</a></li><li><a href=\"#components-with-plain-objects\">Components with plain objects</a></li></ul></li><li><a href=\"#split-components\">Split components</a><ul class=\"toc toc-level2\"><li><a href=\"#usage\">Usage</a></li><li><a href=\"#example\">Example</a></li></ul></li><li><a href=\"#event-handling\">Event handling</a><ul class=\"toc toc-level2\"><li><a href=\"#attaching-dom-event-listeners\">Attaching DOM event listeners</a></li><li><a href=\"#attaching-custom-event-listeners\">Attaching custom event listeners</a></li></ul></li><li><a href=\"#attributes\">Attributes</a><ul class=\"toc toc-level2\"><li><a href=\"#on-eventmethodnamefunction-args\">on-[event]()</a></li><li><a href=\"#once-eventmethodnamefunction-args\">once-[event]()</a></li><li><a href=\"#key\">key</a><ul class=\"toc toc-level3\"><li><a href=\"#referencing-nested-html-elements-and-components\">Referencing nested HTML elements and components</a></li><li><a href=\"#keyed-matching\">Keyed matching</a></li><li><a href=\"#scoped\">*:scoped</a></li></ul></li><li><a href=\"#no-update\">no-update</a></li><li><a href=\"#no-update-if\">no-update-if</a></li><li><a href=\"#no-update-body\">no-update-body</a></li><li><a href=\"#no-update-body-if\">no-update-body-if</a></li><li><a href=\"#no-update_1\">:no-update</a></li></ul></li><li><a href=\"#properties\">Properties</a><ul class=\"toc toc-level2\"><li><a href=\"#thisid\">this.id</a></li><li><a href=\"#thisstate\">this.state</a></li><li><a href=\"#thisinput\">this.input</a></li></ul></li><li><a href=\"#variables\">Variables</a><ul class=\"toc toc-level2\"><li><a href=\"#component\">component</a></li><li><a href=\"#input\">input</a></li><li><a href=\"#state\">state</a></li></ul></li><li><a href=\"#methods\">Methods</a><ul class=\"toc toc-level2\"><li><a href=\"#destroyoptions\">destroy()</a></li><li><a href=\"#forceupdate\">forceUpdate()</a></li><li><a href=\"#getelkey-index\">getEl()</a></li><li><a href=\"#getelskey\">getEls()</a></li><li><a href=\"#getelidkey-index\">getElId()</a></li><li><a href=\"#getcomponentkey-index\">getComponent()</a></li><li><a href=\"#getcomponentskey-index\">getComponents()</a></li><li><a href=\"#isdestroyed\">isDestroyed()</a></li><li><a href=\"#isdirty\">isDirty()</a></li><li><a href=\"#replacestatenewstate\">replaceState()</a></li><li><a href=\"#rerenderinput\">rerender()</a></li><li><a href=\"#setstatename-value\">setState()</a></li><li><a href=\"#setstatenewstate\">setState()</a></li><li><a href=\"#setstatedirtyname-value\">setStateDirty()</a><ul class=\"toc toc-level3\"><li><a href=\"#more-details\">More details</a></li></ul></li><li><a href=\"#subscribetoemitter\">subscribeTo()</a></li><li><a href=\"#update\">update()</a></li></ul></li><li><a href=\"#event-methods\">Event methods</a><ul class=\"toc toc-level2\"><li><a href=\"#emiteventname-args\">emit()</a></li><li><a href=\"#oneventname-handler\">on()</a></li><li><a href=\"#onceeventname-handler\">once()</a></li></ul></li><li><a href=\"#lifecycle-events\">Lifecycle events</a><ul class=\"toc toc-level2\"><li><a href=\"#lifecycle-event-methods\">Lifecycle event methods</a></li><li><a href=\"#oncreateinput-out\">onCreate()</a></li><li><a href=\"#oninputinput-out\">onInput()</a></li><li><a href=\"#onrenderout\">onRender()</a></li><li><a href=\"#onmount\">onMount()</a></li><li><a href=\"#onupdate\">onUpdate()</a></li><li><a href=\"#ondestroy\">onDestroy()</a></li></ul></li><li><a href=\"#dom-manipulation-methods\">DOM manipulation methods</a><ul class=\"toc toc-level2\"><li><a href=\"#appendtotargetel\">appendTo()</a></li><li><a href=\"#insertaftertargetel\">insertAfter()</a></li><li><a href=\"#insertbeforetargetel\">insertBefore()</a></li><li><a href=\"#prependtotargetel\">prependTo()</a></li><li><a href=\"#replacetargetel\">replace()</a></li><li><a href=\"#replacechildrenoftargetel\">replaceChildrenOf()</a></li></ul></li></ul>");
const class_components_title = "Class Components";





const class_components_marko_component = {};
class_components_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<h1 id=class-components><a name=class-components class=anchor href=#class-components><span class=header-link></span></a>Class Components</h1><p>Marko makes it easy to create user interface components to use as building blocks for web pages and applications of any complexity.</p><p>Marko promotes self-contained components that:</p><ul><li>Are independently testable</li><li>Encapsulate the view, client-side behavior (like event handling) and styling</li><li>Can easily be combined to create composite UI components.</li></ul><p>Marko components compile into small, efficient JavaScript modules that hide implementation details from consumers. Components can be published to <a href=https://www.npmjs.com>npm</a> for reuse across applications.</p><h2 id=ui-component-diagram><a name=ui-component-diagram class=anchor href=#ui-component-diagram><span class=header-link></span></a>UI component diagram</h2><p><img${attr_js_default()("src", component_diagram)} alt="Component diagram" style=max-width:100%></p><p>In Marko, the DOM output of a UI component is based on <em>input properties</em> and optional <em>internal state</em> used to control the view.</p><p>If Marko detects changes to <code>input</code> or the internal <code>state</code>, then the view (that is, the DOM) will automatically update to reflect the new input and state. Internally, Marko uses virtual DOM diffing/patching to update the view, but that\u2019s an implementation detail that could change at any time.</p><h2 id=component-structure><a name=component-structure class=anchor href=#component-structure><span class=header-link></span></a>Component structure</h2><p>Marko makes it easy to keep your component\u2019s class and styles next to the HTML view that they correspond to. The following are the key parts of any UI component:</p><ul><li><strong>View</strong> - The HTML template for your UI component. Receives input properties and states, and renders to either server-side HTML or browser-side virtual DOM nodes.</li><li><strong>Client-side behavior</strong> - A JavaScript <code>class</code> with methods and properties for initialization, event handling (including DOM events, custom events and lifecycle events), and state management.</li><li><strong>Styles</strong> - Cascading StyleSheets, including support for CSS preprocessors like <a href=http://lesscss.org/ >Less</a> or <a href=https://sass-lang.com/ >Sass</a>.</li></ul><h2 id=server-side-rendering><a name=server-side-rendering class=anchor href=#server-side-rendering><span class=header-link></span></a>Server-side rendering</h2><p>A UI component can be rendered on the server or in the browser, but stateful component instances will be automatically mounted to the DOM in the browser for both. If a UI component tree is rendered on the server, then Marko will recreate the UI component tree in the browser with no extra code required. For more details, please see <a href=/docs/rendering/ >Rendering</a>.</p><h2 id=single-file-components><a name=single-file-components class=anchor href=#single-file-components><span class=header-link></span></a>Single-file components</h2><p>Marko lets you define a <code>class</code> for a component right in the <code>.marko</code> file, and call that class\u2019s methods with <code>on-*</code> attributes:</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script>`);

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n    <span style=color:#A6E22E>onCreate</span>() {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n            count: <span style=color:#AE81FF>0</span>\n        };\n    }\n    <span style=color:#A6E22E>increment</span>() {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#FF4185>++</span>;\n    }\n}\n\n&lt;<span style=color:#FF4185>label</span>>The current count is &lt;<span style=color:#FF4185>output</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>output</span>>&lt;/<span style=color:#FF4185>label</span>>\n&lt;<span style=color:#FF4185>p</span>>&lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'increment'</span>)>+1&lt;/<span style=color:#FF4185>button</span>>&lt;/<span style=color:#FF4185>p</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      count: <span style=color:#AE81FF>0</span>,\n    };\n  }\n  <span style=color:#A6E22E>increment</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#FF4185>++</span>;\n  }\n}\n\n<span style=color:#FF4185>label</span>\n  -- The current count is\n  <span style=color:#FF4185>output</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>\n<span style=color:#FF4185>p</span>\n  <span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>) -- +1\n</pre>"
  }, out, _componentDef, "49");

  out.w("<h3 id=styles><a name=styles class=anchor href=#styles><span class=header-link></span></a>Styles</h3><p>Adding styles in your view is also made easy:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>style</span> {\n    <span style=color:#A6E22E>.primary</span> {\n        <span style=color:#66D9EF>background</span>: <span style=color:#AE81FF>#09c</span>;\n    }\n}\n\n&lt;<span style=color:#FF4185>label</span>>The current count is &lt;<span style=color:#FF4185>output</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>output</span>>&lt;/<span style=color:#FF4185>label</span>>\n&lt;<span style=color:#FF4185>p</span>>&lt;<span style=color:#FF4185>button</span><span style=color:#A6E22E>.primary</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'increment'</span>)>+1&lt;/<span style=color:#FF4185>button</span>>&lt;/<span style=color:#FF4185>p</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>style</span> {\n\n    <span style=color:#A6E22E>.primary</span> {\n        <span style=color:#66D9EF>background</span>: <span style=color:#AE81FF>#09c</span>;\n    }\n\n}\n\n<span style=color:#FF4185>label</span>\n  -- The current count is\n  <span style=color:#FF4185>output</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>\n<span style=color:#FF4185>p</span>\n  <span style=color:#FF4185>button</span><span style=color:#A6E22E>.primary</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>) -- +1\n</pre>"
  }, out, _componentDef, "54");

  out.w("<p>These styles aren\u2019t output in a <code>&lt;style&gt;</code> tag as inline styles usually are, but are externalized to deduplicate them across multiple component instances on a page.</p><p>If you use a CSS preprocessor, you can add its file extension on <code>style</code>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>style</span><span style=color:#FF4185>.less</span> {\n    <span style=color:#A6E22E>.primary</span> {\n        <span style=color:#66D9EF>background</span>: <span style=color:#FFFFFF>@primaryColor</span>;\n    }\n}\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>style</span><span style=color:#FF4185>.less</span> {\n\n    <span style=color:#A6E22E>.primary</span> {\n        <span style=color:#66D9EF>background</span>: <span style=color:#FFFFFF>@primaryColor</span>;\n    }\n\n}\n</pre>"
  }, out, _componentDef, "59");

  out.w("<blockquote class=note><p><strong>Note:</strong> The code in the <code>style</code> section is processed in a context separate from the rest of the template, so you can\u2019t use JavaScript variables inside it. If you need variables in your CSS, use a CSS preprocessor that supports them.</p></blockquote><h2 id=multi-file-components><a name=multi-file-components class=anchor href=#multi-file-components><span class=header-link></span></a>Multi-file components</h2><p>You might prefer to keep your component\u2019s class and styles in separate files from the view \u2014 the classical separation of HTML, CSS, and JavaScript. Marko makes this possible with a filename-based convention.</p><blockquote class=protip><p><strong>ProTip:</strong> If your\u2019re moving the component\u2019s class and styles to separate files is because the code is getting too large, consider splitting the component into smaller, more manageable components.</p></blockquote><h3 id=supporting-files><a name=supporting-files class=anchor href=#supporting-files><span class=header-link></span></a>Supporting files</h3><p>Marko discovers supporting files in the same directory as a Marko view. For example, if you have a view named <code>counter.marko</code>, Marko will automatically look for <code>counter.component.js</code> and <code>counter.style.css</code>.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>counter.marko\ncounter.component.js\ncounter.style.css\n</pre><p>Marko also handles views named <code>index.marko</code> specially. It will look for <code>component.js</code> and <code>style.css</code> in addition to <code>index.component.js</code> and <code>index.style.css</code>. This allows easily grouping component files into a directory:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>counter/\n    index.marko\n    component.js\n    style.css\n</pre><p>In your <code>component.js</code> file, export the component\u2019s class:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> <span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      count: <span style=color:#AE81FF>0</span>\n    };\n  }\n  <span style=color:#A6E22E>increment</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#FF4185>++</span>;\n  }\n}\n</pre><p>In your <code>index.marko</code> file, you can reference methods from that class with <code>on-*</code> attributes:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>label</span>>The current count is &lt;<span style=color:#FF4185>output</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>output</span>>&lt;/<span style=color:#FF4185>label</span>>\n&lt;<span style=color:#FF4185>p</span>>&lt;<span style=color:#FF4185>button</span><span style=color:#A6E22E>.primary</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'increment'</span>)>+1&lt;/<span style=color:#FF4185>button</span>>&lt;/<span style=color:#FF4185>p</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>label</span>\n  -- The current count is\n  <span style=color:#FF4185>output</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>\n<span style=color:#FF4185>p</span>\n  <span style=color:#FF4185>button</span><span style=color:#A6E22E>.primary</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>) -- +1\n</pre>"
  }, out, _componentDef, "89");

  out.w("<p>And in your <code>style.css</code>, define the styles:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#A6E22E>.primary</span> {\n  <span style=color:#66D9EF>background</span>: <span style=color:#AE81FF>#09c</span>;\n}\n</pre><blockquote class=protip><p><strong>ProTip:</strong> Marko actually looks any filenames with the pattern <code>[name].style.*</code>, so it will pick up any CSS preprocessor file extensions you use: <code>.less</code>, <code>.stylus</code>, <code>.scss</code>, etc.</p></blockquote><h3 id=components-with-plain-objects><a name=components-with-plain-objects class=anchor href=#components-with-plain-objects><span class=header-link></span></a>Components with plain objects</h3><p>If you target browsers that does not support classes, a plain object of methods can be exported:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> {\n  <span style=color:#A6E22E>onCreate</span>: <span style=color:#66D9EF>function</span> () {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      count: <span style=color:#AE81FF>0</span>\n    };\n  },\n  <span style=color:#A6E22E>increment</span>: <span style=color:#66D9EF>function</span> () {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#FF4185>++</span>;\n  }\n};\n</pre><h2 id=split-components><a name=split-components class=anchor href=#split-components><span class=header-link></span></a>Split components</h2><p>Split components optimize for when a component renders on the server, and doesn\u2019t need to dynamically rerender in the browser. As a result, its template and logic aren\u2019t sent to the browser, reducing load time and download size.</p><blockquote class=note><p><strong>Note:</strong> If a split component is the child of a stateful component, its full rendering logic will still be sent because the parent may pass new input to the split component and rerender it.</p></blockquote><p>Additionally, if <em>all</em> components rendered on a page are split components, Marko\u2019s VDOM and rendering runtime is unnecessary, and therefore not sent to the browser.</p><blockquote class=protip><p><strong>ProTip:</strong> Don\u2019t over-optimize. If your component really doesn\u2019t need rerendering, go ahead and split, but don\u2019t forgo stateful rerendering when it would make your code more maintainable.</p></blockquote><h3 id=usage><a name=usage class=anchor href=#usage><span class=header-link></span></a>Usage</h3><p>Marko discovers split components similarly to how it discovers an external component class. For example, if you have a view named <code>button.marko</code>, it will automatically look for <code>button.component-browser.js</code>. If your view is named <code>index.marko</code>, it will look for <code>component-browser.js</code> in addition to <code>index.component-browser.js</code>.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>counter/\n    index.marko\n    component-browser.js\n</pre><p>A split component might need to do some setup as part of its initial render. In this case, the component may define a second component class to use the <code>onCreate</code>, <code>onInput</code>, and <code>onRender</code> <a href=#lifecycle-events>lifecycle methods</a>.</p><p>This class can be exported from <code>component.js</code>, or defined right in the template as a single-file components. In this case, your component folder may contain a <code>component.js</code> file, and must contain a <code>component-browser.js</code>. The following <a href=#lifecycle-events>lifecycle methods</a> can go inside the <code>component.js</code> file:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>class {\n  onCreate(input, out) { }\n  onInput(input, out) { }\n  onRender(out) { }\n  onDestroy() { }\n}\n</pre><p>And the following <a href=#lifecycle-events>lifecycle methods</a> can go inside the <code>component-browser.js</code> file:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>class {\n  onMount() { }\n  onUpdate() { }\n}\n</pre><p>Any JavaScript code related to the DOM or browser should also be inside <code>component-browser.js</code>.</p><h3 id=example><a name=example class=anchor href=#example><span class=header-link></span></a>Example</h3><p><code>index.marko</code></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n    <span style=color:#A6E22E>onCreate</span>() {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>number</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>123</span>;\n    }\n}\n\n&lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'shout'</span>)>What\u2019s my favorite number?&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>number</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>123</span>;\n  }\n}\n\n<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"shout\"</span>) -- What\u2019s my favorite number?\n</pre>"
  }, out, _componentDef, "145");

  out.w("<p><code>component-browser.js</code></p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> {\n  <span style=color:#A6E22E>shout</span>() {\n    <span style=color:#A6E22E>alert</span>(<span style=color:#FFF066>`My favorite number is </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>this</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>number</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>!`</span>);\n  }\n};\n</pre><h2 id=event-handling><a name=event-handling class=anchor href=#event-handling><span class=header-link></span></a>Event handling</h2><p>The <code>on-[event](methodName|function, ...args)</code> attributes allow event listeners to be attached for either:</p><ul><li>A native DOM event, when used on a native DOM element such as a <code>&lt;button&gt;</code></li><li>Or a UI component event, when used on a custom tag for a UI component such as <code>&lt;my-component&gt;</code></li></ul><p>The <code>on-*</code> attributes are used to associate event handler methods with an event name. Event handlers may be specified by <code>&#39;methodName&#39;</code> \u2014 a string that matches a method on the component instance, or they may be a <code>function</code>. Attaching listeners for native DOM events and UI component custom events is explained in more detail in the sections below.</p><p>You may also use the <code>once-[event](methodName|function, ...args)</code> syntax, which will listen for only the first event, and then remove the listener.</p><h3 id=attaching-dom-event-listeners><a name=attaching-dom-event-listeners class=anchor href=#attaching-dom-event-listeners><span class=header-link></span></a>Attaching DOM event listeners</h3><p>The code below illustrates how to attach an event listener for native DOM events:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onButtonClick</span>(<span style=color:#FFAC4D>name</span>, <span style=color:#FFAC4D>event</span>, <span style=color:#FFAC4D>el</span>) {\n    <span style=color:#A6E22E>alert</span>(<span style=color:#FFF066>`Hello </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>!`</span>);\n  }\n}\n\n<span style=color:#FF4185>static</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>fadeIn</span>(<span style=color:#FFAC4D>event</span>, <span style=color:#FFAC4D>el</span>) {\n  <span style=color:#FFFFFF>el</span>.<span style=color:#FFFFFF>hidden</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>false</span>;\n  <span style=color:#FFFFFF>el</span>.<span style=color:#FFFFFF>style</span>.<span style=color:#FFFFFF>opacity</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>0</span>;\n  <span style=color:#FFFFFF>el</span>.<span style=color:#FFFFFF>style</span>.<span style=color:#FFFFFF>transition</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>'opacity 1s'</span>;\n  <span style=color:#A6E22E>setTimeout</span>(() <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>el</span>.<span style=color:#FFFFFF>style</span>.<span style=color:#FFFFFF>opacity</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>1</span>);\n}\n\n&lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'onButtonClick'</span>, <span style=color:#FFF066>'Frank'</span>)>\n  Say Hello to Frank\n&lt;/<span style=color:#FF4185>button</span>>\n\n&lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'onButtonClick'</span>, <span style=color:#FFF066>'John'</span>)>\n  Say Hello to John\n&lt;/<span style=color:#FF4185>button</span>>\n\n&lt;<span style=color:#FF4185>img</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>'foo.jpg'</span> <span style=color:#66D9EF>once-load</span>(<span style=color:#FFFFFF>fadeIn</span>) <span style=color:#A6E22E>hidden</span> />\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onButtonClick</span>(<span style=color:#FFAC4D>name</span>, <span style=color:#FFAC4D>event</span>, <span style=color:#FFAC4D>el</span>) {\n    <span style=color:#A6E22E>alert</span>(<span style=color:#FFF066>`Hello </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>!`</span>);\n  }\n}\n<span style=color:#FF4185>static</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>fadeIn</span>(<span style=color:#FFAC4D>event</span>, <span style=color:#FFAC4D>el</span>) {\n  <span style=color:#FFFFFF>el</span>.<span style=color:#FFFFFF>hidden</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>false</span>;\n  <span style=color:#FFFFFF>el</span>.<span style=color:#FFFFFF>style</span>.<span style=color:#FFFFFF>opacity</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>0</span>;\n  <span style=color:#FFFFFF>el</span>.<span style=color:#FFFFFF>style</span>.<span style=color:#FFFFFF>transition</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>\"opacity 1s\"</span>;\n  <span style=color:#A6E22E>setTimeout</span>(() <span style=color:#66D9EF>=></span> (<span style=color:#FFFFFF>el</span>.<span style=color:#FFFFFF>style</span>.<span style=color:#FFFFFF>opacity</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>1</span>));\n}\n\n<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"onButtonClick\"</span>, <span style=color:#FFF066>\"Frank\"</span>) -- Say Hello to Frank\n\n<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"onButtonClick\"</span>, <span style=color:#FFF066>\"John\"</span>) -- Say Hello to John\n\n<span style=color:#FF4185>img</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"foo.jpg\"</span> <span style=color:#66D9EF>once-load</span>(<span style=color:#FFFFFF>fadeIn</span>) <span style=color:#A6E22E>hidden</span>\n</pre>"
  }, out, _componentDef, "168");

  out.w("<p>The following arguments are passed to the event handler when the event occurs:</p><ol><li><code>...args</code> - Any extra bound arguments are <em>prepended</em> to the arguments passed to the component\u2019s handler method. For example: <code>on-click(&#39;onButtonClick&#39;, arg1, arg2)</code> \u2192 <code>onButtonClick(arg1, arg2, event, el)</code></li><li><code>event</code> - The native DOM event object.</li><li><code>el</code> - The DOM element that the event listener was attached to.</li></ol><p>When using the <code>on-*</code> or <code>once-*</code> attributes to attach event listeners, Marko uses event delegation that is more efficient than direct attachment of <code>el.addEventListener()</code>. Please see <a href=/docs/why-is-marko-fast/#event-delegation>Why is Marko Fast? \xA7 Event delegation</a> for more details.</p><p><a id=declarative-custom-events></a></p><h3 id=attaching-custom-event-listeners><a name=attaching-custom-event-listeners class=anchor href=#attaching-custom-event-listeners><span class=header-link></span></a>Attaching custom event listeners</h3><p>The code below illustrates how to attach an event listener for a UI component\u2019s custom event:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCounterChange</span>(<span style=color:#FFAC4D>newValue</span>, <span style=color:#FFAC4D>el</span>) {\n    <span style=color:#A6E22E>alert</span>(<span style=color:#FFF066>`New value: </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>newValue</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>!`</span>);\n  }\n  <span style=color:#A6E22E>onCounterMax</span>(<span style=color:#FFAC4D>max</span>) {\n    <span style=color:#A6E22E>alert</span>(<span style=color:#FFF066>`It reached the max: </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>max</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>!`</span>);\n  }\n}\n\n&lt;<span style=color:#FF4185>counter</span> <span style=color:#66D9EF>on-change</span>(<span style=color:#FFF066>'onCounterChange'</span>) <span style=color:#66D9EF>once-max</span>(<span style=color:#FFF066>'onCounterMax'</span>) />\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCounterChange</span>(<span style=color:#FFAC4D>newValue</span>, <span style=color:#FFAC4D>el</span>) {\n    <span style=color:#A6E22E>alert</span>(<span style=color:#FFF066>`New value: </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>newValue</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>!`</span>);\n  }\n  <span style=color:#A6E22E>onCounterMax</span>(<span style=color:#FFAC4D>max</span>) {\n    <span style=color:#A6E22E>alert</span>(<span style=color:#FFF066>`It reached the max: </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>max</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>!`</span>);\n  }\n}\n\n<span style=color:#FF4185>counter</span> <span style=color:#66D9EF>on-change</span>(<span style=color:#FFF066>\"onCounterChange\"</span>) <span style=color:#66D9EF>once-max</span>(<span style=color:#FFF066>\"onCounterMax\"</span>)\n</pre>"
  }, out, _componentDef, "191");

  out.w("<p>The following arguments are passed to the event handler when the event occurs:</p><ol><li><code>...args</code> - Any extra bound arguments are <em>prepended</em> to the arguments passed to the component\u2019s handler method.</li><li><code>...eventArgs</code> - The arguments passed to <code>this.emit()</code> by the target UI component.</li><li><code>component</code> - The component instance that the event listener was attached to.</li></ol><p>The following code illustrates how the UI component for <code>&lt;counter&gt;</code> might emit its <code>change</code> event:</p><p><code>counter/index.marko</code></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>max</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>50</span>;\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> { count: <span style=color:#AE81FF>0</span> };\n  }\n  <span style=color:#A6E22E>increment</span>() {\n    <span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>&lt;</span> <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>max</span>) {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'change'</span>, <span style=color:#FF4185>++</span><span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span>);\n    }\n    <span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>===</span> <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>max</span>) {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'max'</span>, <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span>);\n    }\n  }\n}\n\n\n&lt;<span style=color:#FF4185>button</span><span style=color:#A6E22E>.example-button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'increment'</span>)>\n  Increment\n&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>max</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>50</span>;\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> { count: <span style=color:#AE81FF>0</span> };\n  }\n  <span style=color:#A6E22E>increment</span>() {\n    <span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>&lt;</span> <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>max</span>) {\n      <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>\"change\"</span>, <span style=color:#FF4185>++</span><span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span>);\n    }\n    <span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>===</span> <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>max</span>) {\n      <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>\"max\"</span>, <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span>);\n    }\n  }\n}\n\n<span style=color:#FF4185>button</span><span style=color:#A6E22E>.example-button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>) -- Increment\n</pre>"
  }, out, _componentDef, "207");

  out.w("<blockquote class=protip><p><strong>ProTip:</strong> Unlike native DOM events, UI component custom events may be emitted with multiple arguments. For example:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>\"foo\"</span>, <span style=color:#FFF066>\"bar\"</span>, <span style=color:#FFF066>\"baz\"</span>);\n</pre></blockquote><h2 id=attributes><a name=attributes class=anchor href=#attributes><span class=header-link></span></a>Attributes</h2><h3 id=on-eventmethodnamefunction-args><a name=on-eventmethodnamefunction-args class=anchor href=#on-eventmethodnamefunction-args><span class=header-link></span></a><code>on-[event](methodName|function, ...args)</code></h3><p>The <code>on-*</code> attribute syntax attaches an event listener to either a native DOM event or a UI component event. The <code>on-*</code> attribute associates an event handler method with an event name. Please see the <a href=#event-handling>Event handling</a> section above for details.</p><h3 id=once-eventmethodnamefunction-args><a name=once-eventmethodnamefunction-args class=anchor href=#once-eventmethodnamefunction-args><span class=header-link></span></a><code>once-[event](methodName|function, ...args)</code></h3><p>The same as the <code>on-*</code> attribut,e except that its listener is only invoked for the first event, and then removed from memory. Please see the <a href=#event-handling>Event handling</a> section above for more details.</p><h3 id=key><a name=key class=anchor href=#key><span class=header-link></span></a><code>key</code></h3><p>The <code>key</code> property does 2 things in Marko:</p><ul><li>Obtains references to nested HTML elements and nested UI components.</li><li>Matches corresponding elements together when DOM diffing/patching after a rerender. When updating the DOM, keyed elements/components are matched up and reused rather than discarded and recreated.</li></ul><p>Internally, Marko assigns a unique key to all HTML elements and UI components in a <code>.marko</code> file, based on the order they appear in the file. If you have repeated elements or elements that move between locations in the DOM, then you likely want to assign a custom <code>key</code> by adding a <code>key</code> attribute. The <code>key</code> attribute can be applied to both HTML elements and custom tags.</p><h4 id=referencing-nested-html-elements-and-components><a name=referencing-nested-html-elements-and-components class=anchor href=#referencing-nested-html-elements-and-components><span class=header-link></span></a>Referencing nested HTML elements and components</h4>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onMount</span>() {\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>headerElement</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>getEl</span>(<span style=color:#FFF066>'header'</span>);\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>colorListItems</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>getEls</span>(<span style=color:#FFF066>'colors'</span>);\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>myFancyButton</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>getComponent</span>(<span style=color:#FFF066>'myFancyButton'</span>);\n  }\n}\n\n&lt;<span style=color:#FF4185>h1</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"header\"</span>>Hello&lt;/<span style=color:#FF4185>h1</span>>\n\n&lt;<span style=color:#FF4185>ul</span>>\n  &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span>[<span style=color:#FFF066>'red'</span>, <span style=color:#FFF066>'green'</span>, <span style=color:#FFF066>'blue'</span>]>\n      &lt;<span style=color:#FF4185>li</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"colors[]\"</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>li</span>>\n  &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>ul</span>>\n\n&lt;<span style=color:#FF4185>fancy-button</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"myFancyButton\"</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onMount</span>() {\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>headerElement</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>getEl</span>(<span style=color:#FFF066>\"header\"</span>);\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>colorListItems</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>getEls</span>(<span style=color:#FFF066>\"colors\"</span>);\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>myFancyButton</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>getComponent</span>(<span style=color:#FFF066>\"myFancyButton\"</span>);\n  }\n}\n\n<span style=color:#FF4185>h1</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"header\"</span> -- Hello\n\n<span style=color:#FF4185>ul</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span>[<span style=color:#FFF066>\"red\"</span>, <span style=color:#FFF066>\"green\"</span>, <span style=color:#FFF066>\"blue\"</span>]\n    <span style=color:#FF4185>li</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"colors[]\"</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>\n\n<span style=color:#FF4185>fancy-button</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"myFancyButton\"</span>\n</pre>"
  }, out, _componentDef, "246");

  out.w("<blockquote class=note><p><strong>Note:</strong> The <code>[]</code> suffix (e.g. <code>key=&quot;colors[]&quot;</code>) lets Marko know that the element will be repeated multiple times with the same key.</p></blockquote><h4 id=keyed-matching><a name=keyed-matching class=anchor href=#keyed-matching><span class=header-link></span></a>Keyed matching</h4><p>The <code>key</code> attribute can pair an HTML element or UI component that moves to a new location in the DOM. For example:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      swapped: <span style=color:#AE81FF>false</span>\n    }\n  }\n}\n\n&lt;<span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>swapped</span>)>\n  &lt;<span style=color:#FF4185>p</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"b\"</span>>B&lt;/<span style=color:#FF4185>p</span>>\n  &lt;<span style=color:#FF4185>p</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"a\"</span>>A&lt;/<span style=color:#FF4185>p</span>>\n&lt;/<span style=color:#FF4185>if</span>>\n&lt;<span style=color:#FF4185>else</span>>\n  &lt;<span style=color:#FF4185>p</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"a\"</span>>A&lt;/<span style=color:#FF4185>p</span>>\n  &lt;<span style=color:#FF4185>p</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"b\"</span>>B&lt;/<span style=color:#FF4185>p</span>>\n&lt;/<span style=color:#FF4185>else</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      swapped: <span style=color:#AE81FF>false</span>,\n    };\n  }\n}\n\n<span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>swapped</span>)\n  <span style=color:#FF4185>p</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"b\"</span> -- B\n  <span style=color:#FF4185>p</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"a\"</span> -- A\n<span style=color:#FF4185>else</span>\n  <span style=color:#FF4185>p</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"a\"</span> -- A\n  <span style=color:#FF4185>p</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"b\"</span> -- B\n</pre>"
  }, out, _componentDef, "257");

  out.w("<p>The <code>key</code> attribute can be used to pair HTML elements or UI components that are repeated:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>ul</span>>\n  &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>user</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>users</span>>\n      &lt;<span style=color:#FF4185>li</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>id</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>li</span>>\n  &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>ul</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>ul</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>user</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>users</span>\n    <span style=color:#FF4185>li</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>id</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "260");

  out.w("<p>This way, if the order of <code>input.users</code> changes, the DOM will be rerendered more efficiently.</p><h4 id=scoped><a name=scoped class=anchor href=#scoped><span class=header-link></span></a><code>*:scoped</code></h4><p>The <code>:scoped</code> attribute modifier results in the attribute value getting prefixed with a unique ID associated with the current UI component. <code>:scoped</code> attribute modifiers can be used to assign a globally unique attribute value from a value that only needs to be unique to the current UI component.</p><p>Here\u2019s a use-case: certain HTML attributes reference the <code>id</code> of other elements on the page. For example, the <a href=https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label>HTML <code>&lt;label&gt;</code></a> <code>for</code> attribute takes an <code>id</code> as its value. Many <code>ARIA</code> attributes like <a href=https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute><code>aria-describedby</code></a> also take an <code>id</code> as their value.</p><p>The <code>:scoped</code> modifier on an attribute allows you to reference another element without fear of duplicate <code>id</code>s, as shown in the following examples:</p><p><strong><code>for:scoped</code></strong></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>label</span> <span style=color:#A6E22E>for</span><span style=color:#66D9EF>:scoped</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"name\"</span>>Name&lt;/<span style=color:#FF4185>label</span>>\n&lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>id</span><span style=color:#66D9EF>:scoped</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"name\"</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Frank\"</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>label</span> <span style=color:#A6E22E>for</span><span style=color:#66D9EF>:scoped</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"name\"</span> -- Name\n<span style=color:#FF4185>input</span> <span style=color:#A6E22E>id</span><span style=color:#66D9EF>:scoped</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"name\"</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Frank\"</span>\n</pre>"
  }, out, _componentDef, "286");

  out.w("<p>The above code will output HTML similar to the following:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>label</span> <span style=color:#A6E22E>for</span>=<span style=color:#FFF066>\"c0-name\"</span>>Name&lt;/<span style=color:#FF4185>label</span>> &lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>id</span>=<span style=color:#FFF066>\"c0-name\"</span> <span style=color:#A6E22E>value</span>=<span style=color:#FFF066>\"Frank\"</span> />\n</pre><p><strong><code>aria-describedby:scoped</code></strong></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>button</span>\n   <span style=color:#A6E22E>aria-describedby</span><span style=color:#66D9EF>:scoped</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"closeDisclaimer\"</span>\n   <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'closeDialog'</span>)>Close&lt;/<span style=color:#FF4185>button</span>>\n\n&lt;<span style=color:#FF4185>p</span> <span style=color:#A6E22E>id</span><span style=color:#66D9EF>:scoped</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"closeDisclaimer\"</span>>\n   Closing this window will discard any entered information and return you to the main page.\n&lt;/<span style=color:#FF4185>p</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>button</span> <span style=color:#A6E22E>aria-describedby</span><span style=color:#66D9EF>:scoped</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"closeDisclaimer\"</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"closeDialog\"</span>) -- Close\n\n<span style=color:#FF4185>p</span> <span style=color:#A6E22E>id</span><span style=color:#66D9EF>:scoped</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"closeDisclaimer\"</span>\n  --\n  Closing this window will discard any entered information and return you to the main page.\n  --\n</pre>"
  }, out, _componentDef, "291");

  out.w("<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>button</span> <span style=color:#A6E22E>aria-describedby</span>=<span style=color:#FFF066>\"c0-closeDisclaimer\"</span>>Close&lt;/<span style=color:#FF4185>button</span>>\n\n&lt;<span style=color:#FF4185>p</span> <span style=color:#A6E22E>id</span>=<span style=color:#FFF066>\"c0-closeDisclaimer\"</span>>\n  Closing this window will discard any entered information and return you to the\n  main page.\n&lt;/<span style=color:#FF4185>p</span>>\n</pre><p><strong><code>href:scoped</code></strong></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>a</span> <span style=color:#A6E22E>href</span><span style=color:#66D9EF>:scoped</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"#anchor\"</span>>Jump to section&lt;/<span style=color:#FF4185>a</span>>\n&lt;<span style=color:#FF4185>section</span> <span style=color:#A6E22E>id</span><span style=color:#66D9EF>:scoped</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"anchor\"</span>>&lt;/<span style=color:#FF4185>section</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>a</span> <span style=color:#A6E22E>href</span><span style=color:#66D9EF>:scoped</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"#anchor\"</span> -- Jump to section\n<span style=color:#FF4185>section</span> <span style=color:#A6E22E>id</span><span style=color:#66D9EF>:scoped</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"anchor\"</span>\n</pre>"
  }, out, _componentDef, "295");

  out.w("<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>a</span> <span style=color:#A6E22E>href</span>=<span style=color:#FFF066>\"#c0-anchor\"</span>>Jump to section&lt;/<span style=color:#FF4185>a</span>>\n&lt;<span style=color:#FF4185>section</span> <span style=color:#A6E22E>id</span>=<span style=color:#FFF066>\"c0-anchor\"</span>>&lt;/<span style=color:#FF4185>section</span>>\n</pre><h3 id=no-update><a name=no-update class=anchor href=#no-update><span class=header-link></span></a><code>no-update</code></h3><p>Preserves the DOM subtree associated with the element or component, so it won\u2019t be modified when rerendering.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Never rerender this table --></span>\n&lt;<span style=color:#FF4185>table</span> <span style=color:#66D9EF>no-update</span>>\n  \u2026\n&lt;/<span style=color:#FF4185>table</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Never rerender this table --></span>\n<span style=color:#FF4185>table</span> <span style=color:#66D9EF>no-update</span> -- \u2026\n</pre>"
  }, out, _componentDef, "301");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- N ever rerender this UI component --></span>\n&lt;<span style=color:#FF4185>app-map</span> <span style=color:#66D9EF>no-update</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- N ever rerender this UI component --></span>\n<span style=color:#FF4185>app-map</span> <span style=color:#66D9EF>no-update</span>\n</pre>"
  }, out, _componentDef, "302");

  out.w("<p>This is most useful when other JavaScript modifies the DOM tree of an element, like for embeds.</p><h3 id=no-update-if><a name=no-update-if class=anchor href=#no-update-if><span class=header-link></span></a><code>no-update-if</code></h3><p>Similar to <a href=#no-update>no-update</a>, except that the DOM subtree is <em>conditionally</em> preserved:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Don\u2019t re-render this table without table data --></span>\n&lt;<span style=color:#FF4185>table</span> <span style=color:#66D9EF>no-update-if</span>(<span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>tableData</span> <span style=color:#FF4185>==</span> <span style=color:#AE81FF>null</span>)>\n  \u2026\n&lt;/<span style=color:#FF4185>table</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Don\u2019t re-render this table without table data --></span>\n<span style=color:#FF4185>table</span> <span style=color:#66D9EF>no-update-if</span>(<span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>tableData</span> <span style=color:#FF4185>==</span> <span style=color:#AE81FF>null</span>) -- \u2026\n</pre>"
  }, out, _componentDef, "311");

  out.w("<h3 id=no-update-body><a name=no-update-body class=anchor href=#no-update-body><span class=header-link></span></a><code>no-update-body</code></h3><p>Similar to <a href=#no-update>no-update</a>, except that only the descendant DOM nodes are preserved:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Never rerender any nested DOM elements --></span>\n&lt;<span style=color:#FF4185>div</span> <span style=color:#66D9EF>no-update-body</span>>\n  \u2026\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Never rerender any nested DOM elements --></span>\n<span style=color:#FF4185>div</span> <span style=color:#66D9EF>no-update-body</span> -- \u2026\n</pre>"
  }, out, _componentDef, "318");

  out.w("<h3 id=no-update-body-if><a name=no-update-body-if class=anchor href=#no-update-body-if><span class=header-link></span></a><code>no-update-body-if</code></h3><p>Similar to <a href=#no-update-body>no-update-body</a>, except that its descendant DOM nodes are <em>conditionally</em> preserved:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Never rerender any nested DOM elements without table data --></span>\n&lt;<span style=color:#FF4185>table</span> <span style=color:#66D9EF>no-update-body-if</span>(<span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>tableData</span> <span style=color:#FF4185>==</span> <span style=color:#AE81FF>null</span>)>\n  \u2026\n&lt;/<span style=color:#FF4185>table</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Never rerender any nested DOM elements without table data --></span>\n<span style=color:#FF4185>table</span> <span style=color:#66D9EF>no-update-body-if</span>(<span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>tableData</span> <span style=color:#FF4185>==</span> <span style=color:#AE81FF>null</span>) -- \u2026\n</pre>"
  }, out, _componentDef, "326");

  out.w("<h3 id=no-update_1><a name=no-update_1 class=anchor href=#no-update_1><span class=header-link></span></a><code>:no-update</code></h3><p>Prevents certain attributes from being modified during a rerender. The attribute(s) that should not be modified should have a <code>:no-update</code> modifier:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Never modify the `class` attribute --></span>\n&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#66D9EF>:no-update</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>className</span>>\n  \u2026\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Never modify the `class` attribute --></span>\n<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#66D9EF>:no-update</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>className</span> -- \u2026\n</pre>"
  }, out, _componentDef, "333");

  out.w("<h2 id=properties><a name=properties class=anchor href=#properties><span class=header-link></span></a>Properties</h2><h3 id=thisid><a name=thisid class=anchor href=#thisid><span class=header-link></span></a><code>this.id</code></h3><p>A string identifier for the root HTML element that the component is bound to. (Not the <code>id</code> attribute.)</p><h3 id=thisstate><a name=thisstate class=anchor href=#thisstate><span class=header-link></span></a><code>this.state</code></h3><p>The current state for the component. Changing <code>this.state</code> or its direct properties will cause the component to rerender.</p><p>Only properties that exist when <code>this.state</code> is first defined will be watched for changes. If you don\u2019t need a property initially, you can set its value to <code>null</code>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n    <span style=color:#A6E22E>onCreate</span>() {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n            data: <span style=color:#AE81FF>null</span>,\n            error: <span style=color:#AE81FF>null</span>\n        }\n    }\n    <span style=color:#A6E22E>getData</span>() {\n        <span style=color:#A6E22E>fetch</span>(<span style=color:#FFF066>'/endpoint'</span>)\n            .<span style=color:#A6E22E>then</span>(<span style=color:#FFAC4D>data</span> <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>data</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>data</span>)\n            .<span style=color:#A6E22E>catch</span>(<span style=color:#FFAC4D>error</span> <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>error</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>error</span>);\n    }\n}\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      data: <span style=color:#AE81FF>null</span>,\n      error: <span style=color:#AE81FF>null</span>,\n    };\n  }\n  <span style=color:#A6E22E>getData</span>() {\n    <span style=color:#A6E22E>fetch</span>(<span style=color:#FFF066>\"/endpoint\"</span>)\n      .<span style=color:#A6E22E>then</span>((<span style=color:#FFAC4D>data</span>) <span style=color:#66D9EF>=></span> (<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>data</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>data</span>))\n      .<span style=color:#A6E22E>catch</span>((<span style=color:#FFAC4D>error</span>) <span style=color:#66D9EF>=></span> (<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>error</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>error</span>));\n  }\n}\n</pre>"
  }, out, _componentDef, "352");

  out.w("<p>Beware: setting a <code>state</code> property only <em>nominates</em> the component for a possible rerender, and properties are only watched one level deep. Thus, the component is only rerendered if at least one of the component state properties changed (<code>oldValue !== newValue</code>).</p><p>If none of the properties changed (because the new value is identical, or no difference is detected by a shallow comparison), the assignment is considered a no-operation (great for performance).</p><p>We recommend using <a href=https://wecodetheweb.com/2016/02/12/immutable-javascript-using-es6-and-beyond/ >immutable data structures</a>, but if you want to mutate a state property (perhaps push a new item into an array), you can mark it as dirty with <code>setStateDirty</code>:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>numbers</span>.<span style=color:#A6E22E>push</span>(<span style=color:#FFFFFF>num</span>);\n\n<span style=color:#8F8F9E>// Mark numbers as dirty, because a `push`</span>\n<span style=color:#8F8F9E>// won\u2019t be automatically detected by Marko</span>\n<span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>setStateDirty</span>(<span style=color:#FFF066>\"numbers\"</span>);\n</pre><h3 id=thisinput><a name=thisinput class=anchor href=#thisinput><span class=header-link></span></a><code>this.input</code></h3><p>The current input for the component. Setting <code>this.input</code> will rerender the component. If a <code>&#36;global</code> property is set, <code>out.global</code> will also be updated during the rerender, otherwise the existing <code>&#36;global</code> is used.</p><h2 id=variables><a name=variables class=anchor href=#variables><span class=header-link></span></a>Variables</h2><p>When a Marko component is compiled, some additional variables are available to the rendering function. These variables are described below.</p><h3 id=component><a name=component class=anchor href=#component><span class=header-link></span></a><code>component</code></h3><p>The <code>component</code> variable refers to the instance of the currently rendering UI component. This variable can be used to call methods on the UI component instance:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n    <span style=color:#A6E22E>getFullName</span>() {\n        <span style=color:#66D9EF>const</span> { <span style=color:#FFFFFF>person</span> } <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>input</span>;\n        <span style=color:#FF4185>return</span> <span style=color:#FFF066>`</span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>firstName</span><span style=color:#66D9EF>}</span><span style=color:#FFF066> </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>lastName</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>;\n    }\n}\n\n&lt;<span style=color:#FF4185>h1</span>>Hello, <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>component</span>.<span style=color:#A6E22E>getFullName</span>()<span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>h1</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>getFullName</span>() {\n    <span style=color:#66D9EF>const</span> { <span style=color:#FFFFFF>person</span> } <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>input</span>;\n    <span style=color:#FF4185>return</span> <span style=color:#FFF066>`</span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>firstName</span><span style=color:#66D9EF>}</span><span style=color:#FFF066> </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>lastName</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>;\n  }\n}\n\n<span style=color:#FF4185>h1</span> -- Hello, <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>component</span>.<span style=color:#A6E22E>getFullName</span>()<span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "380");

  out.w("<h3 id=input><a name=input class=anchor href=#input><span class=header-link></span></a><code>input</code></h3><p>The <code>input</code> variable refers to the <code>input</code> object, and is equivalent to <code>component.input</code>|<code>this.input</code>.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>h1</span>>Hello, <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>h1</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>h1</span> -- Hello, <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "390");

  out.w("<h3 id=state><a name=state class=anchor href=#state><span class=header-link></span></a><code>state</code></h3><p>The <code>state</code> variable refers to the UI component\u2019s <code>state</code> object, and is the <em>unwatched</em> equivalent of <code>component.state</code>|<code>this.state</code>.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>h1</span>>Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>h1</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>h1</span> -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "401");

  out.w("<h2 id=methods><a name=methods class=anchor href=#methods><span class=header-link></span></a>Methods</h2><h3 id=destroyoptions><a name=destroyoptions class=anchor href=#destroyoptions><span class=header-link></span></a><code>destroy([options])</code></h3><table class=markdown-table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>removeNode</code></td><td><code>Boolean</code></td><td><code>true</code></td><td><code>false</code> will keep the component in the DOM while unsubscribing all events from it</td></tr><tr><td><code>recursive</code></td><td><code>Boolean</code></td><td><code>true</code></td><td><code>false</code> will prevent child components from being destroyed</td></tr></tbody></table><p>Destroys the component by unsubscribing from all listeners made using the <code>subscribeTo</code> method, and then detaching the component\u2019s root element from the DOM. All nested components (discovered by querying the DOM) are also destroyed.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>component</span>.<span style=color:#A6E22E>destroy</span>({\n  removeNode: <span style=color:#AE81FF>false</span>, <span style=color:#8F8F9E>// true by default</span>\n  recursive: <span style=color:#AE81FF>false</span> <span style=color:#8F8F9E>// true by default</span>\n});\n</pre><h3 id=forceupdate><a name=forceupdate class=anchor href=#forceupdate><span class=header-link></span></a><code>forceUpdate()</code></h3><p>Queue the component to re-render and skip all checks to see if it actually needs it.</p><blockquote class=null><p>When using <code>forceUpdate()</code> the updating of the DOM will be queued up. If you want to immediately update the DOM then call <code>this.update()</code> after calling <code>this.forceUpdate()</code>.</p></blockquote><h3 id=getelkey-index><a name=getelkey-index class=anchor href=#getelkey-index><span class=header-link></span></a><code>getEl([key, index])</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>key</code></td><td><code>String</code></td><td><em>optional</em> \u2014 the scoped identifier for the element</td></tr><tr><td><code>index</code></td><td><code>Number</code></td><td><em>optional</em> \u2014 the index of the component, if <code>key</code> references a repeated component</td></tr><tr><td>return value</td><td><code>HTMLElement</code></td><td>The element matching the key, or <code>this.el</code> if no key is provided</td></tr></tbody></table><p>Returns a nested DOM element by prefixing the provided <code>key</code> with the component\u2019s ID. For Marko, nested DOM elements should be assigned an ID with the <code>key</code> attribute.</p><h3 id=getelskey><a name=getelskey class=anchor href=#getelskey><span class=header-link></span></a><code>getEls(key)</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>key</code></td><td><code>String</code></td><td>The scoped identifier for the element</td></tr><tr><td>return value</td><td><code>Array&lt;HTMLElement&gt;</code></td><td>An array of <em>repeated</em> DOM elements for the given key</td></tr></tbody></table><p>Repeated DOM elements must have a value for the <code>key</code> attribute that ends with <code>[]</code>. For example, <code>key=&quot;items[]&quot;</code>.</p><h3 id=getelidkey-index><a name=getelidkey-index class=anchor href=#getelidkey-index><span class=header-link></span></a><code>getElId([key, index])</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>key</code></td><td><code>String</code></td><td><em>optional</em> \u2014 The scoped identifier for the element</td></tr><tr><td><code>index</code></td><td><code>Number</code></td><td><em>optional</em> \u2014 The index of the component, if <code>key</code> references a repeated component</td></tr><tr><td>return value</td><td><code>String</code></td><td>The element ID matching the key, or <code>this.el.id</code> if <code>key</code> is undefined</td></tr></tbody></table><p>Similar to <code>getEl</code>, but only returns the String ID of the nested DOM element instead of the actual DOM element.</p><h3 id=getcomponentkey-index><a name=getcomponentkey-index class=anchor href=#getcomponentkey-index><span class=header-link></span></a><code>getComponent(key[, index])</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>key</code></td><td><code>String</code></td><td>The scoped identifier for the element</td></tr><tr><td><code>index</code></td><td><code>Number</code></td><td><em>optional</em> \u2014 The index of the component, if <code>key</code> references a repeated component</td></tr><tr><td>return value</td><td><code>Component</code></td><td>A reference to a nested <code>Component</code> for the given key. If an <code>index</code> is provided and the target component is a repeated component (i.e. <code>key=&quot;items[]&quot;</code>), then the component at the given index will be returned.</td></tr></tbody></table><p>For example, given the following component,</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>app-main</span>>\n  &lt;<span style=color:#FF4185>app-child</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"child\"</span>/>\n&lt;/<span style=color:#FF4185>app-main</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>app-main</span>\n  <span style=color:#FF4185>app-child</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"child\"</span>\n</pre>"
  }, out, _componentDef, "578");

  out.w("<p>The following code can be used to get the <code>&lt;app-child/&gt;</code> component:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>childComponent</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>getComponent</span>(<span style=color:#FFF066>\"child\"</span>);\n</pre><h3 id=getcomponentskey-index><a name=getcomponentskey-index class=anchor href=#getcomponentskey-index><span class=header-link></span></a><code>getComponents(key, [, index])</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>key</code></td><td><code>String</code></td><td>The scoped identifier for the element</td></tr><tr><td><code>index</code></td><td><code>Number</code></td><td><em>optional</em> \u2014 The index of the component, if <code>key</code> references a repeated component</td></tr><tr><td>return value</td><td><code>Array&lt;Component&gt;</code></td><td>An array of <em>repeated</em> <code>Component</code> instances for the given key</td></tr></tbody></table><p>Repeated components must have a value for the <code>key</code> attribute that ends with <code>[]</code>, like <code>key=&quot;items[]&quot;</code>.</p><h3 id=isdestroyed><a name=isdestroyed class=anchor href=#isdestroyed><span class=header-link></span></a><code>isDestroyed()</code></h3><p>Returns <code>true</code> if a component has been destroyed using <a href=#ondestroy><code>component.destroy()</code></a>, otherwise <code>false</code>.</p><h3 id=isdirty><a name=isdirty class=anchor href=#isdirty><span class=header-link></span></a><code>isDirty()</code></h3><p>Returns <code>true</code> if the component needs a bath.</p><h3 id=replacestatenewstate><a name=replacestatenewstate class=anchor href=#replacestatenewstate><span class=header-link></span></a><code>replaceState(newState)</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>newState</code></td><td><code>Object</code></td><td>A new state object to replace the previous state</td></tr></tbody></table><p>Replaces the state with an entirely new state. Equivalent to <code>this.state = newState</code>.</p><blockquote class=note><p><strong>Note:</strong> While <code>setState()</code> is additive and will not remove properties that are in the old state but not in the new state, <code>replaceState()</code> <em>will</em> add the new state and remove the old state properties that are not found in the new state. Thus, if <code>replaceState()</code> is used, consider possible side effects if the new state contains less or other properties than the replaced state.</p></blockquote><h3 id=rerenderinput><a name=rerenderinput class=anchor href=#rerenderinput><span class=header-link></span></a><code>rerender([input])</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>input</code></td><td><code>Object</code></td><td><em>optional</em> \u2014 New input data to use when rerendering</td></tr></tbody></table><p>Rerenders the component using its <code>renderer</code>, and either supplied <code>input</code> or internal <code>input</code> and <code>state</code>.</p><h3 id=setstatename-value><a name=setstatename-value class=anchor href=#setstatename-value><span class=header-link></span></a><code>setState(name, value)</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>String</code></td><td>The name of the <code>state</code> property to update</td></tr><tr><td><code>value</code></td><td><code>Any</code></td><td>The new value for the <code>state</code> property</td></tr></tbody></table><p>Changes the value of a single <code>state</code> property. Equivalent to <code>this.state[name] = value</code>, except it will also work for adding new properties to the component state.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>setState</span>(<span style=color:#FFF066>\"disabled\"</span>, <span style=color:#AE81FF>true</span>);\n</pre><h3 id=setstatenewstate><a name=setstatenewstate class=anchor href=#setstatenewstate><span class=header-link></span></a><code>setState(newState)</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>newState</code></td><td><code>Object</code></td><td>A new state object to merge into the previous state</td></tr></tbody></table><p>Changes the value of multiple state properties:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>setState</span>({\n  disabled: <span style=color:#AE81FF>true</span>,\n  size: <span style=color:#FFF066>\"large\"</span>\n});\n</pre><h3 id=setstatedirtyname-value><a name=setstatedirtyname-value class=anchor href=#setstatedirtyname-value><span class=header-link></span></a><code>setStateDirty(name[, value])</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>String</code></td><td>The name of the <code>state</code> property to mark as dirty</td></tr><tr><td><code>value</code></td><td><code>Any</code></td><td><em>optional</em> \u2014 A new value for the <code>state</code> property</td></tr></tbody></table><p>Forces a state property change, even if the value is equal to the old value. This is helpful in cases where a change occurs to a complex object that would not be detected by a shallow compare. Invoking this function completely circumvents all property equality checks (shallow compares) and always rerenders the component.</p><h4 id=more-details><a name=more-details class=anchor href=#more-details><span class=header-link></span></a>More details</h4><p>The first parameter, <code>name</code>, is used to allow update handlers (e.g. <code>update_foo(newValue)</code>) to handle the state transition for the specific state property that was marked dirty.</p><p>The second parameter, <code>value</code>, is used as the new value that is given to update handlers. Because <code>setStateDirty()</code> always bypasses all property equality checks, this parameter is optional. If not given or equal to the old value, the old value will be used for the update handler.</p><p>Important: the given parameters do not affect how or if <code>setStateDirty()</code> rerenders a component; they are only considered as additional information to update handlers.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>// Because this does not create a new array, the change</span>\n<span style=color:#8F8F9E>// would not be detected by a shallow property comparison</span>\n<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>colors</span>.<span style=color:#A6E22E>push</span>(<span style=color:#FFF066>\"red\"</span>);\n\n<span style=color:#8F8F9E>// Force that particular state property to be considered dirty so</span>\n<span style=color:#8F8F9E>// that it will trigger the component's view to be updated</span>\n<span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>setStateDirty</span>(<span style=color:#FFF066>\"colors\"</span>);\n</pre><h3 id=subscribetoemitter><a name=subscribetoemitter class=anchor href=#subscribetoemitter><span class=header-link></span></a><code>subscribeTo(emitter)</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Description</th></tr></thead><tbody><tr><td><code>emitter</code></td><td>A <a href=https://nodejs.org/api/events.html#events_class_eventemitter>Node.js <code>EventEmitter</code></a> or DOM object that emits events (<code>window</code>, <code>document</code>, etc.)</td></tr><tr><td>return value</td><td>A tracked subscription</td></tr></tbody></table><p>When a component is destroyed, it is necessary to remove any listeners that were attached by the component to prevent memory leaks. By using <code>subscribeTo</code>, Marko will automatically track and remove any listeners you attach when the component is destroyed.</p><p>Marko uses <a href=https://github.com/patrick-steele-idem/listener-tracker><code>listener-tracker</code></a> to provide this feature.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>subscribeTo</span>(<span style=color:#FFFFFF>window</span>).<span style=color:#A6E22E>on</span>(<span style=color:#FFF066>\"scroll\"</span>, () <span style=color:#66D9EF>=></span>\n  <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>\"The user scrolled the window!\"</span>)\n);\n</pre><h3 id=update><a name=update class=anchor href=#update><span class=header-link></span></a><code>update()</code></h3><p>Immediately executes any pending updates to the DOM, rather than following the normal queued update mechanism for rendering.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>setState</span>(<span style=color:#FFF066>\"foo\"</span>, <span style=color:#FFF066>\"bar\"</span>);\n<span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>update</span>(); <span style=color:#8F8F9E>// Force the DOM to update</span>\n<span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>setState</span>(<span style=color:#FFF066>\"hello\"</span>, <span style=color:#FFF066>\"world\"</span>);\n<span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>update</span>(); <span style=color:#8F8F9E>// Force the DOM to update</span>\n</pre><h2 id=event-methods><a name=event-methods class=anchor href=#event-methods><span class=header-link></span></a>Event methods</h2><p>Marko components inherit from <a href=https://nodejs.org/api/events.html#events_class_eventemitter><code>EventEmitter</code></a>. Below are a few commonly used methods \u2014 view the Node.js docs for the full list.</p><h3 id=emiteventname-args><a name=emiteventname-args class=anchor href=#emiteventname-args><span class=header-link></span></a><code>emit(eventName, ...args)</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>eventName</code></td><td><code>String</code></td><td>Name of the event</td></tr><tr><td><code>...args</code></td><td><code>Any</code></td><td>All subsequent parameters are passed to the listeners</td></tr></tbody></table><p>Emits a UI component custom event. If a UI component attached a listener with the matching <code>eventName</code>, then the corresponding event listener method will be invoked. Event listeners can be attached using either the <a href=#declarative-custom-events><code>on-[event](methodName|function, ...args)</code></a> attribute syntax, or <code>targetComponent.on()</code>.</p><h3 id=oneventname-handler><a name=oneventname-handler class=anchor href=#oneventname-handler><span class=header-link></span></a><code>on(eventName, handler)</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>eventName</code></td><td><code>String</code></td><td>Name of the event to listen for</td></tr><tr><td><code>handler</code></td><td><code>Function</code></td><td>The function to call when the event fires</td></tr></tbody></table><p>Adds the listener function to the end of the listeners array for the <code>eventName</code> event. Does not check to see if the listener has already been added. Multiple calls passing the same combination of <code>eventName</code> and <code>handler</code> will result in the listener being added and called multiple times.</p><h3 id=onceeventname-handler><a name=onceeventname-handler class=anchor href=#onceeventname-handler><span class=header-link></span></a><code>once(eventName, handler)</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>eventName</code></td><td><code>String</code></td><td>Name of the event to listen for</td></tr><tr><td><code>handler</code></td><td><code>Function</code></td><td>Tthe function to call when the event fires</td></tr></tbody></table><p>Adds a one-time listener function for the <code>eventName</code> event. The next time <code>eventName</code> triggers, this listener is removed and then invoked.</p><h2 id=lifecycle-events><a name=lifecycle-events class=anchor href=#lifecycle-events><span class=header-link></span></a>Lifecycle events</h2><p>Marko defines six lifecycle events:</p><ul><li><code>create</code></li><li><code>input</code></li><li><code>render</code></li><li><code>mount</code></li><li><code>update</code></li><li><code>destroy</code></li></ul><p>These events are emitted at specific points over the lifecycle of a component, as shown below:</p><p><strong>First render</strong></p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'create'</span>)\xA0\u2192\xA0<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'input'</span>)\xA0\u2192\xA0<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'render'</span>)\xA0\u2192\xA0<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'mount'</span>)\n</pre><p><strong>New input</strong></p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'input'</span>)\xA0\u2192\xA0<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'render'</span>)\xA0\u2192\xA0<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'update'</span>)\n</pre><p><strong>Internal state change</strong></p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'render'</span>)\xA0\u2192\xA0<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>'update'</span>)\n</pre><p><strong>Destroy</strong></p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>\"destroy\"</span>);\n</pre><h3 id=lifecycle-event-methods><a name=lifecycle-event-methods class=anchor href=#lifecycle-event-methods><span class=header-link></span></a>Lifecycle event methods</h3><p>Each lifecycle event has a corresponding component lifecycle method that can listen for the event:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>(<span style=color:#FFAC4D>input</span>, <span style=color:#FFAC4D>out</span>) { }\n  <span style=color:#A6E22E>onInput</span>(<span style=color:#FFAC4D>input</span>, <span style=color:#FFAC4D>out</span>) { }\n  <span style=color:#A6E22E>onRender</span>(<span style=color:#FFAC4D>out</span>) { }\n  <span style=color:#A6E22E>onMount</span>() { }\n  <span style=color:#A6E22E>onUpdate</span>() { }\n  <span style=color:#A6E22E>onDestroy</span>() { }\n}\n</pre><blockquote class=protip><p><strong>ProTip:</strong> When a lifecycle event occurs in the browser, the corresponding event is emitted on the component instance. A parent component, or other code that has access to the component instance, can listen for these events. For example:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>component</span>.<span style=color:#A6E22E>on</span>(<span style=color:#FFF066>\"input\"</span>, <span style=color:#66D9EF>function</span> (<span style=color:#FFAC4D>input</span>, <span style=color:#FFAC4D>out</span>) {\n  <span style=color:#8F8F9E>// The component received an input</span>\n});\n</pre></blockquote><h3 id=oncreateinput-out><a name=oncreateinput-out class=anchor href=#oncreateinput-out><span class=header-link></span></a><code>onCreate(input, out)</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Description</th></tr></thead><tbody><tr><td><code>input</code></td><td>The input data used to render the component for the first time</td></tr><tr><td><code>out</code></td><td>The async <code>out</code> used to render the component for the first time</td></tr></tbody></table><p>The <code>create</code> event is emitted (and <code>onCreate</code> is called) when the component is first created.</p><p><code>onCreate</code> is typically used to set the initial state for stateful components:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n    <span style=color:#A6E22E>onCreate</span>(<span style=color:#FFAC4D>input</span>) {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> { count: <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>initialCount</span> };\n    }\n}\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>(<span style=color:#FFAC4D>input</span>) {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> { count: <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>initialCount</span> };\n  }\n}\n</pre>"
  }, out, _componentDef, "940");

  out.w("<h3 id=oninputinput-out><a name=oninputinput-out class=anchor href=#oninputinput-out><span class=header-link></span></a><code>onInput(input, out)</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Description</th></tr></thead><tbody><tr><td><code>input</code></td><td>The new input data</td></tr></tbody></table><p>The <code>input</code> event is emitted (and <code>onInput</code> is called) when the component receives input: both the initial input, and for any subsequent updates to its input.</p><h3 id=onrenderout><a name=onrenderout class=anchor href=#onrenderout><span class=header-link></span></a><code>onRender(out)</code></h3><table class=markdown-table><thead><tr><th>Signature</th><th>Description</th></tr></thead><tbody><tr><td><code>out</code></td><td>The async <code>out</code> for the current render</td></tr></tbody></table><p>The <code>render</code> event is emitted (and <code>onRender</code> is called) when the component is about to render or rerender.</p><h3 id=onmount><a name=onmount class=anchor href=#onmount><span class=header-link></span></a><code>onMount()</code></h3><p>The <code>mount</code> event is emitted (and <code>onMount</code> is called) when the component is first mounted to the DOM. For server-rendered components, this is the first event that is emitted only in the browser.</p><p>This is the first point at which <code>this.el</code> and <code>this.els</code> are defined. <code>onMount</code> is commonly used to attach third-party JavaScript to the newly-mounted DOM.</p><p>For example, attaching a library that monitors if the component is in the viewport:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>scrollmonitor</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>'scrollmonitor'</span>;\n\n<span style=color:#66D9EF>class</span> {\n    <span style=color:#A6E22E>onMount</span>() {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>scrollmonitor</span>.<span style=color:#A6E22E>create</span>(<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>el</span>);\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span>.<span style=color:#A6E22E>enterViewport</span>(() <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>'I have entered the viewport'</span>));\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span>.<span style=color:#A6E22E>exitViewport</span>(() <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>'I have left the viewport'</span>));\n    }\n}\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>scrollmonitor</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"scrollmonitor\"</span>;\n<span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onMount</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>scrollmonitor</span>.<span style=color:#A6E22E>create</span>(<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>el</span>);\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span>.<span style=color:#A6E22E>enterViewport</span>(() <span style=color:#66D9EF>=></span>\n      <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>\"I have entered the viewport\"</span>)\n    );\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span>.<span style=color:#A6E22E>exitViewport</span>(() <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>\"I have left the viewport\"</span>));\n  }\n}\n</pre>"
  }, out, _componentDef, "988");

  out.w("<h3 id=onupdate><a name=onupdate class=anchor href=#onupdate><span class=header-link></span></a><code>onUpdate()</code></h3><p>The <code>update</code> event is emitted (and <code>onUpdate</code> is called) when the component is called after a component rerenders and the DOM has been updated. If a rerender does not update the DOM (nothing changed), this event will not fire.</p><h3 id=ondestroy><a name=ondestroy class=anchor href=#ondestroy><span class=header-link></span></a><code>onDestroy()</code></h3><p>The <code>destroy</code> event is emitted (and <code>onDestroy</code> is called) when the component is about to unmount from the DOM and cleaned up. <code>onDestroy</code> should be used to do any additional cleanup beyond what Marko handles itself.</p><p>For example, cleaning up from our <code>scrollmonitor</code> example in <a href=#onmount><code>onMount</code></a>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>scrollmonitor</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>'scrollmonitor'</span>;\n\n<span style=color:#66D9EF>class</span> {\n    <span style=color:#A6E22E>onMount</span>() {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>scrollmonitor</span>.<span style=color:#A6E22E>create</span>(<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>el</span>);\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span>.<span style=color:#A6E22E>enterViewport</span>(() <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>'Entered the viewport'</span>));\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span>.<span style=color:#A6E22E>exitViewport</span>(() <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>'Left the viewport'</span>));\n    }\n    <span style=color:#A6E22E>onDestroy</span>() {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span>.<span style=color:#A6E22E>destroy</span>();\n    }\n}\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>scrollmonitor</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"scrollmonitor\"</span>;\n<span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onMount</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>scrollmonitor</span>.<span style=color:#A6E22E>create</span>(<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>el</span>);\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span>.<span style=color:#A6E22E>enterViewport</span>(() <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>\"Entered the viewport\"</span>));\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span>.<span style=color:#A6E22E>exitViewport</span>(() <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>\"Left the viewport\"</span>));\n  }\n  <span style=color:#A6E22E>onDestroy</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>watcher</span>.<span style=color:#A6E22E>destroy</span>();\n  }\n}\n</pre>"
  }, out, _componentDef, "1008");

  out.w("<h2 id=dom-manipulation-methods><a name=dom-manipulation-methods class=anchor href=#dom-manipulation-methods><span class=header-link></span></a>DOM manipulation methods</h2><p>The following methods move the component\u2019s root DOM node(s) from the current parent element to a new parent element (or out of the DOM in the case of <code>detach</code>).</p><h3 id=appendtotargetel><a name=appendtotargetel class=anchor href=#appendtotargetel><span class=header-link></span></a><code>appendTo(targetEl)</code></h3><p>Moves the UI component\u2019s DOM elements into the position after the target element\u2019s last child.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>appendTo</span>(<span style=color:#FFFFFF>document</span>.<span style=color:#FFFFFF>body</span>);\n</pre><h3 id=insertaftertargetel><a name=insertaftertargetel class=anchor href=#insertaftertargetel><span class=header-link></span></a><code>insertAfter(targetEl)</code></h3><p>Moves the UI component\u2019s DOM elements into the position after the target DOM element.</p><h3 id=insertbeforetargetel><a name=insertbeforetargetel class=anchor href=#insertbeforetargetel><span class=header-link></span></a><code>insertBefore(targetEl)</code></h3><p>Moves the UI component\u2019s DOM elements into the position before the target DOM element.</p><h3 id=prependtotargetel><a name=prependtotargetel class=anchor href=#prependtotargetel><span class=header-link></span></a><code>prependTo(targetEl)</code></h3><p>Moves the UI component\u2019s DOM elements into the position before the target element\u2019s first child.</p><h3 id=replacetargetel><a name=replacetargetel class=anchor href=#replacetargetel><span class=header-link></span></a><code>replace(targetEl)</code></h3><p>Replaces the target element with the UI component\u2019s DOM elements.</p><h3 id=replacechildrenoftargetel><a name=replacechildrenoftargetel class=anchor href=#replacechildrenoftargetel><span class=header-link></span></a><code>replaceChildrenOf(targetEl)</code></h3><p>Replaces the target element\u2019s children with the UI component\u2019s DOM elements.</p>");
}, {
  t: class_components_marko_componentType,
  i: true
}, class_components_marko_component);
__webpack_require__(6579)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/cloudflare-workers.md


const cloudflare_workers_marko_componentType = "WPORclDU",
      cloudflare_workers_marko_template = (0,index_js_namespaceObject.t)(cloudflare_workers_marko_componentType);

/* harmony default export */ const cloudflare_workers = (cloudflare_workers_marko_template);

toc_registry.set("../../node_modules/marko/docs/cloudflare-workers.md", "<ul class=\"toc toc-level1\"><li><a href=\"#usage\">Usage</a><ul class=\"toc toc-level2\"><li><a href=\"#byob-bring-your-own-bundler\">BYOB</a></li></ul></li></ul>");
const cloudflare_workers_title = "Marko + Cloudflare Workers";

const cloudflare_workers_marko_component = {};
cloudflare_workers_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=marko-cloudflare-workers><a name=marko-cloudflare-workers class=anchor href=#marko-cloudflare-workers><span class=header-link></span></a>Marko + Cloudflare Workers</h1><p>See the <a href=https://github.com/marko-js/examples/tree/master/examples/vite-cloudflare>the cloudflare sample</a> project for a working example.</p><h2 id=usage><a name=usage class=anchor href=#usage><span class=header-link></span></a>Usage</h2><p>When using Marko with <a href=https://workers.cloudflare.com/ >Cloudflare Workers</a>, make sure that Marko is loaded with a <code>worker</code> <a href=https://nodejs.org/api/packages.html#conditional-exports>export condition</a>. Most bundlers support defining export conditions.</p><p>After that point, imported <code>.marko</code> files will export a <code>.stream</code> method that returns a worker compatible <a href=https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream><code>ReadableStream</code></a>. You can then respond with that returned stream:</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>Template</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./index.marko\"</span>;\n\n<span style=color:#A6E22E>addEventListener</span>(<span style=color:#FFF066>\"fetch\"</span>, <span style=color:#FFAC4D>event</span> <span style=color:#66D9EF>=></span> {\n  <span style=color:#FFFFFF>event</span>.<span style=color:#A6E22E>respondWith</span>(<span style=color:#A6E22E>handleRequest</span>(<span style=color:#FFFFFF>event</span>.<span style=color:#FFFFFF>request</span>));\n});\n\n<span style=color:#FF4185>async</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>handleRequest</span>(<span style=color:#FFAC4D>request</span>) {\n  <span style=color:#FF4185>return</span> <span style=color:#FF4185>new</span> <span style=color:#A6E22E>Response</span>(<span style=color:#FFFFFF>Template</span>.<span style=color:#A6E22E>stream</span>(), {\n    headers: {\n      status: <span style=color:#AE81FF>200</span>,\n      headers: { <span style=color:#FFF066>\"content-type\"</span>: <span style=color:#FFF066>\"text/html;charset=UTF-8\"</span> }\n    }\n  });\n}\n</pre><h3 id=byob-bring-your-own-bundler><a name=byob-bring-your-own-bundler class=anchor href=#byob-bring-your-own-bundler><span class=header-link></span></a>BYOB (Bring your own bundler)</h3><p>For the large portion of Marko&#39;s API a bundler is required. The example code above assumes that Marko templates can be loaded in your environment. Marko supports a number of bundlers, <a href=#bundler-integrations>take a look through our supported bundlers</a> and pick what works best for you.</p>");
}, {
  t: cloudflare_workers_marko_componentType,
  i: true
}, cloudflare_workers_marko_component);
__webpack_require__(6646)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/compiler-hooks.png
/* harmony default export */ const compiler_hooks = (__webpack_require__.p + "e6d9b930.png");
;// CONCATENATED MODULE: ../../node_modules/marko/docs/compiler.md


const compiler_marko_componentType = "VyISE2bz",
      compiler_marko_template = (0,index_js_namespaceObject.t)(compiler_marko_componentType);

/* harmony default export */ const compiler = (compiler_marko_template);

toc_registry.set("../../node_modules/marko/docs/compiler.md", "<ul class=\"toc toc-level1\"><li><a href=\"#compile-api\">Compile API</a><ul class=\"toc toc-level2\"><li><a href=\"#compile-functions\">Compile Functions</a><ul class=\"toc toc-level3\"><li><a href=\"#compilercompilefilefilename-string-options-compileoptions-promisecompileresult\">compiler.compileFile(): Promise&lt;CompileResult&gt;</a></li><li><a href=\"#compilercompilefilesyncfilename-string-options-compileoptions-compileresult\">compiler.compileFileSync(): CompileResult</a></li><li><a href=\"#compilercompilesrc-string-filename-string-options-compileoptions-promisecompileresult\">compiler.compile(): Promise&lt;CompileResult&gt;</a></li><li><a href=\"#compilercompilesyncsrc-string-filename-string-options-compileoptions-compileresult\">compiler.compileSync(): CompileResult</a></li></ul></li><li><a href=\"#options\">Options</a><ul class=\"toc toc-level3\"><li><a href=\"#output\">output</a></li><li><a href=\"#code\">code</a></li><li><a href=\"#ast\">ast</a></li><li><a href=\"#striptypes\">stripTypes</a></li><li><a href=\"#runtimeid\">runtimeId</a></li><li><a href=\"#writeversioncomment\">writeVersionComment</a></li><li><a href=\"#ignoreunrecognizedtags\">ignoreUnrecognizedTags</a></li><li><a href=\"#sourcemaps\">sourceMaps</a></li><li><a href=\"#meta\">meta</a></li><li><a href=\"#filesystem\">fileSystem</a></li><li><a href=\"#modules\">modules</a></li><li><a href=\"#optimize\">optimize</a></li><li><a href=\"#resolvevirtualdependency\">resolveVirtualDependency</a><ul class=\"toc toc-level4\"><li><a href=\"#example-based-on-markowebpackloader\">Example based on @marko/webpack/loader:</a></li></ul></li><li><a href=\"#hydrateincludeimports\">hydrateIncludeImports</a></li><li><a href=\"#cache\">cache</a></li><li><a href=\"#babelconfig\">babelConfig</a></li><li><a href=\"#translator\">translator</a></li></ul></li></ul></li><li><a href=\"#hooks\">Hooks</a><ul class=\"toc toc-level2\"><li><a href=\"#parse\">Parse</a></li><li><a href=\"#migrate\">Migrate</a></li><li><a href=\"#transform\">Transform</a></li><li><a href=\"#analyze\">Analyze</a></li><li><a href=\"#translate\">Translate</a></li></ul></li><li><a href=\"#utilities\">Utilities</a></li><li><a href=\"#marko-ast\">Marko AST</a></li></ul>");
const compiler_title = "Compiler";





const compiler_marko_component = {};
compiler_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=compiler><a name=compiler class=anchor href=#compiler><span class=header-link></span></a>Compiler</h1><blockquote class=note><p><strong>Note:</strong> The compiler is an advanced API intended for integrating with build tools (webpack, rollup, etc.) and experimenting with new language features in userland. It&#39;s best to use existing official plugins and the standard tag library when possible.</p></blockquote><h2 id=compile-api><a name=compile-api class=anchor href=#compile-api><span class=header-link></span></a>Compile API</h2><h3 id=compile-functions><a name=compile-functions class=anchor href=#compile-functions><span class=header-link></span></a>Compile Functions</h3><p>The compile functions take an input Marko template <a href=#options><code>CompileOptions</code></a>and produce a <code>CompileResult</code> containing the executable JavaScript:</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>type</span> CompileResult <span style=color:#FFFFFF>=</span> {\n  <span style=color:#FFFFFF>meta</span><span style=color:#FF4185>:</span> Record&lt;<span style=color:#66D9EF>string</span>, <span style=color:#66D9EF>unknown</span>>; <span style=color:#8F8F9E>// Meta data gathered while compiling</span>\n  <span style=color:#FFFFFF>map</span><span style=color:#FF4185>?:</span> SourceMap; <span style=color:#8F8F9E>// A sourcemap</span>\n  <span style=color:#FFFFFF>code</span><span style=color:#FF4185>:</span> <span style=color:#66D9EF>string</span>; <span style=color:#8F8F9E>// The translated code</span>\n};\n</pre><h4 id=compilercompilefilefilename-string-options-compileoptions-promisecompileresult><a name=compilercompilefilefilename-string-options-compileoptions-promisecompileresult class=anchor href=#compilercompilefilefilename-string-options-compileoptions-promisecompileresult><span class=header-link></span></a><code>compiler.compileFile(filename: string, options?: CompileOptions): Promise&lt;CompileResult&gt;</code></h4><h4 id=compilercompilefilesyncfilename-string-options-compileoptions-compileresult><a name=compilercompilefilesyncfilename-string-options-compileoptions-compileresult class=anchor href=#compilercompilefilesyncfilename-string-options-compileoptions-compileresult><span class=header-link></span></a><code>compiler.compileFileSync(filename: string, options?: CompileOptions): CompileResult</code></h4><p><code>compileFile</code> and <code>compileFileSync</code> load the source template at <code>filename</code> from disk and translate it into JavaScript.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#AE81FF>*</span> <span style=color:#FF4185>as</span> <span style=color:#FFFFFF>compiler</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@marko/compiler\"</span>;\n\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>asyncResult</span> <span style=color:#FFFFFF>=</span> <span style=color:#FF4185>await</span> <span style=color:#FFFFFF>compiler</span>.<span style=color:#A6E22E>compileFile</span>(<span style=color:#FFF066>\"./src/index.marko\"</span>, {\n  modules: <span style=color:#FFF066>\"cjs\"</span>\n});\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>syncResult</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>compiler</span>.<span style=color:#A6E22E>compileFileSync</span>(<span style=color:#FFF066>\"./src/index.marko\"</span>, {\n  modules: <span style=color:#FFF066>\"cjs\"</span>\n});\n</pre><h4 id=compilercompilesrc-string-filename-string-options-compileoptions-promisecompileresult><a name=compilercompilesrc-string-filename-string-options-compileoptions-promisecompileresult class=anchor href=#compilercompilesrc-string-filename-string-options-compileoptions-promisecompileresult><span class=header-link></span></a><code>compiler.compile(src: string, filename: string, options?: CompileOptions): Promise&lt;CompileResult&gt;</code></h4><h4 id=compilercompilesyncsrc-string-filename-string-options-compileoptions-compileresult><a name=compilercompilesyncsrc-string-filename-string-options-compileoptions-compileresult class=anchor href=#compilercompilesyncsrc-string-filename-string-options-compileoptions-compileresult><span class=header-link></span></a><code>compiler.compileSync(src: string, filename: string, options?: CompileOptions): CompileResult</code></h4><p><code>compile</code> and <code>compileSync</code> allow passing the source template as a string rather than loading from disk. The <code>filename</code> location is used for resolving taglibs and imports, but does not have to actually exist on disk.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#AE81FF>*</span> <span style=color:#FF4185>as</span> <span style=color:#FFFFFF>compiler</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@marko/compiler\"</span>;\n\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>asyncResult</span> <span style=color:#FFFFFF>=</span> <span style=color:#FF4185>await</span> <span style=color:#FFFFFF>compiler</span>.<span style=color:#A6E22E>compile</span>(\n  <span style=color:#FFF066>\"&lt;h1>Hello!&lt;/>\"</span>,\n  <span style=color:#FFF066>\"./src/index.marko\"</span>,\n  { modules: <span style=color:#FFF066>\"cjs\"</span> }\n);\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>syncResult</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>compiler</span>.<span style=color:#A6E22E>compileSync</span>(<span style=color:#FFF066>\"&lt;h1>Hello!&lt;/>\"</span>, <span style=color:#FFF066>\"./src/index.marko\"</span>, {\n  modules: <span style=color:#FFF066>\"cjs\"</span>\n});\n</pre><h3 id=options><a name=options class=anchor href=#options><span class=header-link></span></a>Options</h3><p>Configuration options may be passed when calling the above compile functions or the compiler may be configured globally, overriding the default compiler options:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#AE81FF>*</span> <span style=color:#FF4185>as</span> <span style=color:#FFFFFF>compiler</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@marko/compiler\"</span>;\n<span style=color:#FFFFFF>compiler</span>.<span style=color:#A6E22E>configure</span>({ output: <span style=color:#FFF066>\"dom\"</span> });\n</pre><h4 id=output><a name=output class=anchor href=#output><span class=header-link></span></a><code>output</code></h4><p>Type: <code>string</code><br> Default: <code>&quot;html&quot;</code></p><ul><li><code>&quot;html&quot;</code> - compiles the template to JavaScript that generates HTML strings.</li><li><code>&quot;dom&quot;</code> - compiles the template to JavaScript that generates DOM nodes.</li><li><code>&quot;hydrate&quot;</code> - similar to DOM, but only includes the assets &amp; components needed in the browser, assuming the page was rendered on the server.</li><li><code>&quot;migrate&quot;</code> - only runs migrations (not transforms or translation) and returns the migrated template code.</li><li><code>&quot;source&quot;</code> - parses Marko file without running any migrations / transforms. (useful with <code>ast: true</code>)</li></ul><p>When using output <code>dom</code> or <code>hydrate</code>, you should also specify a <a href=#resolvevirtualdependency><code>resolveVirtualDependency</code></a> function.</p><h4 id=code><a name=code class=anchor href=#code><span class=header-link></span></a><code>code</code></h4><p>Type: <code>boolean</code><br> Default: true</p><p>If set to false, Marko will not generate the compiled source code string.</p><h4 id=ast><a name=ast class=anchor href=#ast><span class=header-link></span></a><code>ast</code></h4><p>Type: <code>boolean</code><br> Default: false</p><p>Set to true to have the compiler provide the <code>ast</code> in it&#39;s output.</p><h4 id=striptypes><a name=striptypes class=anchor href=#striptypes><span class=header-link></span></a><code>stripTypes</code></h4><p>Type: <code>boolean|undefined</code><br> Default: undefined</p><p>Remove all typescript types from the output when <code>true</code>. If the value is <code>undefined</code>, the default, the compiler will remove types if the <code>output</code> option is not <code>source</code> or <code>migrate</code>.</p><p>For example to run migrations <em>and</em> strip types you can set both <code>output: &quot;migrate&quot;</code> and <code>stripTypes: true</code>.</p><h4 id=runtimeid><a name=runtimeid class=anchor href=#runtimeid><span class=header-link></span></a><code>runtimeId</code></h4><p>Type: <code>string</code><br> Default: undefined</p><p>Optionally use to override the runtime id (used to differentiate multiple copies of Marko on the same page) passed to <code>marko/components.init(runtimeId)</code> when compiling in the <code>hydrate</code> output.</p><h4 id=writeversioncomment><a name=writeversioncomment class=anchor href=#writeversioncomment><span class=header-link></span></a><code>writeVersionComment</code></h4><p>Type: <code>boolean</code><br> Default: <code>true</code></p><p>Whether the version should be written to the template as a comment e.g.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>// Compiled using marko@x.x.x - DO NOT EDIT</span>\n</pre><h4 id=ignoreunrecognizedtags><a name=ignoreunrecognizedtags class=anchor href=#ignoreunrecognizedtags><span class=header-link></span></a><code>ignoreUnrecognizedTags</code></h4><p>Type: <code>boolean</code><br> Default: <code>false</code></p><p>Whether unrecognized tags should be silently ignored rather than throwing a compile error. The the ignored tag will be output as a native element. Some test setups use this alongside <code>@marko/compiler/taglib</code>&#39;s <code>excludeDir</code> and <code>excludePackage</code> to simulate &quot;shallow&quot; rendering.</p><h4 id=sourcemaps><a name=sourcemaps class=anchor href=#sourcemaps><span class=header-link></span></a><code>sourceMaps</code></h4><p>Type: <code>boolean</code> or <code>string</code><br> Default: <code>false</code></p><p>Whether source maps should be output with the compiled templates.</p><ul><li>When <code>true</code> a <code>map</code> property will be available on the compile result.</li><li>When <code>&quot;inline&quot;</code> the sourcemap will be inlined as a comment in the output code.</li><li>When <code>&quot;both&quot;</code> both of the above will be used.</li></ul><h4 id=meta><a name=meta class=anchor href=#meta><span class=header-link></span></a><code>meta</code></h4><p>Type: <code>boolean</code><br> Default: <code>false</code></p><p><em>Deprecated</em>. This option inlines the metadata in the output Javascript code. Metadata should be accessed instead from the <code>CompileResult</code>.</p><h4 id=filesystem><a name=filesystem class=anchor href=#filesystem><span class=header-link></span></a><code>fileSystem</code></h4><p>Type: typeof <a href=https://nodejs.org/api/fs.html><code>fs</code></a> (specifically read APIs)<br> Default: Cached <code>fs</code></p><p>Use a different file system object (eg. webpack&#39;s <a href=https://github.com/webpack/enhanced-resolve/blob/f08fe3f1a22c90c722eca14b38a9300ad00c62e8/lib/CachedInputFileSystem.js>CachedInputFileSystem</a> or <a href=https://github.com/eBay/arc/tree/master/packages/arc-fs><code>arc-fs</code></a>)</p><h4 id=modules><a name=modules class=anchor href=#modules><span class=header-link></span></a><code>modules</code></h4><p>Type: <code>string</code> (<code>&quot;esm&quot;</code> or <code>&quot;cjs&quot;</code>)<br> Default: <code>&quot;esm&quot;</code></p><p>By default Marko outputs ES Modules, you can optionally specify commonjs.</p><h4 id=optimize><a name=optimize class=anchor href=#optimize><span class=header-link></span></a><code>optimize</code></h4><p>Type: <code>boolean</code><br> Default: <a href=https://github.com/marko-js/marko/blob/0f212897d2d3ec30b12c2f18ba950818bccb83b4/packages/compiler/src/babel-plugin/index.js#L277-L284>environment based</a> (<code>false</code> in development, <code>true</code> in production)</p><p>Enables production mode optimizations</p><h4 id=resolvevirtualdependency><a name=resolvevirtualdependency class=anchor href=#resolvevirtualdependency><span class=header-link></span></a><code>resolveVirtualDependency</code></h4><p>Type:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>(\n  <span style=color:#FFFFFF>filename</span>: <span style=color:#FFFFFF>string</span>,\n  <span style=color:#FFFFFF>dep</span>: {\n    code: <span style=color:#FFFFFF>string</span>;\n    <span style=color:#FFFFFF>virtualPath</span>: <span style=color:#FFFFFF>string</span>;\n    <span style=color:#FFFFFF>map</span><span style=color:#FF4185>?:</span> <span style=color:#FFFFFF>SourceMap</span>;\n  }\n) <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>string</span>;\n</pre><p>Default: <code>undefined</code></p><p>This option should be set when <code>dom</code> or <code>hydrate</code> output is specified. Since Marko templates can represent multiple output files (eg. JS renderer, CSS styles), we need to be able to treat a single source <code>.marko</code> file as multiple virtual files.</p><p>Different build tools have different mechanisms for handling virtual files. You should pass a function that returns a virtual path that can be handled by your build tool.</p><h5 id=example-based-on-markowebpackloader><a name=example-based-on-markowebpackloader class=anchor href=#example-based-on-markowebpackloader><span class=header-link></span></a>Example based on <code>@marko/webpack/loader</code>:</h5><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>// lookup is shared between resolveVirtualDependency and markoLoader</span>\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>virtualSources</span> <span style=color:#FFFFFF>=</span> <span style=color:#FF4185>new</span> <span style=color:#A6E22E>Map</span>();\n\n<span style=color:#66D9EF>function</span> <span style=color:#A6E22E>resolveVirtualDependency</span>(<span style=color:#FFAC4D>filename</span>, { <span style=color:#FFAC4D>virtualPath</span>, <span style=color:#FFAC4D>code</span>, <span style=color:#FFAC4D>map</span> }) {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>virtualFilename</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>`</span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>filename</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>?virtual=</span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>virtualPath</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>;\n\n  <span style=color:#8F8F9E>// Add the virtual source to the lookup</span>\n  <span style=color:#8F8F9E>// to be later accessed by the loader</span>\n  <span style=color:#FFFFFF>virtualSources</span>.<span style=color:#A6E22E>set</span>(<span style=color:#FFFFFF>virtualFilename</span>, { <span style=color:#FFFFFF>code</span>, <span style=color:#FFFFFF>map</span> });\n\n  <span style=color:#8F8F9E>// Generate the webpack path, from right to left...</span>\n  <span style=color:#8F8F9E>// 1. Pass the virtualFilename so webpack can find the real file</span>\n  <span style=color:#8F8F9E>//    located at sourceFilename, but the virtualPath is also present</span>\n  <span style=color:#8F8F9E>//    (eg. \"./index.marko?virtual=./index.marko.css\")</span>\n  <span style=color:#8F8F9E>// 2. Use an inline loader to run this file through @marko/webpack/loader</span>\n  <span style=color:#8F8F9E>//    https://webpack.js.org/concepts/loaders/#inline</span>\n  <span style=color:#8F8F9E>// 3. Use an inline matchResource to redefine this as the virtualPath</span>\n  <span style=color:#8F8F9E>//    which allows the appropriate loaders to match the virtual dependency</span>\n  <span style=color:#8F8F9E>//    https://webpack.js.org/api/loaders/#inline-matchresource</span>\n  <span style=color:#FF4185>return</span> <span style=color:#FFF066>`</span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>virtualPath</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>!=!@marko/webpack/loader!</span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>virtualFilename</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>;\n}\n\n<span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>markoLoader</span>(<span style=color:#FFAC4D>source</span>) {\n  <span style=color:#66D9EF>let</span> <span style=color:#FFFFFF>code</span>, <span style=color:#FFFFFF>map</span>;\n\n  <span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>virtualSources</span>.<span style=color:#A6E22E>has</span>(<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>resource</span>)) {\n    <span style=color:#8F8F9E>// If the resource has a ?virtual query param, we should</span>\n    <span style=color:#8F8F9E>// find it in the lookup and then return the virtual code</span>\n    <span style=color:#8F8F9E>// rather than performing the normal compilation</span>\n    { <span style=color:#FFFFFF>code</span>, <span style=color:#FFFFFF>map</span> } <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>virtualSources</span>.<span style=color:#A6E22E>get</span>(<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>resource</span>);\n    <span style=color:#FFFFFF>virtualSources</span>.<span style=color:#A6E22E>delete</span>(<span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>resource</span>);\n  } <span style=color:#FF4185>else</span> {\n    <span style=color:#8F8F9E>// The default behavior is to compile the template in dom output mode</span>\n    { <span style=color:#FFFFFF>code</span>, <span style=color:#FFFFFF>map</span> } <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>markoCompiler</span>.<span style=color:#A6E22E>compileSync</span>(<span style=color:#FFFFFF>source</span>, <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>resourcePath</span>, {\n      output: <span style=color:#FFF066>\"dom\"</span>,\n      <span style=color:#FFFFFF>resolveVirtualDependency</span>\n    });\n  }\n\n  <span style=color:#FF4185>return</span> <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>callback</span>(<span style=color:#AE81FF>null</span>, <span style=color:#FFFFFF>code</span>, <span style=color:#FFFFFF>map</span>);\n}\n</pre><h4 id=hydrateincludeimports><a name=hydrateincludeimports class=anchor href=#hydrateincludeimports><span class=header-link></span></a><code>hydrateIncludeImports</code></h4><p>This option is only used for <code>output: &quot;hydrate&quot;</code>. By default any <code>import</code>&#39;s in server only files are not included in the hydrate output. However for some assets, for example stylesheets, it is useful to have them still be included in hydrate mode.</p><p>The <code>hydrateIncludeImports</code> option allows you to provide a function which receives an import path, or a regexp to match against that path which tells Marko to include that import in the hydrate mode output.</p><p>The default regexp includes a list of common known asset file extensions and is as follows:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFF066>/</span><span style=color:#AE81FF>\\.</span><span style=color:#FFF066>(css</span><span style=color:#FF4185>|</span><span style=color:#FFF066>less</span><span style=color:#FF4185>|</span><span style=color:#FFF066>s</span><span style=color:#AE81FF>[ac]</span><span style=color:#FFF066>ss</span><span style=color:#FF4185>|</span><span style=color:#FFF066>styl</span><span style=color:#FF4185>|</span><span style=color:#FFF066>png</span><span style=color:#FF4185>|</span><span style=color:#FFF066>jpe</span><span style=color:#FF4185>?</span><span style=color:#FFF066>g</span><span style=color:#FF4185>|</span><span style=color:#FFF066>gif</span><span style=color:#FF4185>|</span><span style=color:#FFF066>svg</span><span style=color:#FF4185>|</span><span style=color:#FFF066>ico</span><span style=color:#FF4185>|</span><span style=color:#FFF066>webp</span><span style=color:#FF4185>|</span><span style=color:#FFF066>avif</span><span style=color:#FF4185>|</span><span style=color:#FFF066>mp4</span><span style=color:#FF4185>|</span><span style=color:#FFF066>webm</span><span style=color:#FF4185>|</span><span style=color:#FFF066>ogg</span><span style=color:#FF4185>|</span><span style=color:#FFF066>mp3</span><span style=color:#FF4185>|</span><span style=color:#FFF066>wav</span><span style=color:#FF4185>|</span><span style=color:#FFF066>flac</span><span style=color:#FF4185>|</span><span style=color:#FFF066>aac</span><span style=color:#FF4185>|</span><span style=color:#FFF066>woff2</span><span style=color:#FF4185>?|</span><span style=color:#FFF066>eot</span><span style=color:#FF4185>|</span><span style=color:#FFF066>ttf</span><span style=color:#FF4185>|</span><span style=color:#FFF066>otf)</span><span style=color:#FF4185>$</span><span style=color:#FFF066>/</span>;\n</pre><p>Looking at a partial Marko file such as:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFF066>\"./bar\"</span>\n<span style=color:#FF4185>import</span> <span style=color:#FFF066>\"./foo.css\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFF066>\"./baz.wasm\"</span>;\n\n&lt;<span style=color:#FF4185>div</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFF066>\"./bar\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFF066>\"./foo.css\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFF066>\"./baz.wasm\"</span>;\n\n<span style=color:#FF4185>div</span>\n</pre>"
  }, out, _componentDef, "226");

  out.w(`<p>In the <code>hydrate</code> output, with the default <code>hydrateIncludeImports</code>, would only cause <code>./foo.css</code> to be loaded in the browser.</p><h4 id=cache><a name=cache class=anchor href=#cache><span class=header-link></span></a><code>cache</code></h4><p>Type: typeof <a href=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map><code>Map</code></a> (specifically, <code>get</code> is required)<br> Default: <code>new Map()</code></p><p>Compiling a Marko template may require other (used) Marko templates to compile. To prevent compiling templates more than once, most of the compilation is cached.</p><p>The default cache strategy is to clear the cache on every macrotask. If the default cache is overwritten it is up to the user to determine when the cache is cleared.</p><h4 id=babelconfig><a name=babelconfig class=anchor href=#babelconfig><span class=header-link></span></a><code>babelConfig</code></h4><p>Type: see <a href=https://babeljs.io/docs/en/options>babel options</a><br> Default: babel defaults, plus</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFFFFF>filename</span>,\n  sourceType: <span style=color:#FFF066>"module"</span>,\n  sourceMaps: <span style=color:#FFFFFF>config</span>.<span style=color:#FFFFFF>sourceMaps</span>\n}\n</pre><h4 id=translator><a name=translator class=anchor href=#translator><span class=header-link></span></a><code>translator</code></h4><p>Type: <code>{ analyze: Visitor, transform:Visitor }</code><br> Default: <a href=https://github.com/marko-js/marko/blob/0f212897d2d3ec30b12c2f18ba950818bccb83b4/packages/compiler/src/config.js#L46-L89>autodiscovers</a> a translator package starting with <code>@marko/translator-</code> or <code>marko-translator-</code></p><p>The translator is a collection of transforms that translates the Marko AST into a valid JavaScript AST based on the <code>output</code> option. There is a default translator that ships with Marko, but this option may be used to switch to experimental translators for alternate runtimes.</p><p>The translator is an object with two <a href=https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#visitors>Babel Visitors</a>: <code>analyze</code> and <code>transform</code>. The result of the analyze visitor is cached and may be requested by other templates. The transform visitor transforms the AST to it&#39;s final JavaScript AST.</p><p>See <a href=https://github.com/marko-js/marko/blob/11a10f82cdb5389880e6deca5f77d17727acb831/packages/translator-default/src/index.js><code>@marko/translator-default</code></a> for a reference implementation.</p><h2 id=hooks><a name=hooks class=anchor href=#hooks><span class=header-link></span></a>Hooks</h2><p><img${attr_js_default()("src", compiler_hooks)} alt="Marko compiler hooks" style=max-width:100%></p><p>The Marko compiler runs through a series of stages to produce the final JavaScript output. These stages are intended for different aspects of processing the template and can be hooked into using <a href=/docs/marko-json/ ><code>marko.json</code></a> configuration.</p><p>All compiler hooks must export a visitor which will receive a <a href=https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#paths>babel NodePath</a> with a <code>MarkoTag</code> node.</p><p>The hook will also receive a <code>types</code> object that matches the <a href=https://babeljs.io/docs/en/babel-types>@babel/types</a> API extended with the <a href=#marko-ast>Marko AST types</a>. You can also get a reference to this by importing <code>{ types }</code> from the <code>@marko/compiler</code> module.</p><p>Here is an example hook:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> (<span style=color:#FFAC4D>tag</span>, <span style=color:#FFAC4D>types</span>) <span style=color:#66D9EF>=></span> {\n  <span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>types</span>.<span style=color:#A6E22E>isStringLiteral</span>(<span style=color:#FFFFFF>tag</span>.<span style=color:#FFFFFF>node</span>.<span style=color:#FFFFFF>name</span>)) {\n    <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>\`Found a tag called </span><span style=color:#66D9EF>\${</span><span style=color:#FFFFFF>tag</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>node</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>name</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>value</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>\`</span>);\n    <span style=color:#FFFFFF>tag</span>.<span style=color:#A6E22E>remove</span>();\n  }\n};\n</pre><p>Hooks can also export an <code>enter</code> (alias of <code>default</code>) and an <code>exit</code> function. These map to <a href=https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-traverse>@babel/traverse&#39;s</a> <code>enter</code> and <code>exit</code> methods.</p><h3 id=parse><a name=parse class=anchor href=#parse><span class=header-link></span></a>Parse</h3><p>The first step to Marko&#39;s compilation is to take the raw text of your Marko template and convert it into an &quot;Abstract Syntax Tree&quot;. If you&#39;ve not heard the term before, put simply it is just an object representation of your code.</p>`);

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>h1</span>>Hello!&lt;/<span style=color:#FF4185>h1</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>h1</span> -- Hello!\n</pre>"
  }, out, _componentDef, "298");

  out.w("<p>Will roughly become</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"type\"</span>: <span style=color:#FFF066>\"MarkoTag\"</span>,\n  <span style=color:#FFF066>\"name\"</span>: {\n    <span style=color:#FFF066>\"type\"</span>: <span style=color:#FFF066>\"StringLiteral\"</span>,\n    <span style=color:#FFF066>\"value\"</span>: <span style=color:#FFF066>\"h1\"</span>\n  },\n  <span style=color:#FFF066>\"body\"</span>: {\n    <span style=color:#FFF066>\"type\"</span>: <span style=color:#FFF066>\"MarkoTagBody\"</span>,\n    <span style=color:#FFF066>\"body\"</span>: [\n      {\n        <span style=color:#FFF066>\"type\"</span>: <span style=color:#FFF066>\"MarkoText\"</span>,\n        <span style=color:#FFF066>\"value\"</span>: <span style=color:#FFF066>\"Hello!\"</span>\n      }\n    ]\n  }\n}\n</pre><p>This might look a bit verbose, but we are aiming for completeness, not terseness in this output.</p><p>Marko takes a two-step parsing approach to remain flexible with the ever-changing syntax of JavaScript. The first pass of parsing happens in our very own <a href=https://github.com/marko-js/htmljs-parser>htmljs-parser</a>, which understands the HTML parts of your template.</p><p>For JavaScript expressions, Marko defers to <a href=https://babeljs.io/docs/en/babel-parser>@babel/parser</a>. The <a href=#marko-ast>Marko AST</a> above is a superset of what would be returned from <code>@babel/parser</code>.</p><p>To hook into the <code>parse</code> stage you can use the <code>parse</code> option in the <code>marko.json</code> file. The <code>parse</code> hook deviates from the rest of the compiler hooks in that it does not support the <code>enter</code> &amp; <code>exit</code> API and you <em>must return</em> a replacement AST node.</p><h3 id=migrate><a name=migrate class=anchor href=#migrate><span class=header-link></span></a>Migrate</h3><p>That&#39;s right, Marko has _ first-class_ support for migrations. This compiler hook allows for translating outdated APIs into their modern counterparts, leaving the rest of the compilation non the wiser. These migrations run automatically in the background and can be written to disk when users are ready by running the <a href=https://github.com/marko-js/cli/blob/master/packages/migrate/README.md><code>@marko/migrate</code> CLI command</a>.</p><p>To hook into the <code>migrate</code> stage you can use the <code>migrate</code> option in the <code>marko.json</code> file.</p><blockquote class=note><p><strong>Note:</strong> To make the compiler to stop at this point and output the migrated template rather than continuing on to produce the JavaScript output, pass <code>&quot;migrate&quot;</code> as the value for the <code>output</code> compilation option.</p></blockquote><h3 id=transform><a name=transform class=anchor href=#transform><span class=header-link></span></a>Transform</h3><p>The transform stage of the compiler is meant for userland transformations of Marko code, into other Marko code. Think of it like <a href=https://babeljs.io/docs/en/babel-core#transform>babel.transform</a> for Marko templates. At this stage, you are given a fully parsed and migrated AST to do what you will with.</p><p>To hook into the <code>transform</code> stage you can use the <code>transform</code> option in the <code>marko.json</code> file.</p><h3 id=analyze><a name=analyze class=anchor href=#analyze><span class=header-link></span></a>Analyze</h3><p>Next up is the analyze stage. This stage is intended to do non mutative analysis of the entire AST in a way that is cached in memory. Meta data should be stored on the <code>.extra</code> property of nodes and typically read in the <a href=#translate>translate</a> stage, or using the child template analysis helpers.</p><p>To hook into the <code>analyze</code> stage you can use the <code>analyze</code> option in the <code>marko.json</code> file.</p><h3 id=translate><a name=translate class=anchor href=#translate><span class=header-link></span></a>Translate</h3><p>Finally, we have the translation stage. This stage is Marko&#39;s &quot;Rosetta Stone&quot; and is responsible for turning your beautiful Marko code into the optimized JavaScript you&#39;d rather avoid writing.</p><p>To hook into the <code>translate</code> stage you can use the <code>translate</code> option in the <code>marko.json</code> file.</p><h2 id=utilities><a name=utilities class=anchor href=#utilities><span class=header-link></span></a>Utilities</h2><p>The <a href=https://github.com/marko-js/marko/tree/master/packages/babel-utils/index.d.ts><code>@marko/babel-utils</code></a> package exposes a handful of utilities for performing various tasks on the <a href=#marko-ast>Marko AST</a>.</p><h2 id=marko-ast><a name=marko-ast class=anchor href=#marko-ast><span class=header-link></span></a>Marko AST</h2><p>Marko extends Babel&#39;s AST types adding nodes for <code>MarkoTag</code>, <code>MarkoAttribute</code>, etc. For AST creation and assertion utilities you can import Marko&#39;s superset of <code>@babel/types</code> through the compiler:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> { <span style=color:#FFFFFF>types</span> } <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@marko/compiler\"</span>;\n</pre><p>The <a href=https://babeljs.io/docs/en/babel-types><code>@babel/types</code> documentation</a> shows all the utility methods available for the Babel AST nodes. When importing <code>types</code> from <code>@marko/compiler</code> you get the same types of utilities for the Marko nodes as well (<code>types.markoTag</code>, <code>types.isMarkoTag</code>, <code>types.assertMarkoTag</code>, etc.).</p><p>For a full list of definitions, view the source code for Babel and Marko:</p><ul><li><a href=https://github.com/babel/babel/blob/master/packages/babel-types/src/definitions/core.js>Babel&#39;s Core Definitions</a></li><li><a href=https://github.com/babel/babel/tree/master/packages/babel-types/src/definitions>Babel&#39;s Extended Definitions</a></li><li><a href=https://github.com/marko-js/marko/blob/master/packages/compiler/src/babel-types/types/definitions.js>Marko&#39;s Definitions</a></li></ul>");
}, {
  t: compiler_marko_componentType,
  i: true
}, compiler_marko_component);
__webpack_require__(7209)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/concise.md


const concise_marko_componentType = "xuCUt7Rv",
      concise_marko_template = (0,index_js_namespaceObject.t)(concise_marko_componentType);

/* harmony default export */ const concise = (concise_marko_template);

toc_registry.set("../../node_modules/marko/docs/concise.md", "<ul class=\"toc toc-level1\"><li><a href=\"#shorthand-attributes\">Shorthand attributes</a></li><li><a href=\"#text\">Text</a><ul class=\"toc toc-level2\"><li><a href=\"#root-level-text\">Root level text</a></li></ul></li></ul>");
const concise_title = "Concise syntax";



const concise_marko_component = {};
concise_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=concise-syntax><a name=concise-syntax class=anchor href=#concise-syntax><span class=header-link></span></a>Concise syntax</h1><p>Marko&#39;s concise syntax is very similar to the HTML syntax, except it&#39;s more... concise. Essentially, you take an HTML tag, remove the angle brackets (<code>&lt;&gt;</code>) and use indentation rather than a closing tag:</p><div class=code-block-filename>input.marko</div><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"thumbnail\"</span>\n    <span style=color:#FF4185>img</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"https://example.com/thumb.png\"</span>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span><span style=color:#A6E22E>.thumbnail</span>\n  <span style=color:#FF4185>img</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"https://example.com/thumb.png\"</span>\n</pre>"
  }, out, _componentDef, "7");

  out.w("<div class=code-block-filename>output.html</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"thumbnail\"</span>>&lt;<span style=color:#FF4185>img</span> <span style=color:#A6E22E>src</span>=<span style=color:#FFF066>\"https://example.com/thumb.png\"</span> />&lt;/<span style=color:#FF4185>div</span>>\n</pre><h2 id=shorthand-attributes><a name=shorthand-attributes class=anchor href=#shorthand-attributes><span class=header-link></span></a>Shorthand attributes</h2><p>Marko provides a shorthand for declaring classes and ids on an element:</p><div class=code-block-filename>input.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span><span style=color:#A6E22E>.my-class</span>\n<span style=color:#FF4185>span</span><span style=color:#A6E22E>#my-id</span>\n<span style=color:#FF4185>button</span><span style=color:#A6E22E>#submit.primary.large</span>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span><span style=color:#A6E22E>.my-class</span>\n<span style=color:#FF4185>span</span><span style=color:#A6E22E>#my-id</span>\n<span style=color:#FF4185>button</span><span style=color:#A6E22E>.primary.large#submit</span>\n</pre>"
  }, out, _componentDef, "14");

  out.w("<p>Yields this HTML:</p><div class=code-block-filename>output.html</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"my-class\"</span>>&lt;/<span style=color:#FF4185>div</span>>\n&lt;<span style=color:#FF4185>span</span> <span style=color:#A6E22E>id</span>=<span style=color:#FFF066>\"my-id\"</span>>&lt;/<span style=color:#FF4185>span</span>> &lt;<span style=color:#FF4185>button</span> <span style=color:#A6E22E>id</span>=<span style=color:#FFF066>\"submit\"</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"primary large\"</span>>&lt;/<span style=color:#FF4185>button</span>>\n</pre><blockquote class=protip><p><strong>ProTip:</strong> These shorthand attributes are available within the HTML syntax as well</p></blockquote><h2 id=text><a name=text class=anchor href=#text><span class=header-link></span></a>Text</h2><p>Text in concise mode is denoted by two or more dashes (<code>--</code>).</p><p>If there is text on the same line following <code>--</code>, it is single-line text:</p><div class=code-block-filename>single-line-text.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>-- Hello world\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>-- Hello world\n</pre>"
  }, out, _componentDef, "28");

  out.w("<p>The dashes can also follow an element to give it a single text node as a child</p><div class=code-block-filename>single-line-text.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span> -- Hello world\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span> -- Hello world\n</pre>"
  }, out, _componentDef, "31");

  out.w("<p>If there is a line break immediately following <code>--</code>, everything following the <code>--</code> at the current indentation is parsed as multi-line line text.</p><div class=code-block-filename>multi-line-text.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span>\n    --\n    Hello world\n    this text\n    is multi-line\n\n<span style=color:#FF4185>div</span>\n    --\n    this is more\n    text\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span> -- Hello world this text is multi-line\n<span style=color:#FF4185>div</span> -- this is more text\n</pre>"
  }, out, _componentDef, "36");

  out.w("<p>A multi-line text block can be ended by the same number of dashes that opened it. This allows it to have siblings:</p><div class=code-block-filename>multi-line-text.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span>\n    <span style=color:#FF4185>img</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"https://example.com/photo.png\"</span>\n    --\n    Hello world\n    this text\n    is multi-line\n    --\n    <span style=color:#FF4185>span</span> -- text after\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span>\n  <span style=color:#FF4185>img</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"https://example.com/photo.png\"</span>\n  --  Hello world this text is multi-line\n  <span style=color:#FF4185>span</span> -- text after\n</pre>"
  }, out, _componentDef, "39");

  out.w("<h3 id=root-level-text><a name=root-level-text class=anchor href=#root-level-text><span class=header-link></span></a>Root level text</h3><p>There is one &quot;gotcha&quot; that you need to be aware of. The Marko parser starts out in the concise mode. Therefore, given the following template:</p><div class=code-block-filename>input.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>Hello</span> <span style=color:#A6E22E>World</span>\n<span style=color:#FF4185>Welcome</span> <span style=color:#A6E22E>to</span> <span style=color:#A6E22E>Marko</span>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>Hello</span> <span style=color:#A6E22E>World</span>\n<span style=color:#FF4185>Welcome</span> <span style=color:#A6E22E>to</span> <span style=color:#A6E22E>Marko</span>\n</pre>"
  }, out, _componentDef, "45");

  out.w("<p>The output would be the following:</p><div class=code-block-filename>output.html</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#F8F8F0;background-color:#FF4185>Hello</span> <span style=color:#A6E22E>World</span>>&lt;/<span style=color:#F8F8F0;background-color:#FF4185>Hello</span>> &lt;<span style=color:#F8F8F0;background-color:#FF4185>Welcome</span> <span style=color:#A6E22E>to</span> <span style=color:#A6E22E>Marko</span>>&lt;/<span style=color:#F8F8F0;background-color:#FF4185>Welcome</span>>\n</pre><p>Instead, prefix the lines with <code>--</code> so they are parsed as text:</p><div class=code-block-filename>input.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>-- Hello World\n-- Welcome to Marko\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>-- Hello WorldWelcome to Marko\n</pre>"
  }, out, _componentDef, "51");
}, {
  t: concise_marko_componentType,
  i: true
}, concise_marko_component);
__webpack_require__(9720)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/conditionals-and-lists.md


const conditionals_and_lists_marko_componentType = "NOuOFSJa",
      conditionals_and_lists_marko_template = (0,index_js_namespaceObject.t)(conditionals_and_lists_marko_componentType);

/* harmony default export */ const conditionals_and_lists = (conditionals_and_lists_marko_template);

toc_registry.set("../../node_modules/marko/docs/conditionals-and-lists.md", "<ul class=\"toc toc-level1\"><li><a href=\"#conditionals\">Conditionals</a></li><li><a href=\"#lists\">Lists</a><ul class=\"toc toc-level2\"><li><a href=\"#always-set-a-key\">Always set a key</a></li></ul></li></ul>");
const conditionals_and_lists_title = "Conditionals and Lists";



const conditionals_and_lists_marko_component = {};
conditionals_and_lists_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=conditionals-and-lists><a name=conditionals-and-lists class=anchor href=#conditionals-and-lists><span class=header-link></span></a>Conditionals and Lists</h1><p>While HTML itself does not support conditionally displaying elements or repeating elements, it is a critical part of building any web application. In Marko, this functionality is provided by the <code>&lt;if&gt;</code> and <code>&lt;for&gt;</code> tags.</p><h2 id=conditionals><a name=conditionals class=anchor href=#conditionals><span class=header-link></span></a>Conditionals</h2><p>The <code>&lt;if&gt;</code> tag receives an <a href=/docs/syntax/#arguments>argument</a> which is used to determine if its body content should be present.</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>loggedOut</span>)>\n    &lt;<span style=color:#FF4185>a</span> <span style=color:#A6E22E>href</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"/login\"</span>>Log in&lt;/<span style=color:#FF4185>a</span>>\n&lt;/<span style=color:#FF4185>if</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>loggedOut</span>)\n  <span style=color:#FF4185>a</span> <span style=color:#A6E22E>href</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"/login\"</span> -- Log in\n</pre>"
  }, out, _componentDef, "13");

  out.w("<p>As you might expect, there are also <code>&lt;else&gt;</code> and <code>&lt;else-if&gt;</code> tags as well:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>loggedOut</span>)>\n    &lt;<span style=color:#FF4185>a</span> <span style=color:#A6E22E>href</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"/login\"</span>>Log in&lt;/<span style=color:#FF4185>a</span>>\n&lt;/<span style=color:#FF4185>if</span>>\n&lt;<span style=color:#FF4185>else-if</span>(<span style=color:#FF4185>!</span><span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>trappedForever</span>)>\n    &lt;<span style=color:#FF4185>a</span> <span style=color:#A6E22E>href</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"/logout\"</span>>Log out&lt;/<span style=color:#FF4185>a</span>>\n&lt;/<span style=color:#FF4185>else-if</span>>\n&lt;<span style=color:#FF4185>else</span>>\n    Hey <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!\n&lt;/<span style=color:#FF4185>else</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>loggedOut</span>)\n  <span style=color:#FF4185>a</span> <span style=color:#A6E22E>href</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"/login\"</span> -- Log in\n<span style=color:#FF4185>else-if</span>(<span style=color:#FF4185>!</span><span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>trappedForever</span>)\n  <span style=color:#FF4185>a</span> <span style=color:#A6E22E>href</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"/logout\"</span> -- Log out\n<span style=color:#FF4185>else</span> -- Hey <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!\n</pre>"
  }, out, _componentDef, "17");

  out.w("<h2 id=lists><a name=lists class=anchor href=#lists><span class=header-link></span></a>Lists</h2><p>If you have a list of data and need to represent it in the UI, the <code>&lt;for&gt;</code> tag is probably what you&#39;re looking for. The <code>&lt;for&gt;</code> tag passes each item and its index to its body as <a href=/docs/syntax/#parameters>parameters</a>.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>ul</span>>\n    &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>, <span style=color:#FFAC4D>index</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>>\n        &lt;<span style=color:#FF4185>li</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>index</span><span style=color:#66D9EF>}</span>: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>li</span>>\n    &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>ul</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>ul</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>, <span style=color:#FFAC4D>index</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>\n    <span style=color:#FF4185>li</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>index</span><span style=color:#66D9EF>}</span>: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "25");

  out.w("<p>The <code>&lt;for&gt;</code> tag actually support 3 different flavors:</p><ul><li><a href=/docs/core-tags/#iterating-over-a-list><code>&lt;for|item, index, array| of=array&gt;</code></a> renders its body for each item of an array. It&#39;s similar to the JavaScript <a href=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of><code>for...of</code></a> loop.</li><li><a href=/docs/core-tags/#iterating-over-an-objects-properties><code>&lt;for|key, value| in=object&gt;</code></a> renders its body for each property in an object. It&#39;s similar to the JavaScript <a href=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in><code>for...in</code></a> loop.</li><li><a href=/docs/core-tags/#iterating-between-a-range-of-numbers><code>&lt;for|value| from=first to=last step=increment&gt;</code></a> renders its body for each value in between and including <code>from</code> and <code>to</code>.</li></ul><h3 id=always-set-a-key><a name=always-set-a-key class=anchor href=#always-set-a-key><span class=header-link></span></a>Always set a <code>key</code></h3><p>Marko automatically keeps your UI in sync with the state behind it, but one place where it needs a little extra help is repeated content. Specifying keys gives Marko a way to identify items in a list and keep track of which items have been changed, added, or removed.</p><p>A key should be a string or number that uniquely identifies an item in the list and differentiates it from its siblings. The same key value should never be used twice! Often, you will use something like an <code>id</code> property.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>user</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>users</span>>\n    &lt;<span style=color:#FF4185>user-card</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>id</span> <span style=color:#A6E22E>data</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>user</span>/>\n&lt;/<span style=color:#FF4185>for</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>user</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>users</span>\n  <span style=color:#FF4185>user-card</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>user</span>.<span style=color:#FFFFFF>id</span> <span style=color:#A6E22E>data</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>user</span>\n</pre>"
  }, out, _componentDef, "51");

  out.w("<blockquote class=protip><p><strong>ProTip:</strong> If you have multiple tags underneath <code>&lt;for&gt;</code>, you can key only the first tag and that is enough to properly identify its siblings as well</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>dl</span>>\n    &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>entry</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>entries</span>>\n<span style=color:#8F8F9E>        &lt;!-- only the first tag needs a key --></span>\n        &lt;<span style=color:#FF4185>dt</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>entry</span>.<span style=color:#FFFFFF>id</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>entry</span>.<span style=color:#FFFFFF>word</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>dt</span>>\n<span style=color:#8F8F9E>        &lt;!-- This key can be omitted --></span>\n        &lt;<span style=color:#FF4185>dd</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>entry</span>.<span style=color:#FFFFFF>definition</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>dd</span>>\n    &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>dl</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>dl</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>entry</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>entries</span>\n<span style=color:#8F8F9E>    &lt;!-- only the first tag needs a key --></span>\n    <span style=color:#FF4185>dt</span> <span style=color:#66D9EF>key</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>entry</span>.<span style=color:#FFFFFF>id</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>entry</span>.<span style=color:#FFFFFF>word</span><span style=color:#66D9EF>}</span>\n<span style=color:#8F8F9E>    &lt;!-- This key can be omitted --></span>\n    <span style=color:#FF4185>dd</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>entry</span>.<span style=color:#FFFFFF>definition</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "56");

  out.w("</blockquote><blockquote class=note><p><strong>Note:</strong> If a key is not set, Marko will use the index of an item as its key. However this only works perfectly if items are only ever added or removed at the end of a list. Here&#39;s an example where things break down: if we have a list of <code>[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</code> and reverse the order, index keys would cause &quot;A&quot; to be transformed into &quot;C&quot; (and &quot;C&quot; into &quot;A&quot;), rather than just swapping them. Additionally if these components contained state, the new &quot;C&quot; would contain the state from the old &quot;A&quot; (and vice-versa). Be aware, stateful components include tags like the native <code>&lt;input&gt;</code> element. For this reason <strong>it is always recommended to set a <code>key</code> on tags in a <code>&lt;for&gt;</code>.</strong></p></blockquote>");
}, {
  t: conditionals_and_lists_marko_componentType,
  i: true
}, conditionals_and_lists_marko_component);
__webpack_require__(8922)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/core-tags.md


const core_tags_marko_componentType = "EcgozHmc",
      core_tags_marko_template = (0,index_js_namespaceObject.t)(core_tags_marko_componentType);

/* harmony default export */ const core_tags = (core_tags_marko_template);

toc_registry.set("../../node_modules/marko/docs/core-tags.md", "<ul class=\"toc toc-level1\"><li><a href=\"#if-else-if-else\">&lt;if&gt;, &lt;else-if&gt;, &lt;else&gt;</a></li><li><a href=\"#for\">&lt;for&gt;</a><ul class=\"toc toc-level2\"><li><a href=\"#iterating-over-a-list\">Iterating over a list</a></li><li><a href=\"#iterating-over-an-objects-properties\">Iterating over an object’s properties</a></li><li><a href=\"#iterating-between-a-range-of-numbers\">Iterating between a range of numbers</a></li></ul></li><li><a href=\"#while\">&lt;while&gt;</a></li><li><a href=\"#macro\">&lt;macro&gt;</a></li><li><a href=\"#await\">&lt;await&gt;</a></li><li><a href=\"#include-text\">&lt;include-text&gt;</a></li><li><a href=\"#include-html\">&lt;include-html&gt;</a></li><li><a href=\"#html-comment\">&lt;html-comment&gt;</a></li></ul>");
const core_tags_title = "Core tags and attributes";



const core_tags_marko_component = {};
core_tags_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=core-tags-and-attributes><a name=core-tags-and-attributes class=anchor href=#core-tags-and-attributes><span class=header-link></span></a>Core tags and attributes</h1><p>Much like <a href=https://developer.mozilla.org/en-US/docs/Web/HTML/Element>HTML has its own native tags</a>, Marko includes <strong>core tags</strong> and <strong>global attributes</strong> for declaratively building modern applications.</p><h2 id=if-else-if-else><a name=if-else-if-else class=anchor href=#if-else-if-else><span class=header-link></span></a><code>&lt;if&gt;</code>, <code>&lt;else-if&gt;</code>, <code>&lt;else&gt;</code></h2><p>Like the <a href=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else>equivalent JavaScript statements</a>, these tags render <a href=/docs/conditionals-and-lists/#conditionals>conditional content</a>:</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>arriving</span>)>\n  Hey there\n&lt;/<span style=color:#FF4185>if</span>>\n&lt;<span style=color:#FF4185>else-if</span>(<span style=color:#FFFFFF>leaving</span>)>\n  Bye now\n&lt;/<span style=color:#FF4185>else-if</span>>\n&lt;<span style=color:#FF4185>else</span>>\n  What\u2019s up?\n&lt;/<span style=color:#FF4185>else</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>arriving</span>) -- Hey there\n<span style=color:#FF4185>else-if</span>(<span style=color:#FFFFFF>leaving</span>) -- Bye now\n<span style=color:#FF4185>else</span> -- What\u2019s up?\n</pre>"
  }, out, _componentDef, "17");

  out.w("<p>They support any JavaScript expression in their <a href=/docs/syntax/#arguments>tag arguments</a>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>Math</span>.<span style=color:#A6E22E>random</span>() <span style=color:#FF4185>></span> <span style=color:#AE81FF>0.5</span>)>\n  &lt;<span style=color:#FF4185>p</span>>50% chance to see this&lt;/<span style=color:#FF4185>p</span>>\n&lt;/<span style=color:#FF4185>if</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>Math</span>.<span style=color:#A6E22E>random</span>() <span style=color:#FF4185>></span> <span style=color:#AE81FF>0.5</span>)\n  <span style=color:#FF4185>p</span> -- 50% chance to see this\n</pre>"
  }, out, _componentDef, "20");

  out.w("<h2 id=for><a name=for class=anchor href=#for><span class=header-link></span></a><code>&lt;for&gt;</code></h2><p>The <code>&lt;for&gt;</code> tag iterates over <a href=#iterating-over-a-list>arrays/array-likes</a>, <a href=#iterating-over-an-objects-properties>object properties</a>, and <a href=#iterating-between-a-range-of-numbers>ranges of numbers</a>.</p><h3 id=iterating-over-a-list><a name=iterating-over-a-list class=anchor href=#iterating-over-a-list><span class=header-link></span></a>Iterating over a list</h3><p>Like the <a href=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of>JavaScript <code>for...of</code> loop statement</a>, giving <code>&lt;for&gt;</code>\u2019s <code>of</code> attribute a value will loop over that value as an array or iterable.</p><p>The current <strong>item</strong>, <strong>index</strong>, and the <strong>iterating list</strong> are provided as <a href=/docs/syntax/#parameters>tag parameters</a>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>colors</span> <span style=color:#FFFFFF>=</span> [<span style=color:#FFF066>\"red\"</span>, <span style=color:#FFF066>\"green\"</span>, <span style=color:#FFF066>\"blue\"</span>];\n&lt;<span style=color:#FF4185>ol</span>>\n  &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>, <span style=color:#FFAC4D>index</span>, <span style=color:#FFAC4D>colorList</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>>\n    &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>index</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>li</span>>\n  &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>ol</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>colors</span> <span style=color:#FFFFFF>=</span> [<span style=color:#FFF066>\"red\"</span>, <span style=color:#FFF066>\"green\"</span>, <span style=color:#FFF066>\"blue\"</span>];\n<span style=color:#FF4185>ol</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>, <span style=color:#FFAC4D>index</span>, <span style=color:#FFAC4D>colorList</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>\n    <span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>index</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "43");

  out.w("<p>The output HTML would be:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>ol</span>>\n  &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span>=<span style=color:#FFF066>\"0\"</span>>red&lt;/<span style=color:#FF4185>li</span>>\n  &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span>=<span style=color:#FFF066>\"1\"</span>>green&lt;/<span style=color:#FF4185>li</span>>\n  &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span>=<span style=color:#FFF066>\"2\"</span>>blue&lt;/<span style=color:#FF4185>li</span>>\n&lt;/<span style=color:#FF4185>ol</span>>\n</pre><blockquote class=null><p><strong>Pro Tip</strong>: <code>&lt;for&gt;</code>\u2019s <code>of</code> attribute can loop over any iterable, just like JavaScript\u2019s <a href=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of><code>for...of</code></a>. This includes strings, <code>NodeList</code>s, <code>Set</code>s\u2026 any object with zero-indexed numeric properties and a <code>.length</code>, basically.</p></blockquote><h3 id=iterating-over-an-objects-properties><a name=iterating-over-an-objects-properties class=anchor href=#iterating-over-an-objects-properties><span class=header-link></span></a>Iterating over an object\u2019s properties</h3><p>Like <a href=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in>JavaScript\u2019s <code>for...in</code> loop statement</a>, giving <code>&lt;for&gt;</code> an object as its <code>in</code> attribute will loop over that object\u2019s properties.</p><p>The current <strong>property name</strong> and <strong>property value</strong> are provided as <a href=/docs/syntax/#parameters>tag parameters</a>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>settings</span> <span style=color:#FFFFFF>=</span> {\n  <span style=color:#FFF066>\"Dark Mode\"</span>: <span style=color:#AE81FF>false</span>,\n  <span style=color:#FFF066>\"Fullscreen\"</span>: <span style=color:#AE81FF>true</span>\n};\n\n&lt;<span style=color:#FF4185>dl</span>>\n  &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>name</span>, <span style=color:#FFAC4D>enabled</span>| <span style=color:#A6E22E>in</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>settings</span>>\n    &lt;<span style=color:#FF4185>dt</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>:&lt;/<span style=color:#FF4185>dt</span>>\n    &lt;<span style=color:#FF4185>dd</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>enabled</span> <span style=color:#FF4185>?</span> <span style=color:#FFF066>\"on\"</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>\"off\"</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>dd</span>>\n  &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>dl</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>settings</span> <span style=color:#FFFFFF>=</span> {\n    <span style=color:#FFF066>\"Dark Mode\"</span>: <span style=color:#AE81FF>false</span>,\n    Fullscreen: <span style=color:#AE81FF>true</span>,\n  };\n}\n\n<span style=color:#FF4185>dl</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>name</span>, <span style=color:#FFAC4D>enabled</span>| <span style=color:#A6E22E>in</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>settings</span>\n    <span style=color:#FF4185>dt</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>:\n    <span style=color:#FF4185>dd</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>enabled</span> <span style=color:#FF4185>?</span> <span style=color:#FFF066>\"on\"</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>\"off\"</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "67");

  out.w("<p>The output HTML would be:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>dl</span>>\n  &lt;<span style=color:#FF4185>dt</span>>Dark Mode:&lt;/<span style=color:#FF4185>dt</span>>\n  &lt;<span style=color:#FF4185>dd</span>>off&lt;/<span style=color:#FF4185>dd</span>>\n  &lt;<span style=color:#FF4185>dt</span>>Fullscreen:&lt;/<span style=color:#FF4185>dt</span>>\n  &lt;<span style=color:#FF4185>dd</span>>on&lt;/<span style=color:#FF4185>dd</span>>\n&lt;/<span style=color:#FF4185>dl</span>>\n</pre><h3 id=iterating-between-a-range-of-numbers><a name=iterating-between-a-range-of-numbers class=anchor href=#iterating-between-a-range-of-numbers><span class=header-link></span></a>Iterating between a range of numbers</h3><p>The final <code>&lt;for&gt;</code> variant loops between two numbers, by providing <code>from</code> and <code>to</code> attributes. The current number in the range will be provided as a <a href=/docs/syntax/#parameters>tag parameter</a>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>ol</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"I\"</span>>\n  &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>i</span>| <span style=color:#A6E22E>from</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>0</span> <span style=color:#A6E22E>to</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>10</span>>\n    &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>i</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>i</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>li</span>>\n  &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>ol</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>ol</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"I\"</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>i</span>| <span style=color:#A6E22E>from</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>0</span> <span style=color:#A6E22E>to</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>10</span>\n    <span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>i</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>i</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "77");

  out.w("<p>You can also pass an optional <code>step</code> attribute, which defaults to 1 otherwise. <code>step</code> lets you increment by a specific amount:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>ol</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"I\"</span>>\n  &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>i</span>| <span style=color:#A6E22E>from</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>0</span> <span style=color:#A6E22E>to</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>10</span> <span style=color:#A6E22E>step</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>2</span>>\n    &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>i</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>i</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>li</span>>\n  &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>ol</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>ol</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"I\"</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>i</span>| <span style=color:#A6E22E>from</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>0</span> <span style=color:#A6E22E>to</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>10</span> <span style=color:#A6E22E>step</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>2</span>\n    <span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>i</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>i</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "81");

  out.w("<p>\u2026becomes:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>ol</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"I\"</span>>\n  &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"0\"</span>>0&lt;/<span style=color:#FF4185>li</span>>\n  &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"2\"</span>>2&lt;/<span style=color:#FF4185>li</span>>\n  &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"4\"</span>>4&lt;/<span style=color:#FF4185>li</span>>\n  &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"6\"</span>>6&lt;/<span style=color:#FF4185>li</span>>\n  &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"8\"</span>>8&lt;/<span style=color:#FF4185>li</span>>\n  &lt;<span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"10\"</span>>10&lt;/<span style=color:#FF4185>li</span>>\n&lt;/<span style=color:#FF4185>ol</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>ol</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"I\"</span>\n  <span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"0\"</span> -- 0\n  <span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"2\"</span> -- 2\n  <span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"4\"</span> -- 4\n  <span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"6\"</span> -- 6\n  <span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"8\"</span> -- 8\n  <span style=color:#FF4185>li</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"10\"</span> -- 10\n</pre>"
  }, out, _componentDef, "83");

  out.w("<blockquote class=protip><p><strong>ProTip:</strong> This syntax is for generating numbers from nothing. Don\u2019t use it to iterate over an object, like so:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Inefficient code, do not copy --></span>\n&lt;<span style=color:#FF4185>ul</span>>\n  &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>i</span>| <span style=color:#A6E22E>from</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>0</span> <span style=color:#A6E22E>to</span><span style=color:#FFFFFF>=</span>(<span style=color:#FFFFFF>myArray</span>.length <span style=color:#FF4185>-</span> <span style=color:#AE81FF>1</span>)>\n    &lt;<span style=color:#FF4185>li</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>myArray</span>[<span style=color:#FFFFFF>i</span>]<span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>li</span>>\n  &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>ul</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- Inefficient code, do not copy --></span>\n<span style=color:#FF4185>ul</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>i</span>| <span style=color:#A6E22E>from</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>0</span> <span style=color:#A6E22E>to</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>myArray</span>.length <span style=color:#FF4185>-</span> <span style=color:#AE81FF>1</span>\n    <span style=color:#FF4185>li</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>myArray</span>[<span style=color:#FFFFFF>i</span>]<span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "87");

  out.w("<p>Use <a href=#iterating-over-a-list><code>&lt;for of&gt;</code></a> instead.</p></blockquote><h2 id=while><a name=while class=anchor href=#while><span class=header-link></span></a><code>&lt;while&gt;</code></h2><blockquote class=warning><p><strong>Warning:</strong> Using <code>&lt;while&gt;</code> is not recommended. Instead, replicate it with <a href=#iterating-over-a-list>an iterable and <code>&lt;for&gt;</code></a>.</p><p>In the future, Marko may restrict value mutation during rendering, for runtime optimizations.</p></blockquote><p>You can repeat a chunk of markup <em>until a condition is met</em> with the <code>while</code> tag:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>let</span> <span style=color:#FFFFFF>n</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>0</span>;\n\n&lt;<span style=color:#FF4185>while</span>(<span style=color:#FFFFFF>n</span> <span style=color:#FF4185>&lt;</span> <span style=color:#AE81FF>4</span>)>\n  &lt;<span style=color:#FF4185>p</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>n</span><span style=color:#FF4185>++</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>p</span>>\n&lt;/<span style=color:#FF4185>while</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>let</span> <span style=color:#FFFFFF>n</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>0</span>;\n\n<span style=color:#FF4185>while</span>(<span style=color:#FFFFFF>n</span> <span style=color:#FF4185>&lt;</span> <span style=color:#AE81FF>4</span>)\n  <span style=color:#FF4185>p</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>n</span><span style=color:#FF4185>++</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "105");

  out.w("<p>\u2026becomes:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>p</span>>0&lt;/<span style=color:#FF4185>p</span>>\n&lt;<span style=color:#FF4185>p</span>>1&lt;/<span style=color:#FF4185>p</span>>\n&lt;<span style=color:#FF4185>p</span>>2&lt;/<span style=color:#FF4185>p</span>>\n&lt;<span style=color:#FF4185>p</span>>3&lt;/<span style=color:#FF4185>p</span>>\n</pre><h2 id=macro><a name=macro class=anchor href=#macro><span class=header-link></span></a><code>&lt;macro&gt;</code></h2><p>Macros create reusable markup fragments for later use in the same template they were defined in.</p><p>The <code>&lt;macro&gt;</code> tag defines a macro as a tag via the <code>name</code> attribute. For example, the following macro is registered as the <code>&lt;greeting&gt;</code> tag:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#66D9EF>macro</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"greeting\"</span>>\n  &lt;<span style=color:#FF4185>p</span>>Welcome!&lt;/<span style=color:#FF4185>p</span>>\n&lt;/<span style=color:#66D9EF>macro</span>>\n\n&lt;<span style=color:#FF4185>greeting</span>/>\n&lt;<span style=color:#FF4185>greeting</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>macro</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"greeting\"</span>\n  <span style=color:#FF4185>p</span> -- Welcome!\n\n<span style=color:#FF4185>greeting</span>\n<span style=color:#FF4185>greeting</span>\n</pre>"
  }, out, _componentDef, "116");

  out.w("<p>\u2026the output HTML would be:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>p</span>>Welcome!&lt;/<span style=color:#FF4185>p</span>>\n&lt;<span style=color:#FF4185>p</span>>Welcome!&lt;/<span style=color:#FF4185>p</span>>\n</pre><p>Macros become more useful with <a href=/docs/syntax/#parameters>tag parameters</a>, allowing complex templates. In this next example, <code>&lt;greeting&gt;</code> can now receive <code>firstName</code> and <code>count</code> parameters from its parent:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#66D9EF>macro</span>|{ <span style=color:#FFAC4D>firstName</span>, <span style=color:#FFAC4D>count</span> }| <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"greeting\"</span>>\n  &lt;<span style=color:#FF4185>p</span>>Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>firstName</span><span style=color:#66D9EF>}</span>!\n    &lt;<span style=color:#FF4185>output</span>>You have <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span> new messages.&lt;/<span style=color:#FF4185>output</span>>\n  &lt;/<span style=color:#FF4185>p</span>>\n&lt;/<span style=color:#66D9EF>macro</span>>\n\n&lt;<span style=color:#FF4185>greeting</span> <span style=color:#A6E22E>firstName</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Frank\"</span> <span style=color:#A6E22E>count</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>20</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>macro</span>|{ <span style=color:#FFAC4D>firstName</span>, <span style=color:#FFAC4D>count</span> }| <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"greeting\"</span>\n  <span style=color:#FF4185>p</span>\n    -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>firstName</span><span style=color:#66D9EF>}</span>!\n    <span style=color:#FF4185>output</span> -- You have <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span> new messages.\n\n<span style=color:#FF4185>greeting</span> <span style=color:#A6E22E>firstName</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Frank\"</span> <span style=color:#A6E22E>count</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>20</span>\n</pre>"
  }, out, _componentDef, "123");

  out.w("<p>\u2026the output HTML would be:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>p</span>>\n  Hello Frank!\n  &lt;<span style=color:#FF4185>output</span>>You have 20 new messages.&lt;/<span style=color:#FF4185>output</span>>\n&lt;/<span style=color:#FF4185>p</span>>\n</pre><p>Macros receive input like components do, including <a href=/docs/body-content/ >a <code>renderBody</code> for provided body content</a>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#66D9EF>macro</span>|{ <span style=color:#FFAC4D>renderBody</span> }| <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"special-heading\"</span>>\n  &lt;<span style=color:#FF4185>h1</span>>\n    &lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span>/>!\n  &lt;/<span style=color:#FF4185>h1</span>>\n&lt;/<span style=color:#66D9EF>macro</span>>\n\n&lt;<span style=color:#FF4185>special-heading</span>>\n  Hello\n&lt;/<span style=color:#FF4185>special-heading</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>macro</span>|{ <span style=color:#FFAC4D>renderBody</span> }| <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"special-heading\"</span>\n  <span style=color:#FF4185>h1</span>\n    <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span>\n    -- !\n\n<span style=color:#FF4185>special-heading</span> -- Hello\n</pre>"
  }, out, _componentDef, "128");

  out.w("<p>\u2026the output HTML would be:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>h1</span>>Hello!&lt;/<span style=color:#FF4185>h1</span>>\n</pre><blockquote class=protip><p><strong>ProTip:</strong> You can use a macro inside itself for recursive layouts, like displaying directory contents.</p></blockquote><h2 id=await><a name=await class=anchor href=#await><span class=header-link></span></a><code>&lt;await&gt;</code></h2><p>The <code>&lt;await&gt;</code> tag <strong>renders markup asynchronously using a <a href=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>Promise</a></strong>.</p><ul><li>Its <code>&lt;@then&gt;</code> <a href=/docs/syntax/#attribute-tag>attribute tag</a> displays when the Promise <em>resolves</em>, optionally receiving the resolved value as a <a href=/docs/syntax/#parameters>tag parameter</a>.</li><li>Its <code>&lt;@catch&gt;</code> attribute tag displays when the Promise <em>rejects</em>, optionally receiving the rejected value as a tag parameter.</li><li>Its optional <code>&lt;@placeholder&gt;</code> attribute tag displays while the Promise is pending.</li></ul>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>personPromise</span> <span style=color:#FFFFFF>=</span> <span style=color:#FF4185>new</span> <span style=color:#66D9EF>Promise</span>((<span style=color:#FFAC4D>resolve</span>, <span style=color:#FFAC4D>reject</span>) <span style=color:#66D9EF>=></span> {\n  <span style=color:#A6E22E>setTimeout</span>(() <span style=color:#66D9EF>=></span> <span style=color:#A6E22E>resolve</span>({ name: <span style=color:#FFF066>'Frank'</span> }), <span style=color:#AE81FF>1000</span>);\n});\n\n&lt;<span style=color:#FF4185>await</span>(<span style=color:#FFFFFF>personPromise</span>) <span style=color:#A6E22E>client-reorder</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>true</span>>\n  &lt;<span style=color:#A6E22E>@placeholder</span>>\n<span style=color:#8F8F9E>    &lt;!-- Displays while promise is pending --></span>\n    &lt;<span style=color:#FF4185>label</span>>Loading\u2026\n      &lt;<span style=color:#FF4185>progress</span>>&lt;/<span style=color:#FF4185>progress</span>>\n    &lt;/<span style=color:#FF4185>label</span>>\n  &lt;/<span style=color:#A6E22E>@placeholder</span>>\n\n  &lt;<span style=color:#A6E22E>@then</span>|<span style=color:#FFAC4D>person</span>|>\n<span style=color:#8F8F9E>    &lt;!-- Displays if promise resolves --></span>\n    &lt;<span style=color:#FF4185>p</span>>Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!&lt;/<span style=color:#FF4185>p</span>>\n  &lt;/<span style=color:#A6E22E>@then</span>>\n\n  &lt;<span style=color:#A6E22E>@catch</span>|<span style=color:#FFAC4D>err</span>|>\n<span style=color:#8F8F9E>    &lt;!-- Displays if promise rejects --></span>\n    <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>err</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span> error: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>err</span>.<span style=color:#FFFFFF>message</span><span style=color:#66D9EF>}</span>\n  &lt;/<span style=color:#A6E22E>@catch</span>>\n&lt;/<span style=color:#FF4185>await</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>personPromise</span> <span style=color:#FFFFFF>=</span> <span style=color:#FF4185>new</span> <span style=color:#66D9EF>Promise</span>((<span style=color:#FFAC4D>resolve</span>, <span style=color:#FFAC4D>reject</span>) <span style=color:#66D9EF>=></span> {\n    <span style=color:#A6E22E>setTimeout</span>(() <span style=color:#66D9EF>=></span> <span style=color:#A6E22E>resolve</span>({ name: <span style=color:#FFF066>\"Frank\"</span> }), <span style=color:#AE81FF>1000</span>);\n  });\n}\n\n<span style=color:#FF4185>await</span>(<span style=color:#FFFFFF>personPromise</span>) <span style=color:#A6E22E>client-reorder</span>\n  <span style=color:#A6E22E>@placeholder</span>\n<span style=color:#8F8F9E>    &lt;!-- Displays while promise is pending --></span>\n    <span style=color:#FF4185>label</span>\n      -- Loading\u2026\n      <span style=color:#FF4185>progress</span>\n\n  <span style=color:#A6E22E>@then</span>|<span style=color:#FFAC4D>person</span>|\n<span style=color:#8F8F9E>    &lt;!-- Displays if promise resolves --></span>\n    <span style=color:#FF4185>p</span> -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!\n\n  <span style=color:#A6E22E>@catch</span>|<span style=color:#FFAC4D>err</span>|\n    --<span style=color:#8F8F9E> &lt;!-- Displays if promise rejects --></span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>err</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span> error: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>err</span>.<span style=color:#FFFFFF>message</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "152");

  out.w("<p>Optional attributes for <code>&lt;await&gt;</code>:</p><table class=markdown-table><thead><tr><th align=right>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td align=right><code>timeout</code></td><td>integer</td><td>An optional timeout. If reached, rejects the promise with a <code>TimeoutError</code>.</td></tr><tr><td align=right><code>name</code></td><td>string</td><td>Improves debugging and ensures ordering with the <code>show-after</code> attribute.</td></tr><tr><td align=right><code>show-after</code></td><td>string</td><td>Another <code>&lt;await&gt;</code> tag\u2019s <code>name</code>. Use with <code>client-reorder</code> to ensure that the current <code>&lt;await&gt;</code> will always render alongside or after the named <code>&lt;await&gt;</code>.</td></tr><tr><td align=right><code>client-reorder</code></td><td>boolean</td><td>If true, anything after this <code>&lt;await&gt;</code> will be server-rendered before the Promise completes, then the fulfilled Promise\u2019s result will be updated with client-side JavaScript.</td></tr></tbody></table><p>Regardless of these attributes, the promise is executed as eagerly as possible. The attributes control how to coordinate rendering with the rest of the page:</p><ul><li><p><code>client-reorder</code> prevents <code>&lt;await&gt;</code> blocks from delaying the HTTP stream, at the expense of making their rendering rely on client-side JS. Useful for making non-critical page sections not block HTML streaming of important content.</p></li><li><p>Using <code>show-after</code> with <code>client-reorder</code> ensures that the current <code>&lt;await&gt;</code> block will always render simultaneously with or after the named <code>&lt;await&gt;</code>. Useful for cutting down on <a href=https://web.dev/debug-layout-shifts/ >layout shift</a>. <code>&lt;@placeholder&gt;</code>s can help fine-tune the user experience while loading.</p></li><li><p><code>timeout</code> is useful for limiting non-critical content from slowing down the rest of the page too much.</p></li></ul><blockquote class=null><p><strong>Pro Tip</strong>: When using <code>timeout</code>, you can distinguish between <code>TimeoutError</code>s and promise rejections by checking the error\u2019s <code>name</code>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>await</span>(<span style=color:#FFFFFF>slowPromise</span>) <span style=color:#A6E22E>timeout</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>5000</span>>\n  &lt;<span style=color:#A6E22E>@then</span>>Done&lt;/<span style=color:#A6E22E>@then</span>>\n  &lt;<span style=color:#A6E22E>@catch</span>|<span style=color:#FFAC4D>err</span>|>\n    &lt;<span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>err</span>.<span style=color:#FFFFFF>name</span> <span style=color:#FF4185>===</span> <span style=color:#FFF066>\"TimeoutError\"</span>)>\n      Took too long to fetch the data!\n    &lt;/<span style=color:#FF4185>if</span>>\n    &lt;<span style=color:#FF4185>else</span>>\n      Promise failed with <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>err</span>.<span style=color:#FFFFFF>message</span><span style=color:#66D9EF>}</span>.\n    &lt;/<span style=color:#FF4185>else</span>>\n  &lt;/<span style=color:#A6E22E>@catch</span>>\n&lt;/<span style=color:#FF4185>await</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>await</span>(<span style=color:#FFFFFF>slowPromise</span>) <span style=color:#A6E22E>timeout</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>5000</span>\n  <span style=color:#A6E22E>@then</span> -- Done\n  <span style=color:#A6E22E>@catch</span>|<span style=color:#FFAC4D>err</span>|\n    <span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>err</span>.<span style=color:#FFFFFF>name</span> <span style=color:#FF4185>===</span> <span style=color:#FFF066>\"TimeoutError\"</span>) -- Took too long to fetch the data!\n    <span style=color:#FF4185>else</span> -- Promise failed with <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>err</span>.<span style=color:#FFFFFF>message</span><span style=color:#66D9EF>}</span>.\n</pre>"
  }, out, _componentDef, "213");

  out.w("</blockquote><h2 id=include-text><a name=include-text class=anchor href=#include-text><span class=header-link></span></a><code>&lt;include-text&gt;</code></h2><p><code>&lt;include-text&gt;</code> inlines text files into a template, escaping HTML syntax characters (<code>&lt;</code>, <code>&quot;</code>, etc.).</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>include-text</span>(<span style=color:#FFF066>'./foo.txt'</span>)/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>include-text</span>(<span style=color:#FFF066>\"./foo.txt\"</span>)\n</pre>"
  }, out, _componentDef, "222");

  out.w("<p>If you do not want escaping, use <a href=#include-html><code>&lt;include-html&gt;</code></a> instead.</p><h2 id=include-html><a name=include-html class=anchor href=#include-html><span class=header-link></span></a><code>&lt;include-html&gt;</code></h2><p>Like <code>&lt;include-text&gt;</code>, <code>&lt;include-html&gt;</code> inlines the contents of a file. However, this tag <strong>does <em>not</em> escape</strong> special HTML characters.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>include-html</span>(<span style=color:#FFF066>'./foo.html'</span>)/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>include-html</span>(<span style=color:#FFF066>\"./foo.html\"</span>)\n</pre>"
  }, out, _componentDef, "235");

  out.w("<h2 id=html-comment><a name=html-comment class=anchor href=#html-comment><span class=header-link></span></a><code>&lt;html-comment&gt;</code></h2><p>Marko removes HTML comment tags from its output. But if you need comments in the output, that\u2019s what <code>&lt;html-comment&gt;</code> is for:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#66D9EF>html-comment</span>><span style=color:#8F8F9E>[if IE]>&lt;script src=\"html-shiv.js\">&lt;/script>&lt;![endif]</span>&lt;/<span style=color:#66D9EF>html-comment</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>html-comment</span> --<span style=color:#8F8F9E> [if IE]>&lt;script src=\"html-shiv.js\">&lt;/script>&lt;![endif]</span>\n</pre>"
  }, out, _componentDef, "242");

  out.w("<p>\u2026becomes:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!--[if IE]>&lt;script src=\"html-shiv.js\">&lt;/script>&lt;![endif]--></span>\n</pre>");
}, {
  t: core_tags_marko_componentType,
  i: true
}, core_tags_marko_component);
__webpack_require__(6027)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/custom-tags.md


const custom_tags_marko_componentType = "RDvYHi8Y",
      custom_tags_marko_template = (0,index_js_namespaceObject.t)(custom_tags_marko_componentType);

/* harmony default export */ const custom_tags = (custom_tags_marko_template);

toc_registry.set("../../node_modules/marko/docs/custom-tags.md", "<ul class=\"toc toc-level0\"><li><a href=\"#custom-tags\">Custom tags</a><ul class=\"toc toc-level1\"><li><a href=\"#your-first-custom-tag\">Your first custom tag</a></li><li><a href=\"#how-tags-are-discovered\">How tags are discovered</a></li><li><a href=\"#tag-directories\">Tag directories</a></li><li><a href=\"#using-tags-from-npm\">Using tags from npm</a></li><li><a href=\"#publishing-tags-to-npm\">Publishing tags to npm</a></li></ul></li><li><a href=\"#macros\">Macros</a></li><li><a href=\"#from-variables\">From Variables</a></li></ul>");
const custom_tags_title = "Custom tags";



const custom_tags_marko_component = {};
custom_tags_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=custom-tags><a name=custom-tags class=anchor href=#custom-tags><span class=header-link></span></a>Custom tags</h1><p>Custom tags allow you to break up your application UI into encapsulated, reusable components.</p><h2 id=your-first-custom-tag><a name=your-first-custom-tag class=anchor href=#your-first-custom-tag><span class=header-link></span></a>Your first custom tag</h2><p>Let&#39;s say we have a page with the following content:</p><div class=code-block-filename>page.marko</div><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>doctype</span> <span style=color:#A6E22E>html</span>>\n&lt;<span style=color:#FF4185>html</span>>\n&lt;<span style=color:#FF4185>body</span>>\n    &lt;<span style=color:#FF4185>h1</span>>Hello World!&lt;/<span style=color:#FF4185>h1</span>>\n&lt;/<span style=color:#FF4185>body</span>>\n&lt;/<span style=color:#FF4185>html</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>doctype</span> <span style=color:#A6E22E>html</span>>\n<span style=color:#FF4185>html</span>\n  <span style=color:#FF4185>body</span>\n    <span style=color:#FF4185>h1</span> -- Hello World!\n</pre>"
  }, out, _componentDef, "10");

  out.w("<p>However, this page is getting pretty complex and unmaintainable. Let&#39;s split out the content into a separate component. To do this, we&#39;ll create a <code>components/</code> folder and inside it a <code>hello.marko</code> file:</p><div class=code-block-filename>components/hello.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>h1</span>>Hello World!&lt;/<span style=color:#FF4185>h1</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>h1</span> -- Hello World!\n</pre>"
  }, out, _componentDef, "15");

  out.w("<p>Marko <a href=#how-tags-are-discovered>automatically discovers</a> <code>.marko</code> files under a <code>components/</code> directory, so we can now use the <code>&lt;hello&gt;</code> tag in our page:</p><div class=code-block-filename>page.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>doctype</span> <span style=color:#A6E22E>html</span>>\n&lt;<span style=color:#FF4185>html</span>>\n&lt;<span style=color:#FF4185>body</span>>\n    &lt;<span style=color:#FF4185>hello</span>/>\n&lt;/<span style=color:#FF4185>body</span>>\n&lt;/<span style=color:#FF4185>html</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>doctype</span> <span style=color:#A6E22E>html</span>>\n<span style=color:#FF4185>html</span>\n  <span style=color:#FF4185>body</span>\n    <span style=color:#FF4185>hello</span>\n</pre>"
  }, out, _componentDef, "22");

  out.w("<p>Now this <code>&lt;hello&gt;</code> tag can be used multiple times, and even on multiple pages. But what if we don&#39;t only want to say hello to the world? Let&#39;s pass some attributes.</p><div class=code-block-filename>page.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>doctype</span> <span style=color:#A6E22E>html</span>>\n&lt;<span style=color:#FF4185>html</span>>\n&lt;<span style=color:#FF4185>body</span>>\n    &lt;<span style=color:#FF4185>hello</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"World\"</span>/>\n&lt;/<span style=color:#FF4185>body</span>>\n&lt;/<span style=color:#FF4185>html</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>doctype</span> <span style=color:#A6E22E>html</span>>\n<span style=color:#FF4185>html</span>\n  <span style=color:#FF4185>body</span>\n    <span style=color:#FF4185>hello</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"World\"</span>\n</pre>"
  }, out, _componentDef, "26");

  out.w("<p>The component will receive these attributes as <code>input</code>:</p><div class=code-block-filename>components/hello.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>h1</span>>Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!&lt;/<span style=color:#FF4185>h1</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>h1</span> -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!\n</pre>"
  }, out, _componentDef, "30");

  out.w("<p>Nice.</p><h2 id=how-tags-are-discovered><a name=how-tags-are-discovered class=anchor href=#how-tags-are-discovered><span class=header-link></span></a>How tags are discovered</h2><p>Marko discovers components relative to the <code>.marko</code> file where a custom tag is used. From this file, Marko walks up directories until it finds a <code>components/</code> folder which contains a component matching the name of the custom tag. If it reaches the project root without finding anything, it will then check installed packages for the component.</p><p>Let&#39;s take a look at an example directory structure to better understand this:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>components/\n    app-header.marko\n    app-footer.marko\npages/\n    about/\n        components/\n            team-members.marko\n        page.marko\n    home/\n        components/\n            home-banner.marko\n        page.marko\n</pre><p>The file <code>pages/home/page.marko</code> can use the following tags:</p><ul><li><code>&lt;app-header&gt;</code></li><li><code>&lt;app-footer&gt;</code></li><li><code>&lt;home-banner&gt;</code></li></ul><p>And the file <code>pages/about/page.marko</code> can use the following tags:</p><ul><li><code>&lt;app-header&gt;</code></li><li><code>&lt;app-footer&gt;</code></li><li><code>&lt;team-members&gt;</code></li></ul><p>The home page can&#39;t see <code>&lt;team-members&gt;</code> and the about page can&#39;t see <code>&lt;home-banner&gt;</code>. By using nested <code>component/</code> directories, we&#39;ve scoped our page-specific components to their respective pages.</p><h2 id=tag-directories><a name=tag-directories class=anchor href=#tag-directories><span class=header-link></span></a>Tag directories</h2><p>In addition to a Marko template, the children of <code>components/</code> can be a directory with an <code>index.marko</code> template:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>components/\n    app-header/\n        index.marko\n        logo.png\n        style.css\n    app-footer/\n        index.marko\n</pre><p>Or a directory with a template whose name matches its parent directory:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>components/\n    app-header/\n        app-header.marko\n        app-header.style.css\n        logo.png\n    app-footer/\n        app-footer.marko\n</pre><p>This allows you to create components that have other files associated with them and keep those files together in the directory structure.</p><blockquote class=protip><p><strong>ProTip:</strong> You can take advantage of nested <code>components/</code> directories to create &quot;subcomponents&quot; that are only available to the component that contains them.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>components/\n    app-header/\n        components/\n            navigation.marko\n            user-info.marko\n        app-header.marko\n    app-footer/\n        app-footer.marko\n</pre></blockquote><h2 id=using-tags-from-npm><a name=using-tags-from-npm class=anchor href=#using-tags-from-npm><span class=header-link></span></a>Using tags from npm</h2><p>To use <a href=https://www.npmjs.com/search?q=keywords%3Amarko%20components>tags from npm</a>, ensure that the package is installed and listed in your <code>package.json</code> dependencies:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm install --save @marko-tags/match-media\n</pre><p>Marko discover tags from packages defined in your <code>package.json</code>, so you can start using them right away:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span>>\n    &lt;<span style=color:#FF4185>match-media</span>|{ <span style=color:#FFAC4D>mobile</span> }| <span style=color:#A6E22E>mobile</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"max-width:30em\"</span>>\n<span style=color:#8F8F9E>        &lt;!-- nice --></span>\n    &lt;/<span style=color:#FF4185>match-media</span>>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span>\n  <span style=color:#FF4185>match-media</span>|{ <span style=color:#FFAC4D>mobile</span> }| <span style=color:#A6E22E>mobile</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"max-width:30em\"</span>\n<span style=color:#8F8F9E>    &lt;!-- nice --></span>\n</pre>"
  }, out, _componentDef, "81");

  out.w("<h2 id=publishing-tags-to-npm><a name=publishing-tags-to-npm class=anchor href=#publishing-tags-to-npm><span class=header-link></span></a>Publishing tags to npm</h2><p>We saw above that tags from npm are automatically discovered. In order to make this work, your package must include a <a href=/docs/marko-json/ ><code>marko.json</code></a> at the root.</p><div class=code-block-filename>marko.json</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"tags-dir\"</span>: <span style=color:#FFF066>\"./dist/components\"</span>\n}\n</pre><p>This example file tells Marko to expose all components directly under the <code>dist/components/</code> directory to the application using your package.</p><p>We recommend adding the <code>marko</code> and <code>components</code> keywords to your <code>package.json</code> so others can find your components. Then <code>npm publish</code>!</p><h1 id=macros><a name=macros class=anchor href=#macros><span class=header-link></span></a>Macros</h1><p>The <a href=/docs/core-tags/#macro><code>&lt;macro&gt;</code></a> tag allows you to create custom tags in the same file that they are used in.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#66D9EF>macro</span>|{ <span style=color:#FFAC4D>name</span> }| <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"welcome-message\"</span>>\n    &lt;<span style=color:#FF4185>h1</span>>Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!&lt;/<span style=color:#FF4185>h1</span>>\n&lt;/<span style=color:#66D9EF>macro</span>>\n\n&lt;<span style=color:#FF4185>welcome-message</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Patrick\"</span>/>\n&lt;<span style=color:#FF4185>welcome-message</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Austin\"</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>macro</span>|{ <span style=color:#FFAC4D>name</span> }| <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"welcome-message\"</span>\n  <span style=color:#FF4185>h1</span> -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!\n\n<span style=color:#FF4185>welcome-message</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Patrick\"</span>\n<span style=color:#FF4185>welcome-message</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Austin\"</span>\n</pre>"
  }, out, _componentDef, "102");

  out.w("<h1 id=from-variables><a name=from-variables class=anchor href=#from-variables><span class=header-link></span></a>From Variables</h1><p>If no other tag would be discovered Marko will check for an in scope variable that matches the tag name.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>SomeTag</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./somewhere.marko\"</span>\n\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> { <span style=color:#FFFFFF>renderBody</span> } <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>;\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>MyTag</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>href</span> <span style=color:#FF4185>?</span> <span style=color:#FFF066>\"a\"</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>\"button\"</span>;\n\n&lt;<span style=color:#FF4185>SomeTag</span>/>\n&lt;<span style=color:#FF4185>MyTag</span>/>\n&lt;<span style=color:#FF4185>renderBody</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>SomeTag</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./somewhere.marko\"</span>;\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> { <span style=color:#FFFFFF>renderBody</span> } <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>;\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>MyTag</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>href</span> <span style=color:#FF4185>?</span> <span style=color:#FFF066>\"a\"</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>\"button\"</span>;\n\n<span style=color:#FF4185>SomeTag</span>\n<span style=color:#FF4185>MyTag</span>\n<span style=color:#FF4185>renderBody</span>\n</pre>"
  }, out, _componentDef, "107");
}, {
  t: custom_tags_marko_componentType,
  i: true
}, custom_tags_marko_component);
__webpack_require__(3370)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/editor-plugins.md


const editor_plugins_marko_componentType = "WYSTRK0v",
      editor_plugins_marko_template = (0,index_js_namespaceObject.t)(editor_plugins_marko_componentType);

/* harmony default export */ const editor_plugins = (editor_plugins_marko_template);

toc_registry.set("../../node_modules/marko/docs/editor-plugins.md", "<ul class=\"toc toc-level1\"><li><a href=\"#visual-studio-code\">Visual Studio Code</a></li><li><a href=\"#atom\">Atom</a></li><li><a href=\"#sublime\">Sublime</a></li><li><a href=\"#webstorm\">WebStorm</a></li><li><a href=\"#textmate\">TextMate</a></li><li><a href=\"#codemirror\">CodeMirror</a></li></ul>");
const editor_plugins_title = "Editor Plugins";

const editor_plugins_marko_component = {};
editor_plugins_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=editor-plugins><a name=editor-plugins class=anchor href=#editor-plugins><span class=header-link></span></a>Editor Plugins</h1><h2 id=visual-studio-code><a name=visual-studio-code class=anchor href=#visual-studio-code><span class=header-link></span></a>Visual Studio Code</h2><p><a href=https://marketplace.visualstudio.com/items?itemName=Marko-JS.marko-vscode>Documentation</a></p><ul><li>Syntax highlighting</li><li>Tag matching</li><li>Tag, attribute and css autocompletion</li><li>Hyperclick (clickable tags and attributes)</li><li>Surfaces errors within the templates.</li><li>Prettyprinting (<a href=https://github.com/marko-js/marko-prettyprint>marko-prettyprint</a> is used internally)</li></ul><h2 id=atom><a name=atom class=anchor href=#atom><span class=header-link></span></a>Atom</h2><p><a href=https://atom.io/packages/language-marko>Documentation</a></p><ul><li>Syntax highlighting</li><li>Tag matching</li><li>Tag and attribute autocompletion</li><li>Code snippets</li><li>Hyperclick (clickable tags and attributes)</li><li>Prettyprinting (<a href=https://github.com/marko-js/marko-prettyprint>marko-prettyprint</a> is used internally)</li></ul><h2 id=sublime><a name=sublime class=anchor href=#sublime><span class=header-link></span></a>Sublime</h2><p><a href=https://github.com/merwan7/sublime-marko>Documentation</a></p><ul><li>Syntax highlighting</li></ul><h2 id=webstorm><a name=webstorm class=anchor href=#webstorm><span class=header-link></span></a>WebStorm</h2><p><a href=https://github.com/marko-js/marko-tmbundle>Documentation</a></p><ul><li>Syntax highlighting</li></ul><h2 id=textmate><a name=textmate class=anchor href=#textmate><span class=header-link></span></a>TextMate</h2><p><a href=https://github.com/marko-js/marko-tmbundle>Documentation</a></p><ul><li>Syntax highlighting</li></ul><h2 id=codemirror><a name=codemirror class=anchor href=#codemirror><span class=header-link></span></a>CodeMirror</h2><p><a href=https://github.com/patrick-steele-idem/codemirror-atom-modes>codemirror-atom-modes</a> + <a href=https://github.com/marko-js/atom-language-marko>atom-language-marko</a></p>");
}, {
  t: editor_plugins_marko_componentType,
  i: true
}, editor_plugins_marko_component);
__webpack_require__(4625)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/events.md


const events_marko_componentType = "+OA5kpUq",
      events_marko_template = (0,index_js_namespaceObject.t)(events_marko_componentType);

/* harmony default export */ const events = (events_marko_template);

toc_registry.set("../../node_modules/marko/docs/events.md", "<ul class=\"toc toc-level1\"><li><a href=\"#listening-to-events\">Listening to events</a><ul class=\"toc toc-level2\"><li><a href=\"#function-handler\">Function handler</a></li><li><a href=\"#method-handler\">Method handler</a></li><li><a href=\"#binding-additional-arguments\">Binding additional arguments</a></li></ul></li><li><a href=\"#emitting-custom-events\">Emitting custom events</a></li></ul>");
const events_title = "Events";



const events_marko_component = {};
events_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=events><a name=events class=anchor href=#events><span class=header-link></span></a>Events</h1><p>Marko\u2019s event API supports:</p><ul><li><a href=https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events>Browser events</a> on native tags</li><li>Custom events from <a href=/docs/custom-tags/ >custom tags</a></li></ul><p>Note that <strong>you can\u2019t mix event targets and event types</strong>: custom tags can only listen for custom events, and native tags can only listen for native events.</p><h2 id=listening-to-events><a name=listening-to-events class=anchor href=#listening-to-events><span class=header-link></span></a>Listening to events</h2><p>Both kinds of events are received with an <code>on-*</code> attribute and the <a href=/docs/syntax/#arguments>attribute arguments syntax</a>:</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"checkbox\"</span>\n  <span style=color:#66D9EF>on-change</span>(<span style=color:#FFAC4D>event</span> <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>info</span>(<span style=color:#FFF066>`Checked? </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>event</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>target</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>checked</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>))\n/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>input</span> [\n  <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"checkbox\"</span>\n  <span style=color:#66D9EF>on-change</span>((<span style=color:#FFAC4D>event</span>) <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>info</span>(<span style=color:#FFF066>`Checked? </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>event</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>target</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>checked</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>))\n]\n</pre>"
  }, out, _componentDef, "18");

  out.w("<p>The <a href=#function-handler>first argument for the attribute can be a function</a>, or <a href=#method-handler>a string matching a method name</a> on the <a href=/docs/class-components/ >component\u2019s <code>class</code> declaration</a>.</p><h3 id=function-handler><a name=function-handler class=anchor href=#function-handler><span class=header-link></span></a>Function handler</h3><p>If you provide a function as the first argument of the <code>on-*</code> attribute, the function is called whenever the event fires, like standard event listeners.</p><p>Below we use the <a href=/docs/syntax/#static-javascript><code>static</code> prefix</a> to define a function, then use it as a <code>click</code> handler:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>static</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>handleClick</span>(<span style=color:#FFAC4D>event</span>) {\n  <span style=color:#FFFFFF>event</span>.<span style=color:#A6E22E>preventDefault</span>();\n  <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>\"Clicked!\"</span>);\n}\n\n&lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFFFFF>handleClick</span>)>\n  Log click\n&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>static</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>handleClick</span>(<span style=color:#FFAC4D>event</span>) {\n  <span style=color:#FFFFFF>event</span>.<span style=color:#A6E22E>preventDefault</span>();\n  <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>\"Clicked!\"</span>);\n}\n\n<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFFFFF>handleClick</span>) -- Log click\n</pre>"
  }, out, _componentDef, "33");

  out.w("<p>In the above example, any time the <code>&lt;button&gt;</code> is clicked the <code>handleClick</code> function is called.</p><p>You can also use an inline arrow function:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(() <span style=color:#66D9EF>=></span> <span style=color:#A6E22E>alert</span>(<span style=color:#FFF066>\"Clicked! \uD83C\uDF89\"</span>))>\n  Celebrate click\n&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(() <span style=color:#66D9EF>=></span> <span style=color:#A6E22E>alert</span>(<span style=color:#FFF066>\"Clicked! \uD83C\uDF89\"</span>)) -- Celebrate click\n</pre>"
  }, out, _componentDef, "38");

  out.w("<p>\u2026or anything that evaluates to a function:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#A6E22E>handler</span> <span style=color:#FFFFFF>=</span> (\n  <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>dontBreakMyApp</span> <span style=color:#FF4185>?</span>\n    () <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>error</span>(<span style=color:#FFF066>\"Clicked!\"</span>) <span style=color:#FF4185>:</span>\n    () <span style=color:#66D9EF>=></span> { <span style=color:#FF4185>throw</span> <span style=color:#A6E22E>Error</span>(<span style=color:#FFF066>\"Clicked!\"</span>) }\n);\n\n&lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFFFFF>handler</span>)>\n  Do not click\n&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>handler</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>dontBreakMyApp</span>\n    <span style=color:#FF4185>?</span> () <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>error</span>(<span style=color:#FFF066>\"Clicked!\"</span>)\n    <span style=color:#FF4185>:</span> () <span style=color:#66D9EF>=></span> {\n        <span style=color:#FF4185>throw</span> <span style=color:#A6E22E>Error</span>(<span style=color:#FFF066>\"Clicked!\"</span>);\n      };\n}\n\n<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFFFFF>handler</span>) -- Do not click\n</pre>"
  }, out, _componentDef, "40");

  out.w("<h3 id=method-handler><a name=method-handler class=anchor href=#method-handler><span class=header-link></span></a>Method handler</h3><p>When a string is the first argument, Marko calls a matching method on the component&#39;s <code>class</code>.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>logChange</span>(<span style=color:#FFAC4D>newTab</span>) {\n    <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>`changed to: </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>newTab</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>);\n  }\n}\n\n&lt;<span style=color:#FF4185>my-tabs</span> <span style=color:#66D9EF>on-switch-tab</span>(<span style=color:#FFF066>\"logChange\"</span>)>\n  \u2026\n&lt;/<span style=color:#FF4185>my-tabs</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>logChange</span>(<span style=color:#FFAC4D>newTab</span>) {\n    <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>`changed to: </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>newTab</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>);\n  }\n}\n\n<span style=color:#FF4185>my-tabs</span> <span style=color:#66D9EF>on-switch-tab</span>(<span style=color:#FFF066>\"logChange\"</span>) -- \u2026\n</pre>"
  }, out, _componentDef, "46");

  out.w("<p>When <code>&lt;my-tabs&gt;</code> emits the <code>switch-tab</code> event, it will call its <code>logChange</code> method.</p><p>Within the handler you can access the current component instance, read data, emit events, update state, etc.</p><h3 id=binding-additional-arguments><a name=binding-additional-arguments class=anchor href=#binding-additional-arguments><span class=header-link></span></a>Binding additional arguments</h3><p>Arguments after the handler are prepended when the handler is called:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>static</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>removeFriend</span>(<span style=color:#FFAC4D>friendId</span>, <span style=color:#FFAC4D>event</span>) {\n  <span style=color:#FFFFFF>event</span>.<span style=color:#A6E22E>preventDefault</span>();\n  <span style=color:#FFFFFF>window</span>.<span style=color:#FFFFFF>myAPI</span>.<span style=color:#A6E22E>unfriend</span>(<span style=color:#FFFFFF>friendId</span>);\n}\n\n&lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>friend</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>friends</span>>\n  &lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFFFFF>removeFriend</span>, <span style=color:#FFFFFF>friend</span>.<span style=color:#FFFFFF>id</span>)>\n    Unfriend <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>friend</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n  &lt;/<span style=color:#FF4185>button</span>>\n&lt;/<span style=color:#FF4185>for</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>static</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>removeFriend</span>(<span style=color:#FFAC4D>friendId</span>, <span style=color:#FFAC4D>event</span>) {\n  <span style=color:#FFFFFF>event</span>.<span style=color:#A6E22E>preventDefault</span>();\n  <span style=color:#FFFFFF>window</span>.<span style=color:#FFFFFF>myAPI</span>.<span style=color:#A6E22E>unfriend</span>(<span style=color:#FFFFFF>friendId</span>);\n}\n\n<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>friend</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>friends</span>\n  <span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFFFFF>removeFriend</span>, <span style=color:#FFFFFF>friend</span>.<span style=color:#FFFFFF>id</span>) -- Unfriend <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>friend</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "56");

  out.w("<p>Here we share the logic for <code>removeFriend()</code> with each <code>friend</code> in the <code>friends</code> array. When the <code>&lt;button&gt;</code> is clicked, the <code>id</code> of the removed <code>friend</code> is passed to the <code>removeFriend()</code>, handler followed by the DOM <code>click</code> event.</p><h2 id=emitting-custom-events><a name=emitting-custom-events class=anchor href=#emitting-custom-events><span class=header-link></span></a>Emitting custom events</h2><p>The recommended way for a <a href=/docs/custom-tags/ >custom tag</a> to communicate with its parent is through <strong>custom events</strong>.</p><p>All components implement a <a href=https://nodejs.org/api/events.html#events_class_eventemitter>Node.js-style event emitter</a> to send events to parent components.</p><div class=code-block-filename>email-input.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>handleChange</span>(<span style=color:#FFAC4D>event</span>) {\n    <span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>event</span>.<span style=color:#FFFFFF>target</span>.<span style=color:#FFFFFF>validity</span>.<span style=color:#FFFFFF>valid</span>) {\n      <span style=color:#8F8F9E>// Only emit email-changes if they are valid.</span>\n      <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>\"email-change\"</span>, { email: <span style=color:#FFFFFF>event</span>.<span style=color:#FFFFFF>target</span>.<span style=color:#FFFFFF>value</span> });\n    }\n  }\n}\n\n&lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"email\"</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span> <span style=color:#66D9EF>on-change</span>(<span style=color:#FFF066>\"handleChange\"</span>)/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>handleChange</span>(<span style=color:#FFAC4D>event</span>) {\n    <span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>event</span>.<span style=color:#FFFFFF>target</span>.<span style=color:#FFFFFF>validity</span>.<span style=color:#FFFFFF>valid</span>) {\n      <span style=color:#8F8F9E>// Only emit email-changes if they are valid.</span>\n      <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>emit</span>(<span style=color:#FFF066>\"email-change\"</span>, { email: <span style=color:#FFFFFF>event</span>.<span style=color:#FFFFFF>target</span>.<span style=color:#FFFFFF>value</span> });\n    }\n  }\n}\n\n<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"email\"</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span> <span style=color:#66D9EF>on-change</span>(<span style=color:#FFF066>\"handleChange\"</span>)\n</pre>"
  }, out, _componentDef, "75");

  out.w("<p>The above code listens to native <code>change</code> events from the <code>&lt;input&gt;</code> element, and then emits its own <code>email-change</code> event if the change was valid.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>form</span>>\n  &lt;<span style=color:#FF4185>email-input</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"email\"</span> <span style=color:#66D9EF>on-email-change</span>(<span style=color:#FFF066>\"...\"</span>)/>\n&lt;/<span style=color:#FF4185>form</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>form</span>\n  <span style=color:#FF4185>email-input</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"email\"</span> <span style=color:#66D9EF>on-email-change</span>(<span style=color:#FFF066>\"...\"</span>)\n</pre>"
  }, out, _componentDef, "80");

  out.w("<blockquote class=note><p><strong>Note:</strong> Events are not received as <code>input</code>; you cannot access <code>input.onEmailChange</code>. Instead, they set up subscriptions.</p></blockquote>");
}, {
  t: events_marko_componentType,
  i: true
}, events_marko_component);
__webpack_require__(9112)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/express.md


const express_marko_componentType = "bkiCRt13",
      express_marko_template = (0,index_js_namespaceObject.t)(express_marko_componentType);

/* harmony default export */ const express = (express_marko_template);

toc_registry.set("../../node_modules/marko/docs/express.md", "<ul class=\"toc toc-level1\"><li><a href=\"#quick-start\">Quick Start</a></li><li><a href=\"#from-scratch\">From Scratch</a><ul class=\"toc toc-level2\"><li><a href=\"#skip-the-view-engine\">Skip the view engine</a></li><li><a href=\"#usage\">Usage</a></li><li><a href=\"#byob-bring-your-own-bundler\">BYOB</a></li></ul></li></ul>");
const express_title = "Marko + Express";

const express_marko_component = {};
express_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=marko-express><a name=marko-express class=anchor href=#marko-express><span class=header-link></span></a>Marko + Express</h1><h2 id=quick-start><a name=quick-start class=anchor href=#quick-start><span class=header-link></span></a>Quick Start</h2><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm init marko -- --template vite-express\n</pre><p>See the <a href=https://github.com/marko-js/examples/tree/master/examples/vite-express>the express sample</a> project for a working example.</p><h2 id=from-scratch><a name=from-scratch class=anchor href=#from-scratch><span class=header-link></span></a>From Scratch</h2><p>First install Marko and the express related dependencies:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm install marko @marko/express express --save\n</pre><h3 id=skip-the-view-engine><a name=skip-the-view-engine class=anchor href=#skip-the-view-engine><span class=header-link></span></a>Skip the view engine</h3><p>The built in view engine for express may be asynchronous, but it doesn&#39;t support streaming (check out <a href=http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/ >Rediscovering Progressive HTML Rendering</a> to see why this is so important). So instead we&#39;ll <a href=https://strongloop.com/strongblog/bypassing-express-view-rendering-for-speed-and-modularity/ >bypass the view engine</a> and use <a href=https://github.com/marko-js/express/ ><code>@marko/express</code></a>.</p><h3 id=usage><a name=usage class=anchor href=#usage><span class=header-link></span></a>Usage</h3><p>The <a href=https://github.com/marko-js/express/ ><code>@marko/express</code></a> adds a <code>res.marko</code> method to the express response object. This function works much like <code>res.render</code>, but doesn&#39;t impose the restrictions of the express view engine and allows you to take full advantage of Marko&#39;s streaming and modular approach to templates.</p><p>By using <code>res.marko</code> you&#39;ll automatically have access to <code>req</code>, <code>res</code>, <code>app</code>, <code>app.locals</code>, and <code>res.locals</code> from within your Marko template and custom tags. These values are added to <code>out.global</code>.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>express</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"express\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>markoPlugin</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@marko/express\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>Template</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./template.marko\"</span>;\n\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>app</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>express</span>();\n\n<span style=color:#FFFFFF>app</span>.<span style=color:#A6E22E>use</span>(<span style=color:#A6E22E>markoPlugin</span>()); <span style=color:#8F8F9E>//enable res.marko(template, data)</span>\n\n<span style=color:#FFFFFF>app</span>.<span style=color:#A6E22E>get</span>(<span style=color:#FFF066>\"/\"</span>, <span style=color:#66D9EF>function</span> (<span style=color:#FFAC4D>req</span>, <span style=color:#FFAC4D>res</span>) {\n  <span style=color:#FFFFFF>res</span>.<span style=color:#A6E22E>marko</span>(<span style=color:#FFFFFF>Template</span>, {\n    name: <span style=color:#FFF066>\"Frank\"</span>,\n    count: <span style=color:#AE81FF>30</span>,\n    colors: [<span style=color:#FFF066>\"red\"</span>, <span style=color:#FFF066>\"green\"</span>, <span style=color:#FFF066>\"blue\"</span>]\n  });\n});\n\n<span style=color:#FFFFFF>app</span>.<span style=color:#A6E22E>listen</span>(<span style=color:#AE81FF>8080</span>);\n</pre><h3 id=byob-bring-your-own-bundler><a name=byob-bring-your-own-bundler class=anchor href=#byob-bring-your-own-bundler><span class=header-link></span></a>BYOB (Bring your own bundler)</h3><p>For the large portion of Marko&#39;s API a bundler is required. The example code above assumes that Marko templates can be loaded in your environment. Marko supports a number of bundlers, <a href=#bundler-integrations>take a look through our supported bundlers</a> and pick what works best for you.</p>");
}, {
  t: express_marko_componentType,
  i: true
}, express_marko_component);
__webpack_require__(8359)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/fastify.md


const fastify_marko_componentType = "hs5SeyN3",
      fastify_marko_template = (0,index_js_namespaceObject.t)(fastify_marko_componentType);

/* harmony default export */ const fastify = (fastify_marko_template);

toc_registry.set("../../node_modules/marko/docs/fastify.md", "<ul class=\"toc toc-level1\"><li><a href=\"#quick-start\">Quick Start</a></li><li><a href=\"#from-scratch\">From Scratch</a><ul class=\"toc toc-level2\"><li><a href=\"#usage\">Usage</a></li><li><a href=\"#byob-bring-your-own-bundler\">BYOB</a></li></ul></li></ul>");
const fastify_title = "Marko + Fastify";

const fastify_marko_component = {};
fastify_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=marko-fastify><a name=marko-fastify class=anchor href=#marko-fastify><span class=header-link></span></a>Marko + Fastify</h1><h2 id=quick-start><a name=quick-start class=anchor href=#quick-start><span class=header-link></span></a>Quick Start</h2><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm init marko -- --template vite-fastify\n</pre><p>See the <a href=https://github.com/marko-js/examples/tree/master/examples/vite-fastify>the fastify sample</a> project for a working example.</p><h2 id=from-scratch><a name=from-scratch class=anchor href=#from-scratch><span class=header-link></span></a>From Scratch</h2><p>First install Marko and the fastify related dependencies:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm install marko @marko/fastify fastify --save\n</pre><h3 id=usage><a name=usage class=anchor href=#usage><span class=header-link></span></a>Usage</h3><p>The <a href=https://github.com/marko-js/fastify/ ><code>@marko/fastify</code></a> adds a <code>reply.marko</code> decorator to the <code>reply</code> object. This function allows us to pass in a Marko template and supports Marko&#39;s streaming and modular approach to templates.</p><p>By using <code>reply.marko</code> you&#39;ll automatically have access to <code>app.locals</code>, and <code>reply.locals</code> from within your Marko template and custom tags. These values are added to <code>out.global</code>.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>fastify</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"fastify\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>markoPlugin</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@marko/fastify\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>Template</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./template.marko\"</span>;\n\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>app</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>fastify</span>();\n\n<span style=color:#FFFFFF>app</span>.<span style=color:#A6E22E>register</span>(<span style=color:#FFFFFF>markoPlugin</span>);\n\n<span style=color:#FFFFFF>app</span>.<span style=color:#A6E22E>get</span>(<span style=color:#FFF066>\"/\"</span>, (<span style=color:#FFAC4D>request</span>, <span style=color:#FFAC4D>reply</span>) <span style=color:#66D9EF>=></span> {\n  <span style=color:#8F8F9E>// Streams Marko template into the response.</span>\n  <span style=color:#8F8F9E>// Forwards errors into fa error handler.</span>\n  <span style=color:#FFFFFF>reply</span>.<span style=color:#A6E22E>marko</span>(<span style=color:#FFFFFF>Template</span>, { hello: <span style=color:#FFF066>\"world\"</span> });\n});\n\n<span style=color:#FF4185>await</span> <span style=color:#FFFFFF>fastify</span>.<span style=color:#A6E22E>listen</span>(<span style=color:#AE81FF>3000</span>);\n</pre><h3 id=byob-bring-your-own-bundler><a name=byob-bring-your-own-bundler class=anchor href=#byob-bring-your-own-bundler><span class=header-link></span></a>BYOB (Bring your own bundler)</h3><p>For the large portion of Marko&#39;s API a bundler is required. The example code above assumes that Marko templates can be loaded in your environment. Marko supports a number of bundlers, <a href=#bundler-integrations>take a look through our supported bundlers</a> and pick what works best for you.</p>");
}, {
  t: fastify_marko_componentType,
  i: true
}, fastify_marko_component);
__webpack_require__(7996)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/getting-started.md


const getting_started_marko_componentType = "1jE5AvzX",
      getting_started_marko_template = (0,index_js_namespaceObject.t)(getting_started_marko_componentType);

/* harmony default export */ const getting_started = (getting_started_marko_template);

toc_registry.set("../../node_modules/marko/docs/getting-started.md", "<ul class=\"toc toc-level1\"><li><a href=\"#hello-world\">Hello world</a></li><li><a href=\"#a-simple-component\">A simple component</a><ul class=\"toc toc-level2\"><li><a href=\"#adding-state\">Adding state</a></li></ul></li></ul>");
const getting_started_title = "Getting started";



const getting_started_marko_component = {};
getting_started_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=getting-started><a name=getting-started class=anchor href=#getting-started><span class=header-link></span></a>Getting started</h1><p>The easiest way to get started with Marko is to use the <a href=/try-online>Try Online</a> feature. You can just open it in another tab and follow along. If you&#39;d rather develop locally, check out the <a href=/docs/installing/ >Installation</a> page.</p><h2 id=hello-world><a name=hello-world class=anchor href=#hello-world><span class=header-link></span></a>Hello world</h2><p>Marko makes it easy to represent your UI using a <a href=/docs/syntax/ >syntax</a> that is like HTML:</p><div class=code-block-filename>hello.marko</div><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>h1</span>>Hello World&lt;/<span style=color:#FF4185>h1</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>h1</span> -- Hello World\n</pre>"
  }, out, _componentDef, "13");

  out.w("<p>In fact, Marko is so much like HTML, that you can use it as a replacement for a templating language like handlebars, mustache, or pug:</p><div class=code-block-filename>template.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>doctype</span> <span style=color:#A6E22E>html</span>>\n&lt;<span style=color:#FF4185>html</span>>\n&lt;<span style=color:#FF4185>head</span>>\n    &lt;<span style=color:#FF4185>title</span>>Hello World&lt;/<span style=color:#FF4185>title</span>>\n&lt;/<span style=color:#FF4185>head</span>>\n&lt;<span style=color:#FF4185>body</span>>\n    &lt;<span style=color:#FF4185>h1</span>>Hello World&lt;/<span style=color:#FF4185>h1</span>>\n&lt;/<span style=color:#FF4185>body</span>>\n&lt;/<span style=color:#FF4185>html</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>doctype</span> <span style=color:#A6E22E>html</span>>\n<span style=color:#FF4185>html</span>\n  <span style=color:#FF4185>head</span>\n    <span style=color:#FF4185>title</span> -- Hello World\n  <span style=color:#FF4185>body</span>\n    <span style=color:#FF4185>h1</span> -- Hello World\n</pre>"
  }, out, _componentDef, "16");

  out.w("<p>However, Marko is much more than a templating language. It&#39;s a language that allows you to declaratively build an application by describing how the application view changes over time and in response to user actions.</p><p>In the browser, when the data representing your UI changes, Marko will automatically and efficiently update the DOM to reflect the changes.</p><h2 id=a-simple-component><a name=a-simple-component class=anchor href=#a-simple-component><span class=header-link></span></a>A simple component</h2><p>Let&#39;s say we want to perform an action once a <code>&lt;button&gt;</code> is clicked:</p><div class=code-block-filename>button.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>button</span>>Click me!&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>button</span> -- Click me!\n</pre>"
  }, out, _componentDef, "25");

  out.w("<p>Marko makes this really easy, allowing you to define a <code>class</code> for a component right in the <code>.marko</code> view and call methods of that class with <code>on-</code> attributes:</p><div class=code-block-filename>button.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n    <span style=color:#A6E22E>sayHi</span>() {\n        <span style=color:#A6E22E>alert</span>(<span style=color:#FFF066>\"Hi!\"</span>);\n    }\n}\n\n&lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"sayHi\"</span>)>Click me!&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>sayHi</span>() {\n    <span style=color:#A6E22E>alert</span>(<span style=color:#FFF066>\"Hi!\"</span>);\n  }\n}\n\n<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"sayHi\"</span>) -- Click me!\n</pre>"
  }, out, _componentDef, "31");

  out.w("<h3 id=adding-state><a name=adding-state class=anchor href=#adding-state><span class=header-link></span></a>Adding state</h3><p>Alerting when a button is clicked is great, but what about updating your UI in response to an action? Marko&#39;s stateful components make this easy. All you need to do is set <code>this.state</code> from inside your component&#39;s class. This makes a new <code>state</code> variable available to your view. When a value in <code>this.state</code> is changed, the view will automatically re-render and only update the part of the DOM that changed.</p><div class=code-block-filename>counter.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n    <span style=color:#A6E22E>onCreate</span>() {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n            count: <span style=color:#AE81FF>0</span>\n        };\n    }\n    <span style=color:#A6E22E>increment</span>() {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#FF4185>++</span>;\n    }\n}\n\n&lt;<span style=color:#FF4185>div</span>>The current count is <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>div</span>>\n&lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>)>Click me!&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> {\n      count: <span style=color:#AE81FF>0</span>,\n    };\n  }\n  <span style=color:#A6E22E>increment</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#FF4185>++</span>;\n  }\n}\n\n<span style=color:#FF4185>div</span> -- The current count is <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>\n<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>) -- Click me!\n</pre>"
  }, out, _componentDef, "40");
}, {
  t: getting_started_marko_componentType,
  i: true
}, getting_started_marko_component);
__webpack_require__(4344)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/http.md


const http_marko_componentType = "RfMkcjbp",
      http_marko_template = (0,index_js_namespaceObject.t)(http_marko_componentType);

/* harmony default export */ const http = (http_marko_template);

toc_registry.set("../../node_modules/marko/docs/http.md", "<ul class=\"toc toc-level1\"><li><a href=\"#usage\">Usage</a><ul class=\"toc toc-level2\"><li><a href=\"#byob-bring-your-own-bundler\">BYOB</a></li></ul></li></ul>");
const http_title = "Marko + HTTP Server";

const http_marko_component = {};
http_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=marko-http-server><a name=marko-http-server class=anchor href=#marko-http-server><span class=header-link></span></a>Marko + HTTP Server</h1><p>See the <a href=https://github.com/marko-js/examples/tree/master/examples/vite-http>the http sample</a> project for a working example.</p><h2 id=usage><a name=usage class=anchor href=#usage><span class=header-link></span></a>Usage</h2><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>http</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"http\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>Template</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./index.marko\"</span>;\n\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>port</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>8080</span>;\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>server</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>http</span>.<span style=color:#A6E22E>createServer</span>();\n\n<span style=color:#FFFFFF>server</span>.<span style=color:#A6E22E>on</span>(<span style=color:#FFF066>\"request\"</span>, (<span style=color:#FFAC4D>req</span>, <span style=color:#FFAC4D>res</span>) <span style=color:#66D9EF>=></span> {\n  <span style=color:#FFFFFF>Template</span>.<span style=color:#A6E22E>render</span>(\n    {\n      name: <span style=color:#FFF066>\"Frank\"</span>,\n      count: <span style=color:#AE81FF>30</span>,\n      colors: [<span style=color:#FFF066>\"red\"</span>, <span style=color:#FFF066>\"green\"</span>, <span style=color:#FFF066>\"blue\"</span>]\n    },\n    <span style=color:#FFFFFF>res</span>\n  );\n});\n\n<span style=color:#FFFFFF>server</span>.<span style=color:#A6E22E>listen</span>(<span style=color:#FFFFFF>port</span>, () <span style=color:#66D9EF>=></span> {\n  <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>`Successfully started server on port </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>port</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>);\n});\n</pre><h3 id=byob-bring-your-own-bundler><a name=byob-bring-your-own-bundler class=anchor href=#byob-bring-your-own-bundler><span class=header-link></span></a>BYOB (Bring your own bundler)</h3><p>For the large portion of Marko&#39;s API a bundler is required. The example code above assumes that Marko templates can be loaded in your environment. Marko supports a number of bundlers, <a href=#bundler-integrations>take a look through our supported bundlers</a> and pick what works best for you.</p>");
}, {
  t: http_marko_componentType,
  i: true
}, http_marko_component);
__webpack_require__(8033)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/installing.md


const installing_marko_componentType = "c0Zzii6A",
      installing_marko_template = (0,index_js_namespaceObject.t)(installing_marko_componentType);

/* harmony default export */ const installing = (installing_marko_template);

toc_registry.set("../../node_modules/marko/docs/installing.md", "<ul class=\"toc toc-level1\"><li><a href=\"#trying-out-marko\">Trying out Marko</a></li><li><a href=\"#creating-new-apps-recommended\">Creating new apps</a></li><li><a href=\"#custom-bundling\">Custom Bundling</a><ul class=\"toc toc-level2\"><li><a href=\"#webpack\">Webpack</a></li><li><a href=\"#lasso\">Lasso</a></li><li><a href=\"#rollup\">Rollup</a></li></ul></li></ul>");
const installing_title = "Installation";

const installing_marko_component = {};
installing_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=installation><a name=installation class=anchor href=#installation><span class=header-link></span></a>Installation</h1><h2 id=trying-out-marko><a name=trying-out-marko class=anchor href=#trying-out-marko><span class=header-link></span></a>Trying out Marko</h2><p>If you just want to play around with Marko in the browser, head on over to our <a href=/try-online>Try Online</a> feature. You&#39;ll be able to develop a Marko application right in your browser.</p><h2 id=creating-new-apps-recommended><a name=creating-new-apps-recommended class=anchor href=#creating-new-apps-recommended><span class=header-link></span></a>Creating new apps (Recommended)</h2><p>If you&#39;re starting from scratch, you can use Marko&#39;s <a href=https://github.com/marko-js/cli>CLI</a> commands to quickly create a starter app:</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npx @marko/create\n</pre><p>This will use an interactive <a href=https://github.com/marko-js/cli>CLI</a> to automatically create a project for you using the pre-made starter template of your choosing. The <code>basic</code> template is the most minimal and the easiest way to get started. It uses our batteries-included <code>@marko/build</code> and <code>@marko/serve</code> tools that handle building, bundling, and serving your web application. These projects are config-free with built-in file based routing and automatic code reloading.</p><h2 id=custom-bundling><a name=custom-bundling class=anchor href=#custom-bundling><span class=header-link></span></a>Custom Bundling</h2><p>Marko relies on JavaScript bundlers to package your code on both the client and the server. This is because Marko&#39;s client and server bundling works closely together to optimize the smallest client bundles and handle shared assets properly.</p><p>Using the CLI is still the easiest way to get started even when you want to get your hands dirty tweaking every last part of your config files. Marko currently supports Webpack, Lasso, and Rollup.</p><h3 id=webpack><a name=webpack class=anchor href=#webpack><span class=header-link></span></a>Webpack</h3><p><a href=/docs/webpack/ >Webpack Integration Docs</a></p><p><a href=https://github.com/marko-js/webpack>Marko Webpack Plugin</a></p><p><a href=https://github.com/marko-js/examples/tree/master/examples/webpack-express>Webpack Example</a></p><p>CLI Command: <code>npx @marko/create --template webpack-express</code></p><h3 id=lasso><a name=lasso class=anchor href=#lasso><span class=header-link></span></a>Lasso</h3><p><a href=/docs/lasso/ >Lasso Integration Docs</a></p><p><a href=https://github.com/lasso-js/lasso-marko>Marko Lasso Plugin</a></p><p><a href=https://github.com/marko-js/examples/tree/master/examples/lasso-express>Lasso Example</a></p><p>CLI Command: <code>npx @marko/create --template lasso-express</code></p><h3 id=rollup><a name=rollup class=anchor href=#rollup><span class=header-link></span></a>Rollup</h3><p><a href=/docs/rollup/ >Rollup Integration Docs</a></p><p><a href=https://github.com/marko-js/rollup>Marko Rollup Plugin</a></p>");
}, {
  t: installing_marko_componentType,
  i: true
}, installing_marko_component);
__webpack_require__(8772)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/koa.md


const koa_marko_componentType = "EU4D6oex",
      koa_marko_template = (0,index_js_namespaceObject.t)(koa_marko_componentType);

/* harmony default export */ const koa = (koa_marko_template);

toc_registry.set("../../node_modules/marko/docs/koa.md", "<ul class=\"toc toc-level1\"><li><a href=\"#installation\">Installation</a></li><li><a href=\"#usage\">Usage</a><ul class=\"toc toc-level2\"><li><a href=\"#byob-bring-your-own-bundler\">BYOB</a></li></ul></li></ul>");
const koa_title = "Marko + Koa";

const koa_marko_component = {};
koa_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=marko-koa><a name=marko-koa class=anchor href=#marko-koa><span class=header-link></span></a>Marko + Koa</h1><p>See the <a href=https://github.com/marko-js/examples/tree/master/examples/vite-koa>the koa sample</a> project for a working example.</p><h2 id=installation><a name=installation class=anchor href=#installation><span class=header-link></span></a>Installation</h2><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm install koa marko --save\n</pre><h2 id=usage><a name=usage class=anchor href=#usage><span class=header-link></span></a>Usage</h2><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>Koa</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"koa\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>Template</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./index.marko\"</span>;\n\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>app</span> <span style=color:#FFFFFF>=</span> <span style=color:#FF4185>new</span> <span style=color:#A6E22E>Koa</span>();\n\n<span style=color:#FFFFFF>app</span>.<span style=color:#A6E22E>use</span>((<span style=color:#FFAC4D>ctx</span>, <span style=color:#FFAC4D>next</span>) <span style=color:#66D9EF>=></span> {\n  <span style=color:#FFFFFF>ctx</span>.<span style=color:#FFFFFF>type</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>\"html\"</span>;\n  <span style=color:#FFFFFF>ctx</span>.<span style=color:#FFFFFF>body</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>Template</span>.<span style=color:#A6E22E>stream</span>({\n    name: <span style=color:#FFF066>\"Frank\"</span>,\n    count: <span style=color:#AE81FF>30</span>,\n    colors: [<span style=color:#FFF066>\"red\"</span>, <span style=color:#FFF066>\"green\"</span>, <span style=color:#FFF066>\"blue\"</span>]\n  });\n});\n\n<span style=color:#FFFFFF>app</span>.<span style=color:#A6E22E>listen</span>(<span style=color:#AE81FF>8080</span>);\n</pre><h3 id=byob-bring-your-own-bundler><a name=byob-bring-your-own-bundler class=anchor href=#byob-bring-your-own-bundler><span class=header-link></span></a>BYOB (Bring your own bundler)</h3><p>For the large portion of Marko&#39;s API a bundler is required. The example code above assumes that Marko templates can be loaded in your environment. Marko supports a number of bundlers, <a href=#bundler-integrations>take a look through our supported bundlers</a> and pick what works best for you.</p>");
}, {
  t: koa_marko_componentType,
  i: true
}, koa_marko_component);
__webpack_require__(7564)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/lasso.md


const lasso_marko_componentType = "JmwluJsV",
      lasso_marko_template = (0,index_js_namespaceObject.t)(lasso_marko_componentType);

/* harmony default export */ const lasso = (lasso_marko_template);

toc_registry.set("../../node_modules/marko/docs/lasso.md", "<ul class=\"toc toc-level1\"><li><a href=\"#installation\">Installation</a></li><li><a href=\"#registering-the-plugin\">Registering the plugin</a></li><li><a href=\"#lasso-custom-tags\">Lasso custom tags</a></li><li><a href=\"#client-side-rendering\">Client-side rendering</a></li><li><a href=\"#server-side-rendering\">Server-side rendering</a></li><li><a href=\"#browser-refresh\">Browser refresh</a></li><li><a href=\"#lasso-package-types-commonly-used-with-marko\">Lasso package types commonly used with Marko</a><ul class=\"toc toc-level2\"><li><ul class=\"toc toc-level3\"><li><a href=\"#marko-dependencies-provided-by-lasso-marko\">marko-dependencies <em>()</em></a></li><li><a href=\"#marko-hydrate-provided-by-lasso-marko\">marko-hydrate <em>()</em></a></li><li><a href=\"#package\">package</a></li><li><a href=\"#require\">require</a></li><li><a href=\"#require-and-run\">require and run</a></li></ul></li></ul></li></ul>");
const lasso_title = "Marko + Lasso";



const lasso_marko_component = {};
lasso_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=marko-lasso><a name=marko-lasso class=anchor href=#marko-lasso><span class=header-link></span></a>Marko + Lasso</h1><p>The <a href=https://github.com/lasso-js/lasso-marko>lasso-marko</a> plugin for <a href=https://github.com/lasso-js/lasso>Lasso.js</a> will automatically compile all imported Marko templates during bundling. In addition, the <code>lasso-marko</code> plugin will automatically bundle any template dependencies (including required CSS).</p><p>Lasso.js provides Marko custom tags for injecting JavaScript and CSS bundles, images and other resources.</p><p>The sample <a href=https://github.com/marko-js/examples/tree/master/examples/lasso-express>lasso-express</a> app demonstrates how to build a production-ready web application using Marko and Lasso. Run <code>npx @marko/create --template lasso-express</code> to use this sample as a starting point for a new app.</p><h2 id=installation><a name=installation class=anchor href=#installation><span class=header-link></span></a>Installation</h2><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm install lasso-marko --save\n</pre><h2 id=registering-the-plugin><a name=registering-the-plugin class=anchor href=#registering-the-plugin><span class=header-link></span></a>Registering the plugin</h2><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#A6E22E>require</span>(<span style=color:#FFF066>'lasso'</span>).<span style=color:#A6E22E>configure</span>({\n    <span style=color:#FFF066>\"plugins\"</span>: [\n        <span style=color:#FF4185>...</span>\n        <span style=color:#FFF066>\"lasso-marko\"</span>\n    ]\n    <span style=color:#FF4185>...</span>\n});\n</pre><h2 id=lasso-custom-tags><a name=lasso-custom-tags class=anchor href=#lasso-custom-tags><span class=header-link></span></a>Lasso custom tags</h2><p>To inject the required JavaScript and CSS into the page you will want to use the <code>&lt;lasso-page&gt;</code>, <code>&lt;lasso-head&gt;</code> and <code>&lt;lasso-body&gt;</code> tags.</p><p>If you are using lasso@^3 (latest), make sure to install the <a href=https://github.com/lasso-js/lasso-marko-taglib>lasso-marko-taglib</a>, so that you can use the lasso custom tags.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm install lasso-marko\nnpm install @lasso/marko-taglib\n</pre><p>After installing, the lasso custom tags can be used in your templates:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>DOCTYPE</span> <span style=color:#A6E22E>html</span>>\n&lt;<span style=color:#FF4185>html</span> <span style=color:#A6E22E>lang</span>=<span style=color:#FFF066>\"en\"</span>>\n  &lt;<span style=color:#FF4185>head</span>>\n    &lt;<span style=color:#FF4185>meta</span> <span style=color:#A6E22E>charset</span>=<span style=color:#FFF066>\"UTF-8\"</span> />\n    &lt;<span style=color:#FF4185>title</span>>Marko + Lasso&lt;/<span style=color:#FF4185>title</span>>\n    &lt;<span style=color:#FF4185>lasso-head</span> />\n  &lt;/<span style=color:#FF4185>head</span>>\n  &lt;<span style=color:#FF4185>body</span>>\n    &lt;<span style=color:#FF4185>lasso-body</span> />\n  &lt;/<span style=color:#FF4185>body</span>>\n&lt;/<span style=color:#FF4185>html</span>>\n</pre><p>Lasso.js will automatically bundle up transitive dependencies by building and walking a dependency graph.</p><h2 id=client-side-rendering><a name=client-side-rendering class=anchor href=#client-side-rendering><span class=header-link></span></a>Client-side rendering</h2><p>Marko templates can be imported and rendered by any JavaScript module. The code below shows how to render a top-level UI component and have it be mounted to the DOM as a child <code>document.body</code>:</p><p><em>client.js</em></p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"./components/app/index.marko\"</span>)\n  .<span style=color:#A6E22E>renderSync</span>({})\n  .<span style=color:#A6E22E>appendTo</span>(<span style=color:#FFFFFF>document</span>.<span style=color:#FFFFFF>body</span>);\n</pre><p>When Lasso.js bundles up the code above it will automatically bundle up the required <code>./components/app/index.marko</code> file.</p><h2 id=server-side-rendering><a name=server-side-rendering class=anchor href=#server-side-rendering><span class=header-link></span></a>Server-side rendering</h2><p>If you are rendering the initial UI on the server then it is necessary to make sure that all UI components are bundled and sent to the browser so that UI components can be mounted in the browser. For example:</p><div class=code-block-filename>about-me/index.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>DOCTYPE</span> <span style=color:#A6E22E>html</span>>\n&lt;<span style=color:#FF4185>html</span> <span style=color:#A6E22E>lang</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"en\"</span>>\n    &lt;<span style=color:#FF4185>head</span>>\n        &lt;<span style=color:#FF4185>meta</span> <span style=color:#A6E22E>charset</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"UTF-8\"</span>>\n        &lt;<span style=color:#FF4185>title</span>>Marko + Lasso&lt;/<span style=color:#FF4185>title</span>>\n\n<span style=color:#8F8F9E>        &lt;!-- CSS will be inserted here --></span>\n        &lt;<span style=color:#FF4185>lasso-head</span>/>\n    &lt;/<span style=color:#FF4185>head</span>>\n    &lt;<span style=color:#FF4185>body</span>>\n<span style=color:#8F8F9E>        &lt;!-- Top-level UI component: --></span>\n        &lt;<span style=color:#FF4185>app</span>/>\n\n<span style=color:#8F8F9E>        &lt;!-- JS will be inserted here --></span>\n        &lt;<span style=color:#FF4185>lasso-body</span>/>\n    &lt;/<span style=color:#FF4185>body</span>>\n&lt;/<span style=color:#FF4185>html</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;!<span style=color:#FF4185>DOCTYPE</span> <span style=color:#A6E22E>html</span>>\n<span style=color:#FF4185>html</span> <span style=color:#A6E22E>lang</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"en\"</span>\n  <span style=color:#FF4185>head</span>\n    <span style=color:#FF4185>meta</span> <span style=color:#A6E22E>charset</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"UTF-8\"</span>\n    <span style=color:#FF4185>title</span> -- Marko + Lasso\n<span style=color:#8F8F9E>    &lt;!-- CSS will be inserted here --></span>\n    <span style=color:#FF4185>lasso-head</span>\n  <span style=color:#FF4185>body</span>\n<span style=color:#8F8F9E>    &lt;!-- Top-level UI component: --></span>\n    <span style=color:#FF4185>app</span>\n<span style=color:#8F8F9E>    &lt;!-- JS will be inserted here --></span>\n    <span style=color:#FF4185>lasso-body</span>\n</pre>"
  }, out, _componentDef, "43");

  out.w("<h2 id=browser-refresh><a name=browser-refresh class=anchor href=#browser-refresh><span class=header-link></span></a>Browser refresh</h2><p><a href=https://github.com/patrick-steele-idem/browser-refresh>browser-refresh</a> is recommended in development for instant page refreshes and hot reloading of Marko templates, styles and other resources. <code>browser-refresh</code> works well with Lasso and Marko and is very easy to use as a drop-in replacement for <code>node</code>:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>browser-refresh server.js\n</pre><h2 id=lasso-package-types-commonly-used-with-marko><a name=lasso-package-types-commonly-used-with-marko class=anchor href=#lasso-package-types-commonly-used-with-marko><span class=header-link></span></a>Lasso package types commonly used with Marko</h2><p>For many use cases, the combination of <code>lasso-marko</code> and <code>@lasso/marko-taglib</code> is sufficient to render and bundle components without the need for explicit <code>browser.json</code> files. For more advanced use cases, the following bundle types may be defined in a <code>browser.json</code> for Lasso.</p><h4 id=marko-dependencies-provided-by-lasso-marko><a name=marko-dependencies-provided-by-lasso-marko class=anchor href=#marko-dependencies-provided-by-lasso-marko><span class=header-link></span></a><code>marko-dependencies</code> <em>(provided by <code>lasso-marko</code>)</em></h4><p>Includes all the dependencies needed by template and the code to register all components that would be rendered by the template. It does not automatically initialize the component, so is most useful if you need to initialize components manually.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"type\"</span>: <span style=color:#FFF066>\"marko-dependencies\"</span>,\n  <span style=color:#FFF066>\"path\"</span>: <span style=color:#FFF066>\"src/ui-modules/outdated-browser-banner/index.marko\"</span>\n}\n</pre><p><strong>Note:</strong> To initialize the server rendered components, there are 2 steps:</p><p><strong>Step 1:</strong> Manually <em>retrieve</em> server rendered components, shipped via <code>marko-dependencies</code>.</p><p>To retrieve the list of server rendered components, do:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>template</span>.<span style=color:#A6E22E>render</span>(<span style=color:#FFFFFF>data</span>, (<span style=color:#FFAC4D>err</span>, <span style=color:#FFAC4D>output</span>) <span style=color:#66D9EF>=></span> {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>renderedComponentsList</span> <span style=color:#FFFFFF>=</span>\n    <span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"marko/components\"</span>).<span style=color:#A6E22E>getRenderedComponents</span>(<span style=color:#FFFFFF>output</span>.<span style=color:#FFFFFF>out</span>);\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>html</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>output</span>.<span style=color:#A6E22E>getOutput</span>();\n});\n<span style=color:#FFFFFF>res</span>.<span style=color:#A6E22E>json</span>({\n  <span style=color:#FFFFFF>renderedComponentsList</span>,\n  <span style=color:#FFFFFF>html</span>\n});\n</pre><p><strong>Step 2:</strong> Manually <em>initialize</em> server rendered components, shipped via <code>marko-dependencies</code>.</p><p>To initialize the list of server rendered components, do:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>// from the response received, retrieve as</span>\n<span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"marko/components\"</span>).<span style=color:#A6E22E>init</span>(<span style=color:#FFFFFF>response</span>.<span style=color:#FFFFFF>renderedComponentsList</span>);\n</pre><p><strong>Note:</strong> Ensure Step 2 is inside a DOM-ready wrapper, for the legacy widgets layer to load (if there are widgets built out of Marko 3, that is being used inside a Marko 4 component.)</p><h4 id=marko-hydrate-provided-by-lasso-marko><a name=marko-hydrate-provided-by-lasso-marko class=anchor href=#marko-hydrate-provided-by-lasso-marko><span class=header-link></span></a><code>marko-hydrate</code> <em>(provided by <code>lasso-marko</code>)</em></h4><p>Includes all the dependencies needed by template and the code to register all components that would be rendered by the template. This also includes the code to initialize the rendered components. Including this bundle on the page will automatically hydrate server rendered components.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"type\"</span>: <span style=color:#FFF066>\"marko-hydrate\"</span>,\n  <span style=color:#FFF066>\"path\"</span>: <span style=color:#FFF066>\"src/ui-modules/outdated-browser-banner/index.marko\"</span>\n}\n</pre><p><strong>Note:</strong> <code>marko-hydrate</code> will initialize the component if its defined on the global <code>window.&#36;components</code> which is inserted by <code>Marko</code> when it sees a <code>&lt;body&gt;</code> tag. Else, if you are just rendering out and lasso-ing the a portion of a page with a set of components, include <code>&lt;init-components/&gt;</code> at the end of the associated <code>template.marko</code> file that builds out the page fragment.</p><h4 id=package><a name=package class=anchor href=#package><span class=header-link></span></a><code>package</code></h4><p>A collection of dependencies. <code>browser.json</code> is the most common package type. It could be used to point to another <code>browser.json</code> from within one component&#39;s <code>browser.json</code>. Typically also used when the dependencies of the referred <code>browser.json</code> have to be packaged inline.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"type\"</span>: <span style=color:#FFF066>\"package\"</span>,\n  <span style=color:#FFF066>\"path\"</span>: <span style=color:#FFF066>\"src/ui-modules/show-diag/browser.json\"</span>\n}\n</pre><h4 id=require><a name=require class=anchor href=#require><span class=header-link></span></a><code>require</code></h4><p>If a javascript file has to be wrapped over for its common JS syntax, to a browser understandable format.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"type\"</span>: <span style=color:#FFF066>\"require\"</span>,\n  <span style=color:#FFF066>\"path\"</span>: <span style=color:#FFF066>\"src/ui-modules/dynamic-module-loader/dynamic-init-client.js\"</span>\n}\n</pre><h4 id=require-and-run><a name=require-and-run class=anchor href=#require-and-run><span class=header-link></span></a><code>require</code> and <code>run</code></h4><p>If a javascript file has to be wrapped over for its common JS syntax, to a browser understandable format and be executed immediately.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"run\"</span>: <span style=color:#AE81FF>true</span>,\n  <span style=color:#FFF066>\"type\"</span>: <span style=color:#FFF066>\"require\"</span>,\n  <span style=color:#FFF066>\"path\"</span>: <span style=color:#FFF066>\"src/ui-modules/my-module/init.js\"</span>\n}\n</pre>");
}, {
  t: lasso_marko_componentType,
  i: true
}, lasso_marko_component);
__webpack_require__(2829)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/marko-5-upgrade.md


const marko_5_upgrade_marko_componentType = "/ngz6Jyh",
      marko_5_upgrade_marko_template = (0,index_js_namespaceObject.t)(marko_5_upgrade_marko_componentType);

/* harmony default export */ const marko_5_upgrade = (marko_5_upgrade_marko_template);

toc_registry.set("../../node_modules/marko/docs/marko-5-upgrade.md", "<ul class=\"toc toc-level1\"><li><a href=\"#step-0-ensure-youre-in-a-working-state\">Step 0 - Ensure you&#39;re in a working state</a></li><li><a href=\"#step-1-upgrade-to-latest-4x\">Step 1 - Upgrade to latest 4.x</a></li><li><a href=\"#step-2-deal-with-deprecations\">Step 2 - Deal with deprecations</a></li><li><a href=\"#step-3-upgrade-dependencies\">Step 3 - Upgrade dependencies</a></li><li><a href=\"#step-4-upgrade-marko\">Step 4 - Upgrade marko</a></li></ul>");
const marko_5_upgrade_title = "Upgrading to Marko 5";

const marko_5_upgrade_marko_component = {};
marko_5_upgrade_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=upgrading-to-marko-5><a name=upgrading-to-marko-5 class=anchor href=#upgrading-to-marko-5><span class=header-link></span></a>Upgrading to Marko 5</h1><p>The following guide will help you get through the upgrade process quickly and smoothly. This guide covers upgrading from Marko 4. If you are upgrading to Marko 5 from a previous version follow those docs first. After any given step you should have a working application.</p><p>This means you should complete a step and get it merged back into master fairly quickly. You shouldn&#39;t need to have a <code>marko-5-upgrade</code> branch for your project that lives in limbo for a couple of weeks falling behind the other changes that are being merged into master.</p><p>If you do decide to pause and later jump in where you left off, be sure to repeat Step 0 first \uD83D\uDE09.</p><h2 id=step-0-ensure-youre-in-a-working-state><a name=step-0-ensure-youre-in-a-working-state class=anchor href=#step-0-ensure-youre-in-a-working-state><span class=header-link></span></a>Step 0 - Ensure you&#39;re in a working state</h2><p>Run your application and tests to ensure your project is in a working state. There&#39;s little worse than finding an issue after you&#39;ve started the upgrade process only to figure out the issue existed beforehand.</p><h2 id=step-1-upgrade-to-latest-4x><a name=step-1-upgrade-to-latest-4x class=anchor href=#step-1-upgrade-to-latest-4x><span class=header-link></span></a>Step 1 - Upgrade to latest 4.x</h2><p>Before we start, you&#39;ll want to make sure that you are already on the latest <code>4.x</code> release of <code>marko</code>.</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm install marko@^4\n</pre><p>or</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>yarn upgrade marko@^4\n</pre><blockquote class=null><p>Note: Do NOT run <code>npm install marko</code> (without the <code>@^4</code>). This will put you on Marko 5 and we&#39;re not quite there yet.</p></blockquote><h2 id=step-2-deal-with-deprecations><a name=step-2-deal-with-deprecations class=anchor href=#step-2-deal-with-deprecations><span class=header-link></span></a>Step 2 - Deal with deprecations</h2><p>Run your application and tests and ensure that there are no deprecation warnings logged to the console. If there are, you should follow the instructions in the deprecation messages to avoid the deprecated pattern and migrate to the recommended pattern.</p><p>Additionally, any deprecation warnings that start with <code>MIGRATION</code> are automatically migratable by <a href=https://github.com/marko-js/cli/blob/master/packages/migrate/README.md><code>marko migrate</code></a>. Most migrations are 100% safe and will run automatically. However, there are a few migrations which are considered unsafe: they may only get you 90% of the way there. These migrations will prompt and ask if you want to run the migration. It is highly recommended to run these only on a single component at a time and then finish the migration manually using the guide below so that your app is always in a working state.</p><h2 id=step-3-upgrade-dependencies><a name=step-3-upgrade-dependencies class=anchor href=#step-3-upgrade-dependencies><span class=header-link></span></a>Step 3 - Upgrade dependencies</h2><p>Before upgrading to Marko 5, it is recommended to make sure that your Marko-related dependencies are up-to-date. Many packages have versions that support both Marko 4 and Marko 5. If one of your dependencies doesn&#39;t have a version that supports both, you&#39;ll need to wait to upgrade it until you&#39;re upgrading Marko.</p><p>After upgrading, run your application and tests to ensure that everything is still working as intended. If there are any issues, please refer to the changelogs of the modules you just upgraded to see if you need to make any changes within your app to accommodate the new versions.</p><h2 id=step-4-upgrade-marko><a name=step-4-upgrade-marko class=anchor href=#step-4-upgrade-marko><span class=header-link></span></a>Step 4 - Upgrade marko</h2><p>Phew! With all the prep out of the way we&#39;re finally ready to upgrade <code>marko</code>!</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm install marko@^5\n</pre><p>or</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>yarn upgrade marko@^5\n</pre><blockquote class=null><p><strong>Note</strong>: Marko 5 has changed to using ES Modules. This means if you are using CJS modules to <code>require</code> a Marko template you will need to use the <code>.default</code> property exported.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>template</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"./template.marko\"</span>);\n<span style=color:#8F8F9E>// \u2026should become:</span>\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>template</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"./template.marko\"</span>).<span style=color:#FFFFFF>default</span>;\n\n<span style=color:#8F8F9E>// If already using ES Modules, things remain the same:</span>\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>template</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./template.marko\"</span>;\n</pre></blockquote>");
}, {
  t: marko_5_upgrade_marko_componentType,
  i: true
}, marko_5_upgrade_marko_component);
__webpack_require__(1598)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/marko-json.md


const marko_json_marko_componentType = "L+j/Qhzy",
      marko_json_marko_template = (0,index_js_namespaceObject.t)(marko_json_marko_componentType);

/* harmony default export */ const marko_json = (marko_json_marko_template);

toc_registry.set("../../node_modules/marko/docs/marko-json.md", "<ul class=\"toc toc-level1\"><li><a href=\"#single-component-definition\">Single component definition</a><ul class=\"toc toc-level2\"><li><a href=\"#options\">Options</a></li><li><a href=\"#attributes\">Attributes</a></li><li><a href=\"#paths\">Paths</a></li></ul></li><li><a href=\"#tag-library-definition\">Tag library definition</a><ul class=\"toc toc-level2\"><li><a href=\"#options_1\">Options</a></li></ul></li><li><a href=\"#shorthands\">Shorthands</a></li></ul>");
const marko_json_title = "marko.json &amp; marko-tag.json";

const marko_json_marko_component = {};
marko_json_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=markojson-marko-tagjson><a name=markojson-marko-tagjson class=anchor href=#markojson-marko-tagjson><span class=header-link></span></a><code>marko.json</code> &amp; <code>marko-tag.json</code></h1><p>Marko supports configuration files for validation, enabling experimental features, and custom paths for component files.</p><p>These configuration files are automatically found with <a href=/docs/custom-tags/#how-tags-are-discovered>the same discovery mechanism as custom tags</a>.</p><p>There are 2 types of configuration files:</p><ol><li><code>marko.json</code> describes an entire suite of components.</li><li><code>marko-tag.json</code> describes a single component.</li></ol><h2 id=single-component-definition><a name=single-component-definition class=anchor href=#single-component-definition><span class=header-link></span></a>Single component definition</h2><p><code>marko-tag.json</code> configures a single component. It\u2019s automatically discovered if placed inside a <a href=/docs/custom-tags/#tag-directories>tag directory</a>.</p><h3 id=options><a name=options class=anchor href=#options><span class=header-link></span></a>Options</h3><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"html\"</span>: <span style=color:#AE81FF>true</span>, <span style=color:#8F8F9E>// Treat as a native HTML tag, not a custom tag.</span>\n  <span style=color:#FFF066>\"htmlType\"</span>: <span style=color:#FFF066>\"svg\"</span>, <span style=color:#8F8F9E>// Optimizes for specific types of native tags (currently only `svg` and `html`).</span>\n  <span style=color:#FFF066>\"open-tag-only\"</span>: <span style=color:#AE81FF>true</span>, <span style=color:#8F8F9E>// Forbids passing body content to this tag.</span>\n  <span style=color:#FFF066>\"featureFlags\"</span>: [ <span style=color:#FFF066>\"feature-a\"</span> ], <span style=color:#8F8F9E>// Enable beta features by passing feature flags.</span>\n  <span style=color:#FFF066>\"nested-tags\"</span>: { <span style=color:#8F8F9E>// This section configures attribute tags.</span>\n    <span style=color:#FFF066>\"tab\"</span>: {\n      <span style=color:#FFF066>\"target-property\"</span>: <span style=color:#FFF066>\"tabs\"</span>, <span style=color:#8F8F9E>// Puts `&lt;@tab>` tags into `input.tabs`.</span>\n      <span style=color:#FFF066>\"is-repeated\"</span>: <span style=color:#AE81FF>true</span>,  <span style=color:#8F8F9E>// Allow more than one nested `&lt;@tab>`.</span>\n      <span style=color:#FFF066>\"attributes\"</span>: {\n        <span style=color:#8F8F9E>// Same as the \u201CAttributes\u201D section below.</span>\n      }\n    }\n  }\n}\n</pre><h3 id=attributes><a name=attributes class=anchor href=#attributes><span class=header-link></span></a>Attributes</h3><p>One commonly-used feature of this config file is compile-time checks for attributes.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"attributes\"</span>: {\n    <span style=color:#FFF066>\"heading\"</span>: <span style=color:#FFF066>\"string\"</span>\n  }\n}\n</pre><p>The above code ensures that the <code>heading</code> attribute is the <em>only</em> attribute supplied to this tag.</p><p>The <code>string</code> value is used as documentation for the custom tag. It may be picked up by tooling, like Marko\u2019s editor plugins, to provide hints to the user.</p><p>The recommended list of attribute types are as follows:</p><ul><li><code>expression</code> (any JavaScript expression)</li><li><code>string</code></li><li><code>number</code></li><li><code>boolean</code></li><li><code>regexp</code></li><li><code>date</code></li><li><code>object</code></li><li><code>array</code></li><li><code>function</code></li></ul><p>You can also provide an object for an attribute definition\u2019s value for additional options:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"attributes\"</span>: {\n    <span style=color:#FFF066>\"heading\"</span>: {\n      <span style=color:#FFF066>\"type\"</span>: <span style=color:#FFF066>\"string\"</span>, <span style=color:#8F8F9E>// Same as setting \"string\" above.</span>\n      <span style=color:#FFF066>\"default-value\"</span>: <span style=color:#AE81FF>0</span>, <span style=color:#8F8F9E>// The attribute will default to this value.</span>\n      <span style=color:#FFF066>\"required\"</span>: <span style=color:#AE81FF>true</span>, <span style=color:#8F8F9E>// Error during compilation if this attribute is undefined. (Mutually exclusive with \"default-value\"</span>\n      <span style=color:#FFF066>\"preserve-name\"</span>: <span style=color:#AE81FF>true</span>, <span style=color:#8F8F9E>// By default component attributes are camelCased; this disables that feature.</span>\n      <span style=color:#FFF066>\"remove-dashes\"</span>: <span style=color:#AE81FF>true</span>, <span style=color:#8F8F9E>// By default native tag attributes are dash-cased; this disables that feature.</span>\n\n      <span style=color:#8F8F9E>// The following attributes do nothing, but are picked up by tooling.</span>\n      <span style=color:#FFF066>\"deprecated\"</span>: <span style=color:#AE81FF>true</span>,\n      <span style=color:#FFF066>\"description\"</span>: <span style=color:#FFF066>\"The component\u2019s heading text\"</span> <span style=color:#8F8F9E>// Describes the attribute\u2019s purpose.</span>\n    }\n  }\n}\n</pre><p>We can also describe a <em>pattern</em> of attributes to match a definition:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n    <span style=color:#FFF066>\"attributes\"</span>: {\n        <span style=color:#FFF066>\"data-*\"</span>: {\n          <span style=color:#FFF066>\"type\"</span>: <span style=color:#FFF066>\"string\"</span>,\n          <span style=color:#FFF066>\"pattern\"</span>: <span style=color:#AE81FF>true</span>\n        }\n    }\n}\n</pre><p>In the above, all attributes prefixed with <code>data-</code> are configured to be a <code>string</code>.</p><blockquote class=note><p><strong>Note:</strong> Future Marko versions will describe these definitions/types in the component itself, reducing the need for this configuration file.</p></blockquote><h3 id=paths><a name=paths class=anchor href=#paths><span class=header-link></span></a>Paths</h3><p>There are several options that override the default discovery of component files, such as the template.</p><p>Typically, you should let Marko find these files automatically, but here is a reference in case you encounter these settings in the wild.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"template\"</span>: <span style=color:#FFF066>\"./template.marko\"</span>, <span style=color:#8F8F9E>// Custom path to the `.marko` template.</span>\n  <span style=color:#FFF066>\"renderer\"</span>: <span style=color:#FFF066>\"./renderer.js\"</span>, <span style=color:#8F8F9E>// Custom path to the `renderer.js` file.</span>\n\n  <span style=color:#8F8F9E>// Compiler file hooks</span>\n  <span style=color:#FFF066>\"parse\"</span>: <span style=color:#FFF066>\"./parse.js\"</span>, <span style=color:#8F8F9E>// Used to augment parsing.</span>\n  <span style=color:#FFF066>\"migrate\"</span>: <span style=color:#FFF066>\"./migrate.js\"</span>, <span style=color:#8F8F9E>// Used for migrating deprecated features.</span>\n  <span style=color:#FFF066>\"transform\"</span>: <span style=color:#FFF066>\"./transform.js\"</span>, <span style=color:#8F8F9E>// Used to modify the AST before generating it.</span>\n  <span style=color:#FFF066>\"analyze\"</span>: <span style=color:#FFF066>\"./analyze.js\"</span> <span style=color:#8F8F9E>// Used to analyze metadata the entire ast before beginning to translate it.</span>\n  <span style=color:#FFF066>\"translate\"</span>: <span style=color:#FFF066>\"./translate.js\"</span> <span style=color:#8F8F9E>// Used to generate custom JS.</span>\n}\n</pre><p>For more information about the compiler hooks <a href=/docs/compiler/#hooks>jump over here</a>.</p><h2 id=tag-library-definition><a name=tag-library-definition class=anchor href=#tag-library-definition><span class=header-link></span></a>Tag library definition</h2><p>Along with configuring a single component, you can use a <code>marko.json</code> file to configure an <em>entire library of components</em>.</p><p>Similar to <a href=#single-component-definition><code>marko-tag.json</code></a>, this file is discovered if placed within a <a href=/docs/custom-tags/#tag-directories>tag directory</a>. It will also be discovered at the root directory of a project, or <a href=/docs/custom-tags/#publishing-tags-to-npm>in a <code>node_module</code> package</a>.</p><h3 id=options_1><a name=options_1 class=anchor href=#options_1><span class=header-link></span></a>Options</h3><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"taglib-id\"</span>: <span style=color:#FFF066>\"my-custom-tag-library\"</span>, <span style=color:#8F8F9E>// Names the component library, for better errors.</span>\n  <span style=color:#FFF066>\"tags-dir\"</span>: <span style=color:#FFF066>\"./ui-modules\"</span>, <span style=color:#8F8F9E>// What directory to crawl to autodiscover components. Default:`./components/`</span>\n  <span style=color:#FFF066>\"taglib-imports\"</span>: [<span style=color:#FFF066>\"./some-folder/marko.json\"</span>, <span style=color:#FFF066>\"./other-folder/marko.json\"</span>], <span style=color:#8F8F9E>// Creates a _combined_ tag library by referencing others.</span>\n\n  <span style=color:#FFF066>\"tags\"</span>: { <span style=color:#8F8F9E>// Definitions for individial tags.</span>\n    <span style=color:#FFF066>\"my-tag\"</span>: {\n      <span style=color:#8F8F9E>// Same options as \u201Cmarko-tag.json\u201D.</span>\n    }\n  },\n\n  <span style=color:#FFF066>\"attributes\"</span>: {\n    <span style=color:#8F8F9E>// Defines attributes on all tags.</span>\n    <span style=color:#8F8F9E>// Options are the same as the \u201Cattributes\u201D section in \u201Cmarko-tag.json\u201D.</span>\n  },\n\n  <span style=color:#8F8F9E>// Compiler file hooks (run on all templates)</span>\n  <span style=color:#FFF066>\"migrator\"</span>: <span style=color:#FFF066>\"./migrator.js\"</span>, <span style=color:#8F8F9E>// Hooks into the migration stage for migrating deprecated features.</span>\n  <span style=color:#FFF066>\"transformer\"</span>: <span style=color:#FFF066>\"./transformer.js\"</span>, <span style=color:#8F8F9E>// Used to modify the AST before generating it.</span>\n  <span style=color:#FFF066>\"text-transformer\"</span>: <span style=color:#FFF066>\"./text-transformer.js\"</span>, <span style=color:#8F8F9E>// Used to transform all static text in the template.</span>\n}\n</pre><blockquote class=null><p><strong>\u26A0\uFE0F Note:</strong> Compiler hooks are currently undocumented: avoid using them. The compiler API is overhauled in Marko 5, and will be documented once that transition is complete.</p></blockquote><h2 id=shorthands><a name=shorthands class=anchor href=#shorthands><span class=header-link></span></a>Shorthands</h2><p>Both configuration files support <em>shorthands</em> for defining <code>tags</code> and <code>attributes</code>. For example, take this <code>marko.json</code> file:</p><div class=code-block-filename>marko.json</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"taglib-id\"</span>: <span style=color:#FFF066>\"my-custom-tag-library\"</span>,\n  <span style=color:#FFF066>\"tags\"</span>: {\n    <span style=color:#FFF066>\"my-layout\"</span>: {\n      <span style=color:#FFF066>\"attributes\"</span>: {\n        <span style=color:#FFF066>\"name\"</span>: <span style=color:#FFF066>\"string\"</span>,\n        <span style=color:#FFF066>\"age\"</span>: <span style=color:#FFF066>\"number\"</span>\n      },\n      <span style=color:#FFF066>\"nested-tags\"</span>: {\n        <span style=color:#FFF066>\"heading\"</span>: {\n          <span style=color:#FFF066>\"attributes\"</span>: {\n            <span style=color:#FFF066>\"color\"</span>: <span style=color:#FFF066>\"string\"</span>\n          }\n        },\n        <span style=color:#FFF066>\"body\"</span>: {\n          <span style=color:#FFF066>\"attributes\"</span>: {\n            <span style=color:#FFF066>\"color\"</span>: <span style=color:#FFF066>\"string\"</span>\n          }\n        }\n      }\n    }\n  }\n}\n</pre><p>As a shorthand, anywhere <code>tags</code> or <code>nested-tags</code> is used, you can remove the outer object and wrap the individual tags in <code>&lt;angle-brackets&gt;</code>.</p><p>For <code>attributes</code>, you can remove the outer object and prefix the attributes with an <code>@</code>.</p><p>The above example using the shorthand syntax would become:</p><div class=code-block-filename>marko.json</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"taglib-id\"</span>: <span style=color:#FFF066>\"my-custom-tag-library\"</span>,\n  <span style=color:#FFF066>\"&lt;my-layout>\"</span>: {\n    <span style=color:#FFF066>\"@name\"</span>: <span style=color:#FFF066>\"string\"</span>,\n    <span style=color:#FFF066>\"@age\"</span>: <span style=color:#FFF066>\"number\"</span>,\n    <span style=color:#FFF066>\"&lt;heading>\"</span>: {\n      <span style=color:#FFF066>\"@color\"</span>: <span style=color:#FFF066>\"string\"</span>\n    },\n    <span style=color:#FFF066>\"&lt;body>\"</span>: {\n      <span style=color:#FFF066>\"@color\"</span>: <span style=color:#FFF066>\"string\"</span>\n    }\n  }\n}\n</pre><p>For <code>nested-tags</code>, there is also a shorthand for <code>is-repeated</code> (a postfix of <code>[]</code>) and <code>target-property</code> (a prefix of <code>@newName</code>):</p><div class=code-block-filename>marko.json</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"&lt;my-layout>\"</span>: {\n    <span style=color:#FFF066>\"@sections &lt;section>[]\"</span>: {\n      <span style=color:#FFF066>\"@color\"</span>: <span style=color:#FFF066>\"string\"</span>\n    }\n  }\n}\n</pre><p>Is equivalent to:</p><div class=code-block-filename>marko.json</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  <span style=color:#FFF066>\"tags\"</span>: {\n    <span style=color:#FFF066>\"my-layout\"</span>: {\n      <span style=color:#FFF066>\"nested-tags\"</span>: {\n        <span style=color:#FFF066>\"section\"</span>: {\n          <span style=color:#FFF066>\"target-property\"</span>: <span style=color:#FFF066>\"sections\"</span>,\n          <span style=color:#FFF066>\"is-repeated\"</span>: <span style=color:#AE81FF>true</span>,\n          <span style=color:#FFF066>\"attributes\"</span>: {\n            <span style=color:#FFF066>\"color\"</span>: <span style=color:#FFF066>\"string\"</span>\n          }\n        }\n      }\n    }\n  }\n}\n</pre>");
}, {
  t: marko_json_marko_componentType,
  i: true
}, marko_json_marko_component);
__webpack_require__(1966)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/marko-vs-react.md


const marko_vs_react_marko_componentType = "0ryaxSBU",
      marko_vs_react_marko_template = (0,index_js_namespaceObject.t)(marko_vs_react_marko_componentType);

/* harmony default export */ const marko_vs_react = (marko_vs_react_marko_template);

toc_registry.set("../../node_modules/marko/docs/marko-vs-react.md", "<ul class=\"toc toc-level1\"><li><ul class=\"toc toc-level2\"><li><a href=\"#example\">Example</a><ul class=\"toc toc-level3\"><li><a href=\"#react-jsx\">React JSX</a></li><li><a href=\"#marko\">Marko</a></li></ul></li><li><a href=\"#similarities\">Similarities</a></li><li><a href=\"#differences\">Differences</a><ul class=\"toc toc-level3\"><li><a href=\"#differences-in-rendering\">Differences in rendering</a></li><li><a href=\"#differences-in-syntax\">Differences in syntax</a></li><li><a href=\"#differences-in-compilation\">Differences in compilation</a></li><li><a href=\"#differences-in-ui-components\">Differences in UI components</a></li><li><a href=\"#differences-in-event-systems\">Differences in event systems</a></li><li><a href=\"#differences-in-compatibility\">Differences in compatibility</a></li></ul></li><li><a href=\"#syntax\">Syntax</a></li><li><a href=\"#syntax-attributes\">Syntax: attributes</a><ul class=\"toc toc-level3\"><li><a href=\"#react-jsx_1\">React JSX</a></li><li><a href=\"#marko_1\">Marko</a></li></ul></li><li><a href=\"#syntax-inline-javascript\">Syntax: inline JavaScript</a><ul class=\"toc toc-level3\"><li><a href=\"#react-jsx_2\">React JSX</a></li><li><a href=\"#marko_2\">Marko</a></li></ul></li><li><a href=\"#syntax-html-support\">Syntax: HTML support</a><ul class=\"toc toc-level3\"><li><a href=\"#react-jsx_3\">React JSX</a></li><li><a href=\"#marko_3\">Marko</a></li></ul></li><li><a href=\"#syntax-conditionals\">Syntax: conditionals</a><ul class=\"toc toc-level3\"><li><a href=\"#react-jsx_4\">React JSX</a></li><li><a href=\"#marko_4\">Marko</a></li></ul></li><li><a href=\"#syntax-looping\">Syntax: looping</a><ul class=\"toc toc-level3\"><li><a href=\"#react-jsx_5\">React JSX</a></li><li><a href=\"#marko_5\">Marko</a></li></ul></li><li><a href=\"#syntax-html-shorthand\">Syntax: HTML shorthand</a></li><li><a href=\"#syntax-concise\">Syntax: concise</a><ul class=\"toc toc-level3\"><li><a href=\"#marko-html-syntax\">Marko HTML syntax</a></li><li><a href=\"#marko-concise-syntax\">Marko concise syntax</a></li><li><a href=\"#marko-mixed-syntax\">Marko mixed syntax</a></li><li><a href=\"#react-jsx_6\">React JSX</a></li></ul></li><li><a href=\"#components\">Components</a><ul class=\"toc toc-level3\"><li><a href=\"#react-jsx_7\">React JSX</a></li><li><a href=\"#marko_6\">Marko</a></li></ul></li><li><a href=\"#api\">API</a></li><li><a href=\"#custom-tags\">Custom tags</a><ul class=\"toc toc-level3\"><li><a href=\"#react-jsx_8\">React JSX</a></li><li><a href=\"#marko_7\">Marko</a></li></ul></li><li><a href=\"#async\">Async</a></li><li><a href=\"#compiler\">Compiler</a><ul class=\"toc toc-level3\"><li><a href=\"#compiled-for-the-server\">Compiled for the server:</a></li><li><a href=\"#compiled-for-the-browser\">Compiled for the browser:</a></li></ul></li><li><a href=\"#compile-time-code-transforms\">Compile-time code transforms</a></li><li><a href=\"#tools\">Tools</a><ul class=\"toc toc-level3\"><li><a href=\"#ide-and-editor-support\">IDE and editor support</a></li></ul></li><li><a href=\"#why-marko\">Why Marko?</a></li></ul></li></ul>");
const marko_vs_react_title = "Marko vs React: An In-depth Look";



const marko_vs_react_marko_component = {};
marko_vs_react_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=marko-vs-react-an-in-depth-look><a name=marko-vs-react-an-in-depth-look class=anchor href=#marko-vs-react-an-in-depth-look><span class=header-link></span></a>Marko vs React: An In-depth Look</h1><a href=https://hackernoon.com/marko-vs-react-an-in-depth-look-767de0a5f9a6><img src=https://cdn-images-1.medium.com/max/2000/1*4BP6tPQtwImj6_QseeybwQ.png alt=\"Marko logo\" width=100%></a><br><blockquote class=null><p>This article was published March 2017. Both frameworks have gone through several updates since. You can find the original <a href=https://hackernoon.com/marko-vs-react-an-in-depth-look-767de0a5f9a6>&quot;Marko vs React: An In-depth Look&quot; article here</a>!</p></blockquote><p>In this article we will take an in-depth look at the differences and similarities between <a href=/ >Marko</a> and React from the perspective of the maintainers of Marko.</p><p>On the surface, Marko and React have a lot in common and both are trying to solve very similar problems. Specifically, both Marko and React allow developers to build web applications based on UI components and both free developers from having to write code to manually update the DOM. While many of the features in Marko were inspired by React, Marko and React offer very different usability and performance characteristics. Marko was designed to avoid almost all boilerplate and is more closely aligned with HTML. In almost all cases, a Marko UI component will require less lines of code than its React JSX equivalent while maintaining readability and allowing the same expressiveness as JSX. In addition, Marko is highly optimized for use on the server and in the browser and has a much smaller weight:</p><p><img src=https://cdn-images-1.medium.com/max/1600/1*a9hL_pfNrRq1UU3Mxkf3Jg.png alt=\"Marko logo\" width=100%><br></p><p>Because the Marko JavaScript library is much smaller than React, it will require less time to load and parse and this will drastically improve page load times on slow connections or on older devices. Based on <a href=/#benchmarks>our benchmarks</a>, Marko consistently outperforms React by a significant margin on both the server and in the browser.</p><h3 id=example><a name=example class=anchor href=#example><span class=header-link></span></a>Example</h3><p>The following code highlights some of the differences between Marko and React JSX using a somewhat contrived UI component as an example:</p><h4 id=react-jsx><a name=react-jsx class=anchor href=#react-jsx><span class=header-link></span></a>React JSX</h4><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> Counter <span style=color:#FF4185>extends</span> React.<span style=color:#A6E22E;font-weight:bold>Component</span> {\n  <span style=color:#66D9EF>constructor</span>(<span style=color:#FFAC4D>props</span>) {\n    <span style=color:#FFFFFF>super</span>(<span style=color:#FFFFFF>props</span>);\n\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> { count: <span style=color:#AE81FF>0</span> };\n  }\n\n  <span style=color:#A6E22E>increment</span>(<span style=color:#FFAC4D>delta</span>) {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>setState</span>({ count: <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>+</span> <span style=color:#FFFFFF>delta</span> });\n  }\n\n  <span style=color:#A6E22E>render</span>() {\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>count</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span>;\n    <span style=color:#66D9EF>let</span> <span style=color:#FFFFFF>countClassName</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>\"count\"</span>;\n\n    <span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>></span> <span style=color:#AE81FF>0</span>) {\n      <span style=color:#FFFFFF>countClassName</span> <span style=color:#FFFFFF>+=</span> <span style=color:#FFF066>\" positive\"</span>;\n    } <span style=color:#FF4185>else</span> <span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>&lt;</span> <span style=color:#AE81FF>0</span>) {\n      <span style=color:#FFFFFF>countClassName</span> <span style=color:#FFFFFF>+=</span> <span style=color:#FFF066>\" negative\"</span>;\n    }\n\n    <span style=color:#FF4185>return</span> (\n      <span style=color:#FF4185>&lt;</span><span style=color:#FFFFFF>div</span> <span style=color:#FFFFFF>className=</span><span style=color:#FFF066>\"click-count\"</span><span style=color:#FF4185>></span>\n        <span style=color:#FF4185>&lt;</span><span style=color:#FFFFFF>div</span> <span style=color:#FFFFFF>className=</span>{<span style=color:#FFFFFF>countClassName</span>}<span style=color:#FF4185>></span>{<span style=color:#FFFFFF>count</span>}<span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>div</span><span style=color:#FF4185>></span>\n        <span style=color:#FF4185>&lt;</span><span style=color:#FFAC4D>button</span>\n          <span style=color:#FFFFFF>onClick=</span>{() => {\n            this.increment(-<span style=color:#AE81FF>1</span>);\n          }}\n        <span style=color:#FF4185>></span>\n          <span style=color:#FF4185>-</span><span style=color:#AE81FF>1</span>\n        <span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>button</span><span style=color:#FF4185>></span>\n        <span style=color:#FF4185>&lt;</span><span style=color:#FFAC4D>button</span>\n          <span style=color:#FFFFFF>onClick=</span>{() => {\n            this.increment(<span style=color:#AE81FF>1</span>);\n          }}\n        <span style=color:#FF4185>></span>\n          <span style=color:#FF4185>+</span><span style=color:#AE81FF>1</span>\n        <span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>button</span><span style=color:#FF4185>></span>\n      <span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>div</span><span style=color:#FF4185>></span>\n    );\n  }\n}\n</pre><p><span class=figcaption_hack><a href=http://codepen.io/mlrawlings/pen/wJXOWR?editors=0010>\u25B6 Try Online</a></span></p><h4 id=marko><a name=marko class=anchor href=#marko><span class=header-link></span></a>Marko</h4>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> { count: <span style=color:#AE81FF>0</span> };\n  }\n  <span style=color:#A6E22E>increment</span>(<span style=color:#FFAC4D>delta</span>) {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span> <span style=color:#FFFFFF>+=</span> <span style=color:#FFFFFF>delta</span>;\n  }\n}\n\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>count</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span>;\n\n&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.click-count</span>>\n  &lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.count</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span>{\n      positive: <span style=color:#FFFFFF>count</span> <span style=color:#FF4185>></span> <span style=color:#AE81FF>0</span>,\n      negative: <span style=color:#FFFFFF>count</span> <span style=color:#FF4185>&lt;</span> <span style=color:#AE81FF>0</span>\n    }>\n    <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>\n  &lt;/<span style=color:#FF4185>div</span>>\n  &lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'increment'</span>, <span style=color:#FF4185>-</span><span style=color:#AE81FF>1</span>)>\n    -1\n  &lt;/<span style=color:#FF4185>button</span>>\n  &lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'increment'</span>, <span style=color:#AE81FF>1</span>)>\n    +1\n  &lt;/<span style=color:#FF4185>button</span>>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> { count: <span style=color:#AE81FF>0</span> };\n  }\n  <span style=color:#A6E22E>increment</span>(<span style=color:#FFAC4D>delta</span>) {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span> <span style=color:#FFFFFF>+=</span> <span style=color:#FFFFFF>delta</span>;\n  }\n}\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>count</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span>;\n\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>.click-count</span>\n  <span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span>[\n    <span style=color:#FFF066>\"count\"</span>,\n    {\n      positive: <span style=color:#FFFFFF>count</span> <span style=color:#FF4185>></span> <span style=color:#AE81FF>0</span>,\n      negative: <span style=color:#FFFFFF>count</span> <span style=color:#FF4185>&lt;</span> <span style=color:#AE81FF>0</span>,\n    },\n  <span style=color:#F8F8F0;background-color:#FF4185>]</span>\n    -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>\n  <span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>, <span style=color:#FF4185>-</span><span style=color:#AE81FF>1</span>) -- -1\n  <span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>, <span style=color:#AE81FF>1</span>) -- +1\n</pre>"
  }, out, _componentDef, "31");

  out.w("<p><span class=figcaption_hack><a href=/try-online/?gist=8fe46bc5866605aca0dfeec202604011>\u25B6 Try Online</a></span></p><h3 id=similarities><a name=similarities class=anchor href=#similarities><span class=header-link></span></a>Similarities</h3><p>Marko and React have the following in common:</p><ul><li>UI component-based</li><li>JavaScript and HTML markup can be intertwined</li><li>No restrictions on JavaScript (use ES5 or ES2015+, your choice)</li><li>Virtual DOM rendering in the browser</li><li>DOM diffing/patching is used to reconcile views</li><li>Both support keyed element matching</li><li>UI components can have input properties</li><li>UI components can have internal state</li><li>Changes to state trigger an asynchronous update to the DOM</li><li>Updates to the DOM are batched</li><li>Compatible with central application state stores such as Redux and MobX</li><li>UI components can be embedded using custom tags</li><li>Declarative event binding (no <code>domEl.addEventListener()</code> needed)</li><li>Support for all DOM events</li><li>Event delegation utilized internally for DOM events that bubble</li><li>IE9+ support</li><li>Similar lifecycle events for UI components</li><li>JSX and Marko both compile to JavaScript</li></ul><h3 id=differences><a name=differences class=anchor href=#differences><span class=header-link></span></a>Differences</h3><p>At a high level here are some differences:</p><h4 id=differences-in-rendering><a name=differences-in-rendering class=anchor href=#differences-in-rendering><span class=header-link></span></a>Differences in rendering</h4><ul><li><strong>Improved performance:</strong> Marko renders to a virtual DOM in the browser and directly to an HTML stream on the server (Marko supports multiple compilation targets).</li><li><strong>Improved performance:</strong> Marko supports asynchronous rendering with <a href=http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/ >early flushing of HTML</a> for improvements in actual and perceived page load times.</li><li><strong>Improved performance:</strong> React requires an additional client-side re-render if a page is initially rendered on the server while Marko does not.</li><li><strong>Improved ease of use:</strong> Marko automatically serializes UI component state and input down to the browser so that the browser can pick up right where the server left off.</li><li><strong>Improved ease of use:</strong> Marko is suitable for rendering an entire HTML page on the server with support for tags such as <code>&lt;doctype&gt;</code> and <code>&lt;html&gt;</code></li></ul><h4 id=differences-in-syntax><a name=differences-in-syntax class=anchor href=#differences-in-syntax><span class=header-link></span></a>Differences in syntax</h4><ul><li><strong>Improved ease of use:</strong> Marko uses the <a href=/docs/syntax/ >HTML-JS</a> syntax and the <a href=https://facebook.github.io/react/docs/jsx-in-depth.html>JSX</a> syntax is offered for React.</li><li><strong>Improved ease of use:</strong> Marko supports both a concise syntax and a familiar HTML syntax.</li><li><strong>Improved ease of use:</strong> JSX requires strict XML while Marko aligns with less strict HTML that web developers are used to.</li><li><strong>Improved ease of use:</strong> With Marko, <em>all</em> HTML attribute values are parsed as JavaScript expressions.</li><li><strong>Improved ease of use:</strong> Marko supports simple directives for conditionals, looping, etc.</li><li><strong>JSX limitation:</strong> JSX is \u201Cjust JavaScript\u201D but requires expressions that preclude the usage of JavaScript statements such as in certain places.</li></ul><h4 id=differences-in-compilation><a name=differences-in-compilation class=anchor href=#differences-in-compilation><span class=header-link></span></a>Differences in compilation</h4><ul><li><strong>Improved performance:</strong> Marko supports multiple compilation outputs (Marko VDOM and HTML streaming are currently supported).</li><li><strong>Improved ease of use:</strong> Marko compiles UI components to JavaScript modules that export a rendering API.</li><li><strong>Expanded capabilities:</strong> Marko supports a robust API for controlling how custom tags and custom attributes get compiled and it supports compile-time transforms based on a friendly Abstract Syntax Tree (AST).</li><li><strong>Improved performance:</strong> JSX is just syntactic sugar that translates elements to <code>createElement()</code> function calls while the Marko compiler has full control over how things are compiled and optimized.</li><li><strong>Improved ease of use:</strong> React requires all UI components to be explicitly imported before they can be used as custom tags while Marko supports both explicit importing and implicit importing.</li><li><strong>Improved performance:</strong> Marko has a modular runtime and the compiler generates code that only imports the parts of the Marko runtime that are needed for much smaller builds.</li><li><strong>Improved ease of use:</strong> Marko supports optional compile-time checks to ensure that only allowed attributes are passed to custom tags. (React <code>PropTypes</code> only provide validation at render-time)</li><li><strong>Improved ease of use:</strong> Marko validates <em>all</em> tag names at compile-time.</li><li><strong>Improved ease of use:</strong> Marko provides its own compiler that integrates with Node.js and JavaScript module bundlers while React JSX requires babel and custom babel transforms.</li></ul><h4 id=differences-in-ui-components><a name=differences-in-ui-components class=anchor href=#differences-in-ui-components><span class=header-link></span></a>Differences in UI components</h4><ul><li><strong>Reduced boilerplate:</strong> No explicit extending of JavaScript classes in Marko (in contrast to <code>class Counter extends React.Component</code> in React).</li><li><strong>Improved ease of use:</strong> Modifications to UI component state are synchronous with Marko while <a href=https://facebook.github.io/react/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous>the rules for React are more complicated</a>.</li><li><strong>Improved ease of use:</strong> Marko watches UI component state objects to allow state to be modified directly (e.g., <code>this.state.count++</code>).</li><li><strong>Improved ease of use:</strong> Marko supports single-file UI components combining JavaScript behavior, CSS styling (with support for CSS preprocessors) and HTML markup. (React requires using one of the many <a href=https://github.com/MicheleBertoli/css-in-js>CSS in JS solutions</a> if you want styles in the same file as your component and there is no standard in the community)</li><li><strong>Improved maintainability:</strong> Marko supports a seamless transition from a single-file UI component to a multi-file UI component.</li><li><strong>Improved performance:</strong> Marko assumes UI components are pure by default and skips re-rendering when input properties and state are unchanged (React requires extending <a href=https://facebook.github.io/react/docs/react-api.html#react.purecomponent>React.PureComponent</a>).</li></ul><h4 id=differences-in-event-systems><a name=differences-in-event-systems class=anchor href=#differences-in-event-systems><span class=header-link></span></a>Differences in event systems</h4><ul><li><strong>Reduced complexity:</strong> React utilizes <a href=https://facebook.github.io/react/docs/events.html>synthetic events</a> while Marko utilizes real DOM events.</li><li><strong>Improved ease of use:</strong> Custom events are emitted using the <a href=https://nodejs.org/api/events.html>EventEmitter API</a> in Marko (e.g., <code>this.emit(&#39;myCustomEvent&#39;, arg1, arg2)</code>).</li><li><strong>Improved ease of use:</strong> Marko has a consistent approach for listening to both native DOM events and custom events.</li><li><strong>Improved ease of use:</strong> React requires passing around <code>Function</code> references for custom events while Marko automatically delegates emitted custom events to event handler methods on components.</li><li><strong>Improved ease of use:</strong> Marko provides a simple mechanism for binding additional arguments to event handler methods and <code>this</code> will be the component instance.</li></ul><h4 id=differences-in-compatibility><a name=differences-in-compatibility class=anchor href=#differences-in-compatibility><span class=header-link></span></a>Differences in compatibility</h4><ul><li><strong>Marko limitation:</strong> Marko has no support for native mobile similar to React Native (although with Marko VDOM rendering, this is possible).</li><li><strong>Marko limitation:</strong> Marko requires a JavaScript module bundler (such as <a href=/docs/lasso/ >Lasso</a>, <a href=/docs/webpack/ >Webpack</a>, <a href=/docs/rollup/ >Rollup</a> since Marko UI components compile down to JavaScript modules. (we consider using a JavaScript module bundler a best practice)</li></ul><hr><p>In the sections below we will take a closer look at some of the differences between Marko and React.</p><h3 id=syntax><a name=syntax class=anchor href=#syntax><span class=header-link></span></a>Syntax</h3><p>Both Marko and React JSX allow HTML markup and JavaScript to be combined into a single file and both support building web applications based on UI components. Marko utilizes an <a href=/docs/syntax/ >HTML-JS syntax</a> while most React apps use the JSX syntax.</p><blockquote class=null><p>React JSX makes JavaScript more like HTML and Marko makes HTML more like JavaScript.</p></blockquote><p>In the end, both Marko and React allow JavaScript and HTML to be intertwined.</p><h3 id=syntax-attributes><a name=syntax-attributes class=anchor href=#syntax-attributes><span class=header-link></span></a>Syntax: attributes</h3><h4 id=react-jsx_1><a name=react-jsx_1 class=anchor href=#react-jsx_1><span class=header-link></span></a>React JSX</h4><p>In React JSX, all attribute values are parsed as string values unless <code>{}</code> is used.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>&lt;</span><span style=color:#FFFFFF>MyComponent</span>\n  <span style=color:#FFFFFF>name=</span><span style=color:#FFF066>\"Frank\"</span>\n  <span style=color:#FFFFFF>messageCount=</span>{<span style=color:#AE81FF>30</span>}\n  <span style=color:#FFFFFF>visible=</span>{<span style=color:#FFFFFF>true</span>}\n  <span style=color:#FFFFFF>person=</span>{{ firstName: <span style=color:#FFF066>'John'</span>, lastName: <span style=color:#FFF066>'Doe'</span> }}\n  <span style=color:#FFFFFF>colors=</span>{[<span style=color:#FFF066>'red'</span>, <span style=color:#FFF066>'green'</span>, <span style=color:#FFF066>'blue'</span>]} />\n\n&lt;div id=\"content\" className=\"foo\">Hello&lt;/div>\n</pre><h4 id=marko_1><a name=marko_1 class=anchor href=#marko_1><span class=header-link></span></a>Marko</h4><p>With Marko, <em>all</em> attribute values are parsed as JavaScript expressions. The following Marko code is equivalent to the React JSX code above:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>my-component</span>\n  <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Frank\"</span>\n  <span style=color:#A6E22E>message-count</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>30</span>\n  <span style=color:#A6E22E>visible</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>true</span>\n  <span style=color:#A6E22E>person</span><span style=color:#FFFFFF>=</span>{ firstName: <span style=color:#FFF066>'John'</span>, lastName: <span style=color:#FFF066>'Doe'</span> }\n  <span style=color:#A6E22E>colors</span><span style=color:#FFFFFF>=</span>[<span style=color:#FFF066>'red'</span>, <span style=color:#FFF066>'green'</span>, <span style=color:#FFF066>'blue'</span>] />\n\n&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>id</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"content\"</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"foo\"</span>>Hello&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>my-component</span> [\n  <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Frank\"</span>\n  <span style=color:#A6E22E>message-count</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>30</span>\n  <span style=color:#A6E22E>visible</span>\n  <span style=color:#A6E22E>person</span><span style=color:#FFFFFF>=</span>{ firstName: <span style=color:#FFF066>\"John\"</span>, lastName: <span style=color:#FFF066>\"Doe\"</span> }\n  <span style=color:#A6E22E>colors</span><span style=color:#FFFFFF>=</span>[<span style=color:#FFF066>\"red\"</span>, <span style=color:#FFF066>\"green\"</span>, <span style=color:#FFF066>\"blue\"</span>]\n]\n\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>#content.foo</span> -- Hello\n</pre>"
  }, out, _componentDef, "198");

  out.w("<h3 id=syntax-inline-javascript><a name=syntax-inline-javascript class=anchor href=#syntax-inline-javascript><span class=header-link></span></a>Syntax: inline JavaScript</h3><h4 id=react-jsx_2><a name=react-jsx_2 class=anchor href=#react-jsx_2><span class=header-link></span></a>React JSX</h4><p>React JSX starts with JavaScript and allows XML elements to be inlined as shown below:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> { <span style=color:#FFFFFF>formatDate</span> } <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./util\"</span>;\n\n<span style=color:#66D9EF>function</span> <span style=color:#A6E22E>formatName</span>(<span style=color:#FFAC4D>person</span>) {\n  <span style=color:#FF4185>return</span> <span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>firstName</span> <span style=color:#FF4185>+</span> <span style=color:#FFF066>\" \"</span> <span style=color:#FF4185>+</span> <span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>lastName</span>.<span style=color:#A6E22E>charAt</span>(<span style=color:#AE81FF>0</span>) <span style=color:#FF4185>+</span> <span style=color:#FFF066>\".\"</span>;\n}\n\n<span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>HelloMessage</span>(<span style=color:#FFAC4D>props</span>) {\n  <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>person</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>props</span>.<span style=color:#FFFFFF>person</span>;\n\n  <span style=color:#FF4185>return</span> (\n    &lt;div>\n      <span style=color:#FFFFFF>Hello</span> {<span style=color:#FFAC4D>formatName</span>(<span style=color:#FFAC4D>person</span>)}<span style=color:#FF4185>!</span>\n      &lt;span><span style=color:#FFFFFF>You</span> <span style=color:#FFFFFF>were</span> <span style=color:#FFFFFF>born</span> <span style=color:#FFFFFF>on</span> {<span style=color:#FFAC4D>formatDate</span>(<span style=color:#FFAC4D>person</span>.<span style=color:#FFAC4D>birthday</span>)}.<span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>span</span><span style=color:#FF4185>></span>\n    <span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>div</span><span style=color:#FF4185>></span>\n  );\n}\n</pre><h4 id=marko_2><a name=marko_2 class=anchor href=#marko_2><span class=header-link></span></a>Marko</h4><p>Marko starts out in HTML, but it allows JavaScript to be inlined in a clean and maintainable way. Unlike other template languages, Marko aims to allow the full power of JavaScript. The following Marko code is equivalent to the React JSX code above:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> { <span style=color:#FFFFFF>formatDate</span> } <span style=color:#FF4185>from</span> <span style=color:#FFF066>'./util'</span>;\n\n<span style=color:#FF4185>static</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>formatName</span>(<span style=color:#FFAC4D>person</span>) {\n    <span style=color:#FF4185>return</span> <span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>firstName</span> <span style=color:#FF4185>+</span> <span style=color:#FFF066>' '</span> <span style=color:#FF4185>+</span> <span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>lastName</span>.<span style=color:#A6E22E>charAt</span>(<span style=color:#AE81FF>0</span>) <span style=color:#FF4185>+</span> <span style=color:#FFF066>'.'</span>;\n}\n\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>person</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>person</span>;\n\n&lt;<span style=color:#FF4185>div</span>>\n    Hello <span style=color:#66D9EF>${</span><span style=color:#A6E22E>formatName</span>(<span style=color:#FFFFFF>person</span>)<span style=color:#66D9EF>}</span>!\n    &lt;<span style=color:#FF4185>span</span>>\n      You were born on <span style=color:#66D9EF>${</span><span style=color:#A6E22E>formatDate</span>(<span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>birthday</span>)<span style=color:#66D9EF>}</span>.\n    &lt;/<span style=color:#FF4185>span</span>>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> { <span style=color:#FFFFFF>formatDate</span> } <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./util\"</span>;\n<span style=color:#FF4185>static</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>formatName</span>(<span style=color:#FFAC4D>person</span>) {\n  <span style=color:#FF4185>return</span> <span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>firstName</span> <span style=color:#FF4185>+</span> <span style=color:#FFF066>\" \"</span> <span style=color:#FF4185>+</span> <span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>lastName</span>.<span style=color:#A6E22E>charAt</span>(<span style=color:#AE81FF>0</span>) <span style=color:#FF4185>+</span> <span style=color:#FFF066>\".\"</span>;\n}\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>person</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>person</span>;\n\n<span style=color:#FF4185>div</span>\n  -- Hello <span style=color:#66D9EF>${</span><span style=color:#A6E22E>formatName</span>(<span style=color:#FFFFFF>person</span>)<span style=color:#66D9EF>}</span>!\n  <span style=color:#FF4185>span</span> -- You were born on <span style=color:#66D9EF>${</span><span style=color:#A6E22E>formatDate</span>(<span style=color:#FFFFFF>person</span>.<span style=color:#FFFFFF>birthday</span>)<span style=color:#66D9EF>}</span>.\n</pre>"
  }, out, _componentDef, "210");

  out.w("<p>Lines prefixed with <code>&#36;</code> are directly added to the compiled JavaScript output inside the compiled <code>render()</code> function (for JavaScript code that should run for every render). Lines prefixed with <code>static</code> are directly added to the compiled JavaScript output outside the <code>render()</code> function (for code that should only run <em>once</em> when the template is loaded).</p><h3 id=syntax-html-support><a name=syntax-html-support class=anchor href=#syntax-html-support><span class=header-link></span></a>Syntax: HTML support</h3><p>With Marko any valid HTML markup can be used inside a Marko template. This is not the case with React. The following quote is from the <a href=https://facebook.github.io/react/docs/introducing-jsx.html#specifying-children-with-jsx>React documentation</a>:</p><blockquote class=caveat><p><strong>Caveat:</strong></p></blockquote><blockquote class=null><p>Since JSX is closer to JavaScript than HTML, React DOM uses <code>camelCase</code> property naming convention instead of HTML attribute names.</p></blockquote><blockquote class=null><p>For example, <code>class</code> becomes <code>className</code> in JSX, and <code>tabindex</code> becomes <code>tabIndex</code>.</p></blockquote><p>As a result of this caveat for React, <a href=http://magic.reactjs.net/htmltojsx.htm>tools for converting HTML to JSX exist</a>.</p><h4 id=react-jsx_3><a name=react-jsx_3 class=anchor href=#react-jsx_3><span class=header-link></span></a>React JSX</h4><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>&lt;</span><span style=color:#FFFFFF>div</span> <span style=color:#FFFFFF>id=</span><span style=color:#FFF066>\"content\"</span> <span style=color:#FFFFFF>className=</span><span style=color:#FFF066>\"my-component\"</span><span style=color:#FF4185>></span><span style=color:#FFFFFF>Hello</span><span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>div</span><span style=color:#FF4185>></span>\n\n<span style=color:#FF4185>&lt;</span><span style=color:#FFFFFF>input</span> <span style=color:#FFFFFF>type=</span><span style=color:#FFF066>\"text\"</span> <span style=color:#FFFFFF>name=</span><span style=color:#FFF066>\"firstName\"</span> <span style=color:#FFFFFF>value=</span><span style=color:#FFF066>\"John\"</span> <span style=color:#FF4185>/></span>\n</pre><h4 id=marko_3><a name=marko_3 class=anchor href=#marko_3><span class=header-link></span></a>Marko</h4>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>id</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"content\"</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"my-component\"</span>>Hello&lt;/<span style=color:#FF4185>div</span>>\n\n&lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"text\"</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"firstName\"</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"John\"</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span><span style=color:#A6E22E>#content.my-component</span> -- Hello\n\n<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"text\"</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"firstName\"</span> <span style=color:#A6E22E>value</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"John\"</span>\n</pre>"
  }, out, _componentDef, "242");

  out.w("<h3 id=syntax-conditionals><a name=syntax-conditionals class=anchor href=#syntax-conditionals><span class=header-link></span></a>Syntax: conditionals</h3><p>JSX is syntactic sugar on top of JavaScript, but it requires expressions, so simple things like an <code>if/else/for</code> statement don\u2019t work on their own within a JSX element. As a result, you must either use a ternary expression, an immediately invoked function expression, function call expression, or the experimental <code>do {}</code> expression (stage 0 at the time of writing). This is not an issue for Marko, and tags such as <code>if()</code> and <code>for</code> can be used anywhere as shown below:</p><h4 id=react-jsx_4><a name=react-jsx_4 class=anchor href=#react-jsx_4><span class=header-link></span></a>React JSX</h4><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>function</span> <span style=color:#A6E22E>counterMessage</span>(<span style=color:#FFAC4D>count</span>) {\n  <span style=color:#FF4185>return</span> (\n    <span style=color:#FF4185>&lt;</span><span style=color:#FFFFFF>div</span> <span style=color:#FFFFFF>className=</span><span style=color:#FFF066>\"counter-message\"</span><span style=color:#FF4185>></span>\n      (<span style=color:#66D9EF>function</span>() {\n        <span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>&lt;</span> <span style=color:#AE81FF>0</span>) {\n          <span style=color:#FF4185>return</span> &lt;div><span style=color:#FFFFFF>Count</span> <span style=color:#FFFFFF>is</span> <span style=color:#FFFFFF>negative</span><span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>div</span><span style=color:#FF4185>></span>\n        } <span style=color:#FF4185>else</span> <span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>===</span> <span style=color:#AE81FF>0</span>) {\n          <span style=color:#FF4185>return</span> &lt;div><span style=color:#FFFFFF>Count</span> <span style=color:#FFFFFF>is</span> <span style=color:#FFFFFF>zero</span><span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>div</span><span style=color:#FF4185>></span>\n        } <span style=color:#FF4185>else</span> {\n          <span style=color:#FF4185>return</span> &lt;div><span style=color:#FFFFFF>Count</span> <span style=color:#FFFFFF>is</span> <span style=color:#FFFFFF>positive</span><span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>div</span><span style=color:#FF4185>></span>\n        }\n      }())\n    <span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>div</span><span style=color:#FF4185>></span>\n  )\n}\n</pre><h4 id=marko_4><a name=marko_4 class=anchor href=#marko_4><span class=header-link></span></a>Marko</h4>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.counter-message</span>>\n  &lt;<span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>&lt;</span> <span style=color:#AE81FF>0</span>)>\n    &lt;<span style=color:#FF4185>div</span>>Count is negative&lt;/<span style=color:#FF4185>div</span>>\n  &lt;/<span style=color:#FF4185>if</span>>\n  &lt;<span style=color:#FF4185>else</span> <span style=color:#A6E22E>if</span>(<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>===</span> <span style=color:#AE81FF>0</span>)>\n    &lt;<span style=color:#FF4185>div</span>>Count is zero&lt;/<span style=color:#FF4185>div</span>>\n  &lt;/<span style=color:#FF4185>else</span>>\n  &lt;<span style=color:#FF4185>else</span>>\n    &lt;<span style=color:#FF4185>div</span>>Count is positive&lt;/<span style=color:#FF4185>div</span>>\n  &lt;/<span style=color:#FF4185>else</span>>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span><span style=color:#A6E22E>.counter-message</span>\n  <span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>&lt;</span> <span style=color:#AE81FF>0</span>)\n    <span style=color:#FF4185>div</span> -- Count is negative\n  <span style=color:#FF4185>else</span> <span style=color:#A6E22E>if</span>(<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>===</span> <span style=color:#AE81FF>0</span>)\n    <span style=color:#FF4185>div</span> -- Count is zero\n  <span style=color:#FF4185>else</span>\n    <span style=color:#FF4185>div</span> -- Count is positive\n</pre>"
  }, out, _componentDef, "257");

  out.w("<p>Marko also allows directives to be used as attributes for a more condensed template:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.counter-message</span>>\n  &lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>if</span>(<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>&lt;</span> <span style=color:#AE81FF>0</span>)>Count is negative&lt;/<span style=color:#FF4185>div</span>>\n  &lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>if</span>(<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>===</span> <span style=color:#AE81FF>0</span>)>Count is zero&lt;/<span style=color:#FF4185>div</span>>\n  &lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>else</span>>Count is positive&lt;/<span style=color:#FF4185>div</span>>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span><span style=color:#A6E22E>.counter-message</span>\n  <span style=color:#FF4185>div</span> <span style=color:#A6E22E>if</span>(<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>&lt;</span> <span style=color:#AE81FF>0</span>) -- Count is negative\n  <span style=color:#FF4185>div</span> <span style=color:#A6E22E>if</span>(<span style=color:#FFFFFF>count</span> <span style=color:#FF4185>===</span> <span style=color:#AE81FF>0</span>) -- Count is zero\n  <span style=color:#FF4185>div</span> <span style=color:#A6E22E>else</span> -- Count is positive\n</pre>"
  }, out, _componentDef, "259");

  out.w("<h3 id=syntax-looping><a name=syntax-looping class=anchor href=#syntax-looping><span class=header-link></span></a>Syntax: looping</h3><h4 id=react-jsx_5><a name=react-jsx_5 class=anchor href=#react-jsx_5><span class=header-link></span></a>React JSX</h4><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>function</span> <span style=color:#A6E22E>renderColors</span>(<span style=color:#FFAC4D>colors</span>) {\n  <span style=color:#FF4185>return</span> (\n    &lt;ul>\n      {<span style=color:#FFAC4D>colors</span>.<span style=color:#FFAC4D>map</span>(<span style=color:#FFAC4D>color</span> <span style=color:#FFFFFF>=</span><span style=color:#FF4185>></span> (\n        <span style=color:#FF4185>&lt;</span><span style=color:#FFAC4D>li</span>\n          <span style=color:#FFFFFF>className=</span><span style=color:#FFF066>\"color\"</span>\n          <span style=color:#FFFFFF>style=</span>{{\n            backgroundColor: <span style=color:#FFFFFF>color</span>\n          }}\n        <span style=color:#FF4185>></span>\n          {<span style=color:#FFAC4D>color</span>}\n        <span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>li</span><span style=color:#FF4185>></span>\n      ))}\n    <span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>ul</span><span style=color:#FF4185>></span>\n  );\n}\n</pre><h4 id=marko_5><a name=marko_5 class=anchor href=#marko_5><span class=header-link></span></a>Marko</h4>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>ul</span>>\n  &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>>\n    &lt;<span style=color:#FF4185>li</span><span style=color:#A6E22E>.color</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{ backgroundColor: <span style=color:#FFFFFF>color</span> }>\n        <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>\n    &lt;/<span style=color:#FF4185>li</span>>\n  &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>ul</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>ul</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>\n    <span style=color:#FF4185>li</span><span style=color:#A6E22E>.color</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{ backgroundColor: <span style=color:#FFFFFF>color</span> } -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "269");

  out.w("<h3 id=syntax-html-shorthand><a name=syntax-html-shorthand class=anchor href=#syntax-html-shorthand><span class=header-link></span></a>Syntax: HTML shorthand</h3>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>id</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"content\"</span>/>\n&lt;<span style=color:#FF4185>h1</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"subheader\"</span>/>\n&lt;<span style=color:#FF4185>h1</span> <span style=color:#A6E22E>id</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"pageTitle\"</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"foo bar\"</span>/>\n\n<span style=color:#8F8F9E>&lt;!-- Shorthand equivalent: --></span>\n&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>#content</span>/>\n&lt;<span style=color:#FF4185>h1</span><span style=color:#A6E22E>.subheader</span>/>\n&lt;<span style=color:#FF4185>h1</span><span style=color:#A6E22E>#pageTitle.foo.bar</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span><span style=color:#A6E22E>#content</span>\n<span style=color:#FF4185>h1</span><span style=color:#A6E22E>.subheader</span>\n<span style=color:#FF4185>h1</span><span style=color:#A6E22E>#pageTitle.foo.bar</span>\n<span style=color:#8F8F9E>&lt;!-- Shorthand equivalent: --></span>\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>#content</span>\n<span style=color:#FF4185>h1</span><span style=color:#A6E22E>.subheader</span>\n<span style=color:#FF4185>h1</span><span style=color:#A6E22E>.foo.bar#pageTitle</span>\n</pre>"
  }, out, _componentDef, "273");

  out.w("<p>Marko supports a shorthand based on CSS selectors for less code.</p><p>React does not support these helpful shorthands.</p><h3 id=syntax-concise><a name=syntax-concise class=anchor href=#syntax-concise><span class=header-link></span></a>Syntax: concise</h3><p>Marko supports a concise syntax that drops angled brackets and ending tags in favor of indentation. Here\u2019s how the Marko syntax options compare:</p><h4 id=marko-html-syntax><a name=marko-html-syntax class=anchor href=#marko-html-syntax><span class=header-link></span></a>Marko HTML syntax</h4>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>ul</span>>\n  &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>>\n    &lt;<span style=color:#FF4185>li</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>li</span>>\n  &lt;/<span style=color:#FF4185>for</span>>\n&lt;/<span style=color:#FF4185>ul</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>ul</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>\n    <span style=color:#FF4185>li</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "283");

  out.w("<h4 id=marko-concise-syntax><a name=marko-concise-syntax class=anchor href=#marko-concise-syntax><span class=header-link></span></a>Marko concise syntax</h4>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>ul</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>\n    <span style=color:#FF4185>li</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>ul</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>\n    <span style=color:#FF4185>li</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "287");

  out.w("<h4 id=marko-mixed-syntax><a name=marko-mixed-syntax class=anchor href=#marko-mixed-syntax><span class=header-link></span></a>Marko mixed syntax</h4>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>ul</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>\n    &lt;<span style=color:#FF4185>li</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>li</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>ul</span>\n  <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>color</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>colors</span>\n    <span style=color:#FF4185>li</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>color</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "291");

  out.w("<p>The HTML syntax and the concise syntax can be used together:</p><h4 id=react-jsx_6><a name=react-jsx_6 class=anchor href=#react-jsx_6><span class=header-link></span></a>React JSX</h4><p>React does not offer a concise syntax.</p><h3 id=components><a name=components class=anchor href=#components><span class=header-link></span></a>Components</h3><p>Marko starts with simple HTML and allows UI component logic to easily be layered on top.</p><h4 id=react-jsx_7><a name=react-jsx_7 class=anchor href=#react-jsx_7><span class=header-link></span></a>React JSX</h4><p>A React UI component is typically implemented as a class that extends <code>ReactComponent</code>:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> HelloMessage <span style=color:#FF4185>extends</span> React.<span style=color:#A6E22E;font-weight:bold>Component</span> {\n  <span style=color:#A6E22E>render</span>() {\n    <span style=color:#FF4185>return</span> &lt;div><span style=color:#FFFFFF>Hello</span> {this.props.name.toUpperCase()}<span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>div</span><span style=color:#FF4185>></span>;\n  }\n}\n</pre><p>React also supports a more concise functional component:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>function</span> <span style=color:#A6E22E>HelloMessage</span>(<span style=color:#FFAC4D>props</span>) {\n  <span style=color:#FF4185>return</span> &lt;div><span style=color:#FFFFFF>Hello</span> {props.name.toUpperCase()}<span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>div</span><span style=color:#FF4185>></span>;\n}\n</pre><p>However, if state or lifecycle events are needed then a functional UI component must be converted to a class component:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> HelloMessage <span style=color:#FF4185>extends</span> React.<span style=color:#A6E22E;font-weight:bold>Component</span> {\n  <span style=color:#A6E22E>componentDidMount</span>() {\n    <span style=color:#8F8F9E>// ...</span>\n  }\n  <span style=color:#A6E22E>render</span>() {\n    <span style=color:#FF4185>return</span> &lt;div><span style=color:#FFFFFF>Hello</span> {this.props.name.toUpperCase()}<span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>div</span><span style=color:#FF4185>></span>;\n  }\n}\n</pre><h4 id=marko_6><a name=marko_6 class=anchor href=#marko_6><span class=header-link></span></a>Marko</h4><p>Here is the same component in Marko:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span>>Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>.<span style=color:#A6E22E>toUpperCase</span>()<span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span> -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>.<span style=color:#A6E22E>toUpperCase</span>()<span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "312");

  out.w("<p>Behavior can easily be added to any Marko UI component:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onMount</span>() {\n    <span style=color:#8F8F9E>// ...</span>\n  }\n}\n\n&lt;<span style=color:#FF4185>div</span>>Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>.<span style=color:#A6E22E>toUpperCase</span>()<span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onMount</span>() {\n    <span style=color:#8F8F9E>// ...</span>\n  }\n}\n\n<span style=color:#FF4185>div</span> -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>.<span style=color:#A6E22E>toUpperCase</span>()<span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "314");

  out.w("<p>Marko also allows JavaScript behavior, CSS styling and HTML markup to be embedded in the Marko template as a single file UI component:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onMount</span>() {\n    <span style=color:#8F8F9E>// ...</span>\n  }\n}\n\n<span style=color:#66D9EF>style</span><span style=color:#FF4185>.less</span> {\n  <span style=color:#A6E22E>.hello</span> {\n    <span style=color:#66D9EF>color</span>: <span style=color:#66D9EF>red</span>;\n  }\n}\n\n&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.hello</span>>\n  Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>.<span style=color:#A6E22E>toUpperCase</span>()<span style=color:#66D9EF>}</span>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onMount</span>() {\n    <span style=color:#8F8F9E>// ...</span>\n  }\n}\n<span style=color:#66D9EF>style</span><span style=color:#FF4185>.less</span> {\n\n  <span style=color:#A6E22E>.hello</span> {\n    <span style=color:#66D9EF>color</span>: <span style=color:#66D9EF>red</span>;\n  }\n\n}\n\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>.hello</span> -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>.<span style=color:#A6E22E>toUpperCase</span>()<span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "316");

  out.w("<h3 id=api><a name=api class=anchor href=#api><span class=header-link></span></a>API</h3><p>Marko compiles components to JavaScript modules that export their rendering APIs, as shown below:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>Greeting</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./components/greeting.marko\"</span>;\n<span style=color:#FFFFFF>Greeting</span>.<span style=color:#A6E22E>renderSync</span>({ name: <span style=color:#FFF066>\"Frank\"</span> }).<span style=color:#A6E22E>appendTo</span>(<span style=color:#FFFFFF>document</span>.<span style=color:#FFFFFF>body</span>);\n</pre><p>The same UI component can render to streams, such as a writable HTTP response stream:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>Greeting</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./components/greeting.marko\"</span>;\n<span style=color:#FFFFFF>Greeting</span>.<span style=color:#A6E22E>render</span>({ name: <span style=color:#FFF066>\"John\"</span> }, <span style=color:#FFFFFF>res</span>);\n</pre><blockquote class=null><p>The users of a Marko UI component do not need to know that the component was implemented using Marko.</p></blockquote><p>Contrast this with React as an example:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>ReactDOM</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"react-dom\"</span>;\n\n<span style=color:#FFFFFF>ReactDOM</span>.<span style=color:#A6E22E>render</span>(\n  <span style=color:#FF4185>&lt;</span><span style=color:#FFFFFF>HelloMessage</span> <span style=color:#FFFFFF>name=</span><span style=color:#FFF066>\"John\"</span> <span style=color:#FF4185>/></span>,\n  <span style=color:#FFFFFF>document</span>.<span style=color:#A6E22E>getElementById</span>(<span style=color:#FFF066>\"container\"</span>)\n);\n</pre><p>On top of that, React requires that a different module be imported to render the exact same UI component on the server:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>ReactDOMServer</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"react-dom/server\"</span>;\n\n<span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>html</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>ReactDOMServer</span>.<span style=color:#A6E22E>renderToString</span>(&lt;HelloMessage name=<span style=color:#FFF066>\"John\"</span> />);\n</pre><h3 id=custom-tags><a name=custom-tags class=anchor href=#custom-tags><span class=header-link></span></a>Custom tags</h3><h4 id=react-jsx_8><a name=react-jsx_8 class=anchor href=#react-jsx_8><span class=header-link></span></a>React JSX</h4><p>With React, all custom tags for UI components must be explicitly imported:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>Hello</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./components/Hello\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>GoodBye</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./components/GoodBye\"</span>;\n\n<span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>HelloGoodBye</span>(<span style=color:#FFAC4D>props</span>) {\n  <span style=color:#FF4185>return</span> (\n    &lt;div>\n      <span style=color:#FF4185>&lt;</span><span style=color:#FFFFFF>Hello</span> <span style=color:#FFFFFF>name=</span>{props.<span style=color:#FFFFFF>name</span>} <span style=color:#FF4185>/></span>\n      <span style=color:#FF4185>&lt;</span><span style=color:#FFFFFF>GoodBye</span> <span style=color:#FFFFFF>name=</span>{props.<span style=color:#FFFFFF>name</span>} <span style=color:#FF4185>/></span>\n    <span style=color:#FF4185>&lt;/</span><span style=color:#FFFFFF>div</span><span style=color:#FF4185>></span>\n  );\n}\n</pre><h4 id=marko_7><a name=marko_7 class=anchor href=#marko_7><span class=header-link></span></a>Marko</h4><p>Marko supports a mechanism for <a href=/docs/custom-tags/#discovering-tags>automatically discovering custom tags</a> for UI components based on the project directory structure. Marko walks up the directory tree to discover all directories and it will also automatically discover custom tags exported by installed packages. This approach negates the need for explicitly importing a custom tag to reduce the amount of code needed in a Marko template. For example given the following directory structure:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>.\n\u251C\u2500\u2500 components/\n\u2502   \u251C\u2500\u2500 hello.marko\n\u2502   \u2514\u2500\u2500 good-bye.marko\n\u2514\u2500\u2500 index.marko\n</pre><p>The <code>&lt;hello&gt;</code> tag and the <code>&lt;good-bye&gt;</code> tag nested below the <code>components/</code> directory will automatically be made available to the <code>index.marko</code> at the root:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span>>\n  &lt;<span style=color:#FF4185>hello</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span> />\n  &lt;<span style=color:#FF4185>good-bye</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span> />\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span>\n  <span style=color:#FF4185>hello</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>\n  <span style=color:#FF4185>good-bye</span> <span style=color:#A6E22E>name</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>\n</pre>"
  }, out, _componentDef, "343");

  out.w("<p>This approach also allows editors and IDEs to offer autocompletion for custom tags.</p><h3 id=async><a name=async class=anchor href=#async><span class=header-link></span></a>Async</h3><p>Even after rendering has started, Marko allows parts of the view to be rendered asynchronously using the <a href=/docs/core-tags#await><code>&lt;await&gt;</code></a> tag as shown in the following Marko template:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>fsp</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>'fs-promise'</span>;\n\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>filePath</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>__dirname</span> <span style=color:#FF4185>+</span> <span style=color:#FFF066>'/hello.txt'</span>;\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>readPromise</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>fsp</span>.<span style=color:#A6E22E>readFile</span>(<span style=color:#FFFFFF>filePath</span>, {encoding: <span style=color:#FFF066>'utf8'</span>});\n\n&lt;<span style=color:#FF4185>await</span>(<span style=color:#FFFFFF>readPromise</span>)>\n  &lt;<span style=color:#A6E22E>@then</span>|<span style=color:#FFAC4D>helloText</span>|>\n    &lt;<span style=color:#FF4185>p</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>helloText</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>p</span>>\n  &lt;/<span style=color:#A6E22E>@then</span>>\n&lt;/<span style=color:#FF4185>await</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>fsp</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"fs-promise\"</span>;\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>filePath</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>__dirname</span> <span style=color:#FF4185>+</span> <span style=color:#FFF066>\"/hello.txt\"</span>;\n<span style=color:#FF4185>$</span> <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>readPromise</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>fsp</span>.<span style=color:#A6E22E>readFile</span>(<span style=color:#FFFFFF>filePath</span>, { encoding: <span style=color:#FFF066>\"utf8\"</span> });\n\n<span style=color:#FF4185>await</span>(<span style=color:#FFFFFF>readPromise</span>)\n  <span style=color:#A6E22E>@then</span>|<span style=color:#FFAC4D>helloText</span>|\n    <span style=color:#FF4185>p</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>helloText</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "351");

  out.w("<h3 id=compiler><a name=compiler class=anchor href=#compiler><span class=header-link></span></a>Compiler</h3><p>Marko compiles a template differently based on whether or not it will be used on the server or in the browser. For example, given the following template:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span>>Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span> -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!\n</pre>"
  }, out, _componentDef, "356");

  out.w("<h4 id=compiled-for-the-server><a name=compiled-for-the-server class=anchor href=#compiled-for-the-server><span class=header-link></span></a>Compiled for the server:</h4><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>marko_template</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"marko/html\"</span>).<span style=color:#A6E22E>t</span>(<span style=color:#FFFFFF>__filename</span>),\n  <span style=color:#FFFFFF>marko_helpers</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"marko/runtime/html/helpers\"</span>),\n  <span style=color:#FFFFFF>marko_escapeXml</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>marko_helpers</span>.<span style=color:#FFFFFF>x</span>;\n\n<span style=color:#66D9EF>function</span> <span style=color:#A6E22E>render</span>(<span style=color:#FFAC4D>input</span>, <span style=color:#FFAC4D>out</span>) {\n  <span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>w</span>(<span style=color:#FFF066>\"&lt;div>Hello \"</span> <span style=color:#FF4185>+</span> <span style=color:#A6E22E>marko_escapeXml</span>(<span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>) <span style=color:#FF4185>+</span> <span style=color:#FFF066>\"!&lt;/div>\"</span>);\n}\n</pre><h4 id=compiled-for-the-browser><a name=compiled-for-the-browser class=anchor href=#compiled-for-the-browser><span class=header-link></span></a>Compiled for the browser:</h4><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>marko_template</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"marko/vdom\"</span>).<span style=color:#A6E22E>t</span>(<span style=color:#FFFFFF>__filename</span>);\n\n<span style=color:#66D9EF>function</span> <span style=color:#A6E22E>render</span>(<span style=color:#FFAC4D>input</span>, <span style=color:#FFAC4D>out</span>) {\n  <span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>e</span>(<span style=color:#FFF066>\"DIV\"</span>, <span style=color:#AE81FF>null</span>, <span style=color:#AE81FF>3</span>).<span style=color:#A6E22E>t</span>(<span style=color:#FFF066>\"Hello \"</span>).<span style=color:#A6E22E>t</span>(<span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>).<span style=color:#A6E22E>t</span>(<span style=color:#FFF066>\"!\"</span>);\n}\n</pre><h3 id=compile-time-code-transforms><a name=compile-time-code-transforms class=anchor href=#compile-time-code-transforms><span class=header-link></span></a>Compile-time code transforms</h3><p>The Marko compiler was built to support compile-time code generators for custom tags and it also provides support for compile-time transforms. While Babel allows code transformations of JavaScript, the Marko compiler provides support for resolving custom tags declaratively and the Marko AST provides for very powerful and simple transformations as shown in the following code for rendering Markdown to HTML at <em>compile-time</em>:</p><p><strong>components/markdown/code-generator.js:</strong></p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>marked</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"marked\"</span>;\n<span style=color:#FF4185>import</span> { <span style=color:#FFFFFF>removeIndentation</span> } <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./util\"</span>;\n\n<span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>generateCode</span>(<span style=color:#FFAC4D>el</span>, <span style=color:#FFAC4D>codegen</span>) {\n  <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>bodyText</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>removeIndentation</span>(<span style=color:#FFFFFF>el</span>.<span style=color:#FFFFFF>bodyText</span>);\n  <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>html</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>marked</span>(<span style=color:#FFFFFF>bodyText</span>);\n  <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>builder</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>codegen</span>.<span style=color:#FFFFFF>builder</span>;\n  <span style=color:#FF4185>return</span> <span style=color:#FFFFFF>builder</span>.<span style=color:#A6E22E>html</span>(<span style=color:#FFFFFF>builder</span>.<span style=color:#A6E22E>literal</span>(<span style=color:#FFFFFF>html</span>));\n}\n</pre><p>The <code>&lt;markdown&gt;</code> tag can then be used as shown below:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>markdown</span>>\n\n> This section demonstrates Markdown in Marko\n\n# Marko is awesome!\n\n- High performance\n- Small\n- Intuitive\n\n&lt;/<span style=color:#FF4185>markdown</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>markdown</span>\n  --\n  > This section demonstrates Markdown in Marko # Marko is awesome! - High performance - Small - Intuitive\n  --\n</pre>"
  }, out, _componentDef, "372");

  out.w("<p>In this example, after the template is compiled, the <a href=https://github.com/chjj/marked>marked</a> library is no longer needed at render-time.</p><h3 id=tools><a name=tools class=anchor href=#tools><span class=header-link></span></a>Tools</h3><p>Marko and React offer a variety of developer tools. The <a href=https://github.com/marko-js/marko-devtools>Marko developer tools</a> are constantly evolving, but Marko currently provides tools for unit testing UI components, precompiling <code>.marko</code> files and generating configuration-less apps (similar to <a href=https://github.com/facebookincubator/create-react-app>create-react-app</a>). Currently, there are no Marko developer tools that integrate with the browser, but this is something we would like to see in the future. We will go into more detail on the Marko developer tools in a future post.</p><h4 id=ide-and-editor-support><a name=ide-and-editor-support class=anchor href=#ide-and-editor-support><span class=header-link></span></a>IDE and editor support</h4><p>Marko offers syntax highlighting across all major IDEs and editors, as well as on GitHub. Marko provides first-class support for the Atom editor with syntax highlighting, <a href=https://github.com/marko-js/atom-language-marko#autocomplete>Autocomplete</a> for both HTML and custom tags, <a href=https://github.com/marko-js/atom-language-marko#hyperclick>Hyperclick</a> to quickly jump to referenced files and methods, and <a href=https://github.com/marko-js/atom-language-marko#prettyprint>Pretty printing</a> to keep your code readable.</p><hr><h3 id=why-marko><a name=why-marko class=anchor href=#why-marko><span class=header-link></span></a>Why Marko?</h3><p>Here are just a few reasons you should consider using <a href=/ >Marko</a> over React:</p><ul><li>Marko requires much less boilerplate.</li><li>Marko has much better performance based on our benchmarks.</li><li>Marko offers a clean and powerful syntax that aligns with HTML while also allowing the full power of JavaScript.</li><li>Marko has much less complexity and a very small runtime.</li><li>Marko has a much lower page weight for faster page loads.</li><li>Marko has strong integrations with Node.js.</li><li>Marko allows for extremely powerful IDE and editor plugins (see the <a href=https://github.com/marko-js/atom-language-marko>Marko plugin for Atom</a> as an example).</li><li>Marko has a powerful compiler that allows new features to be added without introducing bloat.</li><li>eBay relies heavily on Marko and it is being used to build ebay.com (including the mobile web).</li><li>Marko has a strong and growing community on <a href=https://github.com/marko-js/marko>GitHub</a> and in <a href=https://discord.gg/RFGxYGs>Discord</a>.</li></ul><p>Interested in learning more about Marko? If so, you can get additional information on the <a href=/ >Marko website</a>. Join the conversation and contribute on <a href=https://github.com/marko-js/marko>GitHub</a> and follow us on <a href=https://twitter.com/MarkoDevTeam>Twitter</a>.</p>");
}, {
  t: marko_vs_react_marko_componentType,
  i: true
}, marko_vs_react_marko_component);
__webpack_require__(8828)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/redux.md


const redux_marko_componentType = "q/mjxLoE",
      redux_marko_template = (0,index_js_namespaceObject.t)(redux_marko_componentType);

/* harmony default export */ const redux = (redux_marko_template);

toc_registry.set("../../node_modules/marko/docs/redux.md", "<ul class=\"toc toc-level1\"><li><a href=\"#installation\">Installation</a></li><li><a href=\"#usage\">Usage</a><ul class=\"toc toc-level2\"><li><a href=\"#countermarko\">counter.marko</a></li><li><a href=\"#reducerjs\">reducer.js</a></li><li><a href=\"#storejs\">store.js</a></li></ul></li></ul>");
const redux_title = "Redux + Marko";



const redux_marko_component = {};
redux_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=redux-marko><a name=redux-marko class=anchor href=#redux-marko><span class=header-link></span></a>Redux + Marko</h1><p>See the <a href=https://github.com/marko-js/examples/tree/master/examples/redux><code>marko-redux</code> sample project</a> for a fully-working example.</p><h2 id=installation><a name=installation class=anchor href=#installation><span class=header-link></span></a>Installation</h2><p>First, save the <a href=https://www.npmjs.com/package/marko><code>marko</code></a> and <a href=https://www.npmjs.com/package/redux><code>redux</code></a> packages to your project\u2019s dependencies:</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm i marko redux\n</pre><h2 id=usage><a name=usage class=anchor href=#usage><span class=header-link></span></a>Usage</h2><p>The partial code below shows how a Marko UI component can connect to a Redux store, using Redux\u2019s <code>store.subscribe()</code> method and Marko\u2019s <code>forceUpdate()</code> method:</p><h3 id=countermarko><a name=countermarko class=anchor href=#countermarko><span class=header-link></span></a><code>counter.marko</code></h3>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>store</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>'./store.js'</span>;\n\n<span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onMount</span> () {\n    <span style=color:#FFFFFF>store</span>.<span style=color:#A6E22E>subscribe</span>(() <span style=color:#66D9EF>=></span> {\n      <span style=color:#8F8F9E>// Force this UI component to rerender</span>\n      <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>forceUpdate</span>();\n\n      <span style=color:#8F8F9E>// The UI component will rerender with the new</span>\n      <span style=color:#8F8F9E>// state returned by `store.getState()`</span>\n      <span style=color:#8F8F9E>//</span>\n      <span style=color:#8F8F9E>// You could also force an update like this:</span>\n      <span style=color:#8F8F9E>// this.input = store.getState();</span>\n    });\n  }\n}\n\n&lt;<span style=color:#FF4185>counter</span>(<span style=color:#FFFFFF>store</span>.<span style=color:#A6E22E>getState</span>()) />\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>store</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./store.js\"</span>;\n<span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onMount</span>() {\n    <span style=color:#FFFFFF>store</span>.<span style=color:#A6E22E>subscribe</span>(() <span style=color:#66D9EF>=></span> {\n      <span style=color:#8F8F9E>// Force this UI component to rerender</span>\n      <span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>forceUpdate</span>();\n\n      <span style=color:#8F8F9E>// The UI component will rerender with the new</span>\n      <span style=color:#8F8F9E>// state returned by `store.getState()`</span>\n      <span style=color:#8F8F9E>//</span>\n      <span style=color:#8F8F9E>// You could also force an update like this:</span>\n      <span style=color:#8F8F9E>// this.input = store.getState();</span>\n    });\n  }\n}\n\n<span style=color:#FF4185>counter</span>(<span style=color:#FFFFFF>store</span>.<span style=color:#A6E22E>getState</span>())\n</pre>"
  }, out, _componentDef, "25");

  out.w("<h3 id=reducerjs><a name=reducerjs class=anchor href=#reducerjs><span class=header-link></span></a><code>reducer.js</code></h3><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> <span style=color:#66D9EF>function</span> (<span style=color:#FFAC4D>state</span>, <span style=color:#FFAC4D>action</span>) {\n  <span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>state</span> <span style=color:#FF4185>||</span> { value: <span style=color:#AE81FF>0</span> };\n\n  <span style=color:#8F8F9E>// Additional reducer logic here\u2026</span>\n\n  <span style=color:#FF4185>return</span> <span style=color:#FFFFFF>state</span>;\n}\n</pre><h3 id=storejs><a name=storejs class=anchor href=#storejs><span class=header-link></span></a><code>store.js</code></h3><p>In <code>counter.marko</code>, the imported store module exports a Redux store created with the following code:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>redux</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"redux\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>counter</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./reducer.js\"</span>;\n\n<span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> <span style=color:#FFFFFF>redux</span>.<span style=color:#A6E22E>createStore</span>(<span style=color:#FFFFFF>counter</span>);\n</pre>");
}, {
  t: redux_marko_componentType,
  i: true
}, redux_marko_component);
__webpack_require__(6551)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/rendering.md


const rendering_marko_componentType = "PWX2QuXG",
      rendering_marko_template = (0,index_js_namespaceObject.t)(rendering_marko_componentType);

/* harmony default export */ const rendering = (rendering_marko_template);

toc_registry.set("../../node_modules/marko/docs/rendering.md", "<ul class=\"toc toc-level1\"><li><a href=\"#rendering-methods\">Rendering methods</a><ul class=\"toc toc-level2\"><li><a href=\"#rendersyncinput\">renderSync()</a></li><li><a href=\"#renderinput\">render()</a></li><li><a href=\"#renderinput-callback\">render()</a></li><li><a href=\"#renderinput-stream\">render()</a></li><li><a href=\"#renderinput-out\">render()</a></li><li><a href=\"#rendertostringinput\">renderToString()</a></li><li><a href=\"#rendertostringinput-callback\">renderToString()</a></li><li><a href=\"#streaminput\">stream()</a></li></ul></li><li><a href=\"#renderresult\">RenderResult</a><ul class=\"toc toc-level2\"><li><a href=\"#getcomponent\">getComponent()</a></li><li><a href=\"#getcomponentsselector\">getComponents()</a></li><li><a href=\"#afterinsertdoc\">afterInsert()</a></li><li><a href=\"#getnodedoc\">getNode()</a></li><li><a href=\"#getoutput\">getOutput()</a></li><li><a href=\"#appendtotargetel\">appendTo()</a></li><li><a href=\"#insertaftertargetel\">insertAfter()</a></li><li><a href=\"#insertbeforetargetel\">insertBefore()</a></li><li><a href=\"#prependtotargetel\">prependTo()</a></li><li><a href=\"#replacetargetel\">replace()</a></li><li><a href=\"#replacechildrenoftargetel\">replaceChildrenOf()</a></li></ul></li><li><a href=\"#global-data\">Global data</a><ul class=\"toc toc-level2\"><li><a href=\"#sending-global-data-to-browsers\">Sending global data to browsers</a></li></ul></li></ul>");
const rendering_title = "Rendering";



const rendering_marko_component = {};
rendering_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=rendering><a name=rendering class=anchor href=#rendering><span class=header-link></span></a>Rendering</h1><p>To render a Marko view, you need to <code>import</code> it.</p><div class=code-block-filename>example.js</div><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>FancyButton</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./components/fancy-button.marko\"</span>;\n</pre><blockquote class=note><p><strong>Note:</strong> If you are targeting node.js, you will need to enable the <a href=/docs/installing/#require-marko-views>require extension</a> in order to require <code>.marko</code> files or you will need to precompile all of your templates using <a href=https://github.com/marko-js/cli>Marko CLI</a>. If you are targeting the browser, you will need to use a bundler like <a href=/docs/lasso/ ><code>lasso</code></a>, <a href=/docs/webpack/ ><code>webpack</code></a> or <a href=/docs/rollup/ ><code>rollup</code></a>.</p></blockquote><p>Once you have a view, you can pass input data and render it:</p><div class=code-block-filename>example.js</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>FancyButton</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./components/fancy-button.marko\"</span>;\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>html</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>FancyButton</span>.<span style=color:#A6E22E>renderToString</span>({ label: <span style=color:#FFF066>\"Click me!\"</span> });\n\n<span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFFFFF>html</span>);\n</pre><p>The data passed to <code>renderToString</code> becomes available as <code>input</code> in the component, so if <code>fancy-button.marko</code> looked like this:</p><div class=code-block-filename>./components/fancy-button.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>button</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>label</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>button</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>label</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "26");

  out.w("<p>The output HTML would be:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>button</span>>Click me!&lt;/<span style=color:#FF4185>button</span>>\n</pre><h2 id=rendering-methods><a name=rendering-methods class=anchor href=#rendering-methods><span class=header-link></span></a>Rendering methods</h2><p>We used the <code>renderToString</code> method above to render the view, but there are a number of different method signatures that can be used to render.</p><p>Many of these methods return a <a href=#renderresult><code>RenderResult</code></a> which is an object with helper methods for working with the rendered output.</p><h3 id=rendersyncinput><a name=rendersyncinput class=anchor href=#rendersyncinput><span class=header-link></span></a><code>renderSync(input)</code></h3><table class=markdown-table><thead><tr><th>params</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>input</code></td><td><code>Object</code></td><td>the input data used to render the view</td></tr><tr><td>return value</td><td><a href=#renderresult><code>RenderResult</code></a></td><td>The result of the render</td></tr></tbody></table><p>Using <code>renderSync</code> forces the render to complete synchronously. If a tag attempts to run asynchronously, an error will be thrown.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>View</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./view.marko\"</span>;\n<span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>result</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>View</span>.<span style=color:#A6E22E>renderSync</span>({});\n\n<span style=color:#FFFFFF>result</span>.<span style=color:#A6E22E>appendTo</span>(<span style=color:#FFFFFF>document</span>.<span style=color:#FFFFFF>body</span>);\n</pre><h3 id=renderinput><a name=renderinput class=anchor href=#renderinput><span class=header-link></span></a><code>render(input)</code></h3><table class=markdown-table><thead><tr><th>params</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>input</code></td><td><code>Object</code></td><td>the input data used to render the view</td></tr><tr><td>return value</td><td><code>AsyncStream</code>/<code>AsyncVDOMBuilder</code></td><td>the async <code>out</code> render target</td></tr></tbody></table><p>The <code>render</code> method returns an async <code>out</code> which is used to generate HTML on the server or a virtual DOM in the browser. In either case, the async <code>out</code> has a <code>then</code> method that follows the Promises/A+ spec, so it can be used as if it were a Promise. This promise resolves to a <a href=#renderresult><code>RenderResult</code></a>.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>View</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./view.marko\"</span>;\n<span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>resultPromise</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>View</span>.<span style=color:#A6E22E>render</span>({});\n\n<span style=color:#FFFFFF>resultPromise</span>.<span style=color:#A6E22E>then</span>(<span style=color:#FFAC4D>result</span> <span style=color:#66D9EF>=></span> {\n  <span style=color:#FFFFFF>result</span>.<span style=color:#A6E22E>appendTo</span>(<span style=color:#FFFFFF>document</span>.<span style=color:#FFFFFF>body</span>);\n});\n</pre><h3 id=renderinput-callback><a name=renderinput-callback class=anchor href=#renderinput-callback><span class=header-link></span></a><code>render(input, callback)</code></h3><table class=markdown-table><thead><tr><th>params</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>input</code></td><td><code>Object</code></td><td>the input data used to render the view</td></tr><tr><td><code>callback</code></td><td><code>Function</code></td><td>a function to call when the render is complete</td></tr><tr><td>callback value</td><td><a href=#renderresult><code>RenderResult</code></a></td><td>The result of the render</td></tr><tr><td>return value</td><td><code>AsyncStream</code>/<code>AsyncVDOMBuilder</code></td><td>the async <code>out</code> render target</td></tr></tbody></table><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>View</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./view.marko\"</span>;\n\n<span style=color:#FFFFFF>View</span>.<span style=color:#A6E22E>render</span>({}, (<span style=color:#FFAC4D>err</span>, <span style=color:#FFAC4D>result</span>) <span style=color:#66D9EF>=></span> {\n  <span style=color:#FFFFFF>result</span>.<span style=color:#A6E22E>appendTo</span>(<span style=color:#FFFFFF>document</span>.<span style=color:#FFFFFF>body</span>);\n});\n</pre><h3 id=renderinput-stream><a name=renderinput-stream class=anchor href=#renderinput-stream><span class=header-link></span></a><code>render(input, stream)</code></h3><table class=markdown-table><thead><tr><th>params</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>input</code></td><td><code>Object</code></td><td>the input data used to render the view</td></tr><tr><td><code>stream</code></td><td><code>WritableStream</code></td><td>a writeable stream</td></tr><tr><td>return value</td><td><code>AsyncStream</code>/<code>AsyncVDOMBuilder</code></td><td>the async <code>out</code> render target</td></tr></tbody></table><p>The HTML output is written to the passed <code>stream</code>.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>http</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"http\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>View</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./view.marko\"</span>;\n\n<span style=color:#FFFFFF>http</span>.<span style=color:#A6E22E>createServer</span>((<span style=color:#FFAC4D>req</span>, <span style=color:#FFAC4D>res</span>) <span style=color:#66D9EF>=></span> {\n  <span style=color:#FFFFFF>res</span>.<span style=color:#A6E22E>setHeader</span>(<span style=color:#FFF066>\"content-type\"</span>, <span style=color:#FFF066>\"text/html\"</span>);\n  <span style=color:#FFFFFF>View</span>.<span style=color:#A6E22E>render</span>({}, <span style=color:#FFFFFF>res</span>);\n});\n</pre><h3 id=renderinput-out><a name=renderinput-out class=anchor href=#renderinput-out><span class=header-link></span></a><code>render(input, out)</code></h3><table class=markdown-table><thead><tr><th>params</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>input</code></td><td><code>Object</code></td><td>the input data used to render the view</td></tr><tr><td><code>out</code></td><td><code>AsyncStream</code>/<code>AsyncVDOMBuilder</code></td><td>The async <code>out</code> to render to</td></tr><tr><td>return value</td><td><code>AsyncStream</code>/<code>AsyncVDOMBuilder</code></td><td>The <code>out</code> that was passed</td></tr></tbody></table><p>The <code>render</code> method also allows passing an existing async <code>out</code>. If you do this, <code>render</code> will not automatically end the async <code>out</code> (this allows rendering a view in the middle of another view). If the async <code>out</code> won&#39;t be ended by other means, you are responsible for ending it.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>View</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./view.marko\"</span>;\n<span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>out</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>View</span>.<span style=color:#A6E22E>createOut</span>();\n\n<span style=color:#FFFFFF>View</span>.<span style=color:#A6E22E>render</span>({}, <span style=color:#FFFFFF>out</span>);\n\n<span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>on</span>(<span style=color:#FFF066>\"finish\"</span>, () <span style=color:#66D9EF>=></span> {\n  <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>getOutput</span>());\n});\n\n<span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>end</span>();\n</pre><h3 id=rendertostringinput><a name=rendertostringinput class=anchor href=#rendertostringinput><span class=header-link></span></a><code>renderToString(input)</code></h3><table class=markdown-table><thead><tr><th>params</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>input</code></td><td><code>Object</code></td><td>the input data used to render the view</td></tr><tr><td>return value</td><td><code>String</code></td><td>The HTML string produced by the render</td></tr></tbody></table><p>Returns an HTML string and forces the render to complete synchronously. If a tag attempts to run asynchronously, an error will be thrown.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>View</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./view.marko\"</span>;\n<span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>html</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>View</span>.<span style=color:#A6E22E>renderToString</span>({});\n\n<span style=color:#FFFFFF>document</span>.<span style=color:#FFFFFF>body</span>.<span style=color:#FFFFFF>innerHTML</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>html</span>;\n</pre><h3 id=rendertostringinput-callback><a name=rendertostringinput-callback class=anchor href=#rendertostringinput-callback><span class=header-link></span></a><code>renderToString(input, callback)</code></h3><table class=markdown-table><thead><tr><th>params</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>input</code></td><td><code>Object</code></td><td>the input data used to render the view</td></tr><tr><td>callback value</td><td><code>String</code></td><td>The HTML string produced by the render</td></tr><tr><td>return value</td><td><code>undefined</code></td><td>N/A</td></tr></tbody></table><p>An HTML string is passed to the callback.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>View</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./view.marko\"</span>;\n\n<span style=color:#FFFFFF>View</span>.<span style=color:#A6E22E>renderToString</span>({}, (<span style=color:#FFAC4D>err</span>, <span style=color:#FFAC4D>html</span>) <span style=color:#66D9EF>=></span> {\n  <span style=color:#FFFFFF>document</span>.<span style=color:#FFFFFF>body</span>.<span style=color:#FFFFFF>innerHTML</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>html</span>;\n});\n</pre><h3 id=streaminput><a name=streaminput class=anchor href=#streaminput><span class=header-link></span></a><code>stream(input)</code></h3><p>The <code>stream</code> method returns a Node.js-style stream of the output HTML.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>fs</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"fs\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>View</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./view.marko\"</span>;\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>writeStream</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>fs</span>.<span style=color:#A6E22E>createWriteStream</span>(<span style=color:#FFF066>\"output.html\"</span>);\n\n<span style=color:#FFFFFF>View</span>.<span style=color:#A6E22E>stream</span>({}).<span style=color:#A6E22E>pipe</span>(<span style=color:#FFFFFF>writeStream</span>);\n</pre><p>This method is available on the server, but not available by default in the browser. If you need to use streams in the browser, you may <code>import &#39;marko/stream&#39;</code> as part of your client-side bundle.</p><h2 id=renderresult><a name=renderresult class=anchor href=#renderresult><span class=header-link></span></a>RenderResult</h2><h3 id=getcomponent><a name=getcomponent class=anchor href=#getcomponent><span class=header-link></span></a><code>getComponent()</code></h3><h3 id=getcomponentsselector><a name=getcomponentsselector class=anchor href=#getcomponentsselector><span class=header-link></span></a><code>getComponents(selector)</code></h3><h3 id=afterinsertdoc><a name=afterinsertdoc class=anchor href=#afterinsertdoc><span class=header-link></span></a><code>afterInsert(doc)</code></h3><h3 id=getnodedoc><a name=getnodedoc class=anchor href=#getnodedoc><span class=header-link></span></a><code>getNode(doc)</code></h3><h3 id=getoutput><a name=getoutput class=anchor href=#getoutput><span class=header-link></span></a><code>getOutput()</code></h3><h3 id=appendtotargetel><a name=appendtotargetel class=anchor href=#appendtotargetel><span class=header-link></span></a><code>appendTo(targetEl)</code></h3><h3 id=insertaftertargetel><a name=insertaftertargetel class=anchor href=#insertaftertargetel><span class=header-link></span></a><code>insertAfter(targetEl)</code></h3><h3 id=insertbeforetargetel><a name=insertbeforetargetel class=anchor href=#insertbeforetargetel><span class=header-link></span></a><code>insertBefore(targetEl)</code></h3><h3 id=prependtotargetel><a name=prependtotargetel class=anchor href=#prependtotargetel><span class=header-link></span></a><code>prependTo(targetEl)</code></h3><h3 id=replacetargetel><a name=replacetargetel class=anchor href=#replacetargetel><span class=header-link></span></a><code>replace(targetEl)</code></h3><h3 id=replacechildrenoftargetel><a name=replacechildrenoftargetel class=anchor href=#replacechildrenoftargetel><span class=header-link></span></a><code>replaceChildrenOf(targetEl)</code></h3><h2 id=global-data><a name=global-data class=anchor href=#global-data><span class=header-link></span></a>Global data</h2><p>If you need to make data available to all rendered views, use the <code>&#36;global</code> property on the input data object. This property will be removed from <code>input</code> and merged into the <code>out.global</code> property.</p><p>Global values persist across renders.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>View</span>.<span style=color:#A6E22E>render</span>({\n  $global: {\n    flags: [<span style=color:#FFF066>\"mobile\"</span>]\n  }\n});\n</pre><blockquote class=warning><p><strong>Warning:</strong> Use <code>&#36;global</code> with caution; it is visible in any component.</p></blockquote><h3 id=sending-global-data-to-browsers><a name=sending-global-data-to-browsers class=anchor href=#sending-global-data-to-browsers><span class=header-link></span></a>Sending global data to browsers</h3><p>\u26A0\uFE0F To prevent accidentally exposing sensitive data, by default <strong>no keys</strong> in <code>out.global</code> are sent to browsers. To serialize data to the frontend, name the desired properties in <code>&#36;global.serializedGlobals</code>.</p><p>Values must be serializable by <a href=https://www.npmjs.com/package/warp10>the <code>warp10</code> module</a>.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>Page</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./index.marko\"</span>;\n\n<span style=color:#FFFFFF>app</span>.<span style=color:#A6E22E>get</span>(<span style=color:#FFF066>\"/\"</span>, (<span style=color:#FFAC4D>req</span>, <span style=color:#FFAC4D>res</span>) <span style=color:#66D9EF>=></span> {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>ua</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>req</span>.<span style=color:#A6E22E>get</span>(<span style=color:#FFF066>\"User-Agent\"</span>);\n\n  <span style=color:#FFFFFF>Page</span>.<span style=color:#A6E22E>render</span>(\n    {\n      $global: {\n        isIos:<span style=color:#FFF066> /iPad</span><span style=color:#FF4185>|</span><span style=color:#FFF066>iPhone/</span>.<span style=color:#A6E22E>test</span>(<span style=color:#FFFFFF>ua</span>), <span style=color:#8F8F9E>// Serialized and available on the server and browser as `out.global.isIos`</span>\n        isAndroid:<span style=color:#FFF066> /Android/</span>.<span style=color:#A6E22E>test</span>(<span style=color:#FFFFFF>ua</span>), <span style=color:#8F8F9E>// Serialized and available on the server and browser as `out.global.isAndroid`</span>\n        <span style=color:#FFFFFF>req</span>, <span style=color:#8F8F9E>// Only available server-side and not serialized, because it\u2019s not in `serializedGlobals`</span>\n\n        serializedGlobals: {\n          isIos: <span style=color:#AE81FF>true</span>, <span style=color:#8F8F9E>// Tell Marko to serialize `isIos`</span>\n          isAndroid: <span style=color:#AE81FF>true</span> <span style=color:#8F8F9E>// Tell Marko to serialize `isAndroid`</span>\n        }\n      }\n    },\n    <span style=color:#FFFFFF>res</span>\n  );\n});\n</pre><p>For details, check <a href=https://github.com/marko-js/marko/pull/672>#672: \u201CSerialize only input and state on top-level server-rendered UI components\u201D</a>.</p>");
}, {
  t: rendering_marko_componentType,
  i: true
}, rendering_marko_component);
__webpack_require__(1502)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/rollup.md


const rollup_marko_componentType = "eTKtoIxH",
      rollup_marko_template = (0,index_js_namespaceObject.t)(rollup_marko_componentType);

/* harmony default export */ const rollup = (rollup_marko_template);

toc_registry.set("../../node_modules/marko/docs/rollup.md", "<ul class=\"toc toc-level0\"><li><a href=\"#marko-rollup\">Marko + Rollup</a></li><li><a href=\"#installation\">Installation</a></li><li><a href=\"#basic-example-config\">Basic example config</a></li><li><a href=\"#linked-config\">Linked config</a><ul class=\"toc toc-level1\"><li><a href=\"#rollup-tag\">&lt;rollup&gt; tag</a></li></ul></li><li><a href=\"#top-level-components\">Top level components</a><ul class=\"toc toc-level1\"><li><a href=\"#options\">Options</a><ul class=\"toc toc-level2\"><li><a href=\"#optionsbabelconfig\">options.babelConfig</a></li><li><a href=\"#optionsruntimeid\">options.runtimeId</a></li><li><a href=\"#optionsserialize\">options.serialize</a></li></ul></li></ul></li></ul>");
const rollup_title = "Marko + Rollup";



const rollup_marko_component = {};
rollup_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=marko-rollup><a name=marko-rollup class=anchor href=#marko-rollup><span class=header-link></span></a>Marko + Rollup</h1><h1 id=installation><a name=installation class=anchor href=#installation><span class=header-link></span></a>Installation</h1><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm install @marko/rollup rollup @rollup/plugin-node-resolve @rollup/plugin-commonjs -D\n</pre><h1 id=basic-example-config><a name=basic-example-config class=anchor href=#basic-example-config><span class=header-link></span></a>Basic example config</h1><p><strong>Note: The Marko runtime is authored in commonjs, this means the <code>@rollup/plugin-commonjs</code> is required!</strong></p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>nodeResolve</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@rollup/plugin-node-resolve\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>commonjs</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@rollup/plugin-commonjs\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>marko</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@marko/rollup\"</span>;\n\n<span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> {\n  <span style=color:#FF4185>...</span>,\n  plugins: [\n    <span style=color:#FFFFFF>marko</span>.<span style=color:#A6E22E>browser</span>(),\n    <span style=color:#A6E22E>nodeResolve</span>({\n      browser: <span style=color:#AE81FF>true</span>,\n      extensions: [<span style=color:#FFF066>\".js\"</span>, <span style=color:#FFF066>\".marko\"</span>]\n    }),\n    <span style=color:#8F8F9E>// NOTE: The Marko runtime uses commonjs so this plugin is also required.</span>\n    <span style=color:#A6E22E>commonjs</span>({\n      extensions: [<span style=color:#FFF066>\".js\"</span>, <span style=color:#FFF066>\".marko\"</span>]\n    }),\n    <span style=color:#8F8F9E>// If using `style` blocks with Marko you must use an appropriate plugin.</span>\n    <span style=color:#A6E22E>postcss</span>({\n      external: <span style=color:#AE81FF>true</span>\n    })\n  ]\n};\n</pre><p>Likewise, if bundling the components for the server use <code>marko.server()</code> as the plugin.</p><h1 id=linked-config><a name=linked-config class=anchor href=#linked-config><span class=header-link></span></a>Linked config</h1><p>If you use <em>both</em> the <code>server</code> and <code>browser</code> plugins (in a <a href=https://rollupjs.org/guide/en/#configuration-files:~:text=export%20an%20array>multi rollup config setup</a>) <code>@marko/rollup</code> will go into a <em>linked</em> mode. In the linked mode you will have access to the <a href=#rollup-tag><code>&lt;rollup&gt;</code> tag</a> on the server, and the browser config will automatically have the <a href=https://rollupjs.org/guide/en/#input><code>input</code></a> option set.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> [{\n  <span style=color:#8F8F9E>// Config object for bundling server assets.</span>\n  input: <span style=color:#FFF066>\"src/your-server-entry.js\"</span>,\n  plugins: [\n    <span style=color:#FFFFFF>marko</span>.<span style=color:#A6E22E>server</span>()\n    <span style=color:#FF4185>...</span>\n  ]\n}, {\n  <span style=color:#8F8F9E>// Config object for bundling browser assets.</span>\n  plugins: [\n    <span style=color:#FFFFFF>marko</span>.<span style=color:#A6E22E>browser</span>()\n    <span style=color:#FF4185>...</span>\n  ]\n}];\n</pre><h2 id=rollup-tag><a name=rollup-tag class=anchor href=#rollup-tag><span class=header-link></span></a><code>&lt;rollup&gt;</code> tag</h2><p>In a <a href=#linked-config>linked setup</a> you have access to the <code>&lt;rollup&gt;</code> tag which will provide two <a href=/docs/syntax/#parameters>tag parameters</a> that allow you to write out the asset links for your server rendered app.</p><p>The first parameter <code>entry</code> is the generated <code>input</code> name that the server plugin gave to the browser compiler. You can use it to find the corresponding entry chunk from rollups build.</p><p>The second parameter <code>output</code> is an array of <code>AssetInfo | ChunkInfo</code> objects with most of the same properties returned from rollup&#39;s <a href=https://rollupjs.org/guide/en/#generatebundle><code>generateBundle</code> hook</a>. Some properties have been stripped, notably <code>code</code> and <code>map</code> since they would be too large to inline directly. A <code>size</code> property is also available for all chunks to allow you to be able to filter out empty chunks, or inline chunks of certain size.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>head</span>>\n  &lt;<span style=color:#FF4185>rollup</span>|<span style=color:#FFAC4D>entry</span>, <span style=color:#FFAC4D>output</span>|>\n    <span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>entryChunk</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>output</span>.<span style=color:#A6E22E>find</span>(<span style=color:#FFAC4D>chunk</span> <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>name</span> <span style=color:#FF4185>===</span> <span style=color:#FFFFFF>entry</span>);\n\n    &lt;<span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>entryChunk</span>.<span style=color:#FFFFFF>size</span> <span style=color:#8F8F9E>/* skip scripts all together if empty js file */</span>)>\n      &lt;<span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>fileName</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>entryChunk</span>.<span style=color:#FFFFFF>imports</span>>\n        &lt;<span style=color:#FF4185>link</span> <span style=color:#A6E22E>rel</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"modulepreload\"</span> <span style=color:#A6E22E>href</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>fileName</span>/>\n      &lt;/<span style=color:#FF4185>for</span>>\n\n      &lt;<span style=color:#FF4185>script</span> <span style=color:#A6E22E>async</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"module\"</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>entryChunk</span>.<span style=color:#FFFFFF>fileName</span>/>\n    &lt;/<span style=color:#FF4185>if</span>>\n  &lt;/<span style=color:#FF4185>rollup</span>>\n&lt;/<span style=color:#FF4185>head</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>head</span>\n  <span style=color:#FF4185>rollup</span>|<span style=color:#FFAC4D>entry</span>, <span style=color:#FFAC4D>output</span>|\n    <span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>entryChunk</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>output</span>.<span style=color:#A6E22E>find</span>((<span style=color:#FFAC4D>chunk</span>) <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>name</span> <span style=color:#FF4185>===</span> <span style=color:#FFFFFF>entry</span>);\n\n    <span style=color:#FF4185>if</span>(<span style=color:#FFFFFF>entryChunk</span>.<span style=color:#FFFFFF>size</span>)\n      <span style=color:#FF4185>for</span>|<span style=color:#FFAC4D>fileName</span>| <span style=color:#A6E22E>of</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>entryChunk</span>.<span style=color:#FFFFFF>imports</span>\n        <span style=color:#FF4185>link</span> <span style=color:#A6E22E>rel</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"modulepreload\"</span> <span style=color:#A6E22E>href</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>fileName</span>\n\n      <span style=color:#FF4185>script</span> <span style=color:#A6E22E>async</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"module\"</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>entryChunk</span>.<span style=color:#FFFFFF>fileName</span>\n</pre>"
  }, out, _componentDef, "48");

  out.w("<p>Ultimately it is up to you to map the chunk data (sometimes referred to as a manifest) into the <code>&lt;link&gt;</code>&#39;s and <code>&lt;script&gt;</code>&#39;s rendered by your application.</p><p>If your rollup browser config contains multiple <code>output</code> options, or you have multiple browser configs, all of the <code>chunks</code> for each <code>output</code> are passed into the <code>&lt;rollup&gt;</code> tag.</p><p>For example if you have an <code>esm</code> and <code>iife</code> build:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n  plugins: [\n    <span style=color:#FFFFFF>marko</span>.<span style=color:#A6E22E>browser</span>()\n    <span style=color:#FF4185>...</span>\n  ],\n  output: [\n    { dir: <span style=color:#FFF066>'dist/iife'</span>, format: <span style=color:#FFF066>'iife'</span> },\n    { dir: <span style=color:#FFF066>'dist/esm'</span>, format: <span style=color:#FFF066>'esm'</span> }\n  ]\n}\n</pre><p>we could access the assets from both builds:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>head</span>>\n  &lt;<span style=color:#FF4185>rollup</span>|<span style=color:#FFAC4D>entry</span>, <span style=color:#FFAC4D>iifeOutput</span>, <span style=color:#FFAC4D>esmOutput</span>|>\n    <span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>iifeEntryChunk</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>iifeOutput</span>.<span style=color:#A6E22E>find</span>(<span style=color:#FFAC4D>chunk</span> <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>name</span> <span style=color:#FF4185>===</span> <span style=color:#FFFFFF>entry</span>);\n    <span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>esmEntryChunk</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>esmOutput</span>.<span style=color:#A6E22E>find</span>(<span style=color:#FFAC4D>chunk</span> <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>name</span> <span style=color:#FF4185>===</span> <span style=color:#FFFFFF>entry</span>);\n\n    &lt;<span style=color:#FF4185>script</span> <span style=color:#A6E22E>async</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"module\"</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>esmEntryChunk</span>.<span style=color:#FFFFFF>fileName</span>/>\n    &lt;<span style=color:#FF4185>script</span> <span style=color:#A6E22E>nomodule</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>iifeEntryChunk</span>.<span style=color:#FFFFFF>fileName</span>>&lt;/<span style=color:#FF4185>script</span>>\n  &lt;/<span style=color:#FF4185>rollup</span>>\n&lt;/<span style=color:#FF4185>head</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>head</span>\n  <span style=color:#FF4185>rollup</span>|<span style=color:#FFAC4D>entry</span>, <span style=color:#FFAC4D>iifeOutput</span>, <span style=color:#FFAC4D>esmOutput</span>|\n    <span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>iifeEntryChunk</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>iifeOutput</span>.<span style=color:#A6E22E>find</span>((<span style=color:#FFAC4D>chunk</span>) <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>name</span> <span style=color:#FF4185>===</span> <span style=color:#FFFFFF>entry</span>);\n    <span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>esmEntryChunk</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>esmOutput</span>.<span style=color:#A6E22E>find</span>((<span style=color:#FFAC4D>chunk</span>) <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>name</span> <span style=color:#FF4185>===</span> <span style=color:#FFFFFF>entry</span>);\n\n    <span style=color:#FF4185>script</span> <span style=color:#A6E22E>async</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"module\"</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>esmEntryChunk</span>.<span style=color:#FFFFFF>fileName</span>\n    <span style=color:#FF4185>script</span> <span style=color:#A6E22E>nomodule</span> <span style=color:#A6E22E>src</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>iifeEntryChunk</span>.<span style=color:#FFFFFF>fileName</span>\n</pre>"
  }, out, _componentDef, "61");

  out.w("<p>and <em>boom</em> you now have a <a href=https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/ ><code>module/nomodule</code> setup</a>.</p><h1 id=top-level-components><a name=top-level-components class=anchor href=#top-level-components><span class=header-link></span></a>Top level components</h1><p>Marko was designed to send as little JavaScript to the browser as possible. One of the ways we do this is by automatically determining which templates in your app should be shipped to the browser. When rendering a template on the server, it is only necessary to bundle the styles and interactive components rendered by that template.</p><p>To send the minimal amount of Marko templates to the browser you can provide a Marko template directly as the <code>input</code>. This will also automatically invoke code to initialize the components in the browser, so there is no need to call <code>template.render</code> yourself in the browser.</p><blockquote class=null><p>Note: if you are using <em>linked</em> plugins then the server plugin will automatically tell the browser compiler which Marko templates to load.</p></blockquote><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> {\n  input: <span style=color:#FFF066>\"./my-marko-page.marko\"</span>,\n  plugins: [\n    <span style=color:#FFFFFF>marko</span>.<span style=color:#A6E22E>browser</span>(),\n    <span style=color:#FF4185>...</span>\n  ],\n  <span style=color:#FF4185>...</span>\n}\n</pre><h2 id=options><a name=options class=anchor href=#options><span class=header-link></span></a>Options</h2><p>Both the <code>server</code> and <code>browser</code> plugins can receive the same options.</p><h3 id=optionsbabelconfig><a name=optionsbabelconfig class=anchor href=#optionsbabelconfig><span class=header-link></span></a>options.babelConfig</h3><p>You can manually override the Babel configuration used by passing a <code>babelConfig</code> object to the <code>@marko/rollup</code> plugin. By default Babels regular <a href=https://babeljs.io/docs/en/config-files>config file resolution</a> will be used.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>marko</span>.<span style=color:#A6E22E>browser</span>({\n  babelConfig: {\n    presets: [<span style=color:#FFF066>\"@babel/preset-env\"</span>]\n  }\n});\n</pre><h3 id=optionsruntimeid><a name=optionsruntimeid class=anchor href=#optionsruntimeid><span class=header-link></span></a>options.runtimeId</h3><p>In some cases you may want to embed multiple isolated copies of Marko on the page. Since Marko relies on some <code>window</code> properties to initialize this can cause issues. For example, by default Marko will read the server rendered hydration code from <code>window.&#36;components</code>. In Marko you can change these <code>window</code> properties by rendering with <code>{ &#36;global: { runtimeId: &quot;MY_MARKO_RUNTIME_ID&quot; } }</code> as input on the server side.</p><p>This plugin exposes a <code>runtimeId</code> option produces output that automatically sets <code>&#36;global.runtimeId</code> on the server side and initializes properly in the browser.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>runtimeId</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>\"MY_MARKO_RUNTIME_ID\"</span>;\n<span style=color:#8F8F9E>// Make sure the `runtimeId` is the same across all of your plugins!</span>\n<span style=color:#FFFFFF>marko</span>.<span style=color:#A6E22E>server</span>({ <span style=color:#FFFFFF>runtimeId</span> });\n<span style=color:#FFFFFF>marko</span>.<span style=color:#A6E22E>browser</span>({ <span style=color:#FFFFFF>runtimeId</span> });\n</pre><h3 id=optionsserialize><a name=optionsserialize class=anchor href=#optionsserialize><span class=header-link></span></a>options.serialize</h3><p>This option is only available for the <code>browser</code> plugin. It allows you to transform the list of chunks serialzed in a <a href=#linked-config><em>linked config</em></a> to include whatever you like. For example if you <em>did</em> want to include the <code>code</code> property from the rollup chunk, to say inline some content, the following would work:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>marko</span>.<span style=color:#A6E22E>browser</span>({\n  <span style=color:#A6E22E>serialize</span>(<span style=color:#FFAC4D>output</span>) {\n    <span style=color:#FF4185>return</span> <span style=color:#FFFFFF>output</span>.<span style=color:#A6E22E>map</span>(<span style=color:#FFAC4D>chunk</span> <span style=color:#66D9EF>=></span>\n      <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>type</span> <span style=color:#FF4185>===</span> <span style=color:#FFF066>\"asset\"</span>\n        <span style=color:#FF4185>?</span> {\n            type: <span style=color:#FFF066>\"asset\"</span>,\n            fileName: <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>fileName</span>\n          }\n        <span style=color:#FF4185>:</span> {\n            type: <span style=color:#FFF066>\"chunk\"</span>,\n            name: <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>name</span>,\n            isEntry: <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>isEntry</span>,\n            fileName: <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>fileName</span>,\n            code:\n              <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>code</span>.<span style=color:#A6E22E>replace</span>(<span style=color:#FFF066>/</span><span style=color:#FF4185>^</span><span style=color:#AE81FF>\\s</span><span style=color:#FF4185>+$</span><span style=color:#FFF066>/</span>, <span style=color:#FFF066>\"\"</span>).length <span style=color:#FF4185>&lt;</span> <span style=color:#AE81FF>1024</span>\n                <span style=color:#FF4185>?</span> <span style=color:#FFFFFF>chunk</span>.<span style=color:#FFFFFF>code</span>\n                <span style=color:#FF4185>:</span> <span style=color:#AE81FF>undefined</span> <span style=color:#8F8F9E>// only inline small code chunks</span>\n          }\n    );\n  }\n});\n</pre>");
}, {
  t: rollup_marko_componentType,
  i: true
}, rollup_marko_component);
__webpack_require__(3437)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/state.md


const state_marko_componentType = "lsY18efc",
      state_marko_template = (0,index_js_namespaceObject.t)(state_marko_componentType);

/* harmony default export */ const state = (state_marko_template);

toc_registry.set("../../node_modules/marko/docs/state.md", "<ul class=\"toc toc-level1\"><li><a href=\"#initializing-state\">Initializing state</a></li><li><a href=\"#updating-state\">Updating state</a><ul class=\"toc toc-level2\"><li><a href=\"#how-updates-work\">How updates work</a></li></ul></li><li><a href=\"#cross-component-state-management\">Cross component state management</a><ul class=\"toc toc-level2\"><li><a href=\"#globalsubtree\">Global/Subtree</a></li><li><a href=\"#when-to-use-a-redux-like-pattern\">When to use a Redux like pattern</a></li></ul></li></ul>");
const state_title = "State";



const state_marko_component = {};
state_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=state><a name=state class=anchor href=#state><span class=header-link></span></a>State</h1><p>The output of a component is based on input properties passed from its parent as attributes. However, a component may also maintain internal state that it uses to control its view. If Marko detects a change to either input or to the internal state, the view will automatically be updated.</p><blockquote class=protip><p><strong>ProTip:</strong> Only data that is owned and modified by the component should go into its <code>state</code>. State should be exclusively used for data that triggers rerenders. Parents control <code>input</code>, and the component controls its own <code>state</code>.</p></blockquote><h2 id=initializing-state><a name=initializing-state class=anchor href=#initializing-state><span class=header-link></span></a>Initializing state</h2><p>To use <code>state</code> in Marko, you must first create a <a href=/docs/class-components/ >class component</a> and initialize the state within the <a href=/docs/class-components/#oncreateinput-out><code>onCreate</code></a> method. In class methods, <code>this.state</code> may be used and within the template section, a <code>state</code> variable is available.</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n    <span style=color:#A6E22E>onCreate</span>() {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> { count: <span style=color:#AE81FF>0</span> };\n    }\n}\n\n&lt;<span style=color:#FF4185>div</span>>The count is <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> { count: <span style=color:#AE81FF>0</span> };\n  }\n}\n\n<span style=color:#FF4185>div</span> -- The count is <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "21");

  out.w("<blockquote class=note><p><strong>Note:</strong> Only properties that exist when <code>this.state</code> is first defined will be watched for changes. If you don&#39;t need a property initially, you can set it to <code>null</code>.</p></blockquote><h2 id=updating-state><a name=updating-state class=anchor href=#updating-state><span class=header-link></span></a>Updating state</h2><p>You can update <code>state</code> in response to DOM events, browser events, ajax calls, etc. When a property on the state changes, the view will be updated to match.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n    <span style=color:#A6E22E>onCreate</span>() {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> { count: <span style=color:#AE81FF>0</span> };\n    }\n    <span style=color:#A6E22E>increment</span>() {\n        <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#FF4185>++</span>;\n    }\n}\n\n&lt;<span style=color:#FF4185>div</span>>The count is <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>div</span>>\n&lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>'increment'</span>)>Increment&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>class</span> {\n  <span style=color:#A6E22E>onCreate</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span> <span style=color:#FFFFFF>=</span> { count: <span style=color:#AE81FF>0</span> };\n  }\n  <span style=color:#A6E22E>increment</span>() {\n    <span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#FF4185>++</span>;\n  }\n}\n\n<span style=color:#FF4185>div</span> -- The count is <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>count</span><span style=color:#66D9EF>}</span>\n<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"increment\"</span>) -- Increment\n</pre>"
  }, out, _componentDef, "32");

  out.w("<p>We&#39;ve extended our example above to add a button with an <a href=/docs/events/ >event handler</a>, so that, when clicked, the <code>state.count</code> value is incremented.</p><blockquote class=note><p><strong>Note:</strong> When browsing existing code, you may see <code>this.setState(&#39;name&#39;, value)</code> being used. This is equivalent to <code>this.state.name = value</code>.</p></blockquote><h3 id=how-updates-work><a name=how-updates-work class=anchor href=#how-updates-work><span class=header-link></span></a>How updates work</h3><p>When a property on <code>state</code> is set, the component will be scheduled for an update if the property has changed. All updates are batched together for performance. This means you can update multiple state properties at the same time without causing multiple updates.</p><blockquote class=protip><p><strong>ProTip:</strong> If you need to know when the update has been applied, you can use <code>this.once(&#39;update&#39;, fn)</code> within a component method.</p></blockquote><blockquote class=note><p><strong>Note:</strong> The state object only watches its properties one level deep. This means updates to nested properites on the state (e.g. <code>this.state.object.something = newValue</code>) will not be detected.</p><p>Using <a href=https://wecodetheweb.com/2016/02/12/immutable-javascript-using-es6-and-beyond/ >immutable</a> data structures is recommended, but if you want to mutate a state property (perhaps push a new item into an array) you can let Marko know it changed using <code>setStateDirty</code>.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>this</span>.<span style=color:#FFFFFF>state</span>.<span style=color:#FFFFFF>numbers</span>.<span style=color:#A6E22E>push</span>(<span style=color:#FFFFFF>num</span>);\n\n<span style=color:#8F8F9E>// mark numbers as dirty, because a `push`</span>\n<span style=color:#8F8F9E>// won't be automatically detected by Marko</span>\n<span style=color:#FFFFFF>this</span>.<span style=color:#A6E22E>setStateDirty</span>(<span style=color:#FFF066>\"numbers\"</span>);\n</pre></blockquote><h2 id=cross-component-state-management><a name=cross-component-state-management class=anchor href=#cross-component-state-management><span class=header-link></span></a>Cross component state management</h2><p>There are various tools available to manage state outside of a single component. Here are some basic guidelines.</p><p>Typically we recommend using <code>attributes</code> to pass data in to a child component, and children can <a href=/docs/events/#emitting-custom-events>emit events</a> to communicate back up to their parents. In some cases this can become cumbersome with deeply nested data dependencies or global state.</p><h3 id=globalsubtree><a name=globalsubtree class=anchor href=#globalsubtree><span class=header-link></span></a>Global/Subtree</h3><p>For passing state throughout a component tree without explicit attribute setting throughout the entire app, you can leverage the <a href=https://github.com/marko-js/tags/tree/master/tags/context><code>&lt;context&gt;</code></a> tag. This tag can be <a href=/docs/custom-tags/#using-tags-from-npm>installed from npm</a>.</p><p>This tag allows you to pull state from any level above in the tree and can also be used to pass global state throughout your app. Context providers can register event handlers that any child in the tree can trigger similar to the <a href=/docs/events/ >events API</a>.</p><div class=code-block-filename>fancy-form.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>context</span> <span style=color:#A6E22E>coupon</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>coupon</span> <span style=color:#66D9EF>on-buy</span>(<span style=color:#FFFFFF>handleBuy</span>)>\n<span style=color:#8F8F9E>    &lt;!-- Somewhere nested in the container will be the buy button --></span>\n    &lt;<span style=color:#FF4185>fancy-container</span>/>\n&lt;/<span style=color:#FF4185>context</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>context</span> <span style=color:#A6E22E>coupon</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>coupon</span> <span style=color:#66D9EF>on-buy</span>(<span style=color:#FFFFFF>handleBuy</span>)\n<span style=color:#8F8F9E>  &lt;!-- Somewhere nested in the container will be the buy button --></span>\n  <span style=color:#FF4185>fancy-container</span>\n</pre>"
  }, out, _componentDef, "74");

  out.w("<div class=code-block-filename>fancy-save-button.marko</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>context</span>|{ <span style=color:#FFAC4D>coupon</span> }, <span style=color:#FFAC4D>emit</span>| <span style=color:#A6E22E>from</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"fancy-form\"</span>>\n    Coupon: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>coupon</span><span style=color:#66D9EF>}</span>.\n    &lt;<span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFFFFF>emit</span>, <span style=color:#FFF066>\"buy\"</span>)>Buy&lt;/<span style=color:#FF4185>button</span>>\n&lt;/<span style=color:#FF4185>context</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>context</span>|{ <span style=color:#FFAC4D>coupon</span> }, <span style=color:#FFAC4D>emit</span>| <span style=color:#A6E22E>from</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"fancy-form\"</span>\n  -- Coupon: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>coupon</span><span style=color:#66D9EF>}</span>.\n  <span style=color:#FF4185>button</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFFFFF>emit</span>, <span style=color:#FFF066>\"buy\"</span>) -- Buy\n</pre>"
  }, out, _componentDef, "76");

  out.w("<blockquote class=note><p><strong>Note:</strong> Context <em>couples</em> tags together and can limit reuse of components.</p></blockquote><h3 id=when-to-use-a-redux-like-pattern><a name=when-to-use-a-redux-like-pattern class=anchor href=#when-to-use-a-redux-like-pattern><span class=header-link></span></a>When to use a Redux like pattern</h3><p>Often the above two approaches are enough, and many people <a href=https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367>jump to this part far too quickly</a>. Like <code>&lt;context&gt;</code>, often anything stored in redux is <code>global</code>. This means that it can (if abused) create components that are hard to reuse, reason about and test. However it is important to understand when a tool like <code>redux</code> is useful in any UI library.</p><p>Redux provides indirection to updating any state that it controls. This is useful if you need the following:</p><ul><li>Single state update, multiple actions (eg: logging, computed data, etc).</li><li>Time travel debugging and other <a href=https://redux.js.org/introduction/ecosystem>redux-specific tooling</a>.</li></ul>");
}, {
  t: state_marko_componentType,
  i: true
}, state_marko_component);
__webpack_require__(7589)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/styles.md


const styles_marko_componentType = "ywcg2wvN",
      styles_marko_template = (0,index_js_namespaceObject.t)(styles_marko_componentType);

/* harmony default export */ const styles = (styles_marko_template);

toc_registry.set("../../node_modules/marko/docs/styles.md", "<ul class=\"toc toc-level1\"><li><a href=\"#preprocessors\">Preprocessors</a></li></ul>");
const styles_title = "Styles";



const styles_marko_component = {};
styles_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=styles><a name=styles class=anchor href=#styles><span class=header-link></span></a>Styles</h1><p>Both HTML and Marko provide support for <code>&lt;style&gt;</code> tags. However, Marko also provides a special syntax (called a style <em>block</em>) which adds support for CSS preprocessors and acts as a hint to bundlers to extract this static css from your templates into a common bundle.</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>style</span> {\n    <span style=color:#FF4185>div</span> {\n        <span style=color:#66D9EF>color</span>: <span style=color:#66D9EF>green</span>;\n    }\n}\n\n&lt;<span style=color:#FF4185>div</span>>Hello World&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>style</span> {\n\n    <span style=color:#FF4185>div</span> {\n        <span style=color:#66D9EF>color</span>: <span style=color:#66D9EF>green</span>;\n    }\n\n}\n\n<span style=color:#FF4185>div</span> -- Hello World\n</pre>"
  }, out, _componentDef, "7");

  out.w("<p>These blocks add global css to the page. The above example will not style just the <code>&lt;div&gt;</code> in the component, but all divs on the page. Because of this we recommend following a naming convention such as <a href=http://getbem.com/introduction/ >BEM</a>. Marko will likely provide a way to automatically scope these styles to the current component <a href=https://github.com/marko-js/marko/issues/666>in the future</a>.</p><blockquote class=note><p><strong>Note:</strong> Style blocks (unlike <code>&lt;style&gt;</code> tags) do not support <code>&#36;{placeholders}</code> and must be static.</p></blockquote><h2 id=preprocessors><a name=preprocessors class=anchor href=#preprocessors><span class=header-link></span></a>Preprocessors</h2><p>If you use a css preprocessor, you can add the extension right on <code>style</code>. This will cause your bundler of choice to run the contents of the style block through the appropriate processor.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>style</span><span style=color:#FF4185>.less</span> {\n    <span style=color:#FF4185>button</span><span style=color:#A6E22E>.primary</span> {\n        <span style=color:#66D9EF>background-color</span>: <span style=color:#FFFFFF>@primaryColor</span>;\n    }\n}\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>style</span><span style=color:#FF4185>.less</span> {\n\n    <span style=color:#FF4185>button</span><span style=color:#A6E22E>.primary</span> {\n        <span style=color:#66D9EF>background-color</span>: <span style=color:#FFFFFF>@primaryColor</span>;\n    }\n\n}\n</pre>"
  }, out, _componentDef, "22");
}, {
  t: styles_marko_componentType,
  i: true
}, styles_marko_component);
__webpack_require__(1242)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/syntax.md


const syntax_marko_componentType = "q+pKF3wQ",
      syntax_marko_template = (0,index_js_namespaceObject.t)(syntax_marko_componentType);

/* harmony default export */ const syntax = (syntax_marko_template);

toc_registry.set("../../node_modules/marko/docs/syntax.md", "<ul class=\"toc toc-level1\"><li><a href=\"#tags\">Tags</a></li><li><a href=\"#dynamic-text\">Dynamic text</a></li><li><a href=\"#attributes\">Attributes</a><ul class=\"toc toc-level2\"><li><a href=\"#complex-expressions\">Complex expressions</a></li><li><a href=\"#boolean-attributes\">Boolean attributes</a></li><li><a href=\"#dynamic-attributes\">Dynamic attributes</a></li><li><a href=\"#style-attribute\">Style attribute</a></li><li><a href=\"#class-attribute\">Class attribute</a></li><li><a href=\"#shorthand-attributes\">Shorthand attributes</a></li></ul></li><li><a href=\"#parameters\">Parameters</a></li><li><a href=\"#arguments\">Arguments</a></li><li><a href=\"#dynamic-tagname\">Dynamic tagname</a><ul class=\"toc toc-level2\"><li><a href=\"#dynamic-components\">Dynamic components</a></li><li><a href=\"#dynamic-body-content\">Dynamic body content</a></li></ul></li><li><a href=\"#attribute-tag\">Attribute Tag</a></li><li><a href=\"#inline-javascript\">Inline JavaScript</a><ul class=\"toc toc-level2\"><li><a href=\"#static-javascript\">Static JavaScript</a></li><li><a href=\"#importing-external-files\">Importing external files</a></li></ul></li><li><a href=\"#comments\">Comments</a></li></ul>");
const syntax_title = "Syntax";



const syntax_marko_component = {};
syntax_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=syntax><a name=syntax class=anchor href=#syntax><span class=header-link></span></a>Syntax</h1><p>Marko is HTML <em>re-imagined</em> as a language for building dynamic and reactive user interfaces. Just about any valid HTML is valid Marko, but Marko extends the HTML language to allow building modern applications in a declarative way.</p><blockquote class=protip><p><strong>ProTip:</strong> Marko also supports a <a href=/docs/concise/ >beautiful concise syntax</a>. If you&#39;d prefer to see the documentation using this syntax, just click the <code>switch syntax</code> button in the corner of any Marko code sample.</p></blockquote><blockquote class=note><p><strong>Note:</strong> Text at the root of a template (outside any tags) must be prefixed with the <a href=/docs/concise/#text>concise syntax&#39;s <code>--</code></a> to denote it is text. The parser starts in concise mode and would otherwise try to parse what you meant to be text as a concise tag declaration.</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>-- Root level text\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>-- Root level text\n</pre>"
  }, out, _componentDef, "16");

  out.w("</blockquote><h2 id=tags><a name=tags class=anchor href=#tags><span class=header-link></span></a>Tags</h2><p>As you might expect, Marko supports all native HTML/SVG/whatever tags and attributes. In addition to these, it also comes with a set of useful <a href=/docs/core-tags/ >core tags</a>. Beyond this, you can also build your own <a href=/docs/custom-tags/ >custom tags</a> and <a href=/docs/custom-tags/#using-tags-from-npm>install third-party tags</a> from <code>npm</code>.</p><p>All of these types of tags use the same syntax:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>my-tag-name</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>my-tag-name</span>\n</pre>"
  }, out, _componentDef, "26");

  out.w("<p>You don&#39;t need to import tags. Marko discovers them based on the folder structure\u2014similar to how you don&#39;t specify a full path when referencing a module in <code>node_modules/</code>. Marko looks in <a href=/docs/custom-tags/#how-tags-are-discovered><code>components/</code></a> by default and this directory can be configured in <a href=/docs/marko-json/ ><code>marko.json</code></a>.</p><h2 id=dynamic-text><a name=dynamic-text class=anchor href=#dynamic-text><span class=header-link></span></a>Dynamic text</h2><p>You can use placeholders (<code>&#36;{}</code>) to insert a value into the template: Placeholders accept any JavaScript expression and the result of the expression will be inserted into the HTML output:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span>>\n    Hello <span style=color:#66D9EF>${</span><span style=color:#FFF066>\"world\"</span>.<span style=color:#A6E22E>toUpperCase</span>()<span style=color:#66D9EF>}</span>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span> -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFF066>\"world\"</span>.<span style=color:#A6E22E>toUpperCase</span>()<span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "38");

  out.w("<p>These values are automatically escaped so you don&#39;t accidentally insert malicious code. If you do need to pass unescaped HTML, you can use <code>&#36;!{}</code>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span>>\n    Hello <span style=color:#66D9EF>$!{</span><span style=color:#FFF066>\"&lt;b>World&lt;/b>\"</span><span style=color:#66D9EF>}</span>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span> -- Hello <span style=color:#66D9EF>$!{</span><span style=color:#FFF066>\"&lt;b>World&lt;/b>\"</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "41");

  out.w("<blockquote class=protip><p><strong>ProTip:</strong> If necessary, you can escape <code>&#36;</code> using a backslash to have it be treated as text instead of a placeholder token:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span>>\n    Placeholder example: &lt;<span style=color:#FF4185>code</span>>\\${someValue}&lt;/<span style=color:#FF4185>code</span>>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span>\n  -- Placeholder example:\n  <span style=color:#FF4185>code</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>someValue</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "46");

  out.w("</blockquote><h2 id=attributes><a name=attributes class=anchor href=#attributes><span class=header-link></span></a>Attributes</h2><p>In marko attributes are parsed as JavaScript expressions (instead of just strings).</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>myClassName</span>/>\n&lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"checkbox\"</span> <span style=color:#A6E22E>checked</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>isChecked</span>/>\n\n&lt;<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>string</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Hello\"</span>/>\n&lt;<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>number</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>1</span>/>\n&lt;<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>template-string</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>`Hello </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>/>\n&lt;<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>boolean</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>true</span>/>\n&lt;<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>array</span><span style=color:#FFFFFF>=</span>[<span style=color:#AE81FF>1</span>, <span style=color:#AE81FF>2</span>, <span style=color:#AE81FF>3</span>]/>\n&lt;<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>object</span><span style=color:#FFFFFF>=</span>{ hello: <span style=color:#FFF066>\"world\"</span> }/>\n&lt;<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>variable</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>name</span>/>\n&lt;<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>function-call</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>user</span>.<span style=color:#A6E22E>getName</span>()/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>myClassName</span>\n<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"checkbox\"</span> <span style=color:#A6E22E>checked</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>isChecked</span>\n\n<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>string</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"Hello\"</span>\n<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>number</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>1</span>\n<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>template-string</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>`Hello </span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>\n<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>boolean</span>\n<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>array</span><span style=color:#FFFFFF>=</span>[<span style=color:#AE81FF>1</span>, <span style=color:#AE81FF>2</span>, <span style=color:#AE81FF>3</span>]\n<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>object</span><span style=color:#FFFFFF>=</span>{ hello: <span style=color:#FFF066>\"world\"</span> }\n<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>variable</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>name</span>\n<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>function-call</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>user</span>.<span style=color:#A6E22E>getName</span>()\n</pre>"
  }, out, _componentDef, "51");

  out.w("<p>Attributes that are passed to a custom tag are received as it&#39;s <a href=/docs/class-components/#input><code>input</code></a>.</p><blockquote class=note><p><strong>Note:</strong> Although in most cases you won&#39;t see a difference, strings are parsed as JavaScript strings, not HTML strings. Where this comes up most often is using the <code>pattern</code> attribute with the <code>&lt;input&gt;</code> tag: you need to &quot;double escape&quot; your regex escape sequences much like you were passing a string to the <a href=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp><code>RegExp</code> constructor</a> (or you can use a literal <code>/regex/</code>).</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>pattern</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"</span><span style=color:#AE81FF>\\\\</span><span style=color:#FFF066>w+\"</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"text\"</span>/>\n&lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>pattern</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>/</span><span style=color:#AE81FF>\\w</span><span style=color:#FF4185>+</span><span style=color:#FFF066>/</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"text\"</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>input</span> <span style=color:#A6E22E>pattern</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"</span><span style=color:#AE81FF>\\\\</span><span style=color:#FFF066>w+\"</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"text\"</span>\n<span style=color:#FF4185>input</span> <span style=color:#A6E22E>pattern</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>/</span><span style=color:#AE81FF>\\w</span><span style=color:#FF4185>+</span><span style=color:#FFF066>/</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"text\"</span>\n</pre>"
  }, out, _componentDef, "64");

  out.w("<div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>pattern</span>=<span style=color:#FFF066>\"\\w+\"</span> <span style=color:#A6E22E>type</span>=<span style=color:#FFF066>\"text\"</span> />\n</pre></blockquote><h3 id=complex-expressions><a name=complex-expressions class=anchor href=#complex-expressions><span class=header-link></span></a>Complex expressions</h3><p>Any JavaScript expression is a valid attribute value, provided it meets the following criteria:</p><p><em>It does not contain any spaces</em></p><p><em>It does not contain any right angle brackets (<code>&gt;</code>)</em></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>sum</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>1</span><span style=color:#FF4185>+</span><span style=color:#AE81FF>2</span> <span style=color:#A6E22E>difference</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>3</span><span style=color:#FF4185>-</span><span style=color:#AE81FF>4</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>sum</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>1</span> <span style=color:#FF4185>+</span> <span style=color:#AE81FF>2</span> <span style=color:#A6E22E>difference</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>3</span> <span style=color:#FF4185>-</span> <span style=color:#AE81FF>4</span>\n</pre>"
  }, out, _componentDef, "75");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>sum</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>1</span><span style=color:#FF4185>+</span><span style=color:#AE81FF>2</span> <span style=color:#A6E22E>difference</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>3</span><span style=color:#FF4185>-</span><span style=color:#AE81FF>4</span>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>sum</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>1</span> <span style=color:#FF4185>+</span> <span style=color:#AE81FF>2</span> <span style=color:#A6E22E>difference</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>3</span> <span style=color:#FF4185>-</span> <span style=color:#AE81FF>4</span>\n</pre>"
  }, out, _componentDef, "76");

  out.w("<p><em>Spaces and <code>&gt;</code> are contained within matching <code>()</code>, <code>[]</code>, <code>{}</code>, strings and regexps</em></p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>sum</span><span style=color:#FFFFFF>=</span>(<span style=color:#AE81FF>1</span> <span style=color:#FF4185>+</span> <span style=color:#AE81FF>2</span>) <span style=color:#A6E22E>difference</span><span style=color:#FFFFFF>=</span>(<span style=color:#AE81FF>3</span> <span style=color:#FF4185>-</span> <span style=color:#AE81FF>4</span>) <span style=color:#A6E22E>greater</span><span style=color:#FFFFFF>=</span>(<span style=color:#AE81FF>1</span> <span style=color:#FF4185>></span> <span style=color:#AE81FF>2</span>)/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>sum</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>1</span> <span style=color:#FF4185>+</span> <span style=color:#AE81FF>2</span> <span style=color:#A6E22E>difference</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>3</span> <span style=color:#FF4185>-</span> <span style=color:#AE81FF>4</span> <span style=color:#A6E22E>greater</span><span style=color:#FFFFFF>=</span>(<span style=color:#AE81FF>1</span> <span style=color:#FF4185>></span> <span style=color:#AE81FF>2</span>)\n</pre>"
  }, out, _componentDef, "83");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>sum</span><span style=color:#FFFFFF>=</span>(<span style=color:#AE81FF>1</span> <span style=color:#FF4185>+</span> <span style=color:#AE81FF>2</span>) <span style=color:#A6E22E>difference</span><span style=color:#FFFFFF>=</span>(<span style=color:#AE81FF>3</span> <span style=color:#FF4185>-</span> <span style=color:#AE81FF>4</span>) <span style=color:#A6E22E>greater</span><span style=color:#FFFFFF>=</span>(<span style=color:#AE81FF>1</span> <span style=color:#FF4185>></span> <span style=color:#AE81FF>2</span>)\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>custom-tag</span> <span style=color:#A6E22E>sum</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>1</span> <span style=color:#FF4185>+</span> <span style=color:#AE81FF>2</span> <span style=color:#A6E22E>difference</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>3</span> <span style=color:#FF4185>-</span> <span style=color:#AE81FF>4</span> <span style=color:#A6E22E>greater</span><span style=color:#FFFFFF>=</span>(<span style=color:#AE81FF>1</span> <span style=color:#FF4185>></span> <span style=color:#AE81FF>2</span>)\n</pre>"
  }, out, _componentDef, "84");

  out.w("<h3 id=boolean-attributes><a name=boolean-attributes class=anchor href=#boolean-attributes><span class=header-link></span></a>Boolean attributes</h3><p>HTML defines the following rules for <a href=https://www.w3.org/TR/2008/WD-html5-20080610/semantics.html#boolean>boolean attributes</a>:</p><blockquote class=null><p>The presence of a boolean attribute on an element represents the true value, and the absence of the attribute represents the false value.</p></blockquote><p>In Marko when an attribute value evaluates to <code>false</code>, <code>null</code>, or <code>undefined</code>, the attribute is not included in the output. If an attribute value is <code>true</code>, only the attribute name is included in the output.</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"checkbox\"</span> <span style=color:#A6E22E>checked</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>true</span>>\n&lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"checkbox\"</span> <span style=color:#A6E22E>checked</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>false</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"checkbox\"</span> <span style=color:#A6E22E>checked</span>\n<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"checkbox\"</span> <span style=color:#A6E22E>checked</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>false</span>\n</pre>"
  }, out, _componentDef, "98");

  out.w("<p>Renders the following HTML:</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span>=<span style=color:#FFF066>\"checkbox\"</span> <span style=color:#A6E22E>checked</span> /> &lt;<span style=color:#FF4185>input</span> <span style=color:#A6E22E>type</span>=<span style=color:#FFF066>\"checkbox\"</span> />\n</pre><p>Similarly, when only an attribute name is defined, it is equivalent to specifying the attribute with a value of <code>true</code>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- These are equivalent --></span>\n&lt;<span style=color:#FF4185>custom-menu</span> <span style=color:#A6E22E>expanded</span>/>\n&lt;<span style=color:#FF4185>custom-menu</span> <span style=color:#A6E22E>expanded</span><span style=color:#FFFFFF>=</span><span style=color:#AE81FF>true</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- These are equivalent --></span>\n<span style=color:#FF4185>custom-menu</span> <span style=color:#A6E22E>expanded</span>\n<span style=color:#FF4185>custom-menu</span> <span style=color:#A6E22E>expanded</span>\n</pre>"
  }, out, _componentDef, "103");

  out.w("<blockquote class=protip><p><strong>ProTip:</strong> You can take advantage of the way Marko handles boolean attributes to conditionally render attributes:</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span>(<span style=color:#FFFFFF>active</span> <span style=color:#FF4185>&&</span> <span style=color:#FFF066>\"tab-active\"</span>)>Hello&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>active</span> <span style=color:#FF4185>&&</span> <span style=color:#FFF066>\"tab-active\"</span> -- Hello\n</pre>"
  }, out, _componentDef, "108");

  out.w("<p>With a value of <code>true</code> for <code>active</code>, the output would be the following:</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"tab-active\"</span>>Hello&lt;/<span style=color:#FF4185>div</span>>\n</pre><p>With a value of <code>false</code> for <code>active</code>, the output would be the following:</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span>>Hello&lt;/<span style=color:#FF4185>div</span>>\n</pre></blockquote><h3 id=dynamic-attributes><a name=dynamic-attributes class=anchor href=#dynamic-attributes><span class=header-link></span></a>Dynamic attributes</h3><p>The spread syntax (<code>...</code>) can be used to merge in an object as attributes to a tag:</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>a</span> <span style=color:#FF4185>...</span><span style=color:#FFFFFF>attrs</span> <span style=color:#A6E22E>target</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"_blank\"</span>>eBay&lt;/<span style=color:#FF4185>a</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>a</span> <span style=color:#FF4185>...</span><span style=color:#FFFFFF>attrs</span> <span style=color:#A6E22E>target</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"_blank\"</span> -- eBay\n</pre>"
  }, out, _componentDef, "123");

  out.w("<p>With <code>attrs</code> as the following value:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>{\n    class: <span style=color:#FFF066>\"active\"</span>,\n    href: <span style=color:#FFF066>\"https://ebay.com/\"</span>\n}\n</pre><p>would output the following HTML:</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>a</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"active\"</span> <span style=color:#A6E22E>href</span>=<span style=color:#FFF066>\"https://ebay.com/\"</span> <span style=color:#A6E22E>target</span>=<span style=color:#FFF066>\"_blank\"</span>>eBay&lt;/<span style=color:#FF4185>a</span>>\n</pre><blockquote class=protip><p><strong>ProTip:</strong> With spread attributes order matters. You can take advantage of this to implement both default attributes, and enforced attributes.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>custom-tag</span> <span style=color:#FF4185>...</span><span style=color:#FFFFFF>defaults</span> <span style=color:#FF4185>...</span><span style=color:#FFFFFF>userSupplied</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"overridden\"</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>custom-tag</span><span style=color:#A6E22E>.overridden</span> <span style=color:#FF4185>...</span><span style=color:#FFFFFF>defaults</span> <span style=color:#FF4185>...</span><span style=color:#FFFFFF>userSupplied</span>\n</pre>"
  }, out, _componentDef, "131");

  out.w("</blockquote><blockquote class=protip><p><strong>ProTip:</strong> You can provide <code>undefined</code> to a spread attribute which will output nothing.</p></blockquote><h3 id=style-attribute><a name=style-attribute class=anchor href=#style-attribute><span class=header-link></span></a>Style attribute</h3><p>You can pass a string as the value of <code>style</code> just as you would in HTML, in addition Marko supports passing an object or array as the value of the <code>style</code> attribute:</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- string: --></span>\n&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"display:block;margin-right:16px\"</span>/>\n\n<span style=color:#8F8F9E>&lt;!-- object: --></span>\n&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{ display: <span style=color:#FFF066>\"block\"</span>, color: <span style=color:#AE81FF>false</span>, marginRight: <span style=color:#AE81FF>16</span> }/>\n\n<span style=color:#8F8F9E>&lt;!-- array: --></span>\n&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>[<span style=color:#FFF066>\"display:block\"</span>, <span style=color:#AE81FF>null</span>, { marginRight: <span style=color:#AE81FF>16</span> }]/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- string: --></span>\n<span style=color:#FF4185>div</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"display:block;margin-right:16px\"</span>\n<span style=color:#8F8F9E>&lt;!-- object: --></span>\n<span style=color:#FF4185>div</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{ display: <span style=color:#FFF066>\"block\"</span>, color: <span style=color:#AE81FF>false</span>, marginRight: <span style=color:#AE81FF>16</span> }\n<span style=color:#8F8F9E>&lt;!-- array: --></span>\n<span style=color:#FF4185>div</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>[<span style=color:#FFF066>\"display:block\"</span>, <span style=color:#AE81FF>null</span>, { marginRight: <span style=color:#AE81FF>16</span> }]\n</pre>"
  }, out, _componentDef, "143");

  out.w("<p>In all cases, the output will be the same:</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>style</span>=<span style=color:#FFF066>\"</span><span style=color:#FFF066>display:block;margin-right:16px;</span><span style=color:#FFF066>\"</span>>&lt;/<span style=color:#FF4185>div</span>>\n</pre><h3 id=class-attribute><a name=class-attribute class=anchor href=#class-attribute><span class=header-link></span></a>Class attribute</h3><p>The <code>class</code> attribute also supports receiving an object or array (in addition to a string) as shown below:</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- string: --></span>\n&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"a c\"</span>/>\n\n<span style=color:#8F8F9E>&lt;!-- object: --></span>\n&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span>{ a:<span style=color:#AE81FF>true</span>, b:<span style=color:#AE81FF>false</span>, c:<span style=color:#AE81FF>true</span> }/>\n\n<span style=color:#8F8F9E>&lt;!-- array: --></span>\n&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span>[<span style=color:#FFF066>\"a\"</span>, <span style=color:#AE81FF>null</span>, { c:<span style=color:#AE81FF>true</span> }]/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- string: --></span>\n<span style=color:#FF4185>div</span><span style=color:#A6E22E>.a.c</span>\n<span style=color:#8F8F9E>&lt;!-- object: --></span>\n<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span>{ a: <span style=color:#AE81FF>true</span>, b: <span style=color:#AE81FF>false</span>, c: <span style=color:#AE81FF>true</span> }\n<span style=color:#8F8F9E>&lt;!-- array: --></span>\n<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span>[<span style=color:#FFF066>\"a\"</span>, <span style=color:#AE81FF>null</span>, { c: <span style=color:#AE81FF>true</span> }]\n</pre>"
  }, out, _componentDef, "152");

  out.w("<p>In all cases, the output will be the same:</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"a c\"</span>>&lt;/<span style=color:#FF4185>div</span>>\n</pre><h3 id=shorthand-attributes><a name=shorthand-attributes class=anchor href=#shorthand-attributes><span class=header-link></span></a>Shorthand attributes</h3><p>Marko provides a shorthand for declaring classes and ids on an element:</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.my-class</span>/>\n&lt;<span style=color:#FF4185>span</span><span style=color:#A6E22E>#my-id</span>/>\n&lt;<span style=color:#FF4185>button</span><span style=color:#A6E22E>#submit.primary.large</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span><span style=color:#A6E22E>.my-class</span>\n<span style=color:#FF4185>span</span><span style=color:#A6E22E>#my-id</span>\n<span style=color:#FF4185>button</span><span style=color:#A6E22E>.primary.large#submit</span>\n</pre>"
  }, out, _componentDef, "160");

  out.w("<p>Renders the following HTML:</p><p><em>HTML Output:</em></p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"my-class\"</span>>&lt;/<span style=color:#FF4185>div</span>>\n&lt;<span style=color:#FF4185>span</span> <span style=color:#A6E22E>id</span>=<span style=color:#FFF066>\"my-id\"</span>>&lt;/<span style=color:#FF4185>span</span>>\n&lt;<span style=color:#FF4185>button</span> <span style=color:#A6E22E>id</span>=<span style=color:#FFF066>\"submit\"</span> <span style=color:#A6E22E>class</span>=<span style=color:#FFF066>\"primary large\"</span>>&lt;/<span style=color:#FF4185>button</span>>\n</pre><h2 id=parameters><a name=parameters class=anchor href=#parameters><span class=header-link></span></a>Parameters</h2><p>When a tag renders its body content, it may provide data which can be received by defining parameters after the tagname. Parameters are available to the tag&#39;s body content.</p><p>This is a powerful feature that allows components to provide functionality and data while giving you full control over what gets rendered.</p><p>In the following example, <code>&lt;mouse&gt;</code> provides a parameter which we have named <code>position</code>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>mouse</span>|<span style=color:#FFAC4D>position</span>|>\n   The mouse is at <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>position</span>.<span style=color:#FFFFFF>x</span><span style=color:#66D9EF>}</span>, <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>position</span>.<span style=color:#FFFFFF>y</span><span style=color:#66D9EF>}</span>!\n&lt;/<span style=color:#FF4185>mouse</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>mouse</span>|<span style=color:#FFAC4D>position</span>| -- The mouse is at <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>position</span>.<span style=color:#FFFFFF>x</span><span style=color:#66D9EF>}</span>, <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>position</span>.<span style=color:#FFFFFF>y</span><span style=color:#66D9EF>}</span>!\n</pre>"
  }, out, _componentDef, "172");

  out.w("<blockquote class=null><p><code>&lt;mouse&gt;</code> would <a href=/docs/body-content/ >render its body</a> and provide the position similar to this: <code>&lt;&#36;{input.renderBody} x=0 y=0/&gt;</code>.</p></blockquote><blockquote class=protip><p><strong>ProTip:</strong> Tag <code>|parameters|</code> are treated as regular JavaScript function parameters. This means you can destructure, set default values, etc.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>mouse</span>|{ <span style=color:#FFAC4D>x</span>, <span style=color:#FFAC4D>y</span> }|>\n  The mouse is at <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>x</span><span style=color:#66D9EF>}</span>, <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>y</span><span style=color:#66D9EF>}</span>!\n&lt;/<span style=color:#FF4185>mouse</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>mouse</span>|{ <span style=color:#FFAC4D>x</span>, <span style=color:#FFAC4D>y</span> }| -- The mouse is at <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>x</span><span style=color:#66D9EF>}</span>, <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>y</span><span style=color:#66D9EF>}</span>!\n</pre>"
  }, out, _componentDef, "182");

  out.w("</blockquote><blockquote class=note><p><strong>Note:</strong> Parameters are not available to attributes, only to the tag body.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>mouse</span>|<span style=color:#FFAC4D>position</span>| <span style=color:#A6E22E>something</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>position</span>>\n  ReferenceError when setting the \"something\" attribute\n&lt;/<span style=color:#FF4185>mouse</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>mouse</span>|<span style=color:#FFAC4D>position</span>| <span style=color:#A6E22E>something</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>position</span>\n  -- ReferenceError when setting the \"something\" attribute\n</pre>"
  }, out, _componentDef, "186");

  out.w("</blockquote><p>Parameters are used by some of Marko&#39;s <a href=/docs/core-tags/ >core tags</a> like the <a href=/docs/core-tags/#for><code>&lt;for&gt;</code></a> and <a href=/docs/core-tags/#await><code>&lt;await&gt;</code></a> tags.</p><h2 id=arguments><a name=arguments class=anchor href=#arguments><span class=header-link></span></a>Arguments</h2><p>Some tags and attributes accept javascript style <code>arguments</code>. Arguments are denoted by parenthesis following the tag or attribute name. Arguments provide a way to pass unnamed data to a tag.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>if</span>(<span style=color:#AE81FF>true</span>)>\n    &lt;<span style=color:#FF4185>strong</span>>Marko is awesome&lt;/<span style=color:#FF4185>strong</span>>\n&lt;/<span style=color:#FF4185>if</span>>\n\n&lt;<span style=color:#FF4185>h1</span> <span style=color:#A6E22E>body-only-if</span>(<span style=color:#FFFFFF>skipHeading</span>)>\n    Conditional display heading, but always show content!\n&lt;/<span style=color:#FF4185>h1</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>if</span>(<span style=color:#AE81FF>true</span>)\n  <span style=color:#FF4185>strong</span> -- Marko is awesome\n\n<span style=color:#FF4185>h1</span> <span style=color:#A6E22E>body-only-if</span>(<span style=color:#FFFFFF>skipHeading</span>)\n  -- Conditional display heading, but always show content!\n</pre>"
  }, out, _componentDef, "198");

  out.w("<p>Arguments are used by some of Marko&#39;s <a href=/docs/core-tags/ >core tags</a> like the <a href=/docs/core-tags/#if-else-if-else><code>&lt;if&gt;</code></a> tag and <a href=/docs/core-tags/#body-only-if><code>body-only-if</code></a> attribute displayed above.</p><p>Previously you could also use them in your own <a href=/docs/custom-tags/ >custom tags</a> however it is now recommended to use <a href=#dynamic-attributes>dynamic attributes</a>.</p><h2 id=dynamic-tagname><a name=dynamic-tagname class=anchor href=#dynamic-tagname><span class=header-link></span></a>Dynamic tagname</h2><p>The <code>&lt;&#36;{dynamic}&gt;</code> syntax is used to render a tag or component that isn&#39;t determined until runtime. It can also be used within a <a href=/docs/custom-tags/ >custom tag</a> to render body content that was passed to that tag.</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>href</span> <span style=color:#FF4185>?</span> <span style=color:#FFF066>'a'</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>'button'</span><span style=color:#66D9EF>}</span> <span style=color:#A6E22E>href</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>href</span>>\n    Click me!\n&lt;/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>href</span> <span style=color:#FF4185>?</span> <span style=color:#FFF066>\"a\"</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>\"button\"</span><span style=color:#66D9EF>}</span> <span style=color:#A6E22E>href</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>href</span> -- Click me!\n</pre>"
  }, out, _componentDef, "215");

  out.w("<p>With <code>href</code> as <code>https://ebay.com</code> would output the following HTML:</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>a</span> <span style=color:#A6E22E>href</span>=<span style=color:#FFF066>\"https://ebay.com\"</span>>Click me!&lt;/<span style=color:#FF4185>a</span>>\n</pre><p>And with <code>href</code> as <code>undefined</code> would output the following HTML:</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>button</span>>Click me!&lt;/<span style=color:#FF4185>button</span>>\n</pre><p>As a shorthand if there is a variable in scope and <a href=#how-tags-are-discovered>no other matching tag is discovered</a> the wrapping <code>&#36;{}</code> is unnecessary.</p><p>For example the following are equivalent:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>MyTag</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>href</span> <span style=color:#FF4185>?</span> <span style=color:#FFF066>'a'</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>'button'</span>;\n&lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>MyTag</span><span style=color:#66D9EF>}</span>/>\n&lt;<span style=color:#FF4185>MyTag</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>MyTag</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>href</span> <span style=color:#FF4185>?</span> <span style=color:#FFF066>\"a\"</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>\"button\"</span>;\n<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>MyTag</span><span style=color:#66D9EF>}</span>\n<span style=color:#FF4185>MyTag</span>\n</pre>"
  }, out, _componentDef, "228");

  out.w("<blockquote class=protip><p><strong>ProTip:</strong> If you find that you have a wrapper element that is conditional, but whose body should always be rendered then you can use a null dynamic tag. For example, to only render a wrapping <code>&lt;a&gt;</code> tag if there is a valid URL then you could do the following:</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>linkUrl</span> <span style=color:#FF4185>?</span> <span style=color:#FFF066>\"a\"</span> <span style=color:#FF4185>:</span> <span style=color:#AE81FF>null</span><span style=color:#66D9EF>}</span> <span style=color:#A6E22E>href</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>linkUrl</span> >\n   Some body content\n&lt;/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>linkUrl</span> <span style=color:#FF4185>?</span> <span style=color:#FFF066>\"a\"</span> <span style=color:#FF4185>:</span> <span style=color:#AE81FF>null</span><span style=color:#66D9EF>}</span> <span style=color:#A6E22E>href</span><span style=color:#FFFFFF>=</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>linkUrl</span> -- Some body content\n</pre>"
  }, out, _componentDef, "234");

  out.w("<p>Given a value of <code>&quot;http://localhost/&quot;</code> for the <code>input.linkUrl</code> variable: , the output would be the following:</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>a</span> <span style=color:#A6E22E>href</span>=<span style=color:#FFF066>\"http://localhost/\"</span>> Some body content &lt;/<span style=color:#FF4185>a</span>>\n</pre><p>Given a value of <code>undefined</code> for the <code>input.linkUrl</code> variable: , the output would be the following:</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>Some body content\n</pre></blockquote><h3 id=dynamic-components><a name=dynamic-components class=anchor href=#dynamic-components><span class=header-link></span></a>Dynamic components</h3><p>Instead of just strings, the dynamic tagname can also be a component:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>componentA</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"&lt;component-a>\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>componentB</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"&lt;component-b>\"</span>;\n\n&lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>useA</span> <span style=color:#FF4185>?</span> <span style=color:#FFFFFF>componentA</span> <span style=color:#FF4185>:</span> <span style=color:#FFFFFF>componentB</span><span style=color:#66D9EF>}</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>componentA</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"&lt;component-a>\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>componentB</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"&lt;component-b>\"</span>;\n\n<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>useA</span> <span style=color:#FF4185>?</span> <span style=color:#FFFFFF>componentA</span> <span style=color:#FF4185>:</span> <span style=color:#FFFFFF>componentB</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "247");

  out.w("<blockquote class=protip><p><strong>ProTip:</strong> You can also switch between a normal HTML tag and a component:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>FancyButton</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"&lt;fancy-button>\"</span>;\n\n&lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>isFancy</span> <span style=color:#FF4185>?</span> <span style=color:#FFFFFF>FancyButton</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>'button'</span><span style=color:#66D9EF>}</span>>\n    Button text\n&lt;/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>FancyButton</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"&lt;fancy-button>\"</span>;\n\n<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>isFancy</span> <span style=color:#FF4185>?</span> <span style=color:#FFFFFF>FancyButton</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>\"button\"</span><span style=color:#66D9EF>}</span> -- Button text\n</pre>"
  }, out, _componentDef, "251");

  out.w("</blockquote><blockquote class=note><p><strong>Note:</strong> You cannot reference a Marko custom tag using a name string:</p><div class=code-block-filename>Marko Source</div>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>isFancy</span> <span style=color:#FF4185>?</span> <span style=color:#FFF066>'fancy-button'</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>'button'</span><span style=color:#66D9EF>}</span>>\n    Button text\n&lt;/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>isFancy</span> <span style=color:#FF4185>?</span> <span style=color:#FFF066>\"fancy-button\"</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>\"button\"</span><span style=color:#66D9EF>}</span> -- Button text\n</pre>"
  }, out, _componentDef, "256");

  out.w("<p>With <code>isFancy</code> as <code>true</code> would output the following HTML:</p><div class=code-block-filename>HTML Output</div><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>fancy-button</span>>Button text&lt;/<span style=color:#FF4185>fancy-button</span>>\n</pre></blockquote><h3 id=dynamic-body-content><a name=dynamic-body-content class=anchor href=#dynamic-body-content><span class=header-link></span></a>Dynamic body content</h3><p>When a custom tag receives <a href=/docs/body-content/ >body content</a>, it is passed as a <code>renderBody</code> property. To render this content you can pass the <code>renderBody</code> as the dynamic tagname.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>class</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"container\"</span>>\n    &lt;<span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span>/>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span><span style=color:#A6E22E>.container</span>\n  <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>renderBody</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "268");

  out.w("<h2 id=attribute-tag><a name=attribute-tag class=anchor href=#attribute-tag><span class=header-link></span></a>Attribute Tag</h2><p>As the name implies, <code>&lt;@attribute-tags&gt;</code> are special attributes that take the form of tags. They allow you to pass named body sections to a <a href=/docs/custom-tags/ >custom tag</a>.</p><p>The core <code>&lt;await&gt;</code> tag allows you to pass multiple body sections that it will conditionally render based on the state of the promise.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>await</span>(<span style=color:#FFFFFF>somePromise</span>)>\n    &lt;<span style=color:#A6E22E>@then</span>|<span style=color:#FFAC4D>result</span>|>\n        The promise resolved: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>result</span><span style=color:#66D9EF>}</span>\n    &lt;/<span style=color:#A6E22E>@then</span>>\n    &lt;<span style=color:#A6E22E>@catch</span>|<span style=color:#FFAC4D>error</span>|>\n        The promise rejected: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>error</span>.<span style=color:#FFFFFF>message</span><span style=color:#66D9EF>}</span>\n    &lt;/<span style=color:#A6E22E>@catch</span>>\n&lt;/<span style=color:#FF4185>await</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>await</span>(<span style=color:#FFFFFF>somePromise</span>)\n  <span style=color:#A6E22E>@then</span>|<span style=color:#FFAC4D>result</span>| -- The promise resolved: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>result</span><span style=color:#66D9EF>}</span>\n  <span style=color:#A6E22E>@catch</span>|<span style=color:#FFAC4D>error</span>| -- The promise rejected: <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>error</span>.<span style=color:#FFFFFF>message</span><span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "277");

  out.w("<p>These body sections are also commonly used to create layouts:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>page-layout</span>>\n    &lt;<span style=color:#A6E22E>@heading</span>>\n        &lt;<span style=color:#FF4185>h1</span>>Hello&lt;/<span style=color:#FF4185>h1</span>>\n    &lt;/<span style=color:#A6E22E>@heading</span>>\n    &lt;<span style=color:#A6E22E>@body</span>>\n        &lt;<span style=color:#FF4185>p</span>>Lorem ipsum....&lt;/<span style=color:#FF4185>p</span>>\n    &lt;/<span style=color:#A6E22E>@body</span>>\n&lt;/<span style=color:#FF4185>page-layout</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>page-layout</span>\n  <span style=color:#A6E22E>@heading</span>\n    <span style=color:#FF4185>h1</span> -- Hello\n  <span style=color:#A6E22E>@body</span>\n    <span style=color:#FF4185>p</span> -- Lorem ipsum....\n</pre>"
  }, out, _componentDef, "279");

  out.w("<p>These tags are passed to the custom tag as objects with a <code>renderBody</code>, it can then <a href=/docs/body-content/ >render its body content</a>.</p><blockquote class=note><p><strong>Note:</strong> Attribute tags can have their own parameters, but like attributes, they cannot access the parameters of their parent tag:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>list</span>|<span style=color:#FFAC4D>item</span>|>\n  <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>item</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n  &lt;<span style=color:#A6E22E>@separator</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>item</span><span style=color:#66D9EF>}</span> (oops, ReferenceError)&lt;/<span style=color:#A6E22E>@separator</span>>\n&lt;/<span style=color:#FF4185>list</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>list</span>|<span style=color:#FFAC4D>item</span>|\n  -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>item</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n  <span style=color:#A6E22E>@separator</span> -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>item</span><span style=color:#66D9EF>}</span> (oops, ReferenceError)\n</pre>"
  }, out, _componentDef, "286");

  out.w("</blockquote><h2 id=inline-javascript><a name=inline-javascript class=anchor href=#inline-javascript><span class=header-link></span></a>Inline JavaScript</h2><p>To execute JavaScript in your template you can insert a Javascript statement using the <code>&#36; &lt;code&gt;</code> syntax.</p><p>A line that starts with a <code>&#36;</code> followed by a space will execute the code that follows.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>name</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>\"World\"</span>;\n\n&lt;<span style=color:#FF4185>div</span>>\n    Hello, <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n    <span style=color:#FF4185>$</span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>\"The value rendered was\"</span>, <span style=color:#FFFFFF>name</span>);\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>name</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>\"World\"</span>;\n\n<span style=color:#FF4185>div</span>\n  -- Hello, <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>\n  <span style=color:#FF4185>$</span> <span style=color:#FFFFFF>console</span>.<span style=color:#A6E22E>log</span>(<span style=color:#FFF066>\"The value rendered was\"</span>, <span style=color:#FFFFFF>name</span>);\n</pre>"
  }, out, _componentDef, "294");

  out.w("<p>A statement may continue onto subsequent lines if new lines are bounded by <code>{}</code>, <code>[]</code>, <code>()</code>, <code>``</code>, or <code>/**/</code>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>person</span> <span style=color:#FFFFFF>=</span> {\n    name: <span style=color:#FFF066>\"Frank\"</span>,\n    age: <span style=color:#AE81FF>32</span>\n};\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>person</span> <span style=color:#FFFFFF>=</span> {\n    name: <span style=color:#FFF066>\"Frank\"</span>,\n    age: <span style=color:#AE81FF>32</span>,\n  };\n}\n</pre>"
  }, out, _componentDef, "301");

  out.w("<p>Multiple statements or an unbounded statement may be used by wrapping the statement(s) in a block:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> {\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>bgColor</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>getRandomColor</span>();\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>textColor</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>isLight</span>(<span style=color:#FFFFFF>bgColor</span>)\n        <span style=color:#FF4185>?</span> <span style=color:#FFF066>\"black\"</span>\n        <span style=color:#FF4185>:</span> <span style=color:#FFF066>\"white\"</span>;\n}\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>bgColor</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>getRandomColor</span>();\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>textColor</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>isLight</span>(<span style=color:#FFFFFF>bgColor</span>) <span style=color:#FF4185>?</span> <span style=color:#FFF066>\"black\"</span> <span style=color:#FF4185>:</span> <span style=color:#FFF066>\"white\"</span>;\n}\n</pre>"
  }, out, _componentDef, "303");

  out.w("<blockquote class=protip><p><strong>ProTip:</strong> Any JavaScript statement can be used here, even <code>debugger</code>:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span>>\n    <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>textColor</span><span style=color:#66D9EF>}</span>\n    <span style=color:#FF4185>$</span> <span style=color:#FF4185>debugger</span>; <span style=color:#8F8F9E>// Quickly debug `textColor`</span>\n&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span>\n  -- <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>textColor</span><span style=color:#66D9EF>}</span>\n  <span style=color:#FF4185>$</span> <span style=color:#FF4185>debugger</span>;\n</pre>"
  }, out, _componentDef, "308");

  out.w("</blockquote><blockquote class=protip><p><strong>ProTip:</strong> If necessary, you can escape <code>&#36;</code> using a backslash to have it be treated as text instead of a placeholder token:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>p</span>>You can run JS in a Marko template like this:&lt;/<span style=color:#FF4185>p</span>>\n&lt;<span style=color:#FF4185>code</span>>\n    \\$ var num = 123;\n&lt;/<span style=color:#FF4185>code</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>p</span> -- You can run JS in a Marko template like this:\n<span style=color:#FF4185>code</span> -- \\\\$ var num = 123;\n</pre>"
  }, out, _componentDef, "313");

  out.w("</blockquote><blockquote class=protip><p><strong>ProTip:</strong> If you find yourself writing a lot of inline JS, consider moving it out to an external file and then <a href=#importing-external-files><code>import</code></a> it.</p></blockquote><h3 id=static-javascript><a name=static-javascript class=anchor href=#static-javascript><span class=header-link></span></a>Static JavaScript</h3><p>Inline JavaScript will run each time your template is rendered, but the JavaScript code that follows <code>static</code> will only run once when the template is loaded. It must be declared at the top level and does not have access to values passed in at render time.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>static</span> <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>count</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>0</span>;\n<span style=color:#FF4185>static</span> <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>formatter</span> <span style=color:#FFFFFF>=</span> <span style=color:#FF4185>new</span> <span style=color:#A6E22E>Formatter</span>();\n\n<span style=color:#FF4185>static</span> <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>sum</span>(<span style=color:#FFAC4D>a</span>, <span style=color:#FFAC4D>b</span>) {\n    <span style=color:#FF4185>return</span> <span style=color:#FFFFFF>a</span> <span style=color:#FF4185>+</span> <span style=color:#FFFFFF>b</span>;\n};\n\n&lt;<span style=color:#FF4185>div</span>><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>formatter</span>.<span style=color:#A6E22E>format</span>(<span style=color:#A6E22E>sum</span>(<span style=color:#AE81FF>2</span>, <span style=color:#AE81FF>3</span>))<span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>div</span>>\n</pre><p>Like inline Javascript, multiple statements or an unbounded statement may be used by wrapping the statement(s) in a block:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>static</span> {\n    <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>base</span> <span style=color:#FFFFFF>=</span> <span style=color:#AE81FF>2</span>;\n    <span style=color:#66D9EF>function</span> <span style=color:#A6E22E>sum</span>(<span style=color:#FFAC4D>a</span>, <span style=color:#FFAC4D>b</span>) {\n        <span style=color:#FF4185>return</span> <span style=color:#FFFFFF>base</span> <span style=color:#FF4185>+</span> <span style=color:#FFFFFF>a</span> <span style=color:#FF4185>+</span> <span style=color:#FFFFFF>b</span>;\n    };\n}\n</pre><h3 id=importing-external-files><a name=importing-external-files class=anchor href=#importing-external-files><span class=header-link></span></a>Importing external files</h3><p>The <code>import</code> statement is used to access data and functions from external files. It follows the same syntax as the <a href=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import>JavaScript <code>import</code> statement</a>.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>sum</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>'./utils/sum'</span>;\n&lt;<span style=color:#FF4185>div</span>>The sum of 2 + 3 is <span style=color:#66D9EF>${</span><span style=color:#A6E22E>sum</span>(<span style=color:#AE81FF>2</span>, <span style=color:#AE81FF>3</span>)<span style=color:#66D9EF>}</span>&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>sum</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./utils/sum\"</span>;\n<span style=color:#FF4185>div</span> -- The sum of 2 + 3 is <span style=color:#66D9EF>${</span><span style=color:#A6E22E>sum</span>(<span style=color:#AE81FF>2</span>, <span style=color:#AE81FF>3</span>)<span style=color:#66D9EF>}</span>\n</pre>"
  }, out, _componentDef, "332");

  out.w("<p>As a shorthand you can also import components by providing it&#39;s html tag name wrapped in angle brackets, eg:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>MyComponent</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"&lt;my-component>\"</span>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>MyComponent</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"&lt;my-component>\"</span>;\n</pre>"
  }, out, _componentDef, "334");

  out.w("<p>This is especially useful with the <a href=/docs/syntax/#dynamic-tagname>dynamic tag name syntax</a> and uses the same <a href=/docs/custom-tags/#how-tags-are-discovered>component discovery</a> as if the tag was used in the template.</p><h2 id=comments><a name=comments class=anchor href=#comments><span class=header-link></span></a>Comments</h2><p>Standard HTML comments can be used and will be stripped out of the rendered output. At the top level of the template JavaScript comments (<code>// comment</code> and <code>/** comment */</code>) can also be used.</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- This is a comment that will not be rendered --></span>\n\n&lt;<span style=color:#FF4185>h1</span>>Hello&lt;/<span style=color:#FF4185>h1</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>&lt;!-- This is a comment that will not be rendered --></span>\n\n<span style=color:#FF4185>h1</span> -- Hello\n</pre>"
  }, out, _componentDef, "344");

  out.w("<p>If you would like for your HTML comment to show up in the final output then you can use the <a href=/docs/core-tags/#html-comment><code>html-comment</code> core tag</a>.</p>");
}, {
  t: syntax_marko_componentType,
  i: true
}, syntax_marko_component);
__webpack_require__(6481)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/troubleshooting-streaming.md


const troubleshooting_streaming_marko_componentType = "fEbgcR/v",
      troubleshooting_streaming_marko_template = (0,index_js_namespaceObject.t)(troubleshooting_streaming_marko_componentType);

/* harmony default export */ const troubleshooting_streaming = (troubleshooting_streaming_marko_template);

toc_registry.set("../../node_modules/marko/docs/troubleshooting-streaming.md", "<ul class=\"toc toc-level1\"><li><a href=\"#reverse-proxiesload-balancers\">Reverse proxies/load balancers</a><ul class=\"toc toc-level2\"><li><a href=\"#nginx\">NGiNX</a></li><li><a href=\"#apache\">Apache</a></li></ul></li><li><a href=\"#cdns\">CDNs</a></li><li><a href=\"#nodejs-itself\">Node.js itself</a></li></ul>");
const troubleshooting_streaming_title = "Troubleshooting HTTP Streams";

const troubleshooting_streaming_marko_component = {};
troubleshooting_streaming_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=troubleshooting-http-streams><a name=troubleshooting-http-streams class=anchor href=#troubleshooting-http-streams><span class=header-link></span></a>Troubleshooting HTTP Streams</h1><p><a href=https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding>The way Marko streams HTML</a> is old and well-supported, but default configurations and assumptions by other software can foil it. This page describes some known culprits that may buffer your Node server\u2019s output HTTP streams.</p><h2 id=reverse-proxiesload-balancers><a name=reverse-proxiesload-balancers class=anchor href=#reverse-proxiesload-balancers><span class=header-link></span></a>Reverse proxies/load balancers</h2><ul><li><p>Turn off proxy buffering, or if you can\u2019t, set the proxy buffer sizes to be reasonably small.</p></li><li><p>Make sure the \u201Cupstream\u201D HTTP version is 1.1 or higher; HTTP/1.0 and lower do not support streaming.</p></li><li><p>Some software doesn\u2019t support HTTP/2 or higher \u201Cupstream\u201D connections at all or very well \u2014 if your Node server uses HTTP/2, you may need to downgrade.</p></li><li><p>Automatic gzip/brotli compression may have their buffer sizes set too high; you can tune their buffers to be smaller for faster streaming in exchange for slightly worse compression.</p></li><li><p>Check if \u201Cupstream\u201D connections are <code>keep-alive</code>: overhead from closing and reopening connections may delay responses.</p></li></ul><h3 id=nginx><a name=nginx class=anchor href=#nginx><span class=header-link></span></a>NGiNX</h3><p>Most of NGiNX\u2019s relevant parameters are inside <a href=http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffering>its builtin <code>http_proxy</code> module</a>:</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>proxy_http_version 1.1; # 1.0 by default\nproxy_buffering off; # on by default\n</pre><h3 id=apache><a name=apache class=anchor href=#apache><span class=header-link></span></a>Apache</h3><p>Apache\u2019s default configuration works fine with streaming, but your host may have it configured differently. The relevant Apache configuration is inside <a href=https://httpd.apache.org/docs/2.4/mod/mod_proxy.html>its <code>mod_proxy</code> and <code>mod_proxy_*</code> modules</a> and their <a href=https://httpd.apache.org/docs/2.4/env.html>associated environment variables</a>.</p><h2 id=cdns><a name=cdns class=anchor href=#cdns><span class=header-link></span></a>CDNs</h2><p>Content Delivery Networks (CDNs) consider efficient streaming one of their best features, but it may be off by default or if certain features are enabled.</p><ul><li><p>For Fastly or another provider that uses VCL configuration, check <a href=https://developer.fastly.com/reference/vcl/variables/backend-response/beresp-do-stream/ >if backend responses have <code>beresp.do_stream = true</code> set</a>.</p></li><li><p>Some <a href=https://community.akamai.com/customers/s/question/0D50f00006n975d/enabling-chunked-transfer-encoding-responses>Akamai features designed to mitigate slow backends can ironically slow down fast chunked responses</a>. Try toggling off Adaptive Acceleration, Ion, mPulse, Prefetch, and/or similar performance features. Also check for the following in the configuration:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;network:http.buffer-response-v2>off&lt;/network:http.buffer-response-v2>\n</pre></li></ul><h2 id=nodejs-itself><a name=nodejs-itself class=anchor href=#nodejs-itself><span class=header-link></span></a>Node.js itself</h2><p>For extreme cases where <a href=https://github.com/marko-js/marko/pull/1641>Node streams very small HTML chunks with its built-in compression modules</a>, you may need to tweak the compressor stream settings. Here\u2019s an example with <code>createGzip</code> and its <code>Z_PARTIAL_FLUSH</code> flag:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>http</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"http\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>zlib</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"zlib\"</span>;\n\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>MarkoTemplate</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./something.marko\"</span>;\n\n<span style=color:#FFFFFF>http</span>\n  .<span style=color:#A6E22E>createServer</span>(<span style=color:#66D9EF>function</span> (<span style=color:#FFAC4D>request</span>, <span style=color:#FFAC4D>response</span>) {\n    <span style=color:#FFFFFF>response</span>.<span style=color:#A6E22E>writeHead</span>(<span style=color:#AE81FF>200</span>, { <span style=color:#FFF066>\"content-type\"</span>: <span style=color:#FFF066>\"text/html;charset=utf-8\"</span> });\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>templateStream</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>MarkoTemplate</span>.<span style=color:#A6E22E>stream</span>({});\n    <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>gzipStream</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>zlib</span>.<span style=color:#A6E22E>createGzip</span>({\n      flush: <span style=color:#FFFFFF>zlib</span>.<span style=color:#FFFFFF>constants</span>.<span style=color:#FFFFFF>Z_PARTIAL_FLUSH</span>\n    });\n    <span style=color:#FFFFFF>templateStream</span>.<span style=color:#A6E22E>pipe</span>(<span style=color:#FFFFFF>outputStream</span>).<span style=color:#A6E22E>pipe</span>(<span style=color:#FFFFFF>response</span>);\n  })\n  .<span style=color:#A6E22E>listen</span>(<span style=color:#AE81FF>80</span>);\n</pre>");
}, {
  t: troubleshooting_streaming_marko_componentType,
  i: true
}, troubleshooting_streaming_marko_component);
__webpack_require__(8431)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/vite.md


const vite_marko_componentType = "Sjlo//hj",
      vite_marko_template = (0,index_js_namespaceObject.t)(vite_marko_componentType);

/* harmony default export */ const vite = (vite_marko_template);

toc_registry.set("../../node_modules/marko/docs/vite.md", "<ul class=\"toc toc-level0\"><li><a href=\"#marko-vite\">Marko + Vite</a></li><li><a href=\"#installation\">Installation</a></li><li><a href=\"#example-config\">Example config</a></li><li><a href=\"#linked-mode\">Linked Mode</a></li><li><a href=\"#options\">Options</a><ul class=\"toc toc-level1\"><li><ul class=\"toc toc-level2\"><li><a href=\"#optionsbabelconfig\">options.babelConfig</a></li><li><a href=\"#optionsruntimeid\">options.runtimeId</a></li><li><a href=\"#optionslinked\">options.linked</a></li></ul></li></ul></li></ul>");
const vite_title = "Marko + Vite";

const vite_marko_component = {};
vite_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=marko-vite><a name=marko-vite class=anchor href=#marko-vite><span class=header-link></span></a>Marko + Vite</h1><h1 id=installation><a name=installation class=anchor href=#installation><span class=header-link></span></a>Installation</h1><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm install @marko/vite vite\n</pre><h1 id=example-config><a name=example-config class=anchor href=#example-config><span class=header-link></span></a>Example config</h1><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> { <span style=color:#FFFFFF>defineConfig</span> } <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"vite\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>marko</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@marko/vite\"</span>;\n<span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> <span style=color:#A6E22E>defineConfig</span>({\n  plugins: [<span style=color:#A6E22E>marko</span>()]\n});\n</pre><h1 id=linked-mode><a name=linked-mode class=anchor href=#linked-mode><span class=header-link></span></a>Linked Mode</h1><p>By default this plugin operates in <code>linked</code> mode (you can disabled this by passing <a href=#optionslinked><code>linked: false</code> as an option</a>). In <code>linked</code> mode the plugin automatically discovers all of the entry <code>.marko</code> files while compiling the server, and tells <code>Vite</code> which modules to load in the browser.</p><p>With this you <em>do not</em> create <code>.html</code> files for <code>Vite</code>, it&#39;s Marko all the way down! Scripts, styles and other content that <em>would have</em> been injected into the <code>.html</code> files is instead automatically injected into your <code>.marko</code> templates.</p><p>In this mode you must use the <a href=https://vitejs.dev/guide/ssr.html#setting-up-the-dev-server>Vite SSR API</a>.</p><p>Here&#39;s an example using <code>express</code>.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> { <span style=color:#FFFFFF>createServer</span> } <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"vite\"</span>;\n\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>app</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>express</span>();\n<span style=color:#66D9EF>let</span> <span style=color:#FFFFFF>loadTemplate</span>;\n\n<span style=color:#FF4185>if</span> (<span style=color:#FFFFFF>process</span>.<span style=color:#FFFFFF>env</span>.<span style=color:#FFFFFF>NODE_ENV</span> <span style=color:#FF4185>===</span> <span style=color:#FFF066>\"production\"</span>) {\n  <span style=color:#8F8F9E>// Use Vite's built asset in prod mode.</span>\n  <span style=color:#A6E22E>loadTemplate</span> <span style=color:#FFFFFF>=</span> () <span style=color:#66D9EF>=></span> <span style=color:#FF4185>import</span>(<span style=color:#FFF066>\"./dist\"</span>);\n} <span style=color:#FF4185>else</span> {\n  <span style=color:#8F8F9E>// Hookup the vite dev server.</span>\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>vite</span> <span style=color:#FFFFFF>=</span> <span style=color:#FF4185>await</span> <span style=color:#A6E22E>createViteServer</span>({\n    server: { middlewareMode: <span style=color:#AE81FF>true</span> }\n  });\n\n  <span style=color:#FFFFFF>app</span>.<span style=color:#A6E22E>use</span>(<span style=color:#FFFFFF>vite</span>.<span style=color:#FFFFFF>middlewares</span>);\n  <span style=color:#A6E22E>loadTemplate</span> <span style=color:#FFFFFF>=</span> () <span style=color:#66D9EF>=></span> <span style=color:#FFFFFF>vite</span>.<span style=color:#A6E22E>ssrLoadModule</span>(<span style=color:#FFF066>\"./template.marko\"</span>);\n}\n\n<span style=color:#FFFFFF>app</span>.<span style=color:#A6E22E>get</span>(<span style=color:#FFF066>\"/\"</span>, <span style=color:#FF4185>async</span> (<span style=color:#FFAC4D>req</span>, <span style=color:#FFAC4D>res</span>) <span style=color:#66D9EF>=></span> {\n  <span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>template</span> <span style=color:#FFFFFF>=</span> (<span style=color:#FF4185>await</span> <span style=color:#A6E22E>loadTemplate</span>()).<span style=color:#FFFFFF>default</span>;\n  <span style=color:#8F8F9E>// When the template is loaded, it will automaticall have `vite` assets inlined.</span>\n  <span style=color:#FFFFFF>template</span>.<span style=color:#A6E22E>render</span>({ hello: <span style=color:#FFF066>\"world\"</span> }, <span style=color:#FFFFFF>res</span>);\n);\n\n<span style=color:#FFFFFF>app</span>.<span style=color:#A6E22E>listen</span>(<span style=color:#AE81FF>3000</span>);\n</pre><blockquote class=null><p>For a more real world setup check out our <a href=https://github.com/marko-js/examples/tree/master/examples/vite-express>vite express</a> example app.</p></blockquote><h1 id=options><a name=options class=anchor href=#options><span class=header-link></span></a>Options</h1><h3 id=optionsbabelconfig><a name=optionsbabelconfig class=anchor href=#optionsbabelconfig><span class=header-link></span></a>options.babelConfig</h3><p>You can manually override Marko&#39;s Babel configuration by passing a <code>babelConfig</code> object to the <code>@marko/vite</code> plugin. By default Babel&#39;s regular <a href=https://babeljs.io/docs/en/config-files>config file resolution</a> will be used.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#A6E22E>marko</span>({\n  babelConfig: {\n    presets: [<span style=color:#FFF066>\"@babel/preset-env\"</span>]\n  }\n});\n</pre><h3 id=optionsruntimeid><a name=optionsruntimeid class=anchor href=#optionsruntimeid><span class=header-link></span></a>options.runtimeId</h3><p>In some cases you may want to embed multiple isolated copies of Marko on the page. Since Marko relies on some <code>window</code> properties to initialize this can cause issues. For example, by default Marko will read the server rendered hydration code from <code>window.&#36;components</code>. In Marko you can change these <code>window</code> properties by rendering with <code>{ &#36;global: { runtimeId: &quot;MY_MARKO_RUNTIME_ID&quot; } }</code> as input on the server side.</p><p>This plugin exposes a <code>runtimeId</code> option produces output that automatically sets <code>&#36;global.runtimeId</code> on the server side and initializes properly in the browser.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#A6E22E>marko</span>({ runtimeId: <span style=color:#FFF066>\"MY_MARKO_RUNTIME_ID\"</span> });\n</pre><h3 id=optionslinked><a name=optionslinked class=anchor href=#optionslinked><span class=header-link></span></a>options.linked</h3><p>Set this to <code>false</code> to opt out of <a href=#linked-mode>linked mode</a>. When this is false, the plugin will only handle resolving and transforming <code>.marko</code> files.</p>");
}, {
  t: vite_marko_componentType,
  i: true
}, vite_marko_component);
__webpack_require__(3481)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/webpack.md


const webpack_marko_componentType = "3IUkWdJg",
      webpack_marko_template = (0,index_js_namespaceObject.t)(webpack_marko_componentType);

/* harmony default export */ const webpack = (webpack_marko_template);

toc_registry.set("../../node_modules/marko/docs/webpack.md", "<ul class=\"toc toc-level0\"><li><a href=\"#marko-webpack\">Marko + Webpack</a></li><li><a href=\"#installation\">Installation</a><ul class=\"toc toc-level1\"><li><ul class=\"toc toc-level2\"><li><a href=\"#loader-markowebpackloader\">Loader: @marko/webpack/loader</a></li><li><a href=\"#plugin-markowebpackplugin\">Plugin: @marko/webpack/plugin</a></li><li><a href=\"#tag-webpack-assets\">Tag: &lt;webpack-assets&gt;</a><ul class=\"toc toc-level3\"><li><a href=\"#example-usage\">Example Usage</a></li><li><a href=\"#example-config\">Example Config</a></li></ul></li></ul></li></ul></li><li><a href=\"#example\">Example</a><ul class=\"toc toc-level1\"><li><a href=\"#babel-options-marko-5\">Babel options</a></li><li><a href=\"#multiple-client-side-compilers\">Multiple client-side compilers</a></li><li><a href=\"#multiple-copies-of-marko\">Multiple copies of Marko</a></li><li><a href=\"#dynamic-public-paths\">Dynamic public paths</a></li></ul></li></ul>");
const webpack_title = "Marko + Webpack";



const webpack_marko_component = {};
webpack_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=marko-webpack><a name=marko-webpack class=anchor href=#marko-webpack><span class=header-link></span></a>Marko + Webpack</h1><h1 id=installation><a name=installation class=anchor href=#installation><span class=header-link></span></a>Installation</h1><blockquote class=null><p><code>@marko/webpack</code> &gt;= 7 Only supports Marko 5+. For Marko 4 support use <code>@marko/webpack@6</code>.</p></blockquote><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script><pre class=highlighted style=color:#D0D0E0;background-color:#202034>npm install @marko/webpack\n</pre><h3 id=loader-markowebpackloader><a name=loader-markowebpackloader class=anchor href=#loader-markowebpackloader><span class=header-link></span></a>Loader: <code>@marko/webpack/loader</code></h3><p>The loader portion of this module can be used standalone and simply transforms your Marko templates into the appropriate JavaScript depending on your webpack target.</p><p>You can override the output by adding a <code>target</code> option to the loader of <code>target: &quot;server&quot; | &quot;browser&quot;</code>.</p><h3 id=plugin-markowebpackplugin><a name=plugin-markowebpackplugin class=anchor href=#plugin-markowebpackplugin><span class=header-link></span></a>Plugin: <code>@marko/webpack/plugin</code></h3><p>The plugin actually creates two separate webpack plugins, the <code>browser</code> plugin and the <code>server</code> plugin.</p><p>These are intended to be used in a isomorphic <a href=https://github.com/webpack/webpack/tree/master/examples/multi-compiler>webpack multi compiler</a> where you are bundling both the server and the browser. The way it works is that the server plugin is going to analyze the top level Marko components in your server and automatically communicate with the browser compiler to retrieve the assets for that template.</p><p>This plugin also analyzes the top level Marko templates and determines if it is possible for them to rerender (currently the heuristic is simply does the component have an associated <code>class</code> or <code>component.js</code>). The plugin will automatically skip sending down any unnecessary top level templates to the browser.</p><p>The end result is that you setup a multi compiler (as shown below) and you can simply import Marko templates, and all assets are automatically generated and inlined into an optimized server response. No need to keep track of a webpack manifest yourself!</p><h3 id=tag-webpack-assets><a name=tag-webpack-assets class=anchor href=#tag-webpack-assets><span class=header-link></span></a>Tag: <code>&lt;webpack-assets&gt;</code></h3><p>The <code>&lt;webpack-assets&gt;</code> tag can be used along with the plugin in a multi-compiler setup. This tag allows you to inject <code>&lt;script&gt;</code>/<code>&lt;style&gt;</code> tags into a server-rendered template for the assets of an entry in the client compiler.</p><h4 id=example-usage><a name=example-usage class=anchor href=#example-usage><span class=header-link></span></a>Example Usage</h4>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>webpack-assets</span> <span style=color:#A6E22E>entry</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"tracking\"</span>/>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>webpack-assets</span> <span style=color:#A6E22E>entry</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"tracking\"</span>\n</pre>"
  }, out, _componentDef, "43");

  out.w("<h4 id=example-config><a name=example-config class=anchor href=#example-config><span class=header-link></span></a>Example Config</h4><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#8F8F9E>// ...</span>\n<span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> [\n  {\n    entry: <span style=color:#FFF066>\"./server.js\"</span>,\n    plugins: [<span style=color:#FFFFFF>markoPlugin</span>.<span style=color:#FFFFFF>server</span>]\n    <span style=color:#8F8F9E>// ...</span>\n  },\n  {\n    <span style=color:#8F8F9E>// ...</span>\n    entry: {\n      tracking: <span style=color:#FFF066>\"./tracking.js\"</span>\n    },\n    plugins: [<span style=color:#FFFFFF>markoPlugin</span>.<span style=color:#FFFFFF>browser</span>]\n  }\n];\n</pre><h1 id=example><a name=example class=anchor href=#example><span class=header-link></span></a>Example</h1><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>MarkoPlugin</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@marko/webpack/plugin\"</span>;\n\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>markoPlugin</span> <span style=color:#FFFFFF>=</span> <span style=color:#FF4185>new</span> <span style=color:#A6E22E>MarkoPlugin</span>();\n\n<span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> [\n  {\n    entry: <span style=color:#FFF066>\"./server.js\"</span>,\n    module: {\n      rules: [\n        {\n          test:<span style=color:#FFF066> /</span><span style=color:#AE81FF>\\.</span><span style=color:#FFF066>marko</span><span style=color:#FF4185>$</span><span style=color:#FFF066>/</span>,\n          loader: <span style=color:#FFF066>\"@marko/webpack/loader\"</span>\n        }\n      ]\n    },\n    plugins: [<span style=color:#FFFFFF>markoPlugin</span>.<span style=color:#FFFFFF>server</span>]\n  },\n  {\n    rules: [\n      {\n        test:<span style=color:#FFF066> /</span><span style=color:#AE81FF>\\.</span><span style=color:#FFF066>marko</span><span style=color:#FF4185>$</span><span style=color:#FFF066>/</span>,\n        loader: <span style=color:#FFF066>\"@marko/webpack/loader\"</span>\n      },\n      <span style=color:#8F8F9E>// If using `style` blocks with Marko you must use an appropriate loader</span>\n      {\n        test:<span style=color:#FFF066> /</span><span style=color:#AE81FF>\\.</span><span style=color:#FFF066>css</span><span style=color:#FF4185>$</span><span style=color:#FFF066>/</span>,\n        use: [<span style=color:#FFF066>\"style-loader\"</span>, <span style=color:#FFF066>\"css-loader\"</span>]\n      }\n    ],\n    plugins: [<span style=color:#FFFFFF>markoPlugin</span>.<span style=color:#FFFFFF>browser</span>]\n  }\n];\n</pre><h2 id=babel-options-marko-5><a name=babel-options-marko-5 class=anchor href=#babel-options-marko-5><span class=header-link></span></a>Babel options (Marko 5+)</h2><p>If you are using Marko 5 with this plugin you can manually override the Babel configuration used by passing a <code>babelConfig</code> object along side the <code>@marko/webpack/loader</code>. By default Babels regular <a href=https://babeljs.io/docs/en/config-files>config file resolution</a> will be used.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> {\n    module: {\n      rules: [\n        {\n          test:<span style=color:#FFF066> /</span><span style=color:#AE81FF>\\.</span><span style=color:#FFF066>marko</span><span style=color:#FF4185>$</span><span style=color:#FFF066>/</span>,\n          loader: <span style=color:#FFF066>\"@marko/webpack/loader\"</span>,\n          options: {\n            babelConfig: {\n              presets: [\n                [<span style=color:#FFF066>\"@babel/preset-env\"</span>, { node: <span style=color:#FFF066>\"current\"</span> }]\n              ]\n            }\n          }\n        }\n      ]\n    }\n  },\n</pre><h2 id=multiple-client-side-compilers><a name=multiple-client-side-compilers class=anchor href=#multiple-client-side-compilers><span class=header-link></span></a>Multiple client-side compilers</h2><p>Sometimes you need multiple compilers for your client-side bundles. For example, with <a href=https://github.com/webpack/webpack/tree/master/examples/i18n><code>i18n</code></a> or <a href=https://github.com/eBay/arc/tree/master/packages/arc-webpack>even shipping dynamic runtime bundles to the browser</a>.</p><p>The <code>@marko/webpack</code> plugin\u2019s <code>.browser</code> property can be passed to multiple Webpack compilers. While rendering at runtime, you can provide a <code>&#36;global.buildName</code> property to choose which assets from the Webpack compiler are included in the page.</p><p>For example, with the Webpack internationalization plugin, you might have a config like the following:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>MarkoPlugin</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@marko/webpack/plugin\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>I18nPlugin</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"i18n-webpack-plugin\"</span>;\n<span style=color:#FF4185>import</span> <span style=color:#FFFFFF>germanTranslations</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"./de.json\"</span>;\n\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>languages</span> <span style=color:#FFFFFF>=</span> {\n  en: <span style=color:#AE81FF>null</span>,\n  de: <span style=color:#FFFFFF>germanTranslations</span>\n};\n\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>markoPlugin</span> <span style=color:#FFFFFF>=</span> <span style=color:#FF4185>new</span> <span style=color:#A6E22E>MarkoPlugin</span>();\n\n<span style=color:#FF4185>export</span> <span style=color:#FF4185>default</span> [\n  {\n    name: <span style=color:#FFF066>\"Server\"</span>,\n    entry: <span style=color:#FFF066>\"./server.js\"</span>,\n    module: {\n      rules: [\n        {\n          test:<span style=color:#FFF066> /</span><span style=color:#AE81FF>\\.</span><span style=color:#FFF066>marko</span><span style=color:#FF4185>$</span><span style=color:#FFF066>/</span>,\n          loader: <span style=color:#FFF066>\"@marko/webpack/loader\"</span>\n        }\n      ]\n    },\n    plugins: [<span style=color:#FFFFFF>markoPlugin</span>.<span style=color:#FFFFFF>server</span>]\n  },\n  <span style=color:#FF4185>...</span><span style=color:#FFFFFF>Object</span>.<span style=color:#A6E22E>keys</span>(<span style=color:#FFFFFF>languages</span>).<span style=color:#A6E22E>map</span>(<span style=color:#FFAC4D>language</span> <span style=color:#66D9EF>=></span> ({\n    name: <span style=color:#FFF066>`Browser-</span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>language</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span>,\n    rules: [\n      {\n        test:<span style=color:#FFF066> /</span><span style=color:#AE81FF>\\.</span><span style=color:#FFF066>marko</span><span style=color:#FF4185>$</span><span style=color:#FFF066>/</span>,\n        loader: <span style=color:#FFF066>\"@marko/webpack/loader\"</span>\n      },\n      <span style=color:#8F8F9E>// If using `style` blocks with Marko you must use an appropriate loader</span>\n      {\n        test:<span style=color:#FFF066> /</span><span style=color:#AE81FF>\\.</span><span style=color:#FFF066>css</span><span style=color:#FF4185>$</span><span style=color:#FFF066>/</span>,\n        use: [<span style=color:#FFF066>\"style-loader\"</span>, <span style=color:#FFF066>\"css-loader\"</span>]\n      }\n    ],\n    plugins: [<span style=color:#FF4185>new</span> <span style=color:#A6E22E>I18nPlugin</span>(<span style=color:#FFFFFF>languages</span>[<span style=color:#FFFFFF>language</span>]), <span style=color:#FFFFFF>markoPlugin</span>.<span style=color:#FFFFFF>browser</span>]\n  }))\n];\n</pre><p>With the above config, you can render your top-level Marko template server-side with a <code>&#36;global.buildName</code> like so:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>template</span>.<span style=color:#A6E22E>render</span>({ $global: { buildName: <span style=color:#FFF066>\"Browser-de\"</span> } });\n</pre><p>That will automatically send German assets. However, what you <em>probably</em> want instead of always serving German is conditionally sending appropriate assets for a user\u2019s locale. This can be done like so:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FFFFFF>template</span>.<span style=color:#A6E22E>render</span>({ $global: { buildName: <span style=color:#FFF066>`Browser-</span><span style=color:#66D9EF>${</span><span style=color:#FFFFFF>req</span><span style=color:#FFF066>.</span><span style=color:#FFFFFF>language</span><span style=color:#66D9EF>}</span><span style=color:#FFF066>`</span> } });\n</pre><p><strong>Note:</strong> If a bundle with the provided <code>buildName</code> does not exist, an error is thrown.</p><h2 id=multiple-copies-of-marko><a name=multiple-copies-of-marko class=anchor href=#multiple-copies-of-marko><span class=header-link></span></a>Multiple copies of Marko</h2><p>In some cases you may want to embed multiple isolated copies of Marko on the page. Since Marko relies on some <code>window</code> properties to initialize this can cause issues. For example, by default Marko will read the server rendered hydration code from <code>window.&#36;components</code>. In Marko you can change these <code>window</code> properties by rendering with <code>{ &#36;global: { runtimeId: &quot;MY_MARKO_RUNTIME_ID&quot; } }</code> as input on the server side.</p><p>This plugin exposes a <code>runtimeId</code> option produces output that automatically sets <code>&#36;global.runtimeId</code> on the server side and initializes properly in the browser. The <code>runtimeId</code> will default to the <a href=https://webpack.js.org/configuration/output/#outputuniquename><code>uniqueName</code> option</a> from the server compiler in the webpack config.</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>import</span> <span style=color:#FFFFFF>MarkoPlugin</span> <span style=color:#FF4185>from</span> <span style=color:#FFF066>\"@marko/webpack/plugin\"</span>;\n\n<span style=color:#66D9EF>const</span> <span style=color:#FFFFFF>markoPlugin</span> <span style=color:#FFFFFF>=</span> <span style=color:#FF4185>new</span> <span style=color:#A6E22E>MarkoPlugin</span>({\n  runtimeId: <span style=color:#FFF066>\"MY_MARKO_RUNTIME_ID\"</span> <span style=color:#8F8F9E>// default to webpack `output.uniqueName` option.</span>\n});\n</pre><p>Note: This option will also override the default values for the <code>jsonpFunction</code>, <code>chunkCallbackName</code> and <code>hotUpdateFunction</code> webpack <code>output</code> options, which all use global variables, to be prefixed with the <code>runtimeId</code>.</p><h2 id=dynamic-public-paths><a name=dynamic-public-paths class=anchor href=#dynamic-public-paths><span class=header-link></span></a>Dynamic public paths</h2><p>When using the plugin, the server will automatically sync the runtime <a href=https://webpack.js.org/guides/public-path/#on-the-fly><code>__webpack_public_path__</code></a> with the browser. This means that you only need to setup the dynamic public path on the server side.</p>");
}, {
  t: webpack_marko_componentType,
  i: true
}, webpack_marko_component);
__webpack_require__(7133)
;// CONCATENATED MODULE: ../../node_modules/marko/docs/why-is-marko-fast.md


const why_is_marko_fast_marko_componentType = "eylgXNGa",
      why_is_marko_fast_marko_template = (0,index_js_namespaceObject.t)(why_is_marko_fast_marko_componentType);

/* harmony default export */ const why_is_marko_fast = (why_is_marko_fast_marko_template);

toc_registry.set("../../node_modules/marko/docs/why-is-marko-fast.md", "<ul class=\"toc toc-level1\"><li><ul class=\"toc toc-level2\"><li><a href=\"#multiple-compilation-outputs\">Multiple Compilation Outputs</a><ul class=\"toc toc-level3\"><li><a href=\"#compiled-for-the-server\">Compiled for the server</a></li><li><a href=\"#compiled-for-the-browser\">Compiled for the browser</a></li></ul></li><li><a href=\"#modular-runtime\">Modular Runtime</a></li><li><a href=\"#high-performance-server-side-rendering\">High performance server-side rendering</a></li><li><a href=\"#compile-time-optimization-of-static-sub-trees\">Compile-time optimization of static sub-trees</a></li><li><a href=\"#compile-time-optimization-of-static-attributes\">Compile-time optimization of static attributes</a></li><li><a href=\"#smart-compiler\">Smart compiler</a></li><li><a href=\"#event-delegation\">Event delegation</a></li></ul></li></ul>");
const why_is_marko_fast_title = "Why is Marko Fast?";



const why_is_marko_fast_marko_component = {};
why_is_marko_fast_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w("<h1 id=why-is-marko-fast><a name=why-is-marko-fast class=anchor href=#why-is-marko-fast><span class=header-link></span></a>Why is Marko Fast?</h1><a href=https://medium.com/@psteeleidem/why-is-marko-fast-a20796cb8ae3><img src=https://user-images.githubusercontent.com/1958812/28104838-d0182f48-6691-11e7-808d-d1ae2d0fed6d.png alt=\"Marko logo\" width=100%></a><br><blockquote class=null><p>This article was published in May 2017. You can find the original <a href=https://medium.com/@psteeleidem/why-is-marko-fast-a20796cb8ae3>&quot;Why is Marko Fast?&quot; article here</a>!</p></blockquote><p>At eBay we are using <a href=/ >Marko</a> to render over a billion requests every day and this has required us to finely tune Marko, our open source UI library. We have heavily optimized Marko for fast rendering, <a href=http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/ >advanced performance techniques</a> and to achieve a minimal page weight (~10kb gzipped). Performance is only one concern because we have also had to scale Marko to support development across hundreds of teams in a way that allows developers to efficiently create maintainable and robust web apps.</p><p>We have created <a href=https://github.com/marko-js/isomorphic-ui-benchmarks>our own benchmarks</a> and we have <a href=https://github.com/raxjs/server-side-rendering-comparison/pull/11>added Marko to other benchmarks</a>, but benchmarks cannot always be trusted. While we make every effort to be fair with our benchmarks, what matters most is performance in real world applications as opposed to focusing on micro benchmarks. This is one reason that the V8 team has switched to <a href=https://v8project.blogspot.com/2016/12/how-v8-measures-real-world-performance.html>a new methodology to measure and understand real-world JavaScript performance</a>.</p><p>Similarly, we\u2019ve taken a look at how our developers are <em>actually</em> writing their Marko components and have found patterns that could be further optimized. Instead of focusing on benchmarks in this article, I want to focus on the details of optimizations that we have applied to Marko.</p><h3 id=multiple-compilation-outputs><a name=multiple-compilation-outputs class=anchor href=#multiple-compilation-outputs><span class=header-link></span></a>Multiple Compilation Outputs</h3><p>Marko is an isomorphic UI library that runs on both the server and in the browser. As <a href=https://medium.com/@mlrawlings>Michael Rawlings</a> mentioned in \u201C<a href=https://hackernoon.com/server-side-rendering-shootout-with-marko-preact-rax-react-and-vue-25e1ae17800f>Server-side Rendering Shootout</a>\u201D, when rendering on the server, Marko renders directly to a string representation of the document (HTML) that can be sent as the HTTP response.</p><p>When rendering in the browser, an HTML string would have to be parsed in order to update the DOM. For this reason, Marko compiles a view to a program that renders directly to a virtual document (VDOM) tree that can be used to efficiently update the real DOM when targeting the browser.</p><p>Given the following template:</p><script>if(localStorage.getItem('markojs-website:syntax') === 'concise'){document.body.classList.add('concise')}</script>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span>>Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span> -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!\n</pre>"
  }, out, _componentDef, "27");

  out.w("<h4 id=compiled-for-the-server><a name=compiled-for-the-server class=anchor href=#compiled-for-the-server><span class=header-link></span></a>Compiled for the server</h4><p>The compiled output is optimized for streaming HTML output on the server:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>marko_template</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"marko/html\"</span>).<span style=color:#A6E22E>t</span>(<span style=color:#FFFFFF>__filename</span>),\n  <span style=color:#FFFFFF>marko_helpers</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"marko/runtime/html/helpers\"</span>),\n  <span style=color:#FFFFFF>marko_escapeXml</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFFFFF>marko_helpers</span>.<span style=color:#FFFFFF>x</span>;\n\n<span style=color:#66D9EF>function</span> <span style=color:#A6E22E>render</span>(<span style=color:#FFAC4D>input</span>, <span style=color:#FFAC4D>out</span>) {\n  <span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>w</span>(<span style=color:#FFF066>\"&lt;div>Hello \"</span> <span style=color:#FF4185>+</span> <span style=color:#A6E22E>marko_escapeXml</span>(<span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>) <span style=color:#FF4185>+</span> <span style=color:#FFF066>\"!&lt;/div>\"</span>);\n}\n</pre><h4 id=compiled-for-the-browser><a name=compiled-for-the-browser class=anchor href=#compiled-for-the-browser><span class=header-link></span></a>Compiled for the browser</h4><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>marko_template</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"marko/vdom\"</span>).<span style=color:#A6E22E>t</span>(<span style=color:#FFFFFF>__filename</span>);\n\n<span style=color:#66D9EF>function</span> <span style=color:#A6E22E>render</span>(<span style=color:#FFAC4D>input</span>, <span style=color:#FFAC4D>out</span>) {\n  <span style=color:#FFFFFF>out</span>\n    .<span style=color:#A6E22E>e</span>(<span style=color:#FFF066>\"DIV\"</span>, <span style=color:#AE81FF>null</span>, <span style=color:#AE81FF>3</span>)\n    .<span style=color:#A6E22E>t</span>(<span style=color:#FFF066>\"Hello \"</span>)\n    .<span style=color:#A6E22E>t</span>(<span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>)\n    .<span style=color:#A6E22E>t</span>(<span style=color:#FFF066>\"!\"</span>);\n}\n</pre><p>The compiled output is optimized for virtual DOM rendering in the browser:</p><h3 id=modular-runtime><a name=modular-runtime class=anchor href=#modular-runtime><span class=header-link></span></a>Modular Runtime</h3><p>The Marko runtime is not distributed as a single JavaScript file. Instead, the Marko compiler generates a JavaScript module that will only import the parts of the runtime that are actually needed. This allows us to add new features to Marko without bloating existing applications. For example, given the following template:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>color</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>'red'</span>;\n&lt;<span style=color:#FF4185>div</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{backgroundColor: <span style=color:#FFFFFF>color</span>}>&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>$</span> <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>color</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>\"red\"</span>;\n<span style=color:#FF4185>div</span> <span style=color:#A6E22E>style</span><span style=color:#FFFFFF>=</span>{ backgroundColor: <span style=color:#FFFFFF>color</span> }\n</pre>"
  }, out, _componentDef, "40");

  out.w("<p>In the above example, extra runtime code is needed to render the <code>style</code> attribute based on the JavaScript object that is provided. The compiled code that imports the <code>styleAttr</code> helper is shown below:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>marko_styleAttr</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>require</span>(<span style=color:#FFF066>\"marko/runtime/vdom/helper-styleAttr\"</span>);\n\n<span style=color:#66D9EF>function</span> <span style=color:#A6E22E>render</span>(<span style=color:#FFAC4D>input</span>, <span style=color:#FFAC4D>out</span>) {\n  <span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>color</span> <span style=color:#FFFFFF>=</span> <span style=color:#FFF066>\"red\"</span>;\n  <span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>e</span>(\n    <span style=color:#FFF066>\"DIV\"</span>,\n    {\n      style: <span style=color:#A6E22E>marko_styleAttr</span>({\n        backgroundColor: <span style=color:#FFFFFF>color</span>\n      })\n    },\n    <span style=color:#AE81FF>0</span>,\n    <span style=color:#AE81FF>4</span>\n  );\n}\n</pre><h3 id=high-performance-server-side-rendering><a name=high-performance-server-side-rendering class=anchor href=#high-performance-server-side-rendering><span class=header-link></span></a>High performance server-side rendering</h3><p>Compared to solutions based on JSX that exclusively do virtual DOM rendering, Marko has a huge advantage for server-side rendering. When rendering to a virtual DOM tree on the server it\u2019s a two-step process to render HTML:</p><ul><li>First pass to produce an entire virtual DOM tree in memory</li><li>Second pass to serialize the virtual DOM tree to an HTML string that can then be sent over the wire (this requires traversing the entire tree structure)</li></ul><p>In contrast, Marko renders directly to an HTML stream in a single pass. There is no intermediate tree data structure.</p><h3 id=compile-time-optimization-of-static-sub-trees><a name=compile-time-optimization-of-static-sub-trees class=anchor href=#compile-time-optimization-of-static-sub-trees><span class=header-link></span></a>Compile-time optimization of static sub-trees</h3><p>Given the following template:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span>>This is a &lt;<span style=color:#FF4185>strong</span>>static&lt;/<span style=color:#FF4185>strong</span>> node&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span>\n  -- This is a\n  <span style=color:#FF4185>strong</span> -- static\n  --  node\n</pre>"
  }, out, _componentDef, "56");

  out.w("<p>Marko will recognize that the template fragment produces the same output every time and it will thus create the virtual DOM node once as shown in the following compiled output:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>marko_node0</span> <span style=color:#FFFFFF>=</span> <span style=color:#A6E22E>marko_createElement</span>(<span style=color:#FFF066>\"DIV\"</span>, <span style=color:#AE81FF>null</span>, <span style=color:#AE81FF>3</span>, <span style=color:#FF4185>...</span>)\n  .<span style=color:#A6E22E>t</span>(<span style=color:#FFF066>\"This is a \"</span>)\n  .<span style=color:#A6E22E>e</span>(<span style=color:#FFF066>\"STRONG\"</span>, <span style=color:#AE81FF>null</span>, <span style=color:#AE81FF>1</span>)\n    .<span style=color:#A6E22E>t</span>(<span style=color:#FFF066>\"static\"</span>)\n  .<span style=color:#A6E22E>t</span>(<span style=color:#FFF066>\" node\"</span>);\n\n<span style=color:#66D9EF>function</span> <span style=color:#A6E22E>render</span>(<span style=color:#FFAC4D>input</span>, <span style=color:#FFAC4D>out</span>) {\n  <span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>n</span>(<span style=color:#FFFFFF>marko_node0</span>);\n}\n</pre><p>Rendering a static sub-tree has virtually zero cost. In addition, Marko will skip diffing/patching static sub-trees.</p><p>Similarly, on the server, Marko will merge static parts of the template into a single string:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>function</span> <span style=color:#A6E22E>render</span>(<span style=color:#FFAC4D>input</span>, <span style=color:#FFAC4D>out</span>) {\n  <span style=color:#FFFFFF>out</span>.<span style=color:#A6E22E>w</span>(<span style=color:#FFF066>\"&lt;div>This is a &lt;strong>static&lt;/strong> node&lt;/div>\"</span>);\n}\n</pre><h3 id=compile-time-optimization-of-static-attributes><a name=compile-time-optimization-of-static-attributes class=anchor href=#compile-time-optimization-of-static-attributes><span class=header-link></span></a>Compile-time optimization of static attributes</h3><p>Marko will also optimize static attributes on dynamic elements.</p><p>Given the following template:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>div</span><span style=color:#A6E22E>.hello</span>>Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!&lt;/<span style=color:#FF4185>div</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>div</span><span style=color:#A6E22E>.hello</span> -- Hello <span style=color:#66D9EF>${</span><span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span><span style=color:#66D9EF>}</span>!\n</pre>"
  }, out, _componentDef, "65");

  out.w("<p>Marko will produce the following compiled output:</p><pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#66D9EF>var</span> <span style=color:#FFFFFF>marko_attrs0</span> <span style=color:#FFFFFF>=</span> {\n  class: <span style=color:#FFF066>\"hello\"</span>\n};\n\n<span style=color:#66D9EF>function</span> <span style=color:#A6E22E>render</span>(<span style=color:#FFAC4D>input</span>, <span style=color:#FFAC4D>out</span>) {\n  <span style=color:#FFFFFF>out</span>\n    .<span style=color:#A6E22E>e</span>(<span style=color:#FFF066>\"DIV\"</span>, <span style=color:#FFFFFF>marko_attrs0</span>, <span style=color:#AE81FF>3</span>)\n    .<span style=color:#A6E22E>t</span>(<span style=color:#FFF066>\"Hello \"</span>)\n    .<span style=color:#A6E22E>t</span>(<span style=color:#FFFFFF>input</span>.<span style=color:#FFFFFF>name</span>)\n    .<span style=color:#A6E22E>t</span>(<span style=color:#FFF066>\"!\"</span>);\n}\n</pre><p>Notice that the attributes object is only created once and it is used for every render. In addition, no diffing/patching will happen for static attributes.</p><h3 id=smart-compiler><a name=smart-compiler class=anchor href=#smart-compiler><span class=header-link></span></a>Smart compiler</h3><p>With Marko we favor doing as much at compile-time as possible. This has made our compiler more complex, but it gives us significant gains at runtime. We have ~90% code coverage and over 2,000 tests to ensure that the compiler is working correctly. In addition, in many cases the Marko compiler provides hints to the runtime for a given template so that the runtime can optimize for specific patterns. For example, Marko recognizes if an HTML element only has <code>class</code>/<code>id</code>/<code>style</code> defined and the runtime optimizes for these virtual DOM nodes when doing diffing/patching (the Marko compiler generates code that flags simple virtual DOM nodes for targeted diffing/patching logic).</p><h3 id=event-delegation><a name=event-delegation class=anchor href=#event-delegation><span class=header-link></span></a>Event delegation</h3><p>If you are building a UI component you will likely need to write code to handle various DOM events (<code>click</code>, <code>submit</code>, etc.). It is common for developers to write code that adds DOM event listeners using <code>dom.addEventListener(...)</code> or using a library such as jQuery. You can still do that when building UI components using Marko, but there is overhead in attaching listeners when lots of components are being initialized. Instead, Marko recommends using declarative event binding as shown below:</p>");

  render_tag_js_default()(code_block_marko_index_marko_server_entry, {
    "html": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034>&lt;<span style=color:#FF4185>button</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"button\"</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"handleClick\"</span>)>\n  Click Me\n&lt;/<span style=color:#FF4185>button</span>>\n</pre>",
    "concise": "<pre class=highlighted style=color:#D0D0E0;background-color:#202034><span style=color:#FF4185>button</span> <span style=color:#A6E22E>type</span><span style=color:#FFFFFF>=</span><span style=color:#FFF066>\"button\"</span> <span style=color:#66D9EF>on-click</span>(<span style=color:#FFF066>\"handleClick\"</span>) -- Click Me\n</pre>"
  }, out, _componentDef, "82");

  out.w("<p>When using declarative event binding, no DOM event listeners are actually attached for events that bubble. Instead, Marko attaches a single listener on the root DOM element of the page for each DOM event that bubbles (done at startup). When Marko receives an event at the root it handles delegating the event to the appropriate components that are interested in that event. This is done by looking at the <code>event.target</code> property to see where the event originated and then walking up the tree to find components that need to be notified. As a result, there is slightly more work that is done when a DOM event is captured at the root, but this approach uses much less memory and reduces the amount of work that is done during initialization. The extra overhead of delegating events to components will not be noticeable so it is a very beneficial optimization.</p><p><em>Cover image credit: <a href=https://thenounproject.com/search/?q=superhero&amp;i=690775>Superhero by Gan Khoon Lay from the Noun Project</a></em></p>");
}, {
  t: why_is_marko_fast_marko_componentType,
  i: true
}, why_is_marko_fast_marko_component);
__webpack_require__(5218)
// EXTERNAL MODULE: external "path"
var external_path_ = __webpack_require__(1017);
var external_path_default = /*#__PURE__*/__webpack_require__.n(external_path_);
;// CONCATENATED MODULE: ../utils/document-lookup.js




































const documentLookup = {};
const docsByRepo = {
  "marko-js/marko": {
    trim: "../../node_modules/",
    prefix: "packages/",
    docs: {
      "../../node_modules/marko/docs/10-awesome-marko-features.md": _10_awesome_marko_features_namespaceObject,
      "../../node_modules/marko/docs/body-content.md": body_content_namespaceObject,
      "../../node_modules/marko/docs/class-components.md": class_components_namespaceObject,
      "../../node_modules/marko/docs/cloudflare-workers.md": cloudflare_workers_namespaceObject,
      "../../node_modules/marko/docs/compiler.md": compiler_namespaceObject,
      "../../node_modules/marko/docs/concise.md": concise_namespaceObject,
      "../../node_modules/marko/docs/conditionals-and-lists.md": conditionals_and_lists_namespaceObject,
      "../../node_modules/marko/docs/core-tags.md": core_tags_namespaceObject,
      "../../node_modules/marko/docs/custom-tags.md": custom_tags_namespaceObject,
      "../../node_modules/marko/docs/editor-plugins.md": editor_plugins_namespaceObject,
      "../../node_modules/marko/docs/events.md": events_namespaceObject,
      "../../node_modules/marko/docs/express.md": express_namespaceObject,
      "../../node_modules/marko/docs/fastify.md": fastify_namespaceObject,
      "../../node_modules/marko/docs/getting-started.md": getting_started_namespaceObject,
      "../../node_modules/marko/docs/http.md": http_namespaceObject,
      "../../node_modules/marko/docs/installing.md": installing_namespaceObject,
      "../../node_modules/marko/docs/koa.md": koa_namespaceObject,
      "../../node_modules/marko/docs/lasso.md": lasso_namespaceObject,
      "../../node_modules/marko/docs/marko-5-upgrade.md": marko_5_upgrade_namespaceObject,
      "../../node_modules/marko/docs/marko-json.md": marko_json_namespaceObject,
      "../../node_modules/marko/docs/marko-vs-react.md": marko_vs_react_namespaceObject,
      "../../node_modules/marko/docs/redux.md": redux_namespaceObject,
      "../../node_modules/marko/docs/rendering.md": rendering_namespaceObject,
      "../../node_modules/marko/docs/rollup.md": rollup_namespaceObject,
      "../../node_modules/marko/docs/state.md": state_namespaceObject,
      "../../node_modules/marko/docs/styles.md": styles_namespaceObject,
      "../../node_modules/marko/docs/syntax.md": syntax_namespaceObject,
      "../../node_modules/marko/docs/troubleshooting-streaming.md": troubleshooting_streaming_namespaceObject,
      "../../node_modules/marko/docs/vite.md": vite_namespaceObject,
      "../../node_modules/marko/docs/webpack.md": webpack_namespaceObject,
      "../../node_modules/marko/docs/why-is-marko-fast.md": why_is_marko_fast_namespaceObject
    }
  },
  "marko-js/examples": {
    trim: "../../examples/",
    docs: {
      "../../examples/examples/color-picker/README.md": README_namespaceObject
    }
  }
};
Object.keys(docsByRepo).forEach(repo => {
  const {
    trim,
    prefix = "",
    docs
  } = docsByRepo[repo];
  Object.keys(docs).forEach(filePath => {
    const slug = fileNameToSlug(filePath);
    const doc = docs[filePath];
    const repoPath = filePath.replace(trim, prefix);
    documentLookup[slug] = {
      repo,
      repoPath,
      template: doc.default,
      title: doc.title,
      toc: toc_registry.get(filePath)
    };
  });
});

function fileNameToSlug(file) {
  let slug;

  do {
    slug = external_path_default().basename(file, ".md");
    file = external_path_default().dirname(file);
  } while (slug === "README");

  return slug;
}

structure_json_default().forEach(doc => {
  addOverviewDoc(doc);

  function addOverviewDoc(doc, parentSlug) {
    const {
      title,
      docs
    } = doc;
    const titleSlug = format_slug_default()(title);
    docs.forEach(childDoc => {
      if (typeof childDoc === "object") {
        addOverviewDoc(childDoc, titleSlug);
      }
    });
    let docName;

    if (parentSlug) {
      docName = `${parentSlug}-${titleSlug}-overview`;
    } else {
      docName = `${titleSlug}-overview`;
    }

    documentLookup[docName] = {
      overview: true,
      title,
      docs
    };
  }
});
/* harmony default export */ const document_lookup = (documentLookup);
;// CONCATENATED MODULE: ./docs/[name]/components/edit-on-github/github.svg
/* harmony default export */ const edit_on_github_github = (__webpack_require__.p + "0bc571bc.svg");
;// CONCATENATED MODULE: ./docs/[name]/components/edit-on-github/index.marko


const edit_on_github_index_marko_marko_componentType = "IQj8MUMo",
      edit_on_github_index_marko_marko_template = (0,index_js_namespaceObject.t)(edit_on_github_index_marko_marko_componentType);

/* harmony default export */ const edit_on_github_index_marko = (edit_on_github_index_marko_marko_template);



const edit_on_github_index_marko_marko_component = {};
edit_on_github_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<a${attr_js_default()("href", `https://github.com/${input.repo}/blob/main/${input.repoPath}`)} class=edit-on-github>EDIT <img alt="on GitHub"${attr_js_default()("src", edit_on_github_github)}></a>`);
}, {
  t: edit_on_github_index_marko_marko_componentType,
  i: true
}, edit_on_github_index_marko_marko_component);
__webpack_require__(8792)
// EXTERNAL MODULE: ./docs/[name]/components/contributors/get-contributors.js
var get_contributors = __webpack_require__(389);
var get_contributors_default = /*#__PURE__*/__webpack_require__.n(get_contributors);
;// CONCATENATED MODULE: ./docs/[name]/components/contributors/index.marko


const contributors_index_marko_marko_componentType = "u5JDiIw+",
      contributors_index_marko_marko_template = (0,index_js_namespaceObject.t)(contributors_index_marko_marko_componentType);

/* harmony default export */ const contributors_index_marko = (contributors_index_marko_marko_template);






const contributors_index_marko_marko_component = {};
contributors_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  var editPath = `https://github.com/${input.repo}/blob/main/${input.repoPath}`;

  render_tag_js_default()((await_renderer_js_default()), {
    "_provider": get_contributors_default()(input.repo, input.repoPath),
    "_name": "getContributors(input.repo, input.repoPath)",
    "then": {
      "renderBody": (out, contributors) => {
        out.w(`<h2 id=contributors><a name=contributors class=anchor href=#contributors><span class=header-link></span></a> Contributors</h2><p>Helpful? You can thank these awesome people! You can also <a${attr_js_default()("href", editPath)}>edit this doc</a> if you see any issues or want to improve it.</p><div class=contributors>`);
        {
          let _keyValue = 0;

          for (const contributor of contributors) {
            const _keyScope = `[${_keyValue++}]`;
            out.w(`<a${attr_js_default()("href", contributor.profile)} class=contributor><img${attr_js_default()("src", contributor.photo)} alt class=photo><span class=name>${(0,escape_xml_js_namespaceObject.x)(contributor.username)}</span></a>`);
          }

          out.w(`<a${attr_js_default()("href", editPath)} class="contributor you"><div class=photo><span class=icon>+</span></div><span class=name>You?</span></a>`);
        }
        out.w("</div>");
      }
    }
  }, out, _componentDef, "0");
}, {
  t: contributors_index_marko_marko_componentType,
  i: true
}, contributors_index_marko_marko_component);
__webpack_require__(5098)
;// CONCATENATED MODULE: ./docs/[name]/components/document-overview/index.marko


const document_overview_index_marko_marko_componentType = "g2wyvJWm",
      document_overview_index_marko_marko_template = (0,index_js_namespaceObject.t)(document_overview_index_marko_marko_componentType);

/* harmony default export */ const document_overview_index_marko = (document_overview_index_marko_marko_template);





const document_overview_index_marko_marko_component = {};
document_overview_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.w(`<h1>${(0,escape_xml_js_namespaceObject.x)(input.title)}</h1>`);

  dynamic_tag_js_default()(out, _docList, () => input, null, null, null, _componentDef, "1");

  function _docList(out, {
    title,
    docs
  }) {
    out.w("<ul>");
    {
      let _keyValue = 0;

      for (const doc of docs) {
        const _keyScope = `[${_keyValue++}]`;
        out.w("<li>");

        if (typeof doc === 'object') {
          out.w(`<a${attr_js_default()("href", `/docs/${format_slug_default()(title)}-${format_slug_default()(doc.title)}-overview/`)}>${(0,escape_xml_js_namespaceObject.x)(doc.title)}</a>`);

          dynamic_tag_js_default()(out, _docList, () => doc, null, null, null, _componentDef, "6" + _keyScope);
        } else {
          out.w(`<a${attr_js_default()("href", `/docs/${format_slug_default()(doc)}/`)}>${(0,escape_xml_js_namespaceObject.x)(doc)}</a>`);
        }

        out.w("</li>");
      }
    }
    out.w("</ul>");
  }
}, {
  t: document_overview_index_marko_marko_componentType,
  i: true
}, document_overview_index_marko_marko_component);
__webpack_require__(6545)
;// CONCATENATED MODULE: ./docs/[name]/index.marko


const _name_index_marko_marko_componentType = "GraIKR1u",
      _name_index_marko_marko_template = (0,index_js_namespaceObject.t)(_name_index_marko_marko_componentType);

/* harmony default export */ const _name_index_marko = (_name_index_marko_marko_template);










const _name_index_marko_marko_component = {};
_name_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  const {
    params
  } = input;
  const doc = document_lookup[params.name];

  render_tag_js_default()(app_layout_index_marko, {
    "title": doc.title,
    "currentDoc": params.name,
    "toc": doc.toc,
    "footer": false,
    "class": "docs",
    "renderBody": out => {
      out.w("<div class=doc-layout><div class=doc-container><div class=doc-content>");

      if (!doc.overview) {
        dynamic_tag_js_default()(out, doc.template, null, null, null, null, _componentDef, "4");

        render_tag_js_default()(edit_on_github_index_marko, doc, out, _componentDef, "5");

        render_tag_js_default()(contributors_index_marko, doc, out, _componentDef, "6");
      } else {
        render_tag_js_default()(document_overview_index_marko, doc, out, _componentDef, "7");
      }

      render_tag_js_default()(app_footer_index_marko, {
        "class": "doc-footer"
      }, out, _componentDef, "8");

      out.w("</div></div></div>");
    }
  }, out, _componentDef, "0");
}, {
  t: _name_index_marko_marko_componentType,
  i: true
}, _name_index_marko_marko_component);
__webpack_require__(9003)
;// CONCATENATED MODULE: ./docs/[name]/index.marko?server-entry


const _name_index_marko_server_entry_marko_componentType = "acDwrniY",
      _name_index_marko_server_entry_marko_template = (0,index_js_namespaceObject.t)(_name_index_marko_server_entry_marko_componentType);

/* harmony default export */ const _name_index_marko_server_entry = (_name_index_marko_server_entry_marko_template);



const _name_index_marko_server_entry_crossOriginAttr = new URL(__webpack_require__.p, "file:").protocol === "file:" ? "" : " crossorigin";

function _name_index_marko_server_entry_renderAssets(out) {
  const entries = this.___entries;
  this.___entries = undefined;

  if (entries) {
    const buildName = this.buildName;
    const nonce = this.cspNonce;
    const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : "";
    const written = this.___writtenAssets || (this.___writtenAssets = new Set());
    let scripts = "";
    let styles = "";

    for (const entry of entries) {
      const assets = index_js_manifest.getAssets(entry, buildName);

      if (assets.js) {
        for (const href of assets.js) {
          if (!written.has(href)) {
            written.add(href);
            scripts += `<script src=${JSON.stringify(__webpack_require__.p + href)}${nonceAttr + _name_index_marko_server_entry_crossOriginAttr} async></script>`;
          }
        }
      }

      if (assets.css) {
        for (const href of assets.css) {
          if (!written.has(href)) {
            written.add(href);
            styles += `<link rel="stylesheet" href=${JSON.stringify(__webpack_require__.p + href)}>`;
          }
        }
      }
    }

    out.write(scripts + styles);
  }
}






const _name_index_marko_server_entry_marko_component = {};
_name_index_marko_server_entry_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.global.___renderAssets = _name_index_marko_server_entry_renderAssets;
  (out.global.___entries || (out.global.___entries = [])).push("[name]_GraI");

  render_tag_js_default()((_flush_here_and_after_js_default()), {
    "renderBody": out => {
      out.global.___renderAssets && out.global.___renderAssets(out);
    }
  }, out, _componentDef, "0");

  render_tag_js_default()(_name_index_marko, input, out, _componentDef, "1");

  render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "2");

  render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "3");
}, {
  t: _name_index_marko_server_entry_marko_componentType,
  i: true
}, _name_index_marko_server_entry_marko_component);
;// CONCATENATED MODULE: ./examples/[name]/index.marko


const examples_name_index_marko_marko_componentType = "HOqm2yph",
      examples_name_index_marko_marko_template = (0,index_js_namespaceObject.t)(examples_name_index_marko_marko_componentType);

/* harmony default export */ const examples_name_index_marko = (examples_name_index_marko_marko_template);
const examples = {
  "counter": {
    "title": "Counter",
    "description": "A simple counter",
    files: [{
      name: "index.marko",
      path: "/components/index.marko",
      content: "<let/count=0/>\n<button onClick() { count++ }>\n  ${count}\n</button>"
    }]
  },
  "hello-world": {
    "title": "Hello World",
    "description": "A simple hello world example",
    files: [{
      name: "index.marko",
      path: "/components/index.marko",
      content: "<h1>Hello World</h1>"
    }]
  },
  "loop": {
    "title": "Loops and Lists",
    "description": "A simple loop example",
    files: [{
      name: "index.marko",
      path: "/components/index.marko",
      content: "<let/list=[0,1,2,3]/>\n<ul>\n  <for|item| of=list>\n    <li>${item}</li>\n  </for>\n</ul>\n<button onClick() { list = list.concat(list.length); }>Add</button>"
    }]
  }
};






const examples_name_index_marko_marko_component = {};
examples_name_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  const {
    params
  } = input;
  const currentExample = examples[params.name];

  render_tag_js_default()(app_layout_index_marko, {
    "title": currentExample?.title,
    "footer": false,
    "discord": false,
    "renderBody": out => {
      out.w("<div class=examples-container><div class=examples-sidebar>");

      for (const name in examples) {
        const {
          title,
          description
        } = examples[name];
        const _keyScope = `[${name}]`;
        out.w(`<a${attr_js_default()("href", `/examples/${name}`)} class=example-link><span class=example-title>${(0,escape_xml_js_namespaceObject.x)(title)}</span><span class=example-description>${(0,escape_xml_js_namespaceObject.x)(description)}</span></a>`);
      }

      out.w("</div>");

      render_tag_js_default()(repl_index_marko, {
        "files": currentExample?.files || []
      }, out, _componentDef, "6");

      out.w("</div>");
    }
  }, out, _componentDef, "0");
}, {
  t: examples_name_index_marko_marko_componentType,
  i: true
}, examples_name_index_marko_marko_component);
__webpack_require__(539)
;// CONCATENATED MODULE: ./examples/[name]/index.marko?server-entry


const examples_name_index_marko_server_entry_marko_componentType = "WbFgfC4y",
      examples_name_index_marko_server_entry_marko_template = (0,index_js_namespaceObject.t)(examples_name_index_marko_server_entry_marko_componentType);

/* harmony default export */ const examples_name_index_marko_server_entry = (examples_name_index_marko_server_entry_marko_template);



const examples_name_index_marko_server_entry_crossOriginAttr = new URL(__webpack_require__.p, "file:").protocol === "file:" ? "" : " crossorigin";

function examples_name_index_marko_server_entry_renderAssets(out) {
  const entries = this.___entries;
  this.___entries = undefined;

  if (entries) {
    const buildName = this.buildName;
    const nonce = this.cspNonce;
    const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : "";
    const written = this.___writtenAssets || (this.___writtenAssets = new Set());
    let scripts = "";
    let styles = "";

    for (const entry of entries) {
      const assets = index_js_manifest.getAssets(entry, buildName);

      if (assets.js) {
        for (const href of assets.js) {
          if (!written.has(href)) {
            written.add(href);
            scripts += `<script src=${JSON.stringify(__webpack_require__.p + href)}${nonceAttr + examples_name_index_marko_server_entry_crossOriginAttr} async></script>`;
          }
        }
      }

      if (assets.css) {
        for (const href of assets.css) {
          if (!written.has(href)) {
            written.add(href);
            styles += `<link rel="stylesheet" href=${JSON.stringify(__webpack_require__.p + href)}>`;
          }
        }
      }
    }

    out.write(scripts + styles);
  }
}






const examples_name_index_marko_server_entry_marko_component = {};
examples_name_index_marko_server_entry_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.global.___renderAssets = examples_name_index_marko_server_entry_renderAssets;
  (out.global.___entries || (out.global.___entries = [])).push("[name]_HOqm");

  render_tag_js_default()((_flush_here_and_after_js_default()), {
    "renderBody": out => {
      out.global.___renderAssets && out.global.___renderAssets(out);
    }
  }, out, _componentDef, "0");

  render_tag_js_default()(examples_name_index_marko, input, out, _componentDef, "1");

  render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "2");

  render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "3");
}, {
  t: examples_name_index_marko_server_entry_marko_componentType,
  i: true
}, examples_name_index_marko_server_entry_marko_component);
;// CONCATENATED MODULE: external "@marko/compiler"
const external_marko_compiler_namespaceObject = require("@marko/compiler");
;// CONCATENATED MODULE: ../../browser-shims/v6/translator.js
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;

var __require = (x =>  true ? __webpack_require__(7102) : 0)(function (x) {
  if (true) return __webpack_require__(7102).apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});

var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {
    exports: {}
  }).exports, mod), mod.exports;
};

var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
  }

  return to;
};

var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
  value: mod,
  enumerable: true
}) : target, mod));

var require_interopRequireDefault = __commonJS({
  "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }

});

var require_resolve_from = __commonJS({
  "../../node_modules/resolve-from/index.js"(exports, module) {
    "use strict";

    var path3 = __require("path");

    var Module = __require("module");

    var fs = __require("fs");

    var resolveFrom = (fromDirectory, moduleId, silent) => {
      if (typeof fromDirectory !== "string") {
        throw new TypeError(`Expected \`fromDir\` to be of type \`string\`, got \`${typeof fromDirectory}\``);
      }

      if (typeof moduleId !== "string") {
        throw new TypeError(`Expected \`moduleId\` to be of type \`string\`, got \`${typeof moduleId}\``);
      }

      try {
        fromDirectory = fs.realpathSync(fromDirectory);
      } catch (error) {
        if (error.code === "ENOENT") {
          fromDirectory = path3.resolve(fromDirectory);
        } else if (silent) {
          return;
        } else {
          throw error;
        }
      }

      const fromFile = path3.join(fromDirectory, "noop.js");

      const resolveFileName = () => Module._resolveFilename(moduleId, {
        id: fromFile,
        filename: fromFile,
        paths: Module._nodeModulePaths(fromDirectory)
      });

      if (silent) {
        try {
          return resolveFileName();
        } catch (error) {
          return;
        }
      }

      return resolveFileName();
    };

    module.exports = (fromDirectory, moduleId) => resolveFrom(fromDirectory, moduleId);

    module.exports.silent = (fromDirectory, moduleId) => resolveFrom(fromDirectory, moduleId, true);
  }

});

var require_AsyncValue = __commonJS({
  "../../node_modules/raptor-async/AsyncValue.js"(exports, module) {
    var STATE_INITIAL = 0;
    var STATE_LOADING = 1;
    var STATE_RESOLVED = 2;
    var STATE_REJECTED = 3;

    var now = Date.now || function () {
      return new Date().getTime();
    };

    function AsyncValue(options) {
      this.data = void 0;
      this.error = void 0;
      this._callbacks = void 0;
      this._state = STATE_INITIAL;
      this._timestamp = void 0;

      if (options) {
        this._loader = options.loader;
        this._scope = options.scope;
        this._ttl = options.ttl || void 0;
      }
    }

    function notifyCallbacks(dataHolder, err, data) {
      var callbacks = dataHolder._callbacks;

      if (callbacks !== void 0) {
        dataHolder._callbacks = void 0;

        for (var i = 0; i < callbacks.length; i++) {
          var callbackInfo = callbacks[i];
          callbackInfo.callback.call(callbackInfo.scope, err, data);
        }
      }
    }

    function invokeLoader(dataProvider) {
      dataProvider._state = STATE_LOADING;

      dataProvider._loader.call(dataProvider._scope || dataProvider, function (err, data) {
        if (err) {
          dataProvider.reject(err);
        } else {
          dataProvider.resolve(data);
        }
      });
    }

    function addCallback(dataProvider, callback, scope) {
      if (dataProvider._callbacks === void 0) {
        dataProvider._callbacks = [];
      }

      dataProvider._callbacks.push({
        callback,
        scope: scope || dataProvider._scope || dataProvider
      });
    }

    function isExpired(dataProvider) {
      var timeToLive = dataProvider._ttl;

      if (timeToLive !== void 0 && now() - dataProvider._timestamp > timeToLive) {
        dataProvider.unsettle();
        return true;
      } else {
        return false;
      }
    }

    AsyncValue.prototype = {
      isResolved: function () {
        return this._state === STATE_RESOLVED && !isExpired(this);
      },
      isRejected: function () {
        return this._state === STATE_REJECTED && !isExpired(this);
      },
      isLoading: function () {
        return this._state === STATE_LOADING;
      },
      isSettled: function () {
        return this._state > STATE_LOADING && !isExpired(this);
      },
      load: function (callback, scope) {
        if (!this._loader) {
          throw new Error("Cannot call load when loader is not configured");
        }

        if (this.isSettled()) {
          this.unsettle();
        }

        if (callback) {
          addCallback(this, callback, scope);
        }

        if (this._state !== STATE_LOADING) {
          invokeLoader(this);
        }

        return this.data;
      },
      done: function (callback, scope) {
        if (!callback || callback.constructor !== Function) {
          throw new Error("Invalid callback: " + callback);
        }

        if (this.isSettled()) {
          return callback.call(scope || this._scope || this, this.error, this.data);
        }

        if (process.domain) {
          callback = process.domain.bind(callback);
        }

        addCallback(this, callback, scope);

        if (this._loader && this._state !== STATE_LOADING) {
          invokeLoader(this);
        }
      },
      reject: function (err) {
        this.error = err;
        this.data = void 0;

        if (this._ttl !== void 0) {
          this._timestamp = now();
        }

        this._state = this._loader ? STATE_INITIAL : STATE_REJECTED;
        notifyCallbacks(this, err, null);
      },
      resolve: function (data) {
        this.error = void 0;
        this.data = data;

        if (this._ttl !== void 0) {
          this._timestamp = now();
        }

        this._state = STATE_RESOLVED;
        notifyCallbacks(this, null, data);
      },
      reset: function () {
        this.unsettle();
        this.callbacks = void 0;
      },
      unsettle: function () {
        this._state = STATE_INITIAL;
        this.error = void 0;
        this.data = void 0;
        this._timestamp = void 0;
      }
    };

    AsyncValue.create = function (config) {
      return new AsyncValue(config);
    };

    module.exports = AsyncValue;
  }

});

var require_src = __commonJS({
  "../../node_modules/lasso-caching-fs/src/index.js"(exports) {
    var fs = __require("fs");

    var AsyncValue = require_AsyncValue();

    var nodePath = __require("path");

    var FS_READ_OPTIONS = {
      encoding: "utf8"
    };
    var cache = {};
    var packageCache = {};

    function Stats(stat2) {
      if (stat2) {
        this._exists = true;
        this._lastModified = stat2.mtime ? stat2.mtime.getTime() : -1;
        this._directory = stat2.isDirectory();
      } else {
        this._exists = false;
        this._lastModified = void 0;
        this._directory = void 0;
      }
    }

    Stats.prototype = {
      isDirectory: function () {
        return this._directory === true;
      },
      exists: function () {
        return this._exists === true;
      },
      lastModified: function () {
        return this._lastModified;
      }
    };

    function stat(filePath, callback) {
      var dataHolder = cache[filePath];

      if (dataHolder === void 0) {
        cache[filePath] = dataHolder = new AsyncValue();
        fs.stat(filePath, function (err, stat2) {
          dataHolder.resolve(new Stats(stat2));
        });
      }

      dataHolder.done(callback);
    }

    function statSync(filePath, callback) {
      var dataHolder = cache[filePath];
      var stat2;

      if (dataHolder === void 0 || !dataHolder.isSettled()) {
        if (dataHolder === void 0) {
          cache[filePath] = dataHolder = new AsyncValue();
        }

        try {
          stat2 = new Stats(fs.statSync(filePath));
        } catch (err) {
          stat2 = new Stats(null);
        }

        dataHolder.resolve(stat2);
      } else {
        stat2 = dataHolder.data;
      }

      return stat2;
    }

    function readPackageSync(path3) {
      var pkg = packageCache[path3];

      if (pkg !== void 0) {
        return pkg;
      }

      var pkgJSON;

      try {
        pkgJSON = fs.readFileSync(path3, FS_READ_OPTIONS);
      } catch (e) {}

      if (pkgJSON) {
        try {
          pkg = JSON.parse(pkgJSON);
        } catch (e) {
          throw new Error('Unable to parse JSON file at path "' + path3 + '": ' + e);
        }

        pkg.__filename = path3;
        pkg.__dirname = nodePath.dirname(path3);
      } else {
        pkg = null;
      }

      packageCache[path3] = pkg;
      return pkg;
    }

    exports.stat = stat;
    exports.statSync = statSync;

    exports.lastModified = function (filePath, callback) {
      stat(filePath, function (err, stat2) {
        callback(null, stat2.lastModified());
      });
    };

    exports.exists = function (filePath, callback) {
      stat(filePath, function (err, stat2) {
        callback(null, stat2.exists());
      });
    };

    exports.existsSync = function (filePath) {
      return statSync(filePath).exists();
    };

    exports.isDirectorySync = function (filePath) {
      return statSync(filePath).isDirectory();
    };

    exports.clearCaches = function () {
      cache = {};
      packageCache = {};
    };

    exports.readPackageSync = readPackageSync;
  }

});

var require_src2 = __commonJS({
  "../../node_modules/lasso-package-root/src/index.js"(exports) {
    var nodePath = __require("path");

    var lassoCachingFS = require_src();
    var rootPackagesCache = {};

    function getRootPackage(dirname) {
      var rootPkg = rootPackagesCache[dirname];

      if (rootPkg) {
        return rootPkg;
      }

      var currentDir = dirname;

      while (true) {
        var packagePath = nodePath.join(currentDir, "package.json");
        var pkg = lassoCachingFS.readPackageSync(packagePath);

        if (pkg && (pkg.name || pkg.dependencies || pkg.version || pkg.devDependencies || pkg.peerDependencies)) {
          rootPkg = pkg;
          break;
        }

        var parentDir = nodePath.dirname(currentDir);

        if (!parentDir || parentDir === currentDir) {
          break;
        }

        currentDir = parentDir;
      }

      rootPackagesCache[dirname] = rootPkg || null;
      return rootPkg;
    }

    function getRootDir(path3) {
      var rootPkg = getRootPackage(path3);
      return rootPkg && rootPkg.__dirname;
    }

    exports.getRootPackage = getRootPackage;
    exports.getRootDir = getRootDir;
  }

});

var require_taglib = __commonJS({
  "../../node_modules/@marko/babel-utils/dist/taglib.js"(exports) {
    "use strict";

    exports.__esModule = true;
    exports.getTagDefForTagName = getTagDefForTagName;
    exports.getTaglibLookup = getTaglibLookup;
    var SEEN_TAGS_KEY = Symbol();

    function getTaglibLookup(file) {
      return file.___taglibLookup;
    }

    function getTagDefForTagName(file, tagName) {
      const tagDef = getTaglibLookup(file).getTag(tagName);

      if (tagDef) {
        let seen = file.metadata.marko[SEEN_TAGS_KEY];

        if (!seen) {
          seen = file.metadata.marko[SEEN_TAGS_KEY] = new Set();
        }

        if (!seen.has(tagDef)) {
          seen.add(tagName);
          const {
            filePath
          } = tagDef;
          const len = filePath.length;

          if (filePath[len - 14] === "m" && filePath.endsWith("marko-tag.json")) {
            file.metadata.marko.watchFiles.push(filePath);
          }
        }
      }

      return tagDef;
    }
  }

});

var require_dist = __commonJS({
  "../../node_modules/relative-import-path/dist/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;

    var __markAsModule = target => __defProp2(target, "__esModule", {
      value: true
    });

    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, {
        get: all[name],
        enumerable: true
      });
    };

    var __reExport = (target, module2, copyDefault, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2)) if (!__hasOwnProp2.call(target, key) && (copyDefault || key !== "default")) __defProp2(target, key, {
          get: () => module2[key],
          enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable
        });
      }

      return target;
    };

    var __toCommonJS = (cache => {
      return (module2, temp) => {
        return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
      };
    })(typeof WeakMap !== "undefined" ? new WeakMap() : 0);

    var src_exports = {};

    __export(src_exports, {
      relativeImportPath: () => relativeImportPath
    });

    var import_path3 = __require("path");

    var nms = import_path3.sep + "node_modules" + import_path3.sep;
    var nmsLen = nms.length;
    var backSep = `../`;
    var toPosix = import_path3.sep === "/" ? v => v : v => {
      let result = "";

      for (let i = v.length; i--;) {
        const c = v[i];
        result = (c === import_path3.sep ? "/" : c) + result;
      }

      return result;
    };

    function relativeImportPath(from, to) {
      let i = 0;
      let sepPos = -1;
      let prevSepPos = -1;
      let prevPrevSepPos = -1;
      const fromLen = from.length;
      const commonLen = Math.min(to.length, fromLen);

      for (; i < commonLen; i++) {
        const curChar = to[i];
        if (curChar !== from[i]) break;

        if (curChar === import_path3.sep) {
          prevPrevSepPos = prevSepPos;
          prevSepPos = sepPos;
          sepPos = i;
        }
      }

      if (sepPos !== -1) {
        if (hasNms(to, sepPos)) {
          return toPosix(stripNms(to, sepPos));
        }

        if (prevSepPos !== -1) {
          if (prevPrevSepPos !== -1 && to[prevSepPos + 1] === "@") {
            prevSepPos = prevPrevSepPos;
          }

          if (hasNms(to, prevSepPos)) {
            return toPosix(stripNms(to, prevSepPos));
          }
        }
      }

      if (sepPos <= 0) return toPosix(to);
      let back = 0;

      for (; i < fromLen; i++) if (from[i] === import_path3.sep) back++;

      if (back) {
        return backSep.repeat(back) + toPosix(to.slice(sepPos + 1));
      } else {
        return `.${toPosix(to.slice(sepPos))}`;
      }
    }

    function hasNms(src, pos) {
      return src.slice(pos).startsWith(nms);
    }

    function stripNms(src, pos) {
      return src.slice(pos + nmsLen);
    }

    module.exports = __toCommonJS(src_exports);
  }

});

var require_imports = __commonJS({
  "../../node_modules/@marko/babel-utils/dist/imports.js"(exports) {
    "use strict";

    var _interopRequireDefault = require_interopRequireDefault();

    exports.__esModule = true;
    exports.importDefault = importDefault3;
    exports.importNamed = importNamed3;
    exports.resolveRelativePath = resolveRelativePath2;

    var _path = _interopRequireDefault(__require("path"));

    var _compiler = __require("@marko/compiler");

    var _relativeImportPath = require_dist();

    var IMPORTS_KEY = Symbol();
    var FS_START = _path.default.sep === "/" ? _path.default.sep : /^(.*?:)/.exec(process.cwd())[1];

    function resolveRelativePath2(file, request) {
      if (request.startsWith(FS_START)) {
        request = (0, _relativeImportPath.relativeImportPath)(file.opts.filename, request);
      }

      if (file.markoOpts.optimize) {
        request = request.replace(/(^|\/node-modules\/)marko\/src\//, "$1marko/dist/");
      }

      return request;
    }

    function importDefault3(file, request, nameHint) {
      const imports = getImports(file);
      request = resolveRelativePath2(file, request);
      let importDeclaration = imports.get(request);

      if (!importDeclaration) {
        imports.set(request, importDeclaration = file.path.pushContainer("body", _compiler.types.importDeclaration([], _compiler.types.stringLiteral(request)))[0]);
      }

      if (!nameHint) {
        return;
      }

      const specifiers = importDeclaration.get("specifiers");
      const specifier = specifiers.find(specifier2 => specifier2.isImportDefaultSpecifier());

      if (!specifier) {
        const identifier = file.scope.generateUidIdentifier(nameHint);
        importDeclaration.pushContainer("specifiers", _compiler.types.importDefaultSpecifier(identifier));
        return identifier;
      }

      return _compiler.types.identifier(specifier.node.local.name);
    }

    function importNamed3(file, request, name, nameHint = name) {
      request = resolveRelativePath2(file, request);
      const imports = getImports(file);
      let importDeclaration = imports.get(request);

      if (!importDeclaration) {
        imports.set(request, importDeclaration = file.path.pushContainer("body", _compiler.types.importDeclaration([], _compiler.types.stringLiteral(request)))[0]);
      }

      const specifiers = importDeclaration.get("specifiers");
      const specifier = specifiers.find(specifier2 => specifier2.isImportSpecifier() && specifier2.node.imported.name === name);

      if (!specifier) {
        const identifier = file.scope.generateUidIdentifier(nameHint);
        importDeclaration.pushContainer("specifiers", _compiler.types.importSpecifier(identifier, _compiler.types.identifier(name)));
        return identifier;
      }

      return _compiler.types.identifier(specifier.node.local.name);
    }

    function getImports(file) {
      let imports = file.metadata.marko[IMPORTS_KEY];

      if (!imports) {
        imports = file.metadata.marko[IMPORTS_KEY] = new Map();
      }

      return imports;
    }
  }

});

var require_tags = __commonJS({
  "../../node_modules/@marko/babel-utils/dist/tags.js"(exports) {
    "use strict";

    var _interopRequireDefault = require_interopRequireDefault();

    exports.__esModule = true;
    exports.findAttributeTags = findAttributeTags;
    exports.findParentTag = findParentTag2;
    exports.getArgOrSequence = getArgOrSequence;
    exports.getFullyResolvedTagName = getFullyResolvedTagName;
    exports.getMacroIdentifier = getMacroIdentifier;
    exports.getTagDef = getTagDef6;
    exports.getTemplateId = getTemplateId3;
    exports.isAttributeTag = isAttributeTag2;
    exports.isDynamicTag = isDynamicTag;
    exports.isLoopTag = isLoopTag2;
    exports.isMacroTag = isMacroTag;
    exports.isNativeTag = isNativeTag4;
    exports.isTransparentTag = isTransparentTag2;
    exports.loadFileForImport = loadFileForImport;
    exports.loadFileForTag = loadFileForTag2;
    exports.resolveTagImport = resolveTagImport3;

    var _path = __require("path");

    var _resolveFrom = _interopRequireDefault(require_resolve_from());

    var _crypto = __require("crypto");

    var _compiler = __require("@marko/compiler");

    var _lassoPackageRoot = require_src2();

    var _taglib = require_taglib();

    var _imports = require_imports();

    var TRANSPARENT_TAGS = new Set(["for", "while", "if", "else", "else-if", "_no-update"]);
    var CWD = process.cwd();
    var ROOT = CWD;

    try {
      ROOT = (0, _lassoPackageRoot.getRootDir)(ROOT) || ROOT;
    } catch {}

    function isNativeTag4(path3) {
      if (path3.node._isDynamicString) {
        return true;
      }

      const tagDef = getTagDef6(path3);
      return tagDef && tagDef.html && (tagDef.htmlType === "custom-element" || !tagDef.template && !tagDef.renderer);
    }

    function isDynamicTag(path3) {
      return !_compiler.types.isStringLiteral(path3.node.name);
    }

    function isAttributeTag2(path3) {
      const {
        node: {
          name
        }
      } = path3;
      return _compiler.types.isStringLiteral(name) && name.value[0] === "@";
    }

    function isTransparentTag2(path3) {
      const {
        node: {
          name
        }
      } = path3;
      return _compiler.types.isStringLiteral(name) && TRANSPARENT_TAGS.has(name.value);
    }

    function isMacroTag(path3) {
      return Boolean(getMacroIdentifier(path3));
    }

    function getMacroIdentifier(path3) {
      const macros = path3.hub.file.metadata.marko.macros;
      const {
        name
      } = path3.node;

      if (_compiler.types.isStringLiteral(name)) {
        const id = macros[name.value];

        if (id) {
          return _compiler.types.identifier(id);
        }
      }
    }

    function getTagDef6(path3) {
      const {
        node,
        hub: {
          file
        }
      } = path3;

      if (!node.tagDef) {
        if (isDynamicTag(path3) || isMacroTag(path3)) {
          node.tagDef = null;
        } else {
          node.tagDef = (0, _taglib.getTagDefForTagName)(file, isAttributeTag2(path3) ? getFullyResolvedTagName(path3) : node.name.value) || null;
        }
      }

      return node.tagDef;
    }

    function getFullyResolvedTagName(path3) {
      const parts = [];
      let cur;

      do {
        cur = path3.node.name.value;

        if (isAttributeTag2(path3)) {
          parts.push(cur.slice(1));
        } else {
          parts.push(cur || "*");
          break;
        }
      } while (path3 = findParentTag2(path3));

      return parts.reverse().join(":");
    }

    function findParentTag2(path3) {
      let cur = path3.parentPath;

      while (cur.node) {
        if (cur.isMarkoTagBody()) {
          cur = cur.parentPath;
          continue;
        }

        if (!cur.isMarkoTag()) {
          cur = void 0;
          break;
        }

        if (isTransparentTag2(cur)) {
          cur = cur.parentPath;
          continue;
        }

        return cur;
      }
    }

    function findAttributeTags(path3, attributeTags = []) {
      path3.get("body.body").forEach(child => {
        if (isAttributeTag2(child)) {
          attributeTags.push(child);
        } else if (isTransparentTag2(child)) {
          findAttributeTags(child, attributeTags);
        }
      });
      return attributeTags;
    }

    function getArgOrSequence(path3) {
      const {
        node: {
          arguments: args
        }
      } = path3;
      const len = args && args.length;

      if (len) {
        if (len > 1) {
          return _compiler.types.sequenceExpression(args);
        } else {
          return args[0];
        }
      }
    }

    function isLoopTag2(path3) {
      if (!path3.isMarkoTag()) {
        return false;
      }

      const tagName = path3.node.name.value;
      return tagName === "while" || tagName === "for";
    }

    function loadFileForTag2(tag) {
      const def = getTagDef6(tag);
      const {
        file
      } = tag.hub;
      const fs = file.markoOpts.fileSystem;
      const filename = def && def.template;

      if (filename) {
        return file.___getMarkoFile(fs.readFileSync(filename).toString("utf-8"), createNewFileOpts(file.opts, filename), file.markoOpts);
      }
    }

    function loadFileForImport(file, request) {
      const fs = file.markoOpts.fileSystem;
      const relativeRequest = resolveTagImport3(file.path, request);

      if (relativeRequest) {
        const filename = relativeRequest[0] === "." ? (0, _path.resolve)(file.opts.filename, "..", relativeRequest) : (0, _resolveFrom.default)((0, _path.dirname)(file.opts.filename), relativeRequest);
        return file.___getMarkoFile(fs.readFileSync(filename).toString("utf-8"), createNewFileOpts(file.opts, filename), file.markoOpts);
      }
    }

    function getTemplateId3(optimize, request) {
      const id = (0, _path.relative)(ROOT, request);

      if (optimize) {
        return (0, _crypto.createHash)("MD5").update(id).digest("base64").slice(0, 8);
      }

      return id;
    }

    function resolveTagImport3(path3, request) {
      const {
        hub: {
          file
        }
      } = path3;

      if (request[0] === "<") {
        const tagName = request.slice(1, -1);
        const tagDef = (0, _taglib.getTagDefForTagName)(file, tagName);
        const tagEntry = tagDef && (tagDef.renderer || tagDef.template);
        const relativePath = tagEntry && (0, _imports.resolveRelativePath)(file, tagEntry);

        if (!relativePath) {
          throw path3.buildCodeFrameError(`Unable to find entry point for custom tag <${tagName}>.`);
        }

        return relativePath;
      }

      if (request.endsWith(".marko")) {
        return (0, _imports.resolveRelativePath)(file, request);
      }
    }

    function createNewFileOpts(opts, filename) {
      const sourceFileName = (0, _path.basename)(filename);
      const filenameRelative = (0, _path.relative)(CWD, filename);
      return { ...opts,
        filename,
        sourceFileName,
        filenameRelative,
        parserOpts: { ...opts.parserOpts,
          sourceFileName
        },
        generatorOpts: { ...opts.generatorOpts,
          filename,
          sourceFileName
        }
      };
    }
  }

});

var require_assert = __commonJS({
  "../../node_modules/@marko/babel-utils/dist/assert.js"(exports) {
    "use strict";

    exports.__esModule = true;
    exports.assertAllowedAttributes = assertAllowedAttributes2;
    exports.assertNoArgs = assertNoArgs3;
    exports.assertNoAttributeTags = assertNoAttributeTags2;
    exports.assertNoAttributes = assertNoAttributes3;
    exports.assertNoParams = assertNoParams14;
    exports.assertNoVar = assertNoVar9;

    function assertAllowedAttributes2(path3, allowed) {
      const {
        node
      } = path3;
      node.attributes.forEach((attr2, i) => {
        if (!allowed.includes(attr2.name)) {
          throw path3.get(`attributes.${i}`).buildCodeFrameError(`Invalid "${node.name.value}" tag attribute: "${attr2.name}".`);
        }
      });
    }

    function assertNoAttributes3(path3) {
      assertAllowedAttributes2(path3, []);
    }

    function assertNoParams14(path3) {
      const {
        params
      } = path3.node.body;

      if (params.length) {
        const start = params[0].loc.start;
        const end = params[params.length - 1].loc.end;
        throw path3.hub.buildError({
          loc: {
            start,
            end
          }
        }, "Tag does not support parameters.");
      }
    }

    function assertNoAttributeTags2(path3) {
      const exampleAttributeTag = path3.get("exampleAttributeTag");

      if (exampleAttributeTag.node) {
        throw exampleAttributeTag.get("name").buildCodeFrameError("@tags must be within a custom element.");
      }
    }

    function assertNoArgs3(path3) {
      const {
        hub
      } = path3;
      const args = path3.get("arguments");

      if (args.length) {
        const start = args[0].node.loc.start;
        const end = args[args.length - 1].node.loc.end;
        throw hub.buildError({
          loc: {
            start,
            end
          }
        }, "Tag does not support arguments.");
      }
    }

    function assertNoVar9(path3) {
      const tagVar = path3.get("var");

      if (tagVar.node) {
        throw tagVar.buildCodeFrameError("Tag does not support a variable.");
      }
    }
  }

});

var require_jsesc = __commonJS({
  "../../node_modules/jsesc/jsesc.js"(exports, module) {
    "use strict";

    var object = {};
    var hasOwnProperty2 = object.hasOwnProperty;

    var forOwn = (object2, callback) => {
      for (const key in object2) {
        if (hasOwnProperty2.call(object2, key)) {
          callback(key, object2[key]);
        }
      }
    };

    var extend = (destination, source) => {
      if (!source) {
        return destination;
      }

      forOwn(source, (key, value) => {
        destination[key] = value;
      });
      return destination;
    };

    var forEach = (array, callback) => {
      const length = array.length;
      let index = -1;

      while (++index < length) {
        callback(array[index]);
      }
    };

    var fourHexEscape = hex => {
      return "\\u" + ("0000" + hex).slice(-4);
    };

    var hexadecimal = (code, lowercase) => {
      let hexadecimal2 = code.toString(16);
      if (lowercase) return hexadecimal2;
      return hexadecimal2.toUpperCase();
    };

    var toString2 = object.toString;
    var isArray = Array.isArray;

    var isBuffer = value => {
      return typeof Buffer === "function" && Buffer.isBuffer(value);
    };

    var isObject = value => {
      return toString2.call(value) == "[object Object]";
    };

    var isString = value => {
      return typeof value == "string" || toString2.call(value) == "[object String]";
    };

    var isNumber = value => {
      return typeof value == "number" || toString2.call(value) == "[object Number]";
    };

    var isFunction = value => {
      return typeof value == "function";
    };

    var isMap = value => {
      return toString2.call(value) == "[object Map]";
    };

    var isSet = value => {
      return toString2.call(value) == "[object Set]";
    };

    var singleEscapes = {
      "\\": "\\\\",
      "\b": "\\b",
      "\f": "\\f",
      "\n": "\\n",
      "\r": "\\r",
      "	": "\\t"
    };
    var regexSingleEscape = /[\\\b\f\n\r\t]/;
    var regexDigit = /[0-9]/;
    var regexWhitespace = /[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
    var escapeEverythingRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^]/g;
    var escapeNonAsciiRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^ !#-&\(-\[\]-_a-~]/g;

    var jsesc = (argument, options) => {
      const increaseIndentation = () => {
        oldIndent = indent;
        ++options.indentLevel;
        indent = options.indent.repeat(options.indentLevel);
      };

      const defaults = {
        "escapeEverything": false,
        "minimal": false,
        "isScriptContext": false,
        "quotes": "single",
        "wrap": false,
        "es6": false,
        "json": false,
        "compact": true,
        "lowercaseHex": false,
        "numbers": "decimal",
        "indent": "	",
        "indentLevel": 0,
        "__inline1__": false,
        "__inline2__": false
      };
      const json = options && options.json;

      if (json) {
        defaults.quotes = "double";
        defaults.wrap = true;
      }

      options = extend(defaults, options);

      if (options.quotes != "single" && options.quotes != "double" && options.quotes != "backtick") {
        options.quotes = "single";
      }

      const quote = options.quotes == "double" ? '"' : options.quotes == "backtick" ? "`" : "'";
      const compact = options.compact;
      const lowercaseHex = options.lowercaseHex;
      let indent = options.indent.repeat(options.indentLevel);
      let oldIndent = "";
      const inline1 = options.__inline1__;
      const inline2 = options.__inline2__;
      const newLine = compact ? "" : "\n";
      let result;
      let isEmpty = true;
      const useBinNumbers = options.numbers == "binary";
      const useOctNumbers = options.numbers == "octal";
      const useDecNumbers = options.numbers == "decimal";
      const useHexNumbers = options.numbers == "hexadecimal";

      if (json && argument && isFunction(argument.toJSON)) {
        argument = argument.toJSON();
      }

      if (!isString(argument)) {
        if (isMap(argument)) {
          if (argument.size == 0) {
            return "new Map()";
          }

          if (!compact) {
            options.__inline1__ = true;
            options.__inline2__ = false;
          }

          return "new Map(" + jsesc(Array.from(argument), options) + ")";
        }

        if (isSet(argument)) {
          if (argument.size == 0) {
            return "new Set()";
          }

          return "new Set(" + jsesc(Array.from(argument), options) + ")";
        }

        if (isBuffer(argument)) {
          if (argument.length == 0) {
            return "Buffer.from([])";
          }

          return "Buffer.from(" + jsesc(Array.from(argument), options) + ")";
        }

        if (isArray(argument)) {
          result = [];
          options.wrap = true;

          if (inline1) {
            options.__inline1__ = false;
            options.__inline2__ = true;
          }

          if (!inline2) {
            increaseIndentation();
          }

          forEach(argument, value => {
            isEmpty = false;

            if (inline2) {
              options.__inline2__ = false;
            }

            result.push((compact || inline2 ? "" : indent) + jsesc(value, options));
          });

          if (isEmpty) {
            return "[]";
          }

          if (inline2) {
            return "[" + result.join(", ") + "]";
          }

          return "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
        } else if (isNumber(argument)) {
          if (json) {
            return JSON.stringify(argument);
          }

          if (useDecNumbers) {
            return String(argument);
          }

          if (useHexNumbers) {
            let hexadecimal2 = argument.toString(16);

            if (!lowercaseHex) {
              hexadecimal2 = hexadecimal2.toUpperCase();
            }

            return "0x" + hexadecimal2;
          }

          if (useBinNumbers) {
            return "0b" + argument.toString(2);
          }

          if (useOctNumbers) {
            return "0o" + argument.toString(8);
          }
        } else if (!isObject(argument)) {
          if (json) {
            return JSON.stringify(argument) || "null";
          }

          return String(argument);
        } else {
          result = [];
          options.wrap = true;
          increaseIndentation();
          forOwn(argument, (key, value) => {
            isEmpty = false;
            result.push((compact ? "" : indent) + jsesc(key, options) + ":" + (compact ? "" : " ") + jsesc(value, options));
          });

          if (isEmpty) {
            return "{}";
          }

          return "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}";
        }
      }

      const regex = options.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;
      result = argument.replace(regex, (char, pair, lone, quoteChar, index, string) => {
        if (pair) {
          if (options.minimal) return pair;
          const first = pair.charCodeAt(0);
          const second = pair.charCodeAt(1);

          if (options.es6) {
            const codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
            const hex2 = hexadecimal(codePoint, lowercaseHex);
            return "\\u{" + hex2 + "}";
          }

          return fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));
        }

        if (lone) {
          return fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));
        }

        if (char == "\0" && !json && !regexDigit.test(string.charAt(index + 1))) {
          return "\\0";
        }

        if (quoteChar) {
          if (quoteChar == quote || options.escapeEverything) {
            return "\\" + quoteChar;
          }

          return quoteChar;
        }

        if (regexSingleEscape.test(char)) {
          return singleEscapes[char];
        }

        if (options.minimal && !regexWhitespace.test(char)) {
          return char;
        }

        const hex = hexadecimal(char.charCodeAt(0), lowercaseHex);

        if (json || hex.length > 2) {
          return fourHexEscape(hex);
        }

        return "\\x" + ("00" + hex).slice(-2);
      });

      if (quote == "`") {
        result = result.replace(/\$\{/g, "\\${");
      }

      if (options.isScriptContext) {
        result = result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--");
      }

      if (options.wrap) {
        result = quote + result + quote;
      }

      return result;
    };

    jsesc.version = "3.0.2";
    module.exports = jsesc;
  }

});

var require_template_string = __commonJS({
  "../../node_modules/@marko/babel-utils/dist/template-string.js"(exports) {
    "use strict";

    var _interopRequireDefault = require_interopRequireDefault();

    exports.__esModule = true;
    exports.normalizeTemplateString = normalizeTemplateString;

    var _jsesc = _interopRequireDefault(require_jsesc());

    var _compiler = __require("@marko/compiler");

    function normalizeTemplateString(quasis, ...expressions) {
      quasis = quasis.map(q => _compiler.types.isTemplateElement(q) ? q.value.cooked : q);

      for (let i = expressions.length; i--;) {
        let v = expressions[i];

        if (_compiler.types.isTemplateLiteral(v)) {
          quasis[i] += v.quasis[0].value.cooked;
          quasis[i + 1] = v.quasis[v.quasis.length - 1].value.cooked + (quasis[i + 1] || "");
          quasis.splice(i + 1, 0, ...v.quasis.slice(1, -1).map(q => q.value.cooked));
          expressions.splice(i, 1, ...v.expressions);
          i += v.expressions.length;
        } else if (_compiler.types.isStringLiteral(v) || typeof v === "string") {
          const value = _compiler.types.isStringLiteral(v) ? v.value : v;
          quasis[i] += value + quasis[i + 1];
          expressions.splice(i, 1);
          quasis.splice(i + 1, 1);
        }
      }

      if (!expressions.length) {
        const literal = quasis.join("");
        return literal === "" ? void 0 : _compiler.types.stringLiteral(literal);
      }

      if (expressions.length === 1 && quasis.length === 2 && quasis.every(isEmptyString)) {
        return expressions[0];
      }

      return _compiler.types.templateLiteral(quasis.map(getTemplateElement), expressions);
    }

    function getTemplateElement(s = "") {
      return _compiler.types.templateElement({
        cooked: s,
        raw: (0, _jsesc.default)(s, {
          quotes: "backtick"
        })
      });
    }

    function isEmptyString(s = "") {
      return s === "";
    }
  }

});

var require_loc = __commonJS({
  "../../node_modules/@marko/babel-utils/dist/loc.js"(exports) {
    "use strict";

    exports.__esModule = true;
    exports.getLoc = getLoc;
    exports.getLocRange = getLocRange;
    exports.withLoc = withLoc;
    var LINE_POS_KEY = Symbol();

    function getLoc(file, pos) {
      return findLoc(getLinePositions(file), 0, pos);
    }

    function getLocRange(file, start, end) {
      const linePositions = getLinePositions(file);
      const startLoc = findLoc(linePositions, 0, start);

      if (startLoc) {
        const endLoc = start === end ? startLoc : findLoc(linePositions, startLoc.line - 1, end);
        return {
          start: startLoc,
          end: endLoc
        };
      }
    }

    function withLoc(file, node, start, end) {
      node.loc = getLocRange(file, start, end);
      node.start = start;
      node.end = end;
      return node;
    }

    function getLinePositions(file) {
      let linePositions = file.metadata.marko[LINE_POS_KEY];

      if (!linePositions) {
        linePositions = [0];

        for (let i = 0; i < file.code.length; i++) {
          if (file.code[i] === "\n") {
            linePositions.push(i);
          }
        }

        file.metadata.marko[LINE_POS_KEY] = linePositions;
      }

      return linePositions;
    }

    function findLoc(linePositions, startLine, pos) {
      const endLine = linePositions.length - 1;
      let max = endLine;
      let line = startLine;

      while (line < max) {
        const mid = line + max >>> 1;

        if (linePositions[mid] < pos) {
          line = mid + 1;
        } else {
          max = mid;
        }
      }

      let linePos = linePositions[line];

      if (linePos > pos) {
        linePos = linePositions[--line];
      }

      return {
        line: line + 1,
        column: pos === linePos ? 0 : pos - linePos - (line === 0 ? 0 : 1)
      };
    }
  }

});

var require_lib = __commonJS({
  "../../node_modules/@babel/parser/lib/index.js"(exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    var Position = class {
      constructor(line, col, index) {
        this.line = void 0;
        this.column = void 0;
        this.index = void 0;
        this.line = line;
        this.column = col;
        this.index = index;
      }

    };
    var SourceLocation = class {
      constructor(start, end) {
        this.start = void 0;
        this.end = void 0;
        this.filename = void 0;
        this.identifierName = void 0;
        this.start = start;
        this.end = end;
      }

    };

    function createPositionWithColumnOffset(position, columnOffset) {
      const {
        line,
        column,
        index
      } = position;
      return new Position(line, column + columnOffset, index + columnOffset);
    }

    var ParseErrorCode = {
      SyntaxError: "BABEL_PARSER_SYNTAX_ERROR",
      SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"
    };

    var reflect = (keys, last = keys.length - 1) => ({
      get() {
        return keys.reduce((object, key) => object[key], this);
      },

      set(value) {
        keys.reduce((item, key, i) => i === last ? item[key] = value : item[key], this);
      }

    });

    var instantiate = (constructor, properties, descriptors) => Object.keys(descriptors).map(key => [key, descriptors[key]]).filter(([, descriptor]) => !!descriptor).map(([key, descriptor]) => [key, typeof descriptor === "function" ? {
      value: descriptor,
      enumerable: false
    } : typeof descriptor.reflect === "string" ? Object.assign({}, descriptor, reflect(descriptor.reflect.split("."))) : descriptor]).reduce((instance, [key, descriptor]) => Object.defineProperty(instance, key, Object.assign({
      configurable: true
    }, descriptor)), Object.assign(new constructor(), properties));

    var ModuleErrors = {
      ImportMetaOutsideModule: {
        message: `import.meta may appear only with 'sourceType: "module"'`,
        code: ParseErrorCode.SourceTypeModuleError
      },
      ImportOutsideModule: {
        message: `'import' and 'export' may appear only with 'sourceType: "module"'`,
        code: ParseErrorCode.SourceTypeModuleError
      }
    };
    var NodeDescriptions = {
      ArrayPattern: "array destructuring pattern",
      AssignmentExpression: "assignment expression",
      AssignmentPattern: "assignment expression",
      ArrowFunctionExpression: "arrow function expression",
      ConditionalExpression: "conditional expression",
      CatchClause: "catch clause",
      ForOfStatement: "for-of statement",
      ForInStatement: "for-in statement",
      ForStatement: "for-loop",
      FormalParameters: "function parameter list",
      Identifier: "identifier",
      ImportSpecifier: "import specifier",
      ImportDefaultSpecifier: "import default specifier",
      ImportNamespaceSpecifier: "import namespace specifier",
      ObjectPattern: "object destructuring pattern",
      ParenthesizedExpression: "parenthesized expression",
      RestElement: "rest element",
      UpdateExpression: {
        true: "prefix operation",
        false: "postfix operation"
      },
      VariableDeclarator: "variable declaration",
      YieldExpression: "yield expression"
    };

    var toNodeDescription = ({
      type,
      prefix: prefix2
    }) => type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[String(prefix2)] : NodeDescriptions[type];

    var StandardErrors = {
      AccessorIsGenerator: ({
        kind
      }) => `A ${kind}ter cannot be a generator.`,
      ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
      AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
      AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
      AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
      AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
      AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
      AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
      BadGetterArity: "A 'get' accesor must not have any formal parameters.",
      BadSetterArity: "A 'set' accesor must have exactly one formal parameter.",
      BadSetterRestParameter: "A 'set' accesor function argument must not be a rest parameter.",
      ConstructorClassField: "Classes may not have a field named 'constructor'.",
      ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
      ConstructorIsAccessor: "Class constructor may not be an accessor.",
      ConstructorIsAsync: "Constructor can't be an async function.",
      ConstructorIsGenerator: "Constructor can't be a generator.",
      DeclarationMissingInitializer: ({
        kind
      }) => `Missing initializer in ${kind} declaration.`,
      DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",
      DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.",
      DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
      DecoratorExportClass: "Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.",
      DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
      DecoratorStaticBlock: "Decorators can't be used with a static block.",
      DeletePrivateField: "Deleting a private field is not allowed.",
      DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
      DuplicateConstructor: "Duplicate constructor in the same class.",
      DuplicateDefaultExport: "Only one default export allowed per module.",
      DuplicateExport: ({
        exportName
      }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`,
      DuplicateProto: "Redefinition of __proto__ property.",
      DuplicateRegExpFlags: "Duplicate regular expression flag.",
      ElementAfterRest: "Rest element must be last element.",
      EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
      ExportBindingIsString: ({
        localName,
        exportName
      }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`,
      ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
      ForInOfLoopInitializer: ({
        type
      }) => `'${type === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`,
      ForInUsing: "For-in loop may not start with 'using' declaration.",
      ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
      ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
      GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
      IllegalBreakContinue: ({
        type
      }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`,
      IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
      IllegalReturn: "'return' outside of function.",
      ImportBindingIsString: ({
        importName
      }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${importName}" as foo }\`?`,
      ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
      ImportCallArity: ({
        maxArgumentCount
      }) => `\`import()\` requires exactly ${maxArgumentCount === 1 ? "one argument" : "one or two arguments"}.`,
      ImportCallNotNewExpression: "Cannot use new with import(...).",
      ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
      ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
      ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
      ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.',
      IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
      InvalidBigIntLiteral: "Invalid BigIntLiteral.",
      InvalidCodePoint: "Code point out of bounds.",
      InvalidCoverInitializedName: "Invalid shorthand property initializer.",
      InvalidDecimal: "Invalid decimal.",
      InvalidDigit: ({
        radix
      }) => `Expected number in radix ${radix}.`,
      InvalidEscapeSequence: "Bad character escape sequence.",
      InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
      InvalidEscapedReservedWord: ({
        reservedWord
      }) => `Escape sequence in keyword ${reservedWord}.`,
      InvalidIdentifier: ({
        identifierName
      }) => `Invalid identifier ${identifierName}.`,
      InvalidLhs: ({
        ancestor
      }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,
      InvalidLhsBinding: ({
        ancestor
      }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,
      InvalidNumber: "Invalid number.",
      InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
      InvalidOrUnexpectedToken: ({
        unexpected
      }) => `Unexpected character '${unexpected}'.`,
      InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
      InvalidPrivateFieldResolution: ({
        identifierName
      }) => `Private name #${identifierName} is not defined.`,
      InvalidPropertyBindingPattern: "Binding member expression.",
      InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
      InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
      LabelRedeclaration: ({
        labelName
      }) => `Label '${labelName}' is already declared.`,
      LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.",
      LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
      MalformedRegExpFlags: "Invalid regular expression flag.",
      MissingClassName: "A class name is required.",
      MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
      MissingSemicolon: "Missing semicolon.",
      MissingPlugin: ({
        missingPlugin
      }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`,
      MissingOneOfPlugins: ({
        missingPlugin
      }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`,
      MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
      MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
      ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
      ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
      ModuleAttributesWithDuplicateKeys: ({
        key
      }) => `Duplicate key "${key}" is not allowed in module attributes.`,
      ModuleExportNameHasLoneSurrogate: ({
        surrogateCharCode
      }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`,
      ModuleExportUndefined: ({
        localName
      }) => `Export '${localName}' is not defined.`,
      MultipleDefaultsInSwitch: "Multiple default clauses.",
      NewlineAfterThrow: "Illegal newline after throw.",
      NoCatchOrFinally: "Missing catch or finally clause.",
      NumberIdentifier: "Identifier directly after number.",
      NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
      ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
      OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
      OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
      OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
      ParamDupe: "Argument name clash.",
      PatternHasAccessor: "Object pattern can't contain getter or setter.",
      PatternHasMethod: "Object pattern can't contain methods.",
      PrivateInExpectedIn: ({
        identifierName
      }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`,
      PrivateNameRedeclaration: ({
        identifierName
      }) => `Duplicate private name #${identifierName}.`,
      RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
      RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
      RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
      RecordNoProto: "'__proto__' is not allowed in Record expressions.",
      RestTrailingComma: "Unexpected trailing comma after rest element.",
      SloppyFunction: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
      StaticPrototype: "Classes may not have static property named prototype.",
      SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
      SuperPrivateField: "Private fields can't be accessed on super.",
      TrailingDecorator: "Decorators must be attached to a class element.",
      TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
      TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
      TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
      UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
      UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
      UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
      UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
      UnexpectedKeyword: ({
        keyword
      }) => `Unexpected keyword '${keyword}'.`,
      UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
      UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
      UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
      UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
      UnexpectedPrivateField: "Unexpected private name.",
      UnexpectedReservedWord: ({
        reservedWord
      }) => `Unexpected reserved word '${reservedWord}'.`,
      UnexpectedSuper: "'super' is only allowed in object methods and classes.",
      UnexpectedToken: ({
        expected,
        unexpected
      }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`,
      UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
      UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
      UnsupportedBind: "Binding should be performed on object property.",
      UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
      UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
      UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
      UnsupportedMetaProperty: ({
        target,
        onlyValidPropertyName
      }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,
      UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
      UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
      UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
      UnterminatedComment: "Unterminated comment.",
      UnterminatedRegExp: "Unterminated regular expression.",
      UnterminatedString: "Unterminated string constant.",
      UnterminatedTemplate: "Unterminated template.",
      UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
      VarRedeclaration: ({
        identifierName
      }) => `Identifier '${identifierName}' has already been declared.`,
      YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
      YieldInParameter: "Yield expression is not allowed in formal parameters.",
      ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
    };
    var StrictModeErrors = {
      StrictDelete: "Deleting local variable in strict mode.",
      StrictEvalArguments: ({
        referenceName
      }) => `Assigning to '${referenceName}' in strict mode.`,
      StrictEvalArgumentsBinding: ({
        bindingName
      }) => `Binding '${bindingName}' in strict mode.`,
      StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
      StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
      StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
      StrictWith: "'with' in strict mode."
    };
    var UnparenthesizedPipeBodyDescriptions = new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
    var PipelineOperatorErrors = {
      PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
      PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
      PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
      PipeTopicUnconfiguredToken: ({
        token
      }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`,
      PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
      PipeUnparenthesizedBody: ({
        type
      }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({
        type
      })}; please wrap it in parentheses.`,
      PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
      PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
      PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
      PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
      PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
      PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'
    };
    var _excluded$1 = ["toMessage"];
    var _excluded2$1 = ["message"];

    function toParseErrorConstructor(_ref) {
      let {
        toMessage
      } = _ref,
          properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);

      return function constructor({
        loc,
        details
      }) {
        return instantiate(SyntaxError, Object.assign({}, properties, {
          loc
        }), {
          clone(overrides = {}) {
            const loc2 = overrides.loc || {};
            return constructor({
              loc: new Position("line" in loc2 ? loc2.line : this.loc.line, "column" in loc2 ? loc2.column : this.loc.column, "index" in loc2 ? loc2.index : this.loc.index),
              details: Object.assign({}, this.details, overrides.details)
            });
          },

          details: {
            value: details,
            enumerable: false
          },
          message: {
            get() {
              return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`;
            },

            set(value) {
              Object.defineProperty(this, "message", {
                value
              });
            }

          },
          pos: {
            reflect: "loc.index",
            enumerable: true
          },
          missingPlugin: "missingPlugin" in details && {
            reflect: "details.missingPlugin",
            enumerable: true
          }
        });
      };
    }

    function ParseErrorEnum(argument, syntaxPlugin) {
      if (Array.isArray(argument)) {
        return parseErrorTemplates => ParseErrorEnum(parseErrorTemplates, argument[0]);
      }

      const ParseErrorConstructors = {};

      for (const reasonCode of Object.keys(argument)) {
        const template = argument[reasonCode];

        const _ref2 = typeof template === "string" ? {
          message: () => template
        } : typeof template === "function" ? {
          message: template
        } : template,
              {
          message
        } = _ref2,
              rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1);

        const toMessage = typeof message === "string" ? () => message : message;
        ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({
          code: ParseErrorCode.SyntaxError,
          reasonCode,
          toMessage
        }, syntaxPlugin ? {
          syntaxPlugin
        } : {}, rest));
      }

      return ParseErrorConstructors;
    }

    var Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));
    var {
      defineProperty
    } = Object;

    var toUnenumerable = (object, key) => defineProperty(object, key, {
      enumerable: false,
      value: object[key]
    });

    function toESTreeLocation(node) {
      node.loc.start && toUnenumerable(node.loc.start, "index");
      node.loc.end && toUnenumerable(node.loc.end, "index");
      return node;
    }

    var estree = superClass => class ESTreeParserMixin extends superClass {
      parse() {
        const file = toESTreeLocation(super.parse());

        if (this.options.tokens) {
          file.tokens = file.tokens.map(toESTreeLocation);
        }

        return file;
      }

      parseRegExpLiteral({
        pattern,
        flags
      }) {
        let regex = null;

        try {
          regex = new RegExp(pattern, flags);
        } catch (e) {}

        const node = this.estreeParseLiteral(regex);
        node.regex = {
          pattern,
          flags
        };
        return node;
      }

      parseBigIntLiteral(value) {
        let bigInt;

        try {
          bigInt = BigInt(value);
        } catch (_unused) {
          bigInt = null;
        }

        const node = this.estreeParseLiteral(bigInt);
        node.bigint = String(node.value || value);
        return node;
      }

      parseDecimalLiteral(value) {
        const decimal = null;
        const node = this.estreeParseLiteral(decimal);
        node.decimal = String(node.value || value);
        return node;
      }

      estreeParseLiteral(value) {
        return this.parseLiteral(value, "Literal");
      }

      parseStringLiteral(value) {
        return this.estreeParseLiteral(value);
      }

      parseNumericLiteral(value) {
        return this.estreeParseLiteral(value);
      }

      parseNullLiteral() {
        return this.estreeParseLiteral(null);
      }

      parseBooleanLiteral(value) {
        return this.estreeParseLiteral(value);
      }

      directiveToStmt(directive) {
        const expression = directive.value;
        delete directive.value;
        expression.type = "Literal";
        expression.raw = expression.extra.raw;
        expression.value = expression.extra.expressionValue;
        const stmt = directive;
        stmt.type = "ExpressionStatement";
        stmt.expression = expression;
        stmt.directive = expression.extra.rawValue;
        delete expression.extra;
        return stmt;
      }

      initFunction(node, isAsync) {
        super.initFunction(node, isAsync);
        node.expression = false;
      }

      checkDeclaration(node) {
        if (node != null && this.isObjectProperty(node)) {
          this.checkDeclaration(node.value);
        } else {
          super.checkDeclaration(node);
        }
      }

      getObjectOrClassMethodParams(method) {
        return method.value.params;
      }

      isValidDirective(stmt) {
        var _stmt$expression$extr;

        return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
      }

      parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
        super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
        const directiveStatements = node.directives.map(d => this.directiveToStmt(d));
        node.body = directiveStatements.concat(node.body);
        delete node.directives;
      }

      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);

        if (method.typeParameters) {
          method.value.typeParameters = method.typeParameters;
          delete method.typeParameters;
        }

        classBody.body.push(method);
      }

      parsePrivateName() {
        const node = super.parsePrivateName();
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return node;
          }
        }
        return this.convertPrivateNameToPrivateIdentifier(node);
      }

      convertPrivateNameToPrivateIdentifier(node) {
        const name = super.getPrivateNameSV(node);
        node = node;
        delete node.id;
        node.name = name;
        node.type = "PrivateIdentifier";
        return node;
      }

      isPrivateName(node) {
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return super.isPrivateName(node);
          }
        }
        return node.type === "PrivateIdentifier";
      }

      getPrivateNameSV(node) {
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return super.getPrivateNameSV(node);
          }
        }
        return node.name;
      }

      parseLiteral(value, type) {
        const node = super.parseLiteral(value, type);
        node.raw = node.extra.raw;
        delete node.extra;
        return node;
      }

      parseFunctionBody(node, allowExpression, isMethod = false) {
        super.parseFunctionBody(node, allowExpression, isMethod);
        node.expression = node.body.type !== "BlockStatement";
      }

      parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
        let funcNode = this.startNode();
        funcNode.kind = node.kind;
        funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
        funcNode.type = "FunctionExpression";
        delete funcNode.kind;
        node.value = funcNode;

        if (type === "ClassPrivateMethod") {
          node.computed = false;
        }

        return this.finishNode(node, "MethodDefinition");
      }

      parseClassProperty(...args) {
        const propertyNode = super.parseClassProperty(...args);
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return propertyNode;
          }
        }
        propertyNode.type = "PropertyDefinition";
        return propertyNode;
      }

      parseClassPrivateProperty(...args) {
        const propertyNode = super.parseClassPrivateProperty(...args);
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return propertyNode;
          }
        }
        propertyNode.type = "PropertyDefinition";
        propertyNode.computed = false;
        return propertyNode;
      }

      parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
        const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);

        if (node) {
          node.type = "Property";

          if (node.kind === "method") {
            node.kind = "init";
          }

          node.shorthand = false;
        }

        return node;
      }

      parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
        const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);

        if (node) {
          node.kind = "init";
          node.type = "Property";
        }

        return node;
      }

      isValidLVal(type, isUnparenthesizedInAssign, binding) {
        return type === "Property" ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
      }

      isAssignable(node, isBinding) {
        if (node != null && this.isObjectProperty(node)) {
          return this.isAssignable(node.value, isBinding);
        }

        return super.isAssignable(node, isBinding);
      }

      toAssignable(node, isLHS = false) {
        if (node != null && this.isObjectProperty(node)) {
          const {
            key,
            value
          } = node;

          if (this.isPrivateName(key)) {
            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
          }

          this.toAssignable(value, isLHS);
        } else {
          super.toAssignable(node, isLHS);
        }
      }

      toAssignableObjectExpressionProp(prop, isLast, isLHS) {
        if (prop.kind === "get" || prop.kind === "set") {
          this.raise(Errors.PatternHasAccessor, {
            at: prop.key
          });
        } else if (prop.method) {
          this.raise(Errors.PatternHasMethod, {
            at: prop.key
          });
        } else {
          super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
        }
      }

      finishCallExpression(unfinished, optional) {
        const node = super.finishCallExpression(unfinished, optional);

        if (node.callee.type === "Import") {
          node.type = "ImportExpression";
          node.source = node.arguments[0];

          if (this.hasPlugin("importAssertions")) {
            var _node$arguments$;

            node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;
          }

          delete node.arguments;
          delete node.callee;
        }

        return node;
      }

      toReferencedArguments(node) {
        if (node.type === "ImportExpression") {
          return;
        }

        super.toReferencedArguments(node);
      }

      parseExport(unfinished, decorators) {
        const exportStartLoc = this.state.lastTokStartLoc;
        const node = super.parseExport(unfinished, decorators);

        switch (node.type) {
          case "ExportAllDeclaration":
            node.exported = null;
            break;

          case "ExportNamedDeclaration":
            if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {
              node.type = "ExportAllDeclaration";
              node.exported = node.specifiers[0].exported;
              delete node.specifiers;
            }

          case "ExportDefaultDeclaration":
            {
              var _declaration$decorato;

              const {
                declaration
              } = node;

              if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {
                this.resetStartLocation(node, exportStartLoc);
              }
            }
            break;
        }

        return node;
      }

      parseSubscript(base, startLoc, noCalls, state) {
        const node = super.parseSubscript(base, startLoc, noCalls, state);

        if (state.optionalChainMember) {
          if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") {
            node.type = node.type.substring(8);
          }

          if (state.stop) {
            const chain = this.startNodeAtNode(node);
            chain.expression = node;
            return this.finishNode(chain, "ChainExpression");
          }
        } else if (node.type === "MemberExpression" || node.type === "CallExpression") {
          node.optional = false;
        }

        return node;
      }

      hasPropertyAsPrivateName(node) {
        if (node.type === "ChainExpression") {
          node = node.expression;
        }

        return super.hasPropertyAsPrivateName(node);
      }

      isOptionalChain(node) {
        return node.type === "ChainExpression";
      }

      isObjectProperty(node) {
        return node.type === "Property" && node.kind === "init" && !node.method;
      }

      isObjectMethod(node) {
        return node.method || node.kind === "get" || node.kind === "set";
      }

      finishNodeAt(node, type, endLoc) {
        return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
      }

      resetStartLocation(node, startLoc) {
        super.resetStartLocation(node, startLoc);
        toESTreeLocation(node);
      }

      resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
        super.resetEndLocation(node, endLoc);
        toESTreeLocation(node);
      }

    };

    var TokContext = class {
      constructor(token, preserveSpace) {
        this.token = void 0;
        this.preserveSpace = void 0;
        this.token = token;
        this.preserveSpace = !!preserveSpace;
      }

    };
    var types = {
      brace: new TokContext("{"),
      j_oTag: new TokContext("<tag"),
      j_cTag: new TokContext("</tag"),
      j_expr: new TokContext("<tag>...</tag>", true)
    };
    {
      types.template = new TokContext("`", true);
    }
    var beforeExpr = true;
    var startsExpr = true;
    var isLoop = true;
    var isAssign = true;
    var prefix = true;
    var postfix = true;
    var ExportedTokenType = class {
      constructor(label, conf = {}) {
        this.label = void 0;
        this.keyword = void 0;
        this.beforeExpr = void 0;
        this.startsExpr = void 0;
        this.rightAssociative = void 0;
        this.isLoop = void 0;
        this.isAssign = void 0;
        this.prefix = void 0;
        this.postfix = void 0;
        this.binop = void 0;
        this.label = label;
        this.keyword = conf.keyword;
        this.beforeExpr = !!conf.beforeExpr;
        this.startsExpr = !!conf.startsExpr;
        this.rightAssociative = !!conf.rightAssociative;
        this.isLoop = !!conf.isLoop;
        this.isAssign = !!conf.isAssign;
        this.prefix = !!conf.prefix;
        this.postfix = !!conf.postfix;
        this.binop = conf.binop != null ? conf.binop : null;
        {
          this.updateContext = null;
        }
      }

    };
    var keywords$1 = new Map();

    function createKeyword(name, options = {}) {
      options.keyword = name;
      const token = createToken(name, options);
      keywords$1.set(name, token);
      return token;
    }

    function createBinop(name, binop) {
      return createToken(name, {
        beforeExpr,
        binop
      });
    }

    var tokenTypeCounter = -1;
    var tokenTypes = [];
    var tokenLabels = [];
    var tokenBinops = [];
    var tokenBeforeExprs = [];
    var tokenStartsExprs = [];
    var tokenPrefixes = [];

    function createToken(name, options = {}) {
      var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;

      ++tokenTypeCounter;
      tokenLabels.push(name);
      tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);
      tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
      tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
      tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
      tokenTypes.push(new ExportedTokenType(name, options));
      return tokenTypeCounter;
    }

    function createKeywordLike(name, options = {}) {
      var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;

      ++tokenTypeCounter;
      keywords$1.set(name, tokenTypeCounter);
      tokenLabels.push(name);
      tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);
      tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);
      tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);
      tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);
      tokenTypes.push(new ExportedTokenType("name", options));
      return tokenTypeCounter;
    }

    var tt = {
      bracketL: createToken("[", {
        beforeExpr,
        startsExpr
      }),
      bracketHashL: createToken("#[", {
        beforeExpr,
        startsExpr
      }),
      bracketBarL: createToken("[|", {
        beforeExpr,
        startsExpr
      }),
      bracketR: createToken("]"),
      bracketBarR: createToken("|]"),
      braceL: createToken("{", {
        beforeExpr,
        startsExpr
      }),
      braceBarL: createToken("{|", {
        beforeExpr,
        startsExpr
      }),
      braceHashL: createToken("#{", {
        beforeExpr,
        startsExpr
      }),
      braceR: createToken("}"),
      braceBarR: createToken("|}"),
      parenL: createToken("(", {
        beforeExpr,
        startsExpr
      }),
      parenR: createToken(")"),
      comma: createToken(",", {
        beforeExpr
      }),
      semi: createToken(";", {
        beforeExpr
      }),
      colon: createToken(":", {
        beforeExpr
      }),
      doubleColon: createToken("::", {
        beforeExpr
      }),
      dot: createToken("."),
      question: createToken("?", {
        beforeExpr
      }),
      questionDot: createToken("?."),
      arrow: createToken("=>", {
        beforeExpr
      }),
      template: createToken("template"),
      ellipsis: createToken("...", {
        beforeExpr
      }),
      backQuote: createToken("`", {
        startsExpr
      }),
      dollarBraceL: createToken("${", {
        beforeExpr,
        startsExpr
      }),
      templateTail: createToken("...`", {
        startsExpr
      }),
      templateNonTail: createToken("...${", {
        beforeExpr,
        startsExpr
      }),
      at: createToken("@"),
      hash: createToken("#", {
        startsExpr
      }),
      interpreterDirective: createToken("#!..."),
      eq: createToken("=", {
        beforeExpr,
        isAssign
      }),
      assign: createToken("_=", {
        beforeExpr,
        isAssign
      }),
      slashAssign: createToken("_=", {
        beforeExpr,
        isAssign
      }),
      xorAssign: createToken("_=", {
        beforeExpr,
        isAssign
      }),
      moduloAssign: createToken("_=", {
        beforeExpr,
        isAssign
      }),
      incDec: createToken("++/--", {
        prefix,
        postfix,
        startsExpr
      }),
      bang: createToken("!", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      tilde: createToken("~", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      doubleCaret: createToken("^^", {
        startsExpr
      }),
      doubleAt: createToken("@@", {
        startsExpr
      }),
      pipeline: createBinop("|>", 0),
      nullishCoalescing: createBinop("??", 1),
      logicalOR: createBinop("||", 1),
      logicalAND: createBinop("&&", 2),
      bitwiseOR: createBinop("|", 3),
      bitwiseXOR: createBinop("^", 4),
      bitwiseAND: createBinop("&", 5),
      equality: createBinop("==/!=/===/!==", 6),
      lt: createBinop("</>/<=/>=", 7),
      gt: createBinop("</>/<=/>=", 7),
      relational: createBinop("</>/<=/>=", 7),
      bitShift: createBinop("<</>>/>>>", 8),
      bitShiftL: createBinop("<</>>/>>>", 8),
      bitShiftR: createBinop("<</>>/>>>", 8),
      plusMin: createToken("+/-", {
        beforeExpr,
        binop: 9,
        prefix,
        startsExpr
      }),
      modulo: createToken("%", {
        binop: 10,
        startsExpr
      }),
      star: createToken("*", {
        binop: 10
      }),
      slash: createBinop("/", 10),
      exponent: createToken("**", {
        beforeExpr,
        binop: 11,
        rightAssociative: true
      }),
      _in: createKeyword("in", {
        beforeExpr,
        binop: 7
      }),
      _instanceof: createKeyword("instanceof", {
        beforeExpr,
        binop: 7
      }),
      _break: createKeyword("break"),
      _case: createKeyword("case", {
        beforeExpr
      }),
      _catch: createKeyword("catch"),
      _continue: createKeyword("continue"),
      _debugger: createKeyword("debugger"),
      _default: createKeyword("default", {
        beforeExpr
      }),
      _else: createKeyword("else", {
        beforeExpr
      }),
      _finally: createKeyword("finally"),
      _function: createKeyword("function", {
        startsExpr
      }),
      _if: createKeyword("if"),
      _return: createKeyword("return", {
        beforeExpr
      }),
      _switch: createKeyword("switch"),
      _throw: createKeyword("throw", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      _try: createKeyword("try"),
      _var: createKeyword("var"),
      _const: createKeyword("const"),
      _with: createKeyword("with"),
      _new: createKeyword("new", {
        beforeExpr,
        startsExpr
      }),
      _this: createKeyword("this", {
        startsExpr
      }),
      _super: createKeyword("super", {
        startsExpr
      }),
      _class: createKeyword("class", {
        startsExpr
      }),
      _extends: createKeyword("extends", {
        beforeExpr
      }),
      _export: createKeyword("export"),
      _import: createKeyword("import", {
        startsExpr
      }),
      _null: createKeyword("null", {
        startsExpr
      }),
      _true: createKeyword("true", {
        startsExpr
      }),
      _false: createKeyword("false", {
        startsExpr
      }),
      _typeof: createKeyword("typeof", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      _void: createKeyword("void", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      _delete: createKeyword("delete", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      _do: createKeyword("do", {
        isLoop,
        beforeExpr
      }),
      _for: createKeyword("for", {
        isLoop
      }),
      _while: createKeyword("while", {
        isLoop
      }),
      _as: createKeywordLike("as", {
        startsExpr
      }),
      _assert: createKeywordLike("assert", {
        startsExpr
      }),
      _async: createKeywordLike("async", {
        startsExpr
      }),
      _await: createKeywordLike("await", {
        startsExpr
      }),
      _from: createKeywordLike("from", {
        startsExpr
      }),
      _get: createKeywordLike("get", {
        startsExpr
      }),
      _let: createKeywordLike("let", {
        startsExpr
      }),
      _meta: createKeywordLike("meta", {
        startsExpr
      }),
      _of: createKeywordLike("of", {
        startsExpr
      }),
      _sent: createKeywordLike("sent", {
        startsExpr
      }),
      _set: createKeywordLike("set", {
        startsExpr
      }),
      _static: createKeywordLike("static", {
        startsExpr
      }),
      _using: createKeywordLike("using", {
        startsExpr
      }),
      _yield: createKeywordLike("yield", {
        startsExpr
      }),
      _asserts: createKeywordLike("asserts", {
        startsExpr
      }),
      _checks: createKeywordLike("checks", {
        startsExpr
      }),
      _exports: createKeywordLike("exports", {
        startsExpr
      }),
      _global: createKeywordLike("global", {
        startsExpr
      }),
      _implements: createKeywordLike("implements", {
        startsExpr
      }),
      _intrinsic: createKeywordLike("intrinsic", {
        startsExpr
      }),
      _infer: createKeywordLike("infer", {
        startsExpr
      }),
      _is: createKeywordLike("is", {
        startsExpr
      }),
      _mixins: createKeywordLike("mixins", {
        startsExpr
      }),
      _proto: createKeywordLike("proto", {
        startsExpr
      }),
      _require: createKeywordLike("require", {
        startsExpr
      }),
      _satisfies: createKeywordLike("satisfies", {
        startsExpr
      }),
      _keyof: createKeywordLike("keyof", {
        startsExpr
      }),
      _readonly: createKeywordLike("readonly", {
        startsExpr
      }),
      _unique: createKeywordLike("unique", {
        startsExpr
      }),
      _abstract: createKeywordLike("abstract", {
        startsExpr
      }),
      _declare: createKeywordLike("declare", {
        startsExpr
      }),
      _enum: createKeywordLike("enum", {
        startsExpr
      }),
      _module: createKeywordLike("module", {
        startsExpr
      }),
      _namespace: createKeywordLike("namespace", {
        startsExpr
      }),
      _interface: createKeywordLike("interface", {
        startsExpr
      }),
      _type: createKeywordLike("type", {
        startsExpr
      }),
      _opaque: createKeywordLike("opaque", {
        startsExpr
      }),
      name: createToken("name", {
        startsExpr
      }),
      string: createToken("string", {
        startsExpr
      }),
      num: createToken("num", {
        startsExpr
      }),
      bigint: createToken("bigint", {
        startsExpr
      }),
      decimal: createToken("decimal", {
        startsExpr
      }),
      regexp: createToken("regexp", {
        startsExpr
      }),
      privateName: createToken("#name", {
        startsExpr
      }),
      eof: createToken("eof"),
      jsxName: createToken("jsxName"),
      jsxText: createToken("jsxText", {
        beforeExpr: true
      }),
      jsxTagStart: createToken("jsxTagStart", {
        startsExpr: true
      }),
      jsxTagEnd: createToken("jsxTagEnd"),
      placeholder: createToken("%%", {
        startsExpr: true
      })
    };

    function tokenIsIdentifier(token) {
      return token >= 93 && token <= 130;
    }

    function tokenKeywordOrIdentifierIsKeyword(token) {
      return token <= 92;
    }

    function tokenIsKeywordOrIdentifier(token) {
      return token >= 58 && token <= 130;
    }

    function tokenIsLiteralPropertyName(token) {
      return token >= 58 && token <= 134;
    }

    function tokenComesBeforeExpression(token) {
      return tokenBeforeExprs[token];
    }

    function tokenCanStartExpression(token) {
      return tokenStartsExprs[token];
    }

    function tokenIsAssignment(token) {
      return token >= 29 && token <= 33;
    }

    function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
      return token >= 127 && token <= 129;
    }

    function tokenIsLoop(token) {
      return token >= 90 && token <= 92;
    }

    function tokenIsKeyword(token) {
      return token >= 58 && token <= 92;
    }

    function tokenIsOperator(token) {
      return token >= 39 && token <= 59;
    }

    function tokenIsPostfix(token) {
      return token === 34;
    }

    function tokenIsPrefix(token) {
      return tokenPrefixes[token];
    }

    function tokenIsTSTypeOperator(token) {
      return token >= 119 && token <= 121;
    }

    function tokenIsTSDeclarationStart(token) {
      return token >= 122 && token <= 128;
    }

    function tokenLabelName(token) {
      return tokenLabels[token];
    }

    function tokenOperatorPrecedence(token) {
      return tokenBinops[token];
    }

    function tokenIsRightAssociative(token) {
      return token === 57;
    }

    function tokenIsTemplate(token) {
      return token >= 24 && token <= 25;
    }

    function getExportedToken(token) {
      return tokenTypes[token];
    }

    {
      tokenTypes[8].updateContext = context => {
        context.pop();
      };

      tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {
        context.push(types.brace);
      };

      tokenTypes[22].updateContext = context => {
        if (context[context.length - 1] === types.template) {
          context.pop();
        } else {
          context.push(types.template);
        }
      };

      tokenTypes[140].updateContext = context => {
        context.push(types.j_expr, types.j_oTag);
      };
    }
    var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
    var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
    var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
    var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
    nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
    var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191];
    var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];

    function isInAstralSet(code, set) {
      let pos = 65536;

      for (let i = 0, length = set.length; i < length; i += 2) {
        pos += set[i];
        if (pos > code) return false;
        pos += set[i + 1];
        if (pos >= code) return true;
      }

      return false;
    }

    function isIdentifierStart(code) {
      if (code < 65) return code === 36;
      if (code <= 90) return true;
      if (code < 97) return code === 95;
      if (code <= 122) return true;

      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
      }

      return isInAstralSet(code, astralIdentifierStartCodes);
    }

    function isIdentifierChar(code) {
      if (code < 48) return code === 36;
      if (code < 58) return true;
      if (code < 65) return false;
      if (code <= 90) return true;
      if (code < 97) return code === 95;
      if (code <= 122) return true;

      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
      }

      return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
    }

    var reservedWords = {
      keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
      strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
      strictBind: ["eval", "arguments"]
    };
    var keywords = new Set(reservedWords.keyword);
    var reservedWordsStrictSet = new Set(reservedWords.strict);
    var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);

    function isReservedWord(word, inModule) {
      return inModule && word === "await" || word === "enum";
    }

    function isStrictReservedWord(word, inModule) {
      return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
    }

    function isStrictBindOnlyReservedWord(word) {
      return reservedWordsStrictBindSet.has(word);
    }

    function isStrictBindReservedWord(word, inModule) {
      return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
    }

    function isKeyword(word) {
      return keywords.has(word);
    }

    function isIteratorStart(current, next, next2) {
      return current === 64 && next === 64 && isIdentifierStart(next2);
    }

    var reservedWordLikeSet = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);

    function canBeReservedWord(word) {
      return reservedWordLikeSet.has(word);
    }

    var SCOPE_OTHER = 0;
    var SCOPE_PROGRAM = 1;
    var SCOPE_FUNCTION = 2;
    var SCOPE_ARROW = 4;
    var SCOPE_SIMPLE_CATCH = 8;
    var SCOPE_SUPER = 16;
    var SCOPE_DIRECT_SUPER = 32;
    var SCOPE_CLASS = 64;
    var SCOPE_STATIC_BLOCK = 128;
    var SCOPE_TS_MODULE = 256;
    var SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;
    var BIND_KIND_VALUE = 1;
    var BIND_KIND_TYPE = 2;
    var BIND_SCOPE_VAR = 4;
    var BIND_SCOPE_LEXICAL = 8;
    var BIND_SCOPE_FUNCTION = 16;
    var BIND_FLAGS_NONE = 64;
    var BIND_FLAGS_CLASS = 128;
    var BIND_FLAGS_TS_ENUM = 256;
    var BIND_FLAGS_TS_CONST_ENUM = 512;
    var BIND_FLAGS_TS_EXPORT_ONLY = 1024;
    var BIND_FLAGS_FLOW_DECLARE_FN = 2048;
    var BIND_FLAGS_TS_IMPORT = 4096;
    var BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS;
    var BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0;
    var BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0;
    var BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0;
    var BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS;
    var BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0;
    var BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM;
    var BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;
    var BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE;
    var BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE;
    var BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM;
    var BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;
    var BIND_TS_TYPE_IMPORT = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_TS_IMPORT;
    var BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;
    var CLASS_ELEMENT_FLAG_STATIC = 4;
    var CLASS_ELEMENT_KIND_GETTER = 2;
    var CLASS_ELEMENT_KIND_SETTER = 1;
    var CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;
    var CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC;
    var CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC;
    var CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER;
    var CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER;
    var CLASS_ELEMENT_OTHER = 0;
    var Scope = class {
      constructor(flags) {
        this.var = new Set();
        this.lexical = new Set();
        this.functions = new Set();
        this.flags = flags;
      }

    };
    var ScopeHandler = class {
      constructor(parser, inModule) {
        this.parser = void 0;
        this.scopeStack = [];
        this.inModule = void 0;
        this.undefinedExports = new Map();
        this.parser = parser;
        this.inModule = inModule;
      }

      get inTopLevel() {
        return (this.currentScope().flags & SCOPE_PROGRAM) > 0;
      }

      get inFunction() {
        return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;
      }

      get allowSuper() {
        return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;
      }

      get allowDirectSuper() {
        return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;
      }

      get inClass() {
        return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;
      }

      get inClassAndNotInNonArrowFunction() {
        const flags = this.currentThisScopeFlags();
        return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;
      }

      get inStaticBlock() {
        for (let i = this.scopeStack.length - 1;; i--) {
          const {
            flags
          } = this.scopeStack[i];

          if (flags & SCOPE_STATIC_BLOCK) {
            return true;
          }

          if (flags & (SCOPE_VAR | SCOPE_CLASS)) {
            return false;
          }
        }
      }

      get inNonArrowFunction() {
        return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;
      }

      get treatFunctionsAsVar() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
      }

      createScope(flags) {
        return new Scope(flags);
      }

      enter(flags) {
        this.scopeStack.push(this.createScope(flags));
      }

      exit() {
        const scope = this.scopeStack.pop();
        return scope.flags;
      }

      treatFunctionsAsVarInScope(scope) {
        return !!(scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) || !this.parser.inModule && scope.flags & SCOPE_PROGRAM);
      }

      declareName(name, bindingType, loc) {
        let scope = this.currentScope();

        if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {
          this.checkRedeclarationInScope(scope, name, bindingType, loc);

          if (bindingType & BIND_SCOPE_FUNCTION) {
            scope.functions.add(name);
          } else {
            scope.lexical.add(name);
          }

          if (bindingType & BIND_SCOPE_LEXICAL) {
            this.maybeExportDefined(scope, name);
          }
        } else if (bindingType & BIND_SCOPE_VAR) {
          for (let i = this.scopeStack.length - 1; i >= 0; --i) {
            scope = this.scopeStack[i];
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            scope.var.add(name);
            this.maybeExportDefined(scope, name);
            if (scope.flags & SCOPE_VAR) break;
          }
        }

        if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {
          this.undefinedExports.delete(name);
        }
      }

      maybeExportDefined(scope, name) {
        if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {
          this.undefinedExports.delete(name);
        }
      }

      checkRedeclarationInScope(scope, name, bindingType, loc) {
        if (this.isRedeclaredInScope(scope, name, bindingType)) {
          this.parser.raise(Errors.VarRedeclaration, {
            at: loc,
            identifierName: name
          });
        }
      }

      isRedeclaredInScope(scope, name, bindingType) {
        if (!(bindingType & BIND_KIND_VALUE)) return false;

        if (bindingType & BIND_SCOPE_LEXICAL) {
          return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);
        }

        if (bindingType & BIND_SCOPE_FUNCTION) {
          return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);
        }

        return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);
      }

      checkLocalExport(id) {
        const {
          name
        } = id;
        const topLevelScope = this.scopeStack[0];

        if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {
          this.undefinedExports.set(name, id.loc.start);
        }
      }

      currentScope() {
        return this.scopeStack[this.scopeStack.length - 1];
      }

      currentVarScopeFlags() {
        for (let i = this.scopeStack.length - 1;; i--) {
          const {
            flags
          } = this.scopeStack[i];

          if (flags & SCOPE_VAR) {
            return flags;
          }
        }
      }

      currentThisScopeFlags() {
        for (let i = this.scopeStack.length - 1;; i--) {
          const {
            flags
          } = this.scopeStack[i];

          if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {
            return flags;
          }
        }
      }

    };
    var FlowScope = class extends Scope {
      constructor(...args) {
        super(...args);
        this.declareFunctions = new Set();
      }

    };
    var FlowScopeHandler = class extends ScopeHandler {
      createScope(flags) {
        return new FlowScope(flags);
      }

      declareName(name, bindingType, loc) {
        const scope = this.currentScope();

        if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
          this.checkRedeclarationInScope(scope, name, bindingType, loc);
          this.maybeExportDefined(scope, name);
          scope.declareFunctions.add(name);
          return;
        }

        super.declareName(name, bindingType, loc);
      }

      isRedeclaredInScope(scope, name, bindingType) {
        if (super.isRedeclaredInScope(scope, name, bindingType)) return true;

        if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
          return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));
        }

        return false;
      }

      checkLocalExport(id) {
        if (!this.scopeStack[0].declareFunctions.has(id.name)) {
          super.checkLocalExport(id);
        }
      }

    };
    var BaseParser = class {
      constructor() {
        this.sawUnambiguousESM = false;
        this.ambiguousScriptDifferentAst = false;
      }

      hasPlugin(pluginConfig) {
        if (typeof pluginConfig === "string") {
          return this.plugins.has(pluginConfig);
        } else {
          const [pluginName, pluginOptions] = pluginConfig;

          if (!this.hasPlugin(pluginName)) {
            return false;
          }

          const actualOptions = this.plugins.get(pluginName);

          for (const key of Object.keys(pluginOptions)) {
            if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {
              return false;
            }
          }

          return true;
        }
      }

      getPluginOption(plugin, name) {
        var _this$plugins$get;

        return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];
      }

    };

    function setTrailingComments(node, comments) {
      if (node.trailingComments === void 0) {
        node.trailingComments = comments;
      } else {
        node.trailingComments.unshift(...comments);
      }
    }

    function setLeadingComments(node, comments) {
      if (node.leadingComments === void 0) {
        node.leadingComments = comments;
      } else {
        node.leadingComments.unshift(...comments);
      }
    }

    function setInnerComments(node, comments) {
      if (node.innerComments === void 0) {
        node.innerComments = comments;
      } else {
        node.innerComments.unshift(...comments);
      }
    }

    function adjustInnerComments(node, elements, commentWS) {
      let lastElement = null;
      let i = elements.length;

      while (lastElement === null && i > 0) {
        lastElement = elements[--i];
      }

      if (lastElement === null || lastElement.start > commentWS.start) {
        setInnerComments(node, commentWS.comments);
      } else {
        setTrailingComments(lastElement, commentWS.comments);
      }
    }

    var CommentsParser = class extends BaseParser {
      addComment(comment) {
        if (this.filename) comment.loc.filename = this.filename;
        this.state.comments.push(comment);
      }

      processComment(node) {
        const {
          commentStack
        } = this.state;
        const commentStackLength = commentStack.length;
        if (commentStackLength === 0) return;
        let i = commentStackLength - 1;
        const lastCommentWS = commentStack[i];

        if (lastCommentWS.start === node.end) {
          lastCommentWS.leadingNode = node;
          i--;
        }

        const {
          start: nodeStart
        } = node;

        for (; i >= 0; i--) {
          const commentWS = commentStack[i];
          const commentEnd = commentWS.end;

          if (commentEnd > nodeStart) {
            commentWS.containingNode = node;
            this.finalizeComment(commentWS);
            commentStack.splice(i, 1);
          } else {
            if (commentEnd === nodeStart) {
              commentWS.trailingNode = node;
            }

            break;
          }
        }
      }

      finalizeComment(commentWS) {
        const {
          comments
        } = commentWS;

        if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
          if (commentWS.leadingNode !== null) {
            setTrailingComments(commentWS.leadingNode, comments);
          }

          if (commentWS.trailingNode !== null) {
            setLeadingComments(commentWS.trailingNode, comments);
          }
        } else {
          const {
            containingNode: node,
            start: commentStart
          } = commentWS;

          if (this.input.charCodeAt(commentStart - 1) === 44) {
            switch (node.type) {
              case "ObjectExpression":
              case "ObjectPattern":
              case "RecordExpression":
                adjustInnerComments(node, node.properties, commentWS);
                break;

              case "CallExpression":
              case "OptionalCallExpression":
                adjustInnerComments(node, node.arguments, commentWS);
                break;

              case "FunctionDeclaration":
              case "FunctionExpression":
              case "ArrowFunctionExpression":
              case "ObjectMethod":
              case "ClassMethod":
              case "ClassPrivateMethod":
                adjustInnerComments(node, node.params, commentWS);
                break;

              case "ArrayExpression":
              case "ArrayPattern":
              case "TupleExpression":
                adjustInnerComments(node, node.elements, commentWS);
                break;

              case "ExportNamedDeclaration":
              case "ImportDeclaration":
                adjustInnerComments(node, node.specifiers, commentWS);
                break;

              default:
                {
                  setInnerComments(node, comments);
                }
            }
          } else {
            setInnerComments(node, comments);
          }
        }
      }

      finalizeRemainingComments() {
        const {
          commentStack
        } = this.state;

        for (let i = commentStack.length - 1; i >= 0; i--) {
          this.finalizeComment(commentStack[i]);
        }

        this.state.commentStack = [];
      }

      resetPreviousNodeTrailingComments(node) {
        const {
          commentStack
        } = this.state;
        const {
          length
        } = commentStack;
        if (length === 0) return;
        const commentWS = commentStack[length - 1];

        if (commentWS.leadingNode === node) {
          commentWS.leadingNode = null;
        }
      }

      takeSurroundingComments(node, start, end) {
        const {
          commentStack
        } = this.state;
        const commentStackLength = commentStack.length;
        if (commentStackLength === 0) return;
        let i = commentStackLength - 1;

        for (; i >= 0; i--) {
          const commentWS = commentStack[i];
          const commentEnd = commentWS.end;
          const commentStart = commentWS.start;

          if (commentStart === end) {
            commentWS.leadingNode = node;
          } else if (commentEnd === start) {
            commentWS.trailingNode = node;
          } else if (commentEnd < start) {
            break;
          }
        }
      }

    };
    var lineBreak = /\r\n?|[\n\u2028\u2029]/;
    var lineBreakG = new RegExp(lineBreak.source, "g");

    function isNewLine(code) {
      switch (code) {
        case 10:
        case 13:
        case 8232:
        case 8233:
          return true;

        default:
          return false;
      }
    }

    var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
    var skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y;
    var skipWhiteSpaceToLineBreak = new RegExp("(?=(" + skipWhiteSpaceInLine.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");

    function isWhitespace(code) {
      switch (code) {
        case 9:
        case 11:
        case 12:
        case 32:
        case 160:
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;

        default:
          return false;
      }
    }

    var State = class {
      constructor() {
        this.strict = void 0;
        this.curLine = void 0;
        this.lineStart = void 0;
        this.startLoc = void 0;
        this.endLoc = void 0;
        this.errors = [];
        this.potentialArrowAt = -1;
        this.noArrowAt = [];
        this.noArrowParamsConversionAt = [];
        this.maybeInArrowParameters = false;
        this.inType = false;
        this.noAnonFunctionType = false;
        this.hasFlowComment = false;
        this.isAmbientContext = false;
        this.inAbstractClass = false;
        this.inDisallowConditionalTypesContext = false;
        this.topicContext = {
          maxNumOfResolvableTopics: 0,
          maxTopicIndex: null
        };
        this.soloAwait = false;
        this.inFSharpPipelineDirectBody = false;
        this.labels = [];
        this.comments = [];
        this.commentStack = [];
        this.pos = 0;
        this.type = 137;
        this.value = null;
        this.start = 0;
        this.end = 0;
        this.lastTokEndLoc = null;
        this.lastTokStartLoc = null;
        this.lastTokStart = 0;
        this.context = [types.brace];
        this.canStartJSXElement = true;
        this.containsEsc = false;
        this.firstInvalidTemplateEscapePos = null;
        this.strictErrors = new Map();
        this.tokensLength = 0;
      }

      init({
        strictMode,
        sourceType,
        startLine,
        startColumn
      }) {
        this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
        this.curLine = startLine;
        this.lineStart = -startColumn;
        this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);
      }

      curPosition() {
        return new Position(this.curLine, this.pos - this.lineStart, this.pos);
      }

      clone(skipArrays) {
        const state = new State();
        const keys = Object.keys(this);

        for (let i = 0, length = keys.length; i < length; i++) {
          const key = keys[i];
          let val = this[key];

          if (!skipArrays && Array.isArray(val)) {
            val = val.slice();
          }

          state[key] = val;
        }

        return state;
      }

    };

    var _isDigit = function isDigit(code) {
      return code >= 48 && code <= 57;
    };

    var forbiddenNumericSeparatorSiblings = {
      decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),
      hex: new Set([46, 88, 95, 120])
    };
    var isAllowedNumericSeparatorSibling = {
      bin: ch => ch === 48 || ch === 49,
      oct: ch => ch >= 48 && ch <= 55,
      dec: ch => ch >= 48 && ch <= 57,
      hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
    };

    function readStringContents(type, input, pos, lineStart, curLine, errors) {
      const initialPos = pos;
      const initialLineStart = lineStart;
      const initialCurLine = curLine;
      let out = "";
      let firstInvalidLoc = null;
      let chunkStart = pos;
      const {
        length
      } = input;

      for (;;) {
        if (pos >= length) {
          errors.unterminated(initialPos, initialLineStart, initialCurLine);
          out += input.slice(chunkStart, pos);
          break;
        }

        const ch = input.charCodeAt(pos);

        if (isStringEnd(type, ch, input, pos)) {
          out += input.slice(chunkStart, pos);
          break;
        }

        if (ch === 92) {
          out += input.slice(chunkStart, pos);
          const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);

          if (res.ch === null && !firstInvalidLoc) {
            firstInvalidLoc = {
              pos,
              lineStart,
              curLine
            };
          } else {
            out += res.ch;
          }

          ({
            pos,
            lineStart,
            curLine
          } = res);
          chunkStart = pos;
        } else if (ch === 8232 || ch === 8233) {
          ++pos;
          ++curLine;
          lineStart = pos;
        } else if (ch === 10 || ch === 13) {
          if (type === "template") {
            out += input.slice(chunkStart, pos) + "\n";
            ++pos;

            if (ch === 13 && input.charCodeAt(pos) === 10) {
              ++pos;
            }

            ++curLine;
            chunkStart = lineStart = pos;
          } else {
            errors.unterminated(initialPos, initialLineStart, initialCurLine);
          }
        } else {
          ++pos;
        }
      }

      return {
        pos,
        str: out,
        firstInvalidLoc,
        lineStart,
        curLine,
        containsInvalid: !!firstInvalidLoc
      };
    }

    function isStringEnd(type, ch, input, pos) {
      if (type === "template") {
        return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
      }

      return ch === (type === "double" ? 34 : 39);
    }

    function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
      const throwOnInvalid = !inTemplate;
      pos++;

      const res = ch2 => ({
        pos,
        ch: ch2,
        lineStart,
        curLine
      });

      const ch = input.charCodeAt(pos++);

      switch (ch) {
        case 110:
          return res("\n");

        case 114:
          return res("\r");

        case 120:
          {
            let code;
            ({
              code,
              pos
            } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));
            return res(code === null ? null : String.fromCharCode(code));
          }

        case 117:
          {
            let code;
            ({
              code,
              pos
            } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));
            return res(code === null ? null : String.fromCodePoint(code));
          }

        case 116:
          return res("	");

        case 98:
          return res("\b");

        case 118:
          return res("\v");

        case 102:
          return res("\f");

        case 13:
          if (input.charCodeAt(pos) === 10) {
            ++pos;
          }

        case 10:
          lineStart = pos;
          ++curLine;

        case 8232:
        case 8233:
          return res("");

        case 56:
        case 57:
          if (inTemplate) {
            return res(null);
          } else {
            errors.strictNumericEscape(pos - 1, lineStart, curLine);
          }

        default:
          if (ch >= 48 && ch <= 55) {
            const startPos = pos - 1;
            const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);
            let octalStr = match[0];
            let octal = parseInt(octalStr, 8);

            if (octal > 255) {
              octalStr = octalStr.slice(0, -1);
              octal = parseInt(octalStr, 8);
            }

            pos += octalStr.length - 1;
            const next = input.charCodeAt(pos);

            if (octalStr !== "0" || next === 56 || next === 57) {
              if (inTemplate) {
                return res(null);
              } else {
                errors.strictNumericEscape(startPos, lineStart, curLine);
              }
            }

            return res(String.fromCharCode(octal));
          }

          return res(String.fromCharCode(ch));
      }
    }

    function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
      const initialPos = pos;
      let n;
      ({
        n,
        pos
      } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));

      if (n === null) {
        if (throwOnInvalid) {
          errors.invalidEscapeSequence(initialPos, lineStart, curLine);
        } else {
          pos = initialPos - 1;
        }
      }

      return {
        code: n,
        pos
      };
    }

    function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
      const start = pos;
      const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
      const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
      let invalid = false;
      let total = 0;

      for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
        const code = input.charCodeAt(pos);
        let val;

        if (code === 95 && allowNumSeparator !== "bail") {
          const prev = input.charCodeAt(pos - 1);
          const next = input.charCodeAt(pos + 1);

          if (!allowNumSeparator) {
            if (bailOnError) return {
              n: null,
              pos
            };
            errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
          } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
            if (bailOnError) return {
              n: null,
              pos
            };
            errors.unexpectedNumericSeparator(pos, lineStart, curLine);
          }

          ++pos;
          continue;
        }

        if (code >= 97) {
          val = code - 97 + 10;
        } else if (code >= 65) {
          val = code - 65 + 10;
        } else if (_isDigit(code)) {
          val = code - 48;
        } else {
          val = Infinity;
        }

        if (val >= radix) {
          if (val <= 9 && bailOnError) {
            return {
              n: null,
              pos
            };
          } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {
            val = 0;
          } else if (forceLen) {
            val = 0;
            invalid = true;
          } else {
            break;
          }
        }

        ++pos;
        total = total * radix + val;
      }

      if (pos === start || len != null && pos - start !== len || invalid) {
        return {
          n: null,
          pos
        };
      }

      return {
        n: total,
        pos
      };
    }

    function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
      const ch = input.charCodeAt(pos);
      let code;

      if (ch === 123) {
        ++pos;
        ({
          code,
          pos
        } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));
        ++pos;

        if (code !== null && code > 1114111) {
          if (throwOnInvalid) {
            errors.invalidCodePoint(pos, lineStart, curLine);
          } else {
            return {
              code: null,
              pos
            };
          }
        }
      } else {
        ({
          code,
          pos
        } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
      }

      return {
        code,
        pos
      };
    }

    var _excluded = ["at"];
    var _excluded2 = ["at"];

    function buildPosition(pos, lineStart, curLine) {
      return new Position(curLine, pos - lineStart, pos);
    }

    var VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);
    var Token = class {
      constructor(state) {
        this.type = state.type;
        this.value = state.value;
        this.start = state.start;
        this.end = state.end;
        this.loc = new SourceLocation(state.startLoc, state.endLoc);
      }

    };
    var Tokenizer = class extends CommentsParser {
      constructor(options, input) {
        super();
        this.isLookahead = void 0;
        this.tokens = [];
        this.errorHandlers_readInt = {
          invalidDigit: (pos, lineStart, curLine, radix) => {
            if (!this.options.errorRecovery) return false;
            this.raise(Errors.InvalidDigit, {
              at: buildPosition(pos, lineStart, curLine),
              radix
            });
            return true;
          },
          numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),
          unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)
        };
        this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
          invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),
          invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)
        });
        this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
          strictNumericEscape: (pos, lineStart, curLine) => {
            this.recordStrictModeErrors(Errors.StrictNumericEscape, {
              at: buildPosition(pos, lineStart, curLine)
            });
          },
          unterminated: (pos, lineStart, curLine) => {
            throw this.raise(Errors.UnterminatedString, {
              at: buildPosition(pos - 1, lineStart, curLine)
            });
          }
        });
        this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
          strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),
          unterminated: (pos, lineStart, curLine) => {
            throw this.raise(Errors.UnterminatedTemplate, {
              at: buildPosition(pos, lineStart, curLine)
            });
          }
        });
        this.state = new State();
        this.state.init(options);
        this.input = input;
        this.length = input.length;
        this.isLookahead = false;
      }

      pushToken(token) {
        this.tokens.length = this.state.tokensLength;
        this.tokens.push(token);
        ++this.state.tokensLength;
      }

      next() {
        this.checkKeywordEscapes();

        if (this.options.tokens) {
          this.pushToken(new Token(this.state));
        }

        this.state.lastTokStart = this.state.start;
        this.state.lastTokEndLoc = this.state.endLoc;
        this.state.lastTokStartLoc = this.state.startLoc;
        this.nextToken();
      }

      eat(type) {
        if (this.match(type)) {
          this.next();
          return true;
        } else {
          return false;
        }
      }

      match(type) {
        return this.state.type === type;
      }

      createLookaheadState(state) {
        return {
          pos: state.pos,
          value: null,
          type: state.type,
          start: state.start,
          end: state.end,
          context: [this.curContext()],
          inType: state.inType,
          startLoc: state.startLoc,
          lastTokEndLoc: state.lastTokEndLoc,
          curLine: state.curLine,
          lineStart: state.lineStart,
          curPosition: state.curPosition
        };
      }

      lookahead() {
        const old = this.state;
        this.state = this.createLookaheadState(old);
        this.isLookahead = true;
        this.nextToken();
        this.isLookahead = false;
        const curr = this.state;
        this.state = old;
        return curr;
      }

      nextTokenStart() {
        return this.nextTokenStartSince(this.state.pos);
      }

      nextTokenStartSince(pos) {
        skipWhiteSpace.lastIndex = pos;
        return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
      }

      lookaheadCharCode() {
        return this.input.charCodeAt(this.nextTokenStart());
      }

      codePointAtPos(pos) {
        let cp = this.input.charCodeAt(pos);

        if ((cp & 64512) === 55296 && ++pos < this.input.length) {
          const trail = this.input.charCodeAt(pos);

          if ((trail & 64512) === 56320) {
            cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
          }
        }

        return cp;
      }

      setStrict(strict) {
        this.state.strict = strict;

        if (strict) {
          this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, {
            at
          }));
          this.state.strictErrors.clear();
        }
      }

      curContext() {
        return this.state.context[this.state.context.length - 1];
      }

      nextToken() {
        this.skipSpace();
        this.state.start = this.state.pos;
        if (!this.isLookahead) this.state.startLoc = this.state.curPosition();

        if (this.state.pos >= this.length) {
          this.finishToken(137);
          return;
        }

        this.getTokenFromCode(this.codePointAtPos(this.state.pos));
      }

      skipBlockComment(commentEnd) {
        let startLoc;
        if (!this.isLookahead) startLoc = this.state.curPosition();
        const start = this.state.pos;
        const end = this.input.indexOf(commentEnd, start + 2);

        if (end === -1) {
          throw this.raise(Errors.UnterminatedComment, {
            at: this.state.curPosition()
          });
        }

        this.state.pos = end + commentEnd.length;
        lineBreakG.lastIndex = start + 2;

        while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
          ++this.state.curLine;
          this.state.lineStart = lineBreakG.lastIndex;
        }

        if (this.isLookahead) return;
        const comment = {
          type: "CommentBlock",
          value: this.input.slice(start + 2, end),
          start,
          end: end + commentEnd.length,
          loc: new SourceLocation(startLoc, this.state.curPosition())
        };
        if (this.options.tokens) this.pushToken(comment);
        return comment;
      }

      skipLineComment(startSkip) {
        const start = this.state.pos;
        let startLoc;
        if (!this.isLookahead) startLoc = this.state.curPosition();
        let ch = this.input.charCodeAt(this.state.pos += startSkip);

        if (this.state.pos < this.length) {
          while (!isNewLine(ch) && ++this.state.pos < this.length) {
            ch = this.input.charCodeAt(this.state.pos);
          }
        }

        if (this.isLookahead) return;
        const end = this.state.pos;
        const value = this.input.slice(start + startSkip, end);
        const comment = {
          type: "CommentLine",
          value,
          start,
          end,
          loc: new SourceLocation(startLoc, this.state.curPosition())
        };
        if (this.options.tokens) this.pushToken(comment);
        return comment;
      }

      skipSpace() {
        const spaceStart = this.state.pos;
        const comments = [];

        loop: while (this.state.pos < this.length) {
          const ch = this.input.charCodeAt(this.state.pos);

          switch (ch) {
            case 32:
            case 160:
            case 9:
              ++this.state.pos;
              break;

            case 13:
              if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                ++this.state.pos;
              }

            case 10:
            case 8232:
            case 8233:
              ++this.state.pos;
              ++this.state.curLine;
              this.state.lineStart = this.state.pos;
              break;

            case 47:
              switch (this.input.charCodeAt(this.state.pos + 1)) {
                case 42:
                  {
                    const comment = this.skipBlockComment("*/");

                    if (comment !== void 0) {
                      this.addComment(comment);
                      if (this.options.attachComment) comments.push(comment);
                    }

                    break;
                  }

                case 47:
                  {
                    const comment = this.skipLineComment(2);

                    if (comment !== void 0) {
                      this.addComment(comment);
                      if (this.options.attachComment) comments.push(comment);
                    }

                    break;
                  }

                default:
                  break loop;
              }

              break;

            default:
              if (isWhitespace(ch)) {
                ++this.state.pos;
              } else if (ch === 45 && !this.inModule) {
                const pos = this.state.pos;

                if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
                  const comment = this.skipLineComment(3);

                  if (comment !== void 0) {
                    this.addComment(comment);
                    if (this.options.attachComment) comments.push(comment);
                  }
                } else {
                  break loop;
                }
              } else if (ch === 60 && !this.inModule) {
                const pos = this.state.pos;

                if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
                  const comment = this.skipLineComment(4);

                  if (comment !== void 0) {
                    this.addComment(comment);
                    if (this.options.attachComment) comments.push(comment);
                  }
                } else {
                  break loop;
                }
              } else {
                break loop;
              }

          }
        }

        if (comments.length > 0) {
          const end = this.state.pos;
          const commentWhitespace = {
            start: spaceStart,
            end,
            comments,
            leadingNode: null,
            trailingNode: null,
            containingNode: null
          };
          this.state.commentStack.push(commentWhitespace);
        }
      }

      finishToken(type, val) {
        this.state.end = this.state.pos;
        this.state.endLoc = this.state.curPosition();
        const prevType = this.state.type;
        this.state.type = type;
        this.state.value = val;

        if (!this.isLookahead) {
          this.updateContext(prevType);
        }
      }

      replaceToken(type) {
        this.state.type = type;
        this.updateContext();
      }

      readToken_numberSign() {
        if (this.state.pos === 0 && this.readToken_interpreter()) {
          return;
        }

        const nextPos = this.state.pos + 1;
        const next = this.codePointAtPos(nextPos);

        if (next >= 48 && next <= 57) {
          throw this.raise(Errors.UnexpectedDigitAfterHash, {
            at: this.state.curPosition()
          });
        }

        if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
          this.expectPlugin("recordAndTuple");

          if (this.getPluginOption("recordAndTuple", "syntaxType") === "bar") {
            throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {
              at: this.state.curPosition()
            });
          }

          this.state.pos += 2;

          if (next === 123) {
            this.finishToken(7);
          } else {
            this.finishToken(1);
          }
        } else if (isIdentifierStart(next)) {
          ++this.state.pos;
          this.finishToken(136, this.readWord1(next));
        } else if (next === 92) {
          ++this.state.pos;
          this.finishToken(136, this.readWord1());
        } else {
          this.finishOp(27, 1);
        }
      }

      readToken_dot() {
        const next = this.input.charCodeAt(this.state.pos + 1);

        if (next >= 48 && next <= 57) {
          this.readNumber(true);
          return;
        }

        if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
          this.state.pos += 3;
          this.finishToken(21);
        } else {
          ++this.state.pos;
          this.finishToken(16);
        }
      }

      readToken_slash() {
        const next = this.input.charCodeAt(this.state.pos + 1);

        if (next === 61) {
          this.finishOp(31, 2);
        } else {
          this.finishOp(56, 1);
        }
      }

      readToken_interpreter() {
        if (this.state.pos !== 0 || this.length < 2) return false;
        let ch = this.input.charCodeAt(this.state.pos + 1);
        if (ch !== 33) return false;
        const start = this.state.pos;
        this.state.pos += 1;

        while (!isNewLine(ch) && ++this.state.pos < this.length) {
          ch = this.input.charCodeAt(this.state.pos);
        }

        const value = this.input.slice(start + 2, this.state.pos);
        this.finishToken(28, value);
        return true;
      }

      readToken_mult_modulo(code) {
        let type = code === 42 ? 55 : 54;
        let width = 1;
        let next = this.input.charCodeAt(this.state.pos + 1);

        if (code === 42 && next === 42) {
          width++;
          next = this.input.charCodeAt(this.state.pos + 2);
          type = 57;
        }

        if (next === 61 && !this.state.inType) {
          width++;
          type = code === 37 ? 33 : 30;
        }

        this.finishOp(type, width);
      }

      readToken_pipe_amp(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);

        if (next === code) {
          if (this.input.charCodeAt(this.state.pos + 2) === 61) {
            this.finishOp(30, 3);
          } else {
            this.finishOp(code === 124 ? 41 : 42, 2);
          }

          return;
        }

        if (code === 124) {
          if (next === 62) {
            this.finishOp(39, 2);
            return;
          }

          if (this.hasPlugin("recordAndTuple") && next === 125) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
              throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {
                at: this.state.curPosition()
              });
            }

            this.state.pos += 2;
            this.finishToken(9);
            return;
          }

          if (this.hasPlugin("recordAndTuple") && next === 93) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
              throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {
                at: this.state.curPosition()
              });
            }

            this.state.pos += 2;
            this.finishToken(4);
            return;
          }
        }

        if (next === 61) {
          this.finishOp(30, 2);
          return;
        }

        this.finishOp(code === 124 ? 43 : 45, 1);
      }

      readToken_caret() {
        const next = this.input.charCodeAt(this.state.pos + 1);

        if (next === 61 && !this.state.inType) {
          this.finishOp(32, 2);
        } else if (next === 94 && this.hasPlugin(["pipelineOperator", {
          proposal: "hack",
          topicToken: "^^"
        }])) {
          this.finishOp(37, 2);
          const lookaheadCh = this.input.codePointAt(this.state.pos);

          if (lookaheadCh === 94) {
            throw this.unexpected();
          }
        } else {
          this.finishOp(44, 1);
        }
      }

      readToken_atSign() {
        const next = this.input.charCodeAt(this.state.pos + 1);

        if (next === 64 && this.hasPlugin(["pipelineOperator", {
          proposal: "hack",
          topicToken: "@@"
        }])) {
          this.finishOp(38, 2);
        } else {
          this.finishOp(26, 1);
        }
      }

      readToken_plus_min(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);

        if (next === code) {
          this.finishOp(34, 2);
          return;
        }

        if (next === 61) {
          this.finishOp(30, 2);
        } else {
          this.finishOp(53, 1);
        }
      }

      readToken_lt() {
        const {
          pos
        } = this.state;
        const next = this.input.charCodeAt(pos + 1);

        if (next === 60) {
          if (this.input.charCodeAt(pos + 2) === 61) {
            this.finishOp(30, 3);
            return;
          }

          this.finishOp(51, 2);
          return;
        }

        if (next === 61) {
          this.finishOp(49, 2);
          return;
        }

        this.finishOp(47, 1);
      }

      readToken_gt() {
        const {
          pos
        } = this.state;
        const next = this.input.charCodeAt(pos + 1);

        if (next === 62) {
          const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;

          if (this.input.charCodeAt(pos + size) === 61) {
            this.finishOp(30, size + 1);
            return;
          }

          this.finishOp(52, size);
          return;
        }

        if (next === 61) {
          this.finishOp(49, 2);
          return;
        }

        this.finishOp(48, 1);
      }

      readToken_eq_excl(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);

        if (next === 61) {
          this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
          return;
        }

        if (code === 61 && next === 62) {
          this.state.pos += 2;
          this.finishToken(19);
          return;
        }

        this.finishOp(code === 61 ? 29 : 35, 1);
      }

      readToken_question() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        const next2 = this.input.charCodeAt(this.state.pos + 2);

        if (next === 63) {
          if (next2 === 61) {
            this.finishOp(30, 3);
          } else {
            this.finishOp(40, 2);
          }
        } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
          this.state.pos += 2;
          this.finishToken(18);
        } else {
          ++this.state.pos;
          this.finishToken(17);
        }
      }

      getTokenFromCode(code) {
        switch (code) {
          case 46:
            this.readToken_dot();
            return;

          case 40:
            ++this.state.pos;
            this.finishToken(10);
            return;

          case 41:
            ++this.state.pos;
            this.finishToken(11);
            return;

          case 59:
            ++this.state.pos;
            this.finishToken(13);
            return;

          case 44:
            ++this.state.pos;
            this.finishToken(12);
            return;

          case 91:
            if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {
                  at: this.state.curPosition()
                });
              }

              this.state.pos += 2;
              this.finishToken(2);
            } else {
              ++this.state.pos;
              this.finishToken(0);
            }

            return;

          case 93:
            ++this.state.pos;
            this.finishToken(3);
            return;

          case 123:
            if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {
                  at: this.state.curPosition()
                });
              }

              this.state.pos += 2;
              this.finishToken(6);
            } else {
              ++this.state.pos;
              this.finishToken(5);
            }

            return;

          case 125:
            ++this.state.pos;
            this.finishToken(8);
            return;

          case 58:
            if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
              this.finishOp(15, 2);
            } else {
              ++this.state.pos;
              this.finishToken(14);
            }

            return;

          case 63:
            this.readToken_question();
            return;

          case 96:
            this.readTemplateToken();
            return;

          case 48:
            {
              const next = this.input.charCodeAt(this.state.pos + 1);

              if (next === 120 || next === 88) {
                this.readRadixNumber(16);
                return;
              }

              if (next === 111 || next === 79) {
                this.readRadixNumber(8);
                return;
              }

              if (next === 98 || next === 66) {
                this.readRadixNumber(2);
                return;
              }
            }

          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            this.readNumber(false);
            return;

          case 34:
          case 39:
            this.readString(code);
            return;

          case 47:
            this.readToken_slash();
            return;

          case 37:
          case 42:
            this.readToken_mult_modulo(code);
            return;

          case 124:
          case 38:
            this.readToken_pipe_amp(code);
            return;

          case 94:
            this.readToken_caret();
            return;

          case 43:
          case 45:
            this.readToken_plus_min(code);
            return;

          case 60:
            this.readToken_lt();
            return;

          case 62:
            this.readToken_gt();
            return;

          case 61:
          case 33:
            this.readToken_eq_excl(code);
            return;

          case 126:
            this.finishOp(36, 1);
            return;

          case 64:
            this.readToken_atSign();
            return;

          case 35:
            this.readToken_numberSign();
            return;

          case 92:
            this.readWord();
            return;

          default:
            if (isIdentifierStart(code)) {
              this.readWord(code);
              return;
            }

        }

        throw this.raise(Errors.InvalidOrUnexpectedToken, {
          at: this.state.curPosition(),
          unexpected: String.fromCodePoint(code)
        });
      }

      finishOp(type, size) {
        const str = this.input.slice(this.state.pos, this.state.pos + size);
        this.state.pos += size;
        this.finishToken(type, str);
      }

      readRegexp() {
        const startLoc = this.state.startLoc;
        const start = this.state.start + 1;
        let escaped, inClass;
        let {
          pos
        } = this.state;

        for (;; ++pos) {
          if (pos >= this.length) {
            throw this.raise(Errors.UnterminatedRegExp, {
              at: createPositionWithColumnOffset(startLoc, 1)
            });
          }

          const ch = this.input.charCodeAt(pos);

          if (isNewLine(ch)) {
            throw this.raise(Errors.UnterminatedRegExp, {
              at: createPositionWithColumnOffset(startLoc, 1)
            });
          }

          if (escaped) {
            escaped = false;
          } else {
            if (ch === 91) {
              inClass = true;
            } else if (ch === 93 && inClass) {
              inClass = false;
            } else if (ch === 47 && !inClass) {
              break;
            }

            escaped = ch === 92;
          }
        }

        const content = this.input.slice(start, pos);
        ++pos;
        let mods = "";

        const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);

        while (pos < this.length) {
          const cp = this.codePointAtPos(pos);
          const char = String.fromCharCode(cp);

          if (VALID_REGEX_FLAGS.has(cp)) {
            if (cp === 118) {
              this.expectPlugin("regexpUnicodeSets", nextPos());

              if (mods.includes("u")) {
                this.raise(Errors.IncompatibleRegExpUVFlags, {
                  at: nextPos()
                });
              }
            } else if (cp === 117) {
              if (mods.includes("v")) {
                this.raise(Errors.IncompatibleRegExpUVFlags, {
                  at: nextPos()
                });
              }
            }

            if (mods.includes(char)) {
              this.raise(Errors.DuplicateRegExpFlags, {
                at: nextPos()
              });
            }
          } else if (isIdentifierChar(cp) || cp === 92) {
            this.raise(Errors.MalformedRegExpFlags, {
              at: nextPos()
            });
          } else {
            break;
          }

          ++pos;
          mods += char;
        }

        this.state.pos = pos;
        this.finishToken(135, {
          pattern: content,
          flags: mods
        });
      }

      readInt(radix, len, forceLen = false, allowNumSeparator = true) {
        const {
          n,
          pos
        } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
        this.state.pos = pos;
        return n;
      }

      readRadixNumber(radix) {
        const startLoc = this.state.curPosition();
        let isBigInt = false;
        this.state.pos += 2;
        const val = this.readInt(radix);

        if (val == null) {
          this.raise(Errors.InvalidDigit, {
            at: createPositionWithColumnOffset(startLoc, 2),
            radix
          });
        }

        const next = this.input.charCodeAt(this.state.pos);

        if (next === 110) {
          ++this.state.pos;
          isBigInt = true;
        } else if (next === 109) {
          throw this.raise(Errors.InvalidDecimal, {
            at: startLoc
          });
        }

        if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
          throw this.raise(Errors.NumberIdentifier, {
            at: this.state.curPosition()
          });
        }

        if (isBigInt) {
          const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
          this.finishToken(133, str);
          return;
        }

        this.finishToken(132, val);
      }

      readNumber(startsWithDot) {
        const start = this.state.pos;
        const startLoc = this.state.curPosition();
        let isFloat = false;
        let isBigInt = false;
        let isDecimal = false;
        let hasExponent = false;
        let isOctal = false;

        if (!startsWithDot && this.readInt(10) === null) {
          this.raise(Errors.InvalidNumber, {
            at: this.state.curPosition()
          });
        }

        const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;

        if (hasLeadingZero) {
          const integer = this.input.slice(start, this.state.pos);
          this.recordStrictModeErrors(Errors.StrictOctalLiteral, {
            at: startLoc
          });

          if (!this.state.strict) {
            const underscorePos = integer.indexOf("_");

            if (underscorePos > 0) {
              this.raise(Errors.ZeroDigitNumericSeparator, {
                at: createPositionWithColumnOffset(startLoc, underscorePos)
              });
            }
          }

          isOctal = hasLeadingZero && !/[89]/.test(integer);
        }

        let next = this.input.charCodeAt(this.state.pos);

        if (next === 46 && !isOctal) {
          ++this.state.pos;
          this.readInt(10);
          isFloat = true;
          next = this.input.charCodeAt(this.state.pos);
        }

        if ((next === 69 || next === 101) && !isOctal) {
          next = this.input.charCodeAt(++this.state.pos);

          if (next === 43 || next === 45) {
            ++this.state.pos;
          }

          if (this.readInt(10) === null) {
            this.raise(Errors.InvalidOrMissingExponent, {
              at: startLoc
            });
          }

          isFloat = true;
          hasExponent = true;
          next = this.input.charCodeAt(this.state.pos);
        }

        if (next === 110) {
          if (isFloat || hasLeadingZero) {
            this.raise(Errors.InvalidBigIntLiteral, {
              at: startLoc
            });
          }

          ++this.state.pos;
          isBigInt = true;
        }

        if (next === 109) {
          this.expectPlugin("decimal", this.state.curPosition());

          if (hasExponent || hasLeadingZero) {
            this.raise(Errors.InvalidDecimal, {
              at: startLoc
            });
          }

          ++this.state.pos;
          isDecimal = true;
        }

        if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
          throw this.raise(Errors.NumberIdentifier, {
            at: this.state.curPosition()
          });
        }

        const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");

        if (isBigInt) {
          this.finishToken(133, str);
          return;
        }

        if (isDecimal) {
          this.finishToken(134, str);
          return;
        }

        const val = isOctal ? parseInt(str, 8) : parseFloat(str);
        this.finishToken(132, val);
      }

      readCodePoint(throwOnInvalid) {
        const {
          code,
          pos
        } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
        this.state.pos = pos;
        return code;
      }

      readString(quote) {
        const {
          str,
          pos,
          curLine,
          lineStart
        } = readStringContents(quote === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
        this.state.pos = pos + 1;
        this.state.lineStart = lineStart;
        this.state.curLine = curLine;
        this.finishToken(131, str);
      }

      readTemplateContinuation() {
        if (!this.match(8)) {
          this.unexpected(null, 8);
        }

        this.state.pos--;
        this.readTemplateToken();
      }

      readTemplateToken() {
        const opening = this.input[this.state.pos];
        const {
          str,
          firstInvalidLoc,
          pos,
          curLine,
          lineStart
        } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
        this.state.pos = pos + 1;
        this.state.lineStart = lineStart;
        this.state.curLine = curLine;

        if (firstInvalidLoc) {
          this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);
        }

        if (this.input.codePointAt(pos) === 96) {
          this.finishToken(24, firstInvalidLoc ? null : opening + str + "`");
        } else {
          this.state.pos++;
          this.finishToken(25, firstInvalidLoc ? null : opening + str + "${");
        }
      }

      recordStrictModeErrors(toParseError, {
        at
      }) {
        const index = at.index;

        if (this.state.strict && !this.state.strictErrors.has(index)) {
          this.raise(toParseError, {
            at
          });
        } else {
          this.state.strictErrors.set(index, [toParseError, at]);
        }
      }

      readWord1(firstCode) {
        this.state.containsEsc = false;
        let word = "";
        const start = this.state.pos;
        let chunkStart = this.state.pos;

        if (firstCode !== void 0) {
          this.state.pos += firstCode <= 65535 ? 1 : 2;
        }

        while (this.state.pos < this.length) {
          const ch = this.codePointAtPos(this.state.pos);

          if (isIdentifierChar(ch)) {
            this.state.pos += ch <= 65535 ? 1 : 2;
          } else if (ch === 92) {
            this.state.containsEsc = true;
            word += this.input.slice(chunkStart, this.state.pos);
            const escStart = this.state.curPosition();
            const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;

            if (this.input.charCodeAt(++this.state.pos) !== 117) {
              this.raise(Errors.MissingUnicodeEscape, {
                at: this.state.curPosition()
              });
              chunkStart = this.state.pos - 1;
              continue;
            }

            ++this.state.pos;
            const esc = this.readCodePoint(true);

            if (esc !== null) {
              if (!identifierCheck(esc)) {
                this.raise(Errors.EscapedCharNotAnIdentifier, {
                  at: escStart
                });
              }

              word += String.fromCodePoint(esc);
            }

            chunkStart = this.state.pos;
          } else {
            break;
          }
        }

        return word + this.input.slice(chunkStart, this.state.pos);
      }

      readWord(firstCode) {
        const word = this.readWord1(firstCode);
        const type = keywords$1.get(word);

        if (type !== void 0) {
          this.finishToken(type, tokenLabelName(type));
        } else {
          this.finishToken(130, word);
        }
      }

      checkKeywordEscapes() {
        const {
          type
        } = this.state;

        if (tokenIsKeyword(type) && this.state.containsEsc) {
          this.raise(Errors.InvalidEscapedReservedWord, {
            at: this.state.startLoc,
            reservedWord: tokenLabelName(type)
          });
        }
      }

      raise(toParseError, raiseProperties) {
        const {
          at
        } = raiseProperties,
              details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);

        const loc = at instanceof Position ? at : at.loc.start;
        const error = toParseError({
          loc,
          details
        });
        if (!this.options.errorRecovery) throw error;
        if (!this.isLookahead) this.state.errors.push(error);
        return error;
      }

      raiseOverwrite(toParseError, raiseProperties) {
        const {
          at
        } = raiseProperties,
              details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);

        const loc = at instanceof Position ? at : at.loc.start;
        const pos = loc.index;
        const errors = this.state.errors;

        for (let i = errors.length - 1; i >= 0; i--) {
          const error = errors[i];

          if (error.loc.index === pos) {
            return errors[i] = toParseError({
              loc,
              details
            });
          }

          if (error.loc.index < pos) break;
        }

        return this.raise(toParseError, raiseProperties);
      }

      updateContext(prevType) {}

      unexpected(loc, type) {
        throw this.raise(Errors.UnexpectedToken, {
          expected: type ? tokenLabelName(type) : null,
          at: loc != null ? loc : this.state.startLoc
        });
      }

      expectPlugin(pluginName, loc) {
        if (this.hasPlugin(pluginName)) {
          return true;
        }

        throw this.raise(Errors.MissingPlugin, {
          at: loc != null ? loc : this.state.startLoc,
          missingPlugin: [pluginName]
        });
      }

      expectOnePlugin(pluginNames) {
        if (!pluginNames.some(name => this.hasPlugin(name))) {
          throw this.raise(Errors.MissingOneOfPlugins, {
            at: this.state.startLoc,
            missingPlugin: pluginNames
          });
        }
      }

      errorBuilder(error) {
        return (pos, lineStart, curLine) => {
          this.raise(error, {
            at: buildPosition(pos, lineStart, curLine)
          });
        };
      }

    };
    var ClassScope = class {
      constructor() {
        this.privateNames = new Set();
        this.loneAccessors = new Map();
        this.undefinedPrivateNames = new Map();
      }

    };
    var ClassScopeHandler = class {
      constructor(parser) {
        this.parser = void 0;
        this.stack = [];
        this.undefinedPrivateNames = new Map();
        this.parser = parser;
      }

      current() {
        return this.stack[this.stack.length - 1];
      }

      enter() {
        this.stack.push(new ClassScope());
      }

      exit() {
        const oldClassScope = this.stack.pop();
        const current = this.current();

        for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {
          if (current) {
            if (!current.undefinedPrivateNames.has(name)) {
              current.undefinedPrivateNames.set(name, loc);
            }
          } else {
            this.parser.raise(Errors.InvalidPrivateFieldResolution, {
              at: loc,
              identifierName: name
            });
          }
        }
      }

      declarePrivateName(name, elementType, loc) {
        const {
          privateNames,
          loneAccessors,
          undefinedPrivateNames
        } = this.current();
        let redefined = privateNames.has(name);

        if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {
          const accessor = redefined && loneAccessors.get(name);

          if (accessor) {
            const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;
            const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;
            const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;
            const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;
            redefined = oldKind === newKind || oldStatic !== newStatic;
            if (!redefined) loneAccessors.delete(name);
          } else if (!redefined) {
            loneAccessors.set(name, elementType);
          }
        }

        if (redefined) {
          this.parser.raise(Errors.PrivateNameRedeclaration, {
            at: loc,
            identifierName: name
          });
        }

        privateNames.add(name);
        undefinedPrivateNames.delete(name);
      }

      usePrivateName(name, loc) {
        let classScope;

        for (classScope of this.stack) {
          if (classScope.privateNames.has(name)) return;
        }

        if (classScope) {
          classScope.undefinedPrivateNames.set(name, loc);
        } else {
          this.parser.raise(Errors.InvalidPrivateFieldResolution, {
            at: loc,
            identifierName: name
          });
        }
      }

    };
    var kExpression = 0;
    var kMaybeArrowParameterDeclaration = 1;
    var kMaybeAsyncArrowParameterDeclaration = 2;
    var kParameterDeclaration = 3;
    var ExpressionScope = class {
      constructor(type = kExpression) {
        this.type = void 0;
        this.type = type;
      }

      canBeArrowParameterDeclaration() {
        return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;
      }

      isCertainlyParameterDeclaration() {
        return this.type === kParameterDeclaration;
      }

    };
    var ArrowHeadParsingScope = class extends ExpressionScope {
      constructor(type) {
        super(type);
        this.declarationErrors = new Map();
      }

      recordDeclarationError(ParsingErrorClass, {
        at
      }) {
        const index = at.index;
        this.declarationErrors.set(index, [ParsingErrorClass, at]);
      }

      clearDeclarationError(index) {
        this.declarationErrors.delete(index);
      }

      iterateErrors(iterator) {
        this.declarationErrors.forEach(iterator);
      }

    };
    var ExpressionScopeHandler = class {
      constructor(parser) {
        this.parser = void 0;
        this.stack = [new ExpressionScope()];
        this.parser = parser;
      }

      enter(scope) {
        this.stack.push(scope);
      }

      exit() {
        this.stack.pop();
      }

      recordParameterInitializerError(toParseError, {
        at: node
      }) {
        const origin = {
          at: node.loc.start
        };
        const {
          stack
        } = this;
        let i = stack.length - 1;
        let scope = stack[i];

        while (!scope.isCertainlyParameterDeclaration()) {
          if (scope.canBeArrowParameterDeclaration()) {
            scope.recordDeclarationError(toParseError, origin);
          } else {
            return;
          }

          scope = stack[--i];
        }

        this.parser.raise(toParseError, origin);
      }

      recordArrowParemeterBindingError(error, {
        at: node
      }) {
        const {
          stack
        } = this;
        const scope = stack[stack.length - 1];
        const origin = {
          at: node.loc.start
        };

        if (scope.isCertainlyParameterDeclaration()) {
          this.parser.raise(error, origin);
        } else if (scope.canBeArrowParameterDeclaration()) {
          scope.recordDeclarationError(error, origin);
        } else {
          return;
        }
      }

      recordAsyncArrowParametersError({
        at
      }) {
        const {
          stack
        } = this;
        let i = stack.length - 1;
        let scope = stack[i];

        while (scope.canBeArrowParameterDeclaration()) {
          if (scope.type === kMaybeAsyncArrowParameterDeclaration) {
            scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {
              at
            });
          }

          scope = stack[--i];
        }
      }

      validateAsPattern() {
        const {
          stack
        } = this;
        const currentScope = stack[stack.length - 1];
        if (!currentScope.canBeArrowParameterDeclaration()) return;
        currentScope.iterateErrors(([toParseError, loc]) => {
          this.parser.raise(toParseError, {
            at: loc
          });
          let i = stack.length - 2;
          let scope = stack[i];

          while (scope.canBeArrowParameterDeclaration()) {
            scope.clearDeclarationError(loc.index);
            scope = stack[--i];
          }
        });
      }

    };

    function newParameterDeclarationScope() {
      return new ExpressionScope(kParameterDeclaration);
    }

    function newArrowHeadScope() {
      return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);
    }

    function newAsyncArrowScope() {
      return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);
    }

    function newExpressionScope() {
      return new ExpressionScope();
    }

    var PARAM = 0;
    var PARAM_YIELD = 1;
    var PARAM_AWAIT = 2;
    var PARAM_RETURN = 4;
    var PARAM_IN = 8;
    var ProductionParameterHandler = class {
      constructor() {
        this.stacks = [];
      }

      enter(flags) {
        this.stacks.push(flags);
      }

      exit() {
        this.stacks.pop();
      }

      currentFlags() {
        return this.stacks[this.stacks.length - 1];
      }

      get hasAwait() {
        return (this.currentFlags() & PARAM_AWAIT) > 0;
      }

      get hasYield() {
        return (this.currentFlags() & PARAM_YIELD) > 0;
      }

      get hasReturn() {
        return (this.currentFlags() & PARAM_RETURN) > 0;
      }

      get hasIn() {
        return (this.currentFlags() & PARAM_IN) > 0;
      }

    };

    function functionFlags(isAsync, isGenerator) {
      return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);
    }

    var UtilParser = class extends Tokenizer {
      addExtra(node, key, value, enumerable = true) {
        if (!node) return;
        const extra = node.extra = node.extra || {};

        if (enumerable) {
          extra[key] = value;
        } else {
          Object.defineProperty(extra, key, {
            enumerable,
            value
          });
        }
      }

      isContextual(token) {
        return this.state.type === token && !this.state.containsEsc;
      }

      isUnparsedContextual(nameStart, name) {
        const nameEnd = nameStart + name.length;

        if (this.input.slice(nameStart, nameEnd) === name) {
          const nextCh = this.input.charCodeAt(nameEnd);
          return !(isIdentifierChar(nextCh) || (nextCh & 64512) === 55296);
        }

        return false;
      }

      isLookaheadContextual(name) {
        const next = this.nextTokenStart();
        return this.isUnparsedContextual(next, name);
      }

      eatContextual(token) {
        if (this.isContextual(token)) {
          this.next();
          return true;
        }

        return false;
      }

      expectContextual(token, toParseError) {
        if (!this.eatContextual(token)) {
          if (toParseError != null) {
            throw this.raise(toParseError, {
              at: this.state.startLoc
            });
          }

          throw this.unexpected(null, token);
        }
      }

      canInsertSemicolon() {
        return this.match(137) || this.match(8) || this.hasPrecedingLineBreak();
      }

      hasPrecedingLineBreak() {
        return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
      }

      hasFollowingLineBreak() {
        skipWhiteSpaceToLineBreak.lastIndex = this.state.end;
        return skipWhiteSpaceToLineBreak.test(this.input);
      }

      isLineTerminator() {
        return this.eat(13) || this.canInsertSemicolon();
      }

      semicolon(allowAsi = true) {
        if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;
        this.raise(Errors.MissingSemicolon, {
          at: this.state.lastTokEndLoc
        });
      }

      expect(type, loc) {
        this.eat(type) || this.unexpected(loc, type);
      }

      tryParse(fn, oldState = this.state.clone()) {
        const abortSignal = {
          node: null
        };

        try {
          const node = fn((node2 = null) => {
            abortSignal.node = node2;
            throw abortSignal;
          });

          if (this.state.errors.length > oldState.errors.length) {
            const failState = this.state;
            this.state = oldState;
            this.state.tokensLength = failState.tokensLength;
            return {
              node,
              error: failState.errors[oldState.errors.length],
              thrown: false,
              aborted: false,
              failState
            };
          }

          return {
            node,
            error: null,
            thrown: false,
            aborted: false,
            failState: null
          };
        } catch (error) {
          const failState = this.state;
          this.state = oldState;

          if (error instanceof SyntaxError) {
            return {
              node: null,
              error,
              thrown: true,
              aborted: false,
              failState
            };
          }

          if (error === abortSignal) {
            return {
              node: abortSignal.node,
              error: null,
              thrown: false,
              aborted: true,
              failState
            };
          }

          throw error;
        }
      }

      checkExpressionErrors(refExpressionErrors, andThrow) {
        if (!refExpressionErrors) return false;
        const {
          shorthandAssignLoc,
          doubleProtoLoc,
          privateKeyLoc,
          optionalParametersLoc
        } = refExpressionErrors;
        const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;

        if (!andThrow) {
          return hasErrors;
        }

        if (shorthandAssignLoc != null) {
          this.raise(Errors.InvalidCoverInitializedName, {
            at: shorthandAssignLoc
          });
        }

        if (doubleProtoLoc != null) {
          this.raise(Errors.DuplicateProto, {
            at: doubleProtoLoc
          });
        }

        if (privateKeyLoc != null) {
          this.raise(Errors.UnexpectedPrivateField, {
            at: privateKeyLoc
          });
        }

        if (optionalParametersLoc != null) {
          this.unexpected(optionalParametersLoc);
        }
      }

      isLiteralPropertyName() {
        return tokenIsLiteralPropertyName(this.state.type);
      }

      isPrivateName(node) {
        return node.type === "PrivateName";
      }

      getPrivateNameSV(node) {
        return node.id.name;
      }

      hasPropertyAsPrivateName(node) {
        return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
      }

      isOptionalChain(node) {
        return node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression";
      }

      isObjectProperty(node) {
        return node.type === "ObjectProperty";
      }

      isObjectMethod(node) {
        return node.type === "ObjectMethod";
      }

      initializeScopes(inModule = this.options.sourceType === "module") {
        const oldLabels = this.state.labels;
        this.state.labels = [];
        const oldExportedIdentifiers = this.exportedIdentifiers;
        this.exportedIdentifiers = new Set();
        const oldInModule = this.inModule;
        this.inModule = inModule;
        const oldScope = this.scope;
        const ScopeHandler2 = this.getScopeHandler();
        this.scope = new ScopeHandler2(this, inModule);
        const oldProdParam = this.prodParam;
        this.prodParam = new ProductionParameterHandler();
        const oldClassScope = this.classScope;
        this.classScope = new ClassScopeHandler(this);
        const oldExpressionScope = this.expressionScope;
        this.expressionScope = new ExpressionScopeHandler(this);
        return () => {
          this.state.labels = oldLabels;
          this.exportedIdentifiers = oldExportedIdentifiers;
          this.inModule = oldInModule;
          this.scope = oldScope;
          this.prodParam = oldProdParam;
          this.classScope = oldClassScope;
          this.expressionScope = oldExpressionScope;
        };
      }

      enterInitialScopes() {
        let paramFlags = PARAM;

        if (this.inModule) {
          paramFlags |= PARAM_AWAIT;
        }

        this.scope.enter(SCOPE_PROGRAM);
        this.prodParam.enter(paramFlags);
      }

      checkDestructuringPrivate(refExpressionErrors) {
        const {
          privateKeyLoc
        } = refExpressionErrors;

        if (privateKeyLoc !== null) {
          this.expectPlugin("destructuringPrivate", privateKeyLoc);
        }
      }

    };
    var ExpressionErrors = class {
      constructor() {
        this.shorthandAssignLoc = null;
        this.doubleProtoLoc = null;
        this.privateKeyLoc = null;
        this.optionalParametersLoc = null;
      }

    };
    var Node = class {
      constructor(parser, pos, loc) {
        this.type = "";
        this.start = pos;
        this.end = 0;
        this.loc = new SourceLocation(loc);
        if (parser != null && parser.options.ranges) this.range = [pos, 0];
        if (parser != null && parser.filename) this.loc.filename = parser.filename;
      }

    };
    var NodePrototype = Node.prototype;
    {
      NodePrototype.__clone = function () {
        const newNode = new Node(void 0, this.start, this.loc.start);
        const keys = Object.keys(this);

        for (let i = 0, length = keys.length; i < length; i++) {
          const key = keys[i];

          if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
            newNode[key] = this[key];
          }
        }

        return newNode;
      };
    }

    function clonePlaceholder(node) {
      return cloneIdentifier(node);
    }

    function cloneIdentifier(node) {
      const {
        type,
        start,
        end,
        loc,
        range,
        extra,
        name
      } = node;
      const cloned = Object.create(NodePrototype);
      cloned.type = type;
      cloned.start = start;
      cloned.end = end;
      cloned.loc = loc;
      cloned.range = range;
      cloned.extra = extra;
      cloned.name = name;

      if (type === "Placeholder") {
        cloned.expectedNode = node.expectedNode;
      }

      return cloned;
    }

    function cloneStringLiteral(node) {
      const {
        type,
        start,
        end,
        loc,
        range,
        extra
      } = node;

      if (type === "Placeholder") {
        return clonePlaceholder(node);
      }

      const cloned = Object.create(NodePrototype);
      cloned.type = type;
      cloned.start = start;
      cloned.end = end;
      cloned.loc = loc;
      cloned.range = range;

      if (node.raw !== void 0) {
        cloned.raw = node.raw;
      } else {
        cloned.extra = extra;
      }

      cloned.value = node.value;
      return cloned;
    }

    var NodeUtils = class extends UtilParser {
      startNode() {
        return new Node(this, this.state.start, this.state.startLoc);
      }

      startNodeAt(loc) {
        return new Node(this, loc.index, loc);
      }

      startNodeAtNode(type) {
        return this.startNodeAt(type.loc.start);
      }

      finishNode(node, type) {
        return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
      }

      finishNodeAt(node, type, endLoc) {
        node.type = type;
        node.end = endLoc.index;
        node.loc.end = endLoc;
        if (this.options.ranges) node.range[1] = endLoc.index;
        if (this.options.attachComment) this.processComment(node);
        return node;
      }

      resetStartLocation(node, startLoc) {
        node.start = startLoc.index;
        node.loc.start = startLoc;
        if (this.options.ranges) node.range[0] = startLoc.index;
      }

      resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
        node.end = endLoc.index;
        node.loc.end = endLoc;
        if (this.options.ranges) node.range[1] = endLoc.index;
      }

      resetStartLocationFromNode(node, locationNode) {
        this.resetStartLocation(node, locationNode.loc.start);
      }

    };
    var reservedTypes = new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
    var FlowErrors = ParseErrorEnum`flow`({
      AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
      AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
      AssignReservedType: ({
        reservedType
      }) => `Cannot overwrite reserved type ${reservedType}.`,
      DeclareClassElement: "The `declare` modifier can only appear on class fields.",
      DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
      DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
      EnumBooleanMemberNotInitialized: ({
        memberName,
        enumName
      }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`,
      EnumDuplicateMemberName: ({
        memberName,
        enumName
      }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`,
      EnumInconsistentMemberValues: ({
        enumName
      }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,
      EnumInvalidExplicitType: ({
        invalidEnumType,
        enumName
      }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
      EnumInvalidExplicitTypeUnknownSupplied: ({
        enumName
      }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
      EnumInvalidMemberInitializerPrimaryType: ({
        enumName,
        memberName,
        explicitType
      }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`,
      EnumInvalidMemberInitializerSymbolType: ({
        enumName,
        memberName
      }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`,
      EnumInvalidMemberInitializerUnknownType: ({
        enumName,
        memberName
      }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`,
      EnumInvalidMemberName: ({
        enumName,
        memberName,
        suggestion
      }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`,
      EnumNumberMemberNotInitialized: ({
        enumName,
        memberName
      }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`,
      EnumStringMemberInconsistentlyInitailized: ({
        enumName
      }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`,
      GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
      ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
      ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
      InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
      InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
      InexactVariance: "Explicit inexact syntax cannot have variance.",
      InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
      MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
      NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
      NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
      PatternIsOptional: Object.assign({
        message: "A binding pattern parameter cannot be optional in an implementation signature."
      }, {
        reasonCode: "OptionalBindingPattern"
      }),
      SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
      SpreadVariance: "Spread properties cannot have variance.",
      ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
      ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
      ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
      ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
      ThisParamNoDefault: "The `this` parameter may not have a default value.",
      TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
      TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
      UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
      UnexpectedReservedType: ({
        reservedType
      }) => `Unexpected reserved type ${reservedType}.`,
      UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
      UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
      UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
      UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
      UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
      UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
      UnsupportedDeclareExportKind: ({
        unsupportedExportKind,
        suggestion
      }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`,
      UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
      UnterminatedFlowComment: "Unterminated flow-comment."
    });

    function isEsModuleType(bodyElement) {
      return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
    }

    function hasTypeImportKind(node) {
      return node.importKind === "type" || node.importKind === "typeof";
    }

    function isMaybeDefaultImport(type) {
      return tokenIsKeywordOrIdentifier(type) && type !== 97;
    }

    var exportSuggestions = {
      const: "declare export var",
      let: "declare export var",
      type: "export type",
      interface: "export interface"
    };

    function partition(list, test) {
      const list1 = [];
      const list2 = [];

      for (let i = 0; i < list.length; i++) {
        (test(list[i], i, list) ? list1 : list2).push(list[i]);
      }

      return [list1, list2];
    }

    var FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;

    var flow = superClass => class FlowParserMixin extends superClass {
      constructor(...args) {
        super(...args);
        this.flowPragma = void 0;
      }

      getScopeHandler() {
        return FlowScopeHandler;
      }

      shouldParseTypes() {
        return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
      }

      shouldParseEnums() {
        return !!this.getPluginOption("flow", "enums");
      }

      finishToken(type, val) {
        if (type !== 131 && type !== 13 && type !== 28) {
          if (this.flowPragma === void 0) {
            this.flowPragma = null;
          }
        }

        return super.finishToken(type, val);
      }

      addComment(comment) {
        if (this.flowPragma === void 0) {
          const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
          if (!matches) ;else if (matches[1] === "flow") {
            this.flowPragma = "flow";
          } else if (matches[1] === "noflow") {
            this.flowPragma = "noflow";
          } else {
            throw new Error("Unexpected flow pragma");
          }
        }

        return super.addComment(comment);
      }

      flowParseTypeInitialiser(tok) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        this.expect(tok || 14);
        const type = this.flowParseType();
        this.state.inType = oldInType;
        return type;
      }

      flowParsePredicate() {
        const node = this.startNode();
        const moduloLoc = this.state.startLoc;
        this.next();
        this.expectContextual(108);

        if (this.state.lastTokStart > moduloLoc.index + 1) {
          this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {
            at: moduloLoc
          });
        }

        if (this.eat(10)) {
          node.value = super.parseExpression();
          this.expect(11);
          return this.finishNode(node, "DeclaredPredicate");
        } else {
          return this.finishNode(node, "InferredPredicate");
        }
      }

      flowParseTypeAndPredicateInitialiser() {
        const oldInType = this.state.inType;
        this.state.inType = true;
        this.expect(14);
        let type = null;
        let predicate = null;

        if (this.match(54)) {
          this.state.inType = oldInType;
          predicate = this.flowParsePredicate();
        } else {
          type = this.flowParseType();
          this.state.inType = oldInType;

          if (this.match(54)) {
            predicate = this.flowParsePredicate();
          }
        }

        return [type, predicate];
      }

      flowParseDeclareClass(node) {
        this.next();
        this.flowParseInterfaceish(node, true);
        return this.finishNode(node, "DeclareClass");
      }

      flowParseDeclareFunction(node) {
        this.next();
        const id = node.id = this.parseIdentifier();
        const typeNode = this.startNode();
        const typeContainer = this.startNode();

        if (this.match(47)) {
          typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          typeNode.typeParameters = null;
        }

        this.expect(10);
        const tmp = this.flowParseFunctionTypeParams();
        typeNode.params = tmp.params;
        typeNode.rest = tmp.rest;
        typeNode.this = tmp._this;
        this.expect(11);
        [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
        typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
        id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
        this.resetEndLocation(id);
        this.semicolon();
        this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);
        return this.finishNode(node, "DeclareFunction");
      }

      flowParseDeclare(node, insideModule) {
        if (this.match(80)) {
          return this.flowParseDeclareClass(node);
        } else if (this.match(68)) {
          return this.flowParseDeclareFunction(node);
        } else if (this.match(74)) {
          return this.flowParseDeclareVariable(node);
        } else if (this.eatContextual(125)) {
          if (this.match(16)) {
            return this.flowParseDeclareModuleExports(node);
          } else {
            if (insideModule) {
              this.raise(FlowErrors.NestedDeclareModule, {
                at: this.state.lastTokStartLoc
              });
            }

            return this.flowParseDeclareModule(node);
          }
        } else if (this.isContextual(128)) {
          return this.flowParseDeclareTypeAlias(node);
        } else if (this.isContextual(129)) {
          return this.flowParseDeclareOpaqueType(node);
        } else if (this.isContextual(127)) {
          return this.flowParseDeclareInterface(node);
        } else if (this.match(82)) {
          return this.flowParseDeclareExportDeclaration(node, insideModule);
        } else {
          throw this.unexpected();
        }
      }

      flowParseDeclareVariable(node) {
        this.next();
        node.id = this.flowParseTypeAnnotatableIdentifier(true);
        this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);
        this.semicolon();
        return this.finishNode(node, "DeclareVariable");
      }

      flowParseDeclareModule(node) {
        this.scope.enter(SCOPE_OTHER);

        if (this.match(131)) {
          node.id = super.parseExprAtom();
        } else {
          node.id = this.parseIdentifier();
        }

        const bodyNode = node.body = this.startNode();
        const body = bodyNode.body = [];
        this.expect(5);

        while (!this.match(8)) {
          let bodyNode2 = this.startNode();

          if (this.match(83)) {
            this.next();

            if (!this.isContextual(128) && !this.match(87)) {
              this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {
                at: this.state.lastTokStartLoc
              });
            }

            super.parseImport(bodyNode2);
          } else {
            this.expectContextual(123, FlowErrors.UnsupportedStatementInDeclareModule);
            bodyNode2 = this.flowParseDeclare(bodyNode2, true);
          }

          body.push(bodyNode2);
        }

        this.scope.exit();
        this.expect(8);
        this.finishNode(bodyNode, "BlockStatement");
        let kind = null;
        let hasModuleExport = false;
        body.forEach(bodyElement => {
          if (isEsModuleType(bodyElement)) {
            if (kind === "CommonJS") {
              this.raise(FlowErrors.AmbiguousDeclareModuleKind, {
                at: bodyElement
              });
            }

            kind = "ES";
          } else if (bodyElement.type === "DeclareModuleExports") {
            if (hasModuleExport) {
              this.raise(FlowErrors.DuplicateDeclareModuleExports, {
                at: bodyElement
              });
            }

            if (kind === "ES") {
              this.raise(FlowErrors.AmbiguousDeclareModuleKind, {
                at: bodyElement
              });
            }

            kind = "CommonJS";
            hasModuleExport = true;
          }
        });
        node.kind = kind || "CommonJS";
        return this.finishNode(node, "DeclareModule");
      }

      flowParseDeclareExportDeclaration(node, insideModule) {
        this.expect(82);

        if (this.eat(65)) {
          if (this.match(68) || this.match(80)) {
            node.declaration = this.flowParseDeclare(this.startNode());
          } else {
            node.declaration = this.flowParseType();
            this.semicolon();
          }

          node.default = true;
          return this.finishNode(node, "DeclareExportDeclaration");
        } else {
          if (this.match(75) || this.isLet() || (this.isContextual(128) || this.isContextual(127)) && !insideModule) {
            const label = this.state.value;
            throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {
              at: this.state.startLoc,
              unsupportedExportKind: label,
              suggestion: exportSuggestions[label]
            });
          }

          if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(129)) {
            node.declaration = this.flowParseDeclare(this.startNode());
            node.default = false;
            return this.finishNode(node, "DeclareExportDeclaration");
          } else if (this.match(55) || this.match(5) || this.isContextual(127) || this.isContextual(128) || this.isContextual(129)) {
            node = this.parseExport(node, null);

            if (node.type === "ExportNamedDeclaration") {
              node.type = "ExportDeclaration";
              node.default = false;
              delete node.exportKind;
            }

            node.type = "Declare" + node.type;
            return node;
          }
        }

        throw this.unexpected();
      }

      flowParseDeclareModuleExports(node) {
        this.next();
        this.expectContextual(109);
        node.typeAnnotation = this.flowParseTypeAnnotation();
        this.semicolon();
        return this.finishNode(node, "DeclareModuleExports");
      }

      flowParseDeclareTypeAlias(node) {
        this.next();
        const finished = this.flowParseTypeAlias(node);
        finished.type = "DeclareTypeAlias";
        return finished;
      }

      flowParseDeclareOpaqueType(node) {
        this.next();
        const finished = this.flowParseOpaqueType(node, true);
        finished.type = "DeclareOpaqueType";
        return finished;
      }

      flowParseDeclareInterface(node) {
        this.next();
        this.flowParseInterfaceish(node);
        return this.finishNode(node, "DeclareInterface");
      }

      flowParseInterfaceish(node, isClass = false) {
        node.id = this.flowParseRestrictedIdentifier(!isClass, true);
        this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);

        if (this.match(47)) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          node.typeParameters = null;
        }

        node.extends = [];
        node.implements = [];
        node.mixins = [];

        if (this.eat(81)) {
          do {
            node.extends.push(this.flowParseInterfaceExtends());
          } while (!isClass && this.eat(12));
        }

        if (this.isContextual(115)) {
          this.next();

          do {
            node.mixins.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }

        if (this.isContextual(111)) {
          this.next();

          do {
            node.implements.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }

        node.body = this.flowParseObjectType({
          allowStatic: isClass,
          allowExact: false,
          allowSpread: false,
          allowProto: isClass,
          allowInexact: false
        });
      }

      flowParseInterfaceExtends() {
        const node = this.startNode();
        node.id = this.flowParseQualifiedTypeIdentifier();

        if (this.match(47)) {
          node.typeParameters = this.flowParseTypeParameterInstantiation();
        } else {
          node.typeParameters = null;
        }

        return this.finishNode(node, "InterfaceExtends");
      }

      flowParseInterface(node) {
        this.flowParseInterfaceish(node);
        return this.finishNode(node, "InterfaceDeclaration");
      }

      checkNotUnderscore(word) {
        if (word === "_") {
          this.raise(FlowErrors.UnexpectedReservedUnderscore, {
            at: this.state.startLoc
          });
        }
      }

      checkReservedType(word, startLoc, declaration) {
        if (!reservedTypes.has(word)) return;
        this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {
          at: startLoc,
          reservedType: word
        });
      }

      flowParseRestrictedIdentifier(liberal, declaration) {
        this.checkReservedType(this.state.value, this.state.startLoc, declaration);
        return this.parseIdentifier(liberal);
      }

      flowParseTypeAlias(node) {
        node.id = this.flowParseRestrictedIdentifier(false, true);
        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);

        if (this.match(47)) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          node.typeParameters = null;
        }

        node.right = this.flowParseTypeInitialiser(29);
        this.semicolon();
        return this.finishNode(node, "TypeAlias");
      }

      flowParseOpaqueType(node, declare) {
        this.expectContextual(128);
        node.id = this.flowParseRestrictedIdentifier(true, true);
        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);

        if (this.match(47)) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          node.typeParameters = null;
        }

        node.supertype = null;

        if (this.match(14)) {
          node.supertype = this.flowParseTypeInitialiser(14);
        }

        node.impltype = null;

        if (!declare) {
          node.impltype = this.flowParseTypeInitialiser(29);
        }

        this.semicolon();
        return this.finishNode(node, "OpaqueType");
      }

      flowParseTypeParameter(requireDefault = false) {
        const nodeStartLoc = this.state.startLoc;
        const node = this.startNode();
        const variance = this.flowParseVariance();
        const ident = this.flowParseTypeAnnotatableIdentifier();
        node.name = ident.name;
        node.variance = variance;
        node.bound = ident.typeAnnotation;

        if (this.match(29)) {
          this.eat(29);
          node.default = this.flowParseType();
        } else {
          if (requireDefault) {
            this.raise(FlowErrors.MissingTypeParamDefault, {
              at: nodeStartLoc
            });
          }
        }

        return this.finishNode(node, "TypeParameter");
      }

      flowParseTypeParameterDeclaration() {
        const oldInType = this.state.inType;
        const node = this.startNode();
        node.params = [];
        this.state.inType = true;

        if (this.match(47) || this.match(140)) {
          this.next();
        } else {
          this.unexpected();
        }

        let defaultRequired = false;

        do {
          const typeParameter = this.flowParseTypeParameter(defaultRequired);
          node.params.push(typeParameter);

          if (typeParameter.default) {
            defaultRequired = true;
          }

          if (!this.match(48)) {
            this.expect(12);
          }
        } while (!this.match(48));

        this.expect(48);
        this.state.inType = oldInType;
        return this.finishNode(node, "TypeParameterDeclaration");
      }

      flowParseTypeParameterInstantiation() {
        const node = this.startNode();
        const oldInType = this.state.inType;
        node.params = [];
        this.state.inType = true;
        this.expect(47);
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = false;

        while (!this.match(48)) {
          node.params.push(this.flowParseType());

          if (!this.match(48)) {
            this.expect(12);
          }
        }

        this.state.noAnonFunctionType = oldNoAnonFunctionType;
        this.expect(48);
        this.state.inType = oldInType;
        return this.finishNode(node, "TypeParameterInstantiation");
      }

      flowParseTypeParameterInstantiationCallOrNew() {
        const node = this.startNode();
        const oldInType = this.state.inType;
        node.params = [];
        this.state.inType = true;
        this.expect(47);

        while (!this.match(48)) {
          node.params.push(this.flowParseTypeOrImplicitInstantiation());

          if (!this.match(48)) {
            this.expect(12);
          }
        }

        this.expect(48);
        this.state.inType = oldInType;
        return this.finishNode(node, "TypeParameterInstantiation");
      }

      flowParseInterfaceType() {
        const node = this.startNode();
        this.expectContextual(127);
        node.extends = [];

        if (this.eat(81)) {
          do {
            node.extends.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }

        node.body = this.flowParseObjectType({
          allowStatic: false,
          allowExact: false,
          allowSpread: false,
          allowProto: false,
          allowInexact: false
        });
        return this.finishNode(node, "InterfaceTypeAnnotation");
      }

      flowParseObjectPropertyKey() {
        return this.match(132) || this.match(131) ? super.parseExprAtom() : this.parseIdentifier(true);
      }

      flowParseObjectTypeIndexer(node, isStatic2, variance) {
        node.static = isStatic2;

        if (this.lookahead().type === 14) {
          node.id = this.flowParseObjectPropertyKey();
          node.key = this.flowParseTypeInitialiser();
        } else {
          node.id = null;
          node.key = this.flowParseType();
        }

        this.expect(3);
        node.value = this.flowParseTypeInitialiser();
        node.variance = variance;
        return this.finishNode(node, "ObjectTypeIndexer");
      }

      flowParseObjectTypeInternalSlot(node, isStatic2) {
        node.static = isStatic2;
        node.id = this.flowParseObjectPropertyKey();
        this.expect(3);
        this.expect(3);

        if (this.match(47) || this.match(10)) {
          node.method = true;
          node.optional = false;
          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
        } else {
          node.method = false;

          if (this.eat(17)) {
            node.optional = true;
          }

          node.value = this.flowParseTypeInitialiser();
        }

        return this.finishNode(node, "ObjectTypeInternalSlot");
      }

      flowParseObjectTypeMethodish(node) {
        node.params = [];
        node.rest = null;
        node.typeParameters = null;
        node.this = null;

        if (this.match(47)) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        }

        this.expect(10);

        if (this.match(78)) {
          node.this = this.flowParseFunctionTypeParam(true);
          node.this.name = null;

          if (!this.match(11)) {
            this.expect(12);
          }
        }

        while (!this.match(11) && !this.match(21)) {
          node.params.push(this.flowParseFunctionTypeParam(false));

          if (!this.match(11)) {
            this.expect(12);
          }
        }

        if (this.eat(21)) {
          node.rest = this.flowParseFunctionTypeParam(false);
        }

        this.expect(11);
        node.returnType = this.flowParseTypeInitialiser();
        return this.finishNode(node, "FunctionTypeAnnotation");
      }

      flowParseObjectTypeCallProperty(node, isStatic2) {
        const valueNode = this.startNode();
        node.static = isStatic2;
        node.value = this.flowParseObjectTypeMethodish(valueNode);
        return this.finishNode(node, "ObjectTypeCallProperty");
      }

      flowParseObjectType({
        allowStatic,
        allowExact,
        allowSpread,
        allowProto,
        allowInexact
      }) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        const nodeStart = this.startNode();
        nodeStart.callProperties = [];
        nodeStart.properties = [];
        nodeStart.indexers = [];
        nodeStart.internalSlots = [];
        let endDelim;
        let exact;
        let inexact = false;

        if (allowExact && this.match(6)) {
          this.expect(6);
          endDelim = 9;
          exact = true;
        } else {
          this.expect(5);
          endDelim = 8;
          exact = false;
        }

        nodeStart.exact = exact;

        while (!this.match(endDelim)) {
          let isStatic2 = false;
          let protoStartLoc = null;
          let inexactStartLoc = null;
          const node = this.startNode();

          if (allowProto && this.isContextual(116)) {
            const lookahead = this.lookahead();

            if (lookahead.type !== 14 && lookahead.type !== 17) {
              this.next();
              protoStartLoc = this.state.startLoc;
              allowStatic = false;
            }
          }

          if (allowStatic && this.isContextual(104)) {
            const lookahead = this.lookahead();

            if (lookahead.type !== 14 && lookahead.type !== 17) {
              this.next();
              isStatic2 = true;
            }
          }

          const variance = this.flowParseVariance();

          if (this.eat(0)) {
            if (protoStartLoc != null) {
              this.unexpected(protoStartLoc);
            }

            if (this.eat(0)) {
              if (variance) {
                this.unexpected(variance.loc.start);
              }

              nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic2));
            } else {
              nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic2, variance));
            }
          } else if (this.match(10) || this.match(47)) {
            if (protoStartLoc != null) {
              this.unexpected(protoStartLoc);
            }

            if (variance) {
              this.unexpected(variance.loc.start);
            }

            nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic2));
          } else {
            let kind = "init";

            if (this.isContextual(98) || this.isContextual(103)) {
              const lookahead = this.lookahead();

              if (tokenIsLiteralPropertyName(lookahead.type)) {
                kind = this.state.value;
                this.next();
              }
            }

            const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic2, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);

            if (propOrInexact === null) {
              inexact = true;
              inexactStartLoc = this.state.lastTokStartLoc;
            } else {
              nodeStart.properties.push(propOrInexact);
            }
          }

          this.flowObjectTypeSemicolon();

          if (inexactStartLoc && !this.match(8) && !this.match(9)) {
            this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {
              at: inexactStartLoc
            });
          }
        }

        this.expect(endDelim);

        if (allowSpread) {
          nodeStart.inexact = inexact;
        }

        const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
        this.state.inType = oldInType;
        return out;
      }

      flowParseObjectTypeProperty(node, isStatic2, protoStartLoc, variance, kind, allowSpread, allowInexact) {
        if (this.eat(21)) {
          const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);

          if (isInexactToken) {
            if (!allowSpread) {
              this.raise(FlowErrors.InexactInsideNonObject, {
                at: this.state.lastTokStartLoc
              });
            } else if (!allowInexact) {
              this.raise(FlowErrors.InexactInsideExact, {
                at: this.state.lastTokStartLoc
              });
            }

            if (variance) {
              this.raise(FlowErrors.InexactVariance, {
                at: variance
              });
            }

            return null;
          }

          if (!allowSpread) {
            this.raise(FlowErrors.UnexpectedSpreadType, {
              at: this.state.lastTokStartLoc
            });
          }

          if (protoStartLoc != null) {
            this.unexpected(protoStartLoc);
          }

          if (variance) {
            this.raise(FlowErrors.SpreadVariance, {
              at: variance
            });
          }

          node.argument = this.flowParseType();
          return this.finishNode(node, "ObjectTypeSpreadProperty");
        } else {
          node.key = this.flowParseObjectPropertyKey();
          node.static = isStatic2;
          node.proto = protoStartLoc != null;
          node.kind = kind;
          let optional = false;

          if (this.match(47) || this.match(10)) {
            node.method = true;

            if (protoStartLoc != null) {
              this.unexpected(protoStartLoc);
            }

            if (variance) {
              this.unexpected(variance.loc.start);
            }

            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));

            if (kind === "get" || kind === "set") {
              this.flowCheckGetterSetterParams(node);
            }

            if (!allowSpread && node.key.name === "constructor" && node.value.this) {
              this.raise(FlowErrors.ThisParamBannedInConstructor, {
                at: node.value.this
              });
            }
          } else {
            if (kind !== "init") this.unexpected();
            node.method = false;

            if (this.eat(17)) {
              optional = true;
            }

            node.value = this.flowParseTypeInitialiser();
            node.variance = variance;
          }

          node.optional = optional;
          return this.finishNode(node, "ObjectTypeProperty");
        }
      }

      flowCheckGetterSetterParams(property) {
        const paramCount = property.kind === "get" ? 0 : 1;
        const length = property.value.params.length + (property.value.rest ? 1 : 0);

        if (property.value.this) {
          this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {
            at: property.value.this
          });
        }

        if (length !== paramCount) {
          this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, {
            at: property
          });
        }

        if (property.kind === "set" && property.value.rest) {
          this.raise(Errors.BadSetterRestParameter, {
            at: property
          });
        }
      }

      flowObjectTypeSemicolon() {
        if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
          this.unexpected();
        }
      }

      flowParseQualifiedTypeIdentifier(startLoc, id) {
        var _startLoc;

        (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
        let node = id || this.flowParseRestrictedIdentifier(true);

        while (this.eat(16)) {
          const node2 = this.startNodeAt(startLoc);
          node2.qualification = node;
          node2.id = this.flowParseRestrictedIdentifier(true);
          node = this.finishNode(node2, "QualifiedTypeIdentifier");
        }

        return node;
      }

      flowParseGenericType(startLoc, id) {
        const node = this.startNodeAt(startLoc);
        node.typeParameters = null;
        node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);

        if (this.match(47)) {
          node.typeParameters = this.flowParseTypeParameterInstantiation();
        }

        return this.finishNode(node, "GenericTypeAnnotation");
      }

      flowParseTypeofType() {
        const node = this.startNode();
        this.expect(87);
        node.argument = this.flowParsePrimaryType();
        return this.finishNode(node, "TypeofTypeAnnotation");
      }

      flowParseTupleType() {
        const node = this.startNode();
        node.types = [];
        this.expect(0);

        while (this.state.pos < this.length && !this.match(3)) {
          node.types.push(this.flowParseType());
          if (this.match(3)) break;
          this.expect(12);
        }

        this.expect(3);
        return this.finishNode(node, "TupleTypeAnnotation");
      }

      flowParseFunctionTypeParam(first) {
        let name = null;
        let optional = false;
        let typeAnnotation = null;
        const node = this.startNode();
        const lh = this.lookahead();
        const isThis = this.state.type === 78;

        if (lh.type === 14 || lh.type === 17) {
          if (isThis && !first) {
            this.raise(FlowErrors.ThisParamMustBeFirst, {
              at: node
            });
          }

          name = this.parseIdentifier(isThis);

          if (this.eat(17)) {
            optional = true;

            if (isThis) {
              this.raise(FlowErrors.ThisParamMayNotBeOptional, {
                at: node
              });
            }
          }

          typeAnnotation = this.flowParseTypeInitialiser();
        } else {
          typeAnnotation = this.flowParseType();
        }

        node.name = name;
        node.optional = optional;
        node.typeAnnotation = typeAnnotation;
        return this.finishNode(node, "FunctionTypeParam");
      }

      reinterpretTypeAsFunctionTypeParam(type) {
        const node = this.startNodeAt(type.loc.start);
        node.name = null;
        node.optional = false;
        node.typeAnnotation = type;
        return this.finishNode(node, "FunctionTypeParam");
      }

      flowParseFunctionTypeParams(params = []) {
        let rest = null;
        let _this = null;

        if (this.match(78)) {
          _this = this.flowParseFunctionTypeParam(true);
          _this.name = null;

          if (!this.match(11)) {
            this.expect(12);
          }
        }

        while (!this.match(11) && !this.match(21)) {
          params.push(this.flowParseFunctionTypeParam(false));

          if (!this.match(11)) {
            this.expect(12);
          }
        }

        if (this.eat(21)) {
          rest = this.flowParseFunctionTypeParam(false);
        }

        return {
          params,
          rest,
          _this
        };
      }

      flowIdentToTypeAnnotation(startLoc, node, id) {
        switch (id.name) {
          case "any":
            return this.finishNode(node, "AnyTypeAnnotation");

          case "bool":
          case "boolean":
            return this.finishNode(node, "BooleanTypeAnnotation");

          case "mixed":
            return this.finishNode(node, "MixedTypeAnnotation");

          case "empty":
            return this.finishNode(node, "EmptyTypeAnnotation");

          case "number":
            return this.finishNode(node, "NumberTypeAnnotation");

          case "string":
            return this.finishNode(node, "StringTypeAnnotation");

          case "symbol":
            return this.finishNode(node, "SymbolTypeAnnotation");

          default:
            this.checkNotUnderscore(id.name);
            return this.flowParseGenericType(startLoc, id);
        }
      }

      flowParsePrimaryType() {
        const startLoc = this.state.startLoc;
        const node = this.startNode();
        let tmp;
        let type;
        let isGroupedType = false;
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;

        switch (this.state.type) {
          case 5:
            return this.flowParseObjectType({
              allowStatic: false,
              allowExact: false,
              allowSpread: true,
              allowProto: false,
              allowInexact: true
            });

          case 6:
            return this.flowParseObjectType({
              allowStatic: false,
              allowExact: true,
              allowSpread: true,
              allowProto: false,
              allowInexact: false
            });

          case 0:
            this.state.noAnonFunctionType = false;
            type = this.flowParseTupleType();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
            return type;

          case 47:
            node.typeParameters = this.flowParseTypeParameterDeclaration();
            this.expect(10);
            tmp = this.flowParseFunctionTypeParams();
            node.params = tmp.params;
            node.rest = tmp.rest;
            node.this = tmp._this;
            this.expect(11);
            this.expect(19);
            node.returnType = this.flowParseType();
            return this.finishNode(node, "FunctionTypeAnnotation");

          case 10:
            this.next();

            if (!this.match(11) && !this.match(21)) {
              if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                const token = this.lookahead().type;
                isGroupedType = token !== 17 && token !== 14;
              } else {
                isGroupedType = true;
              }
            }

            if (isGroupedType) {
              this.state.noAnonFunctionType = false;
              type = this.flowParseType();
              this.state.noAnonFunctionType = oldNoAnonFunctionType;

              if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
                this.expect(11);
                return type;
              } else {
                this.eat(12);
              }
            }

            if (type) {
              tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
            } else {
              tmp = this.flowParseFunctionTypeParams();
            }

            node.params = tmp.params;
            node.rest = tmp.rest;
            node.this = tmp._this;
            this.expect(11);
            this.expect(19);
            node.returnType = this.flowParseType();
            node.typeParameters = null;
            return this.finishNode(node, "FunctionTypeAnnotation");

          case 131:
            return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");

          case 85:
          case 86:
            node.value = this.match(85);
            this.next();
            return this.finishNode(node, "BooleanLiteralTypeAnnotation");

          case 53:
            if (this.state.value === "-") {
              this.next();

              if (this.match(132)) {
                return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
              }

              if (this.match(133)) {
                return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
              }

              throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {
                at: this.state.startLoc
              });
            }

            throw this.unexpected();

          case 132:
            return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");

          case 133:
            return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");

          case 88:
            this.next();
            return this.finishNode(node, "VoidTypeAnnotation");

          case 84:
            this.next();
            return this.finishNode(node, "NullLiteralTypeAnnotation");

          case 78:
            this.next();
            return this.finishNode(node, "ThisTypeAnnotation");

          case 55:
            this.next();
            return this.finishNode(node, "ExistsTypeAnnotation");

          case 87:
            return this.flowParseTypeofType();

          default:
            if (tokenIsKeyword(this.state.type)) {
              const label = tokenLabelName(this.state.type);
              this.next();
              return super.createIdentifier(node, label);
            } else if (tokenIsIdentifier(this.state.type)) {
              if (this.isContextual(127)) {
                return this.flowParseInterfaceType();
              }

              return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
            }

        }

        throw this.unexpected();
      }

      flowParsePostfixType() {
        const startLoc = this.state.startLoc;
        let type = this.flowParsePrimaryType();
        let seenOptionalIndexedAccess = false;

        while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
          const node = this.startNodeAt(startLoc);
          const optional = this.eat(18);
          seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
          this.expect(0);

          if (!optional && this.match(3)) {
            node.elementType = type;
            this.next();
            type = this.finishNode(node, "ArrayTypeAnnotation");
          } else {
            node.objectType = type;
            node.indexType = this.flowParseType();
            this.expect(3);

            if (seenOptionalIndexedAccess) {
              node.optional = optional;
              type = this.finishNode(node, "OptionalIndexedAccessType");
            } else {
              type = this.finishNode(node, "IndexedAccessType");
            }
          }
        }

        return type;
      }

      flowParsePrefixType() {
        const node = this.startNode();

        if (this.eat(17)) {
          node.typeAnnotation = this.flowParsePrefixType();
          return this.finishNode(node, "NullableTypeAnnotation");
        } else {
          return this.flowParsePostfixType();
        }
      }

      flowParseAnonFunctionWithoutParens() {
        const param = this.flowParsePrefixType();

        if (!this.state.noAnonFunctionType && this.eat(19)) {
          const node = this.startNodeAt(param.loc.start);
          node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
          node.rest = null;
          node.this = null;
          node.returnType = this.flowParseType();
          node.typeParameters = null;
          return this.finishNode(node, "FunctionTypeAnnotation");
        }

        return param;
      }

      flowParseIntersectionType() {
        const node = this.startNode();
        this.eat(45);
        const type = this.flowParseAnonFunctionWithoutParens();
        node.types = [type];

        while (this.eat(45)) {
          node.types.push(this.flowParseAnonFunctionWithoutParens());
        }

        return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
      }

      flowParseUnionType() {
        const node = this.startNode();
        this.eat(43);
        const type = this.flowParseIntersectionType();
        node.types = [type];

        while (this.eat(43)) {
          node.types.push(this.flowParseIntersectionType());
        }

        return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
      }

      flowParseType() {
        const oldInType = this.state.inType;
        this.state.inType = true;
        const type = this.flowParseUnionType();
        this.state.inType = oldInType;
        return type;
      }

      flowParseTypeOrImplicitInstantiation() {
        if (this.state.type === 130 && this.state.value === "_") {
          const startLoc = this.state.startLoc;
          const node = this.parseIdentifier();
          return this.flowParseGenericType(startLoc, node);
        } else {
          return this.flowParseType();
        }
      }

      flowParseTypeAnnotation() {
        const node = this.startNode();
        node.typeAnnotation = this.flowParseTypeInitialiser();
        return this.finishNode(node, "TypeAnnotation");
      }

      flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
        const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();

        if (this.match(14)) {
          ident.typeAnnotation = this.flowParseTypeAnnotation();
          this.resetEndLocation(ident);
        }

        return ident;
      }

      typeCastToParameter(node) {
        node.expression.typeAnnotation = node.typeAnnotation;
        this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
        return node.expression;
      }

      flowParseVariance() {
        let variance = null;

        if (this.match(53)) {
          variance = this.startNode();

          if (this.state.value === "+") {
            variance.kind = "plus";
          } else {
            variance.kind = "minus";
          }

          this.next();
          return this.finishNode(variance, "Variance");
        }

        return variance;
      }

      parseFunctionBody(node, allowExpressionBody, isMethod = false) {
        if (allowExpressionBody) {
          return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));
        }

        return super.parseFunctionBody(node, false, isMethod);
      }

      parseFunctionBodyAndFinish(node, type, isMethod = false) {
        if (this.match(14)) {
          const typeNode = this.startNode();
          [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
          node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
        }

        return super.parseFunctionBodyAndFinish(node, type, isMethod);
      }

      parseStatement(context, topLevel) {
        if (this.state.strict && this.isContextual(127)) {
          const lookahead = this.lookahead();

          if (tokenIsKeywordOrIdentifier(lookahead.type)) {
            const node = this.startNode();
            this.next();
            return this.flowParseInterface(node);
          }
        } else if (this.shouldParseEnums() && this.isContextual(124)) {
          const node = this.startNode();
          this.next();
          return this.flowParseEnumDeclaration(node);
        }

        const stmt = super.parseStatement(context, topLevel);

        if (this.flowPragma === void 0 && !this.isValidDirective(stmt)) {
          this.flowPragma = null;
        }

        return stmt;
      }

      parseExpressionStatement(node, expr, decorators) {
        if (expr.type === "Identifier") {
          if (expr.name === "declare") {
            if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {
              return this.flowParseDeclare(node);
            }
          } else if (tokenIsIdentifier(this.state.type)) {
            if (expr.name === "interface") {
              return this.flowParseInterface(node);
            } else if (expr.name === "type") {
              return this.flowParseTypeAlias(node);
            } else if (expr.name === "opaque") {
              return this.flowParseOpaqueType(node, false);
            }
          }
        }

        return super.parseExpressionStatement(node, expr, decorators);
      }

      shouldParseExportDeclaration() {
        const {
          type
        } = this.state;

        if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 124) {
          return !this.state.containsEsc;
        }

        return super.shouldParseExportDeclaration();
      }

      isExportDefaultSpecifier() {
        const {
          type
        } = this.state;

        if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 124) {
          return this.state.containsEsc;
        }

        return super.isExportDefaultSpecifier();
      }

      parseExportDefaultExpression() {
        if (this.shouldParseEnums() && this.isContextual(124)) {
          const node = this.startNode();
          this.next();
          return this.flowParseEnumDeclaration(node);
        }

        return super.parseExportDefaultExpression();
      }

      parseConditional(expr, startLoc, refExpressionErrors) {
        if (!this.match(17)) return expr;

        if (this.state.maybeInArrowParameters) {
          const nextCh = this.lookaheadCharCode();

          if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
            this.setOptionalParametersError(refExpressionErrors);
            return expr;
          }
        }

        this.expect(17);
        const state = this.state.clone();
        const originalNoArrowAt = this.state.noArrowAt;
        const node = this.startNodeAt(startLoc);
        let {
          consequent,
          failed
        } = this.tryParseConditionalConsequent();
        let [valid, invalid] = this.getArrowLikeExpressions(consequent);

        if (failed || invalid.length > 0) {
          const noArrowAt = [...originalNoArrowAt];

          if (invalid.length > 0) {
            this.state = state;
            this.state.noArrowAt = noArrowAt;

            for (let i = 0; i < invalid.length; i++) {
              noArrowAt.push(invalid[i].start);
            }

            ({
              consequent,
              failed
            } = this.tryParseConditionalConsequent());
            [valid, invalid] = this.getArrowLikeExpressions(consequent);
          }

          if (failed && valid.length > 1) {
            this.raise(FlowErrors.AmbiguousConditionalArrow, {
              at: state.startLoc
            });
          }

          if (failed && valid.length === 1) {
            this.state = state;
            noArrowAt.push(valid[0].start);
            this.state.noArrowAt = noArrowAt;
            ({
              consequent,
              failed
            } = this.tryParseConditionalConsequent());
          }
        }

        this.getArrowLikeExpressions(consequent, true);
        this.state.noArrowAt = originalNoArrowAt;
        this.expect(14);
        node.test = expr;
        node.consequent = consequent;
        node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(void 0, void 0));
        return this.finishNode(node, "ConditionalExpression");
      }

      tryParseConditionalConsequent() {
        this.state.noArrowParamsConversionAt.push(this.state.start);
        const consequent = this.parseMaybeAssignAllowIn();
        const failed = !this.match(14);
        this.state.noArrowParamsConversionAt.pop();
        return {
          consequent,
          failed
        };
      }

      getArrowLikeExpressions(node, disallowInvalid) {
        const stack = [node];
        const arrows = [];

        while (stack.length !== 0) {
          const node2 = stack.pop();

          if (node2.type === "ArrowFunctionExpression") {
            if (node2.typeParameters || !node2.returnType) {
              this.finishArrowValidation(node2);
            } else {
              arrows.push(node2);
            }

            stack.push(node2.body);
          } else if (node2.type === "ConditionalExpression") {
            stack.push(node2.consequent);
            stack.push(node2.alternate);
          }
        }

        if (disallowInvalid) {
          arrows.forEach(node2 => this.finishArrowValidation(node2));
          return [arrows, []];
        }

        return partition(arrows, node2 => node2.params.every(param => this.isAssignable(param, true)));
      }

      finishArrowValidation(node) {
        var _node$extra;

        this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
        super.checkParams(node, false, true);
        this.scope.exit();
      }

      forwardNoArrowParamsConversionAt(node, parse2) {
        let result;

        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
          this.state.noArrowParamsConversionAt.push(this.state.start);
          result = parse2();
          this.state.noArrowParamsConversionAt.pop();
        } else {
          result = parse2();
        }

        return result;
      }

      parseParenItem(node, startLoc) {
        node = super.parseParenItem(node, startLoc);

        if (this.eat(17)) {
          node.optional = true;
          this.resetEndLocation(node);
        }

        if (this.match(14)) {
          const typeCastNode = this.startNodeAt(startLoc);
          typeCastNode.expression = node;
          typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
          return this.finishNode(typeCastNode, "TypeCastExpression");
        }

        return node;
      }

      assertModuleNodeAllowed(node) {
        if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") {
          return;
        }

        super.assertModuleNodeAllowed(node);
      }

      parseExport(node, decorators) {
        const decl = super.parseExport(node, decorators);

        if (decl.type === "ExportNamedDeclaration" || decl.type === "ExportAllDeclaration") {
          decl.exportKind = decl.exportKind || "value";
        }

        return decl;
      }

      parseExportDeclaration(node) {
        if (this.isContextual(128)) {
          node.exportKind = "type";
          const declarationNode = this.startNode();
          this.next();

          if (this.match(5)) {
            node.specifiers = this.parseExportSpecifiers(true);
            super.parseExportFrom(node);
            return null;
          } else {
            return this.flowParseTypeAlias(declarationNode);
          }
        } else if (this.isContextual(129)) {
          node.exportKind = "type";
          const declarationNode = this.startNode();
          this.next();
          return this.flowParseOpaqueType(declarationNode, false);
        } else if (this.isContextual(127)) {
          node.exportKind = "type";
          const declarationNode = this.startNode();
          this.next();
          return this.flowParseInterface(declarationNode);
        } else if (this.shouldParseEnums() && this.isContextual(124)) {
          node.exportKind = "value";
          const declarationNode = this.startNode();
          this.next();
          return this.flowParseEnumDeclaration(declarationNode);
        } else {
          return super.parseExportDeclaration(node);
        }
      }

      eatExportStar(node) {
        if (super.eatExportStar(node)) return true;

        if (this.isContextual(128) && this.lookahead().type === 55) {
          node.exportKind = "type";
          this.next();
          this.next();
          return true;
        }

        return false;
      }

      maybeParseExportNamespaceSpecifier(node) {
        const {
          startLoc
        } = this.state;
        const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);

        if (hasNamespace && node.exportKind === "type") {
          this.unexpected(startLoc);
        }

        return hasNamespace;
      }

      parseClassId(node, isStatement, optionalId) {
        super.parseClassId(node, isStatement, optionalId);

        if (this.match(47)) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
      }

      parseClassMember(classBody, member, state) {
        const {
          startLoc
        } = this.state;

        if (this.isContextual(123)) {
          if (super.parseClassMemberFromModifier(classBody, member)) {
            return;
          }

          member.declare = true;
        }

        super.parseClassMember(classBody, member, state);

        if (member.declare) {
          if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
            this.raise(FlowErrors.DeclareClassElement, {
              at: startLoc
            });
          } else if (member.value) {
            this.raise(FlowErrors.DeclareClassFieldInitializer, {
              at: member.value
            });
          }
        }
      }

      isIterator(word) {
        return word === "iterator" || word === "asyncIterator";
      }

      readIterator() {
        const word = super.readWord1();
        const fullWord = "@@" + word;

        if (!this.isIterator(word) || !this.state.inType) {
          this.raise(Errors.InvalidIdentifier, {
            at: this.state.curPosition(),
            identifierName: fullWord
          });
        }

        this.finishToken(130, fullWord);
      }

      getTokenFromCode(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);

        if (code === 123 && next === 124) {
          return this.finishOp(6, 2);
        } else if (this.state.inType && (code === 62 || code === 60)) {
          return this.finishOp(code === 62 ? 48 : 47, 1);
        } else if (this.state.inType && code === 63) {
          if (next === 46) {
            return this.finishOp(18, 2);
          }

          return this.finishOp(17, 1);
        } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {
          this.state.pos += 2;
          return this.readIterator();
        } else {
          return super.getTokenFromCode(code);
        }
      }

      isAssignable(node, isBinding) {
        if (node.type === "TypeCastExpression") {
          return this.isAssignable(node.expression, isBinding);
        } else {
          return super.isAssignable(node, isBinding);
        }
      }

      toAssignable(node, isLHS = false) {
        if (!isLHS && node.type === "AssignmentExpression" && node.left.type === "TypeCastExpression") {
          node.left = this.typeCastToParameter(node.left);
        }

        super.toAssignable(node, isLHS);
      }

      toAssignableList(exprList, trailingCommaLoc, isLHS) {
        for (let i = 0; i < exprList.length; i++) {
          const expr = exprList[i];

          if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
            exprList[i] = this.typeCastToParameter(expr);
          }
        }

        super.toAssignableList(exprList, trailingCommaLoc, isLHS);
      }

      toReferencedList(exprList, isParenthesizedExpr) {
        for (let i = 0; i < exprList.length; i++) {
          var _expr$extra;

          const expr = exprList[i];

          if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
            this.raise(FlowErrors.TypeCastInPattern, {
              at: expr.typeAnnotation
            });
          }
        }

        return exprList;
      }

      parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);

        if (canBePattern && !this.state.maybeInArrowParameters) {
          this.toReferencedList(node.elements);
        }

        return node;
      }

      isValidLVal(type, isParenthesized, binding) {
        return type === "TypeCastExpression" || super.isValidLVal(type, isParenthesized, binding);
      }

      parseClassProperty(node) {
        if (this.match(14)) {
          node.typeAnnotation = this.flowParseTypeAnnotation();
        }

        return super.parseClassProperty(node);
      }

      parseClassPrivateProperty(node) {
        if (this.match(14)) {
          node.typeAnnotation = this.flowParseTypeAnnotation();
        }

        return super.parseClassPrivateProperty(node);
      }

      isClassMethod() {
        return this.match(47) || super.isClassMethod();
      }

      isClassProperty() {
        return this.match(14) || super.isClassProperty();
      }

      isNonstaticConstructor(method) {
        return !this.match(14) && super.isNonstaticConstructor(method);
      }

      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        if (method.variance) {
          this.unexpected(method.variance.loc.start);
        }

        delete method.variance;

        if (this.match(47)) {
          method.typeParameters = this.flowParseTypeParameterDeclaration();
        }

        super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);

        if (method.params && isConstructor) {
          const params = method.params;

          if (params.length > 0 && this.isThisParam(params[0])) {
            this.raise(FlowErrors.ThisParamBannedInConstructor, {
              at: method
            });
          }
        } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
          const params = method.value.params;

          if (params.length > 0 && this.isThisParam(params[0])) {
            this.raise(FlowErrors.ThisParamBannedInConstructor, {
              at: method
            });
          }
        }
      }

      pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        if (method.variance) {
          this.unexpected(method.variance.loc.start);
        }

        delete method.variance;

        if (this.match(47)) {
          method.typeParameters = this.flowParseTypeParameterDeclaration();
        }

        super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
      }

      parseClassSuper(node) {
        super.parseClassSuper(node);

        if (node.superClass && this.match(47)) {
          node.superTypeParameters = this.flowParseTypeParameterInstantiation();
        }

        if (this.isContextual(111)) {
          this.next();
          const implemented = node.implements = [];

          do {
            const node2 = this.startNode();
            node2.id = this.flowParseRestrictedIdentifier(true);

            if (this.match(47)) {
              node2.typeParameters = this.flowParseTypeParameterInstantiation();
            } else {
              node2.typeParameters = null;
            }

            implemented.push(this.finishNode(node2, "ClassImplements"));
          } while (this.eat(12));
        }
      }

      checkGetterSetterParams(method) {
        super.checkGetterSetterParams(method);
        const params = this.getObjectOrClassMethodParams(method);

        if (params.length > 0) {
          const param = params[0];

          if (this.isThisParam(param) && method.kind === "get") {
            this.raise(FlowErrors.GetterMayNotHaveThisParam, {
              at: param
            });
          } else if (this.isThisParam(param)) {
            this.raise(FlowErrors.SetterMayNotHaveThisParam, {
              at: param
            });
          }
        }
      }

      parsePropertyNamePrefixOperator(node) {
        node.variance = this.flowParseVariance();
      }

      parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        if (prop.variance) {
          this.unexpected(prop.variance.loc.start);
        }

        delete prop.variance;
        let typeParameters;

        if (this.match(47) && !isAccessor) {
          typeParameters = this.flowParseTypeParameterDeclaration();
          if (!this.match(10)) this.unexpected();
        }

        const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);

        if (typeParameters) {
          (result.value || result).typeParameters = typeParameters;
        }

        return result;
      }

      parseAssignableListItemTypes(param) {
        if (this.eat(17)) {
          if (param.type !== "Identifier") {
            this.raise(FlowErrors.PatternIsOptional, {
              at: param
            });
          }

          if (this.isThisParam(param)) {
            this.raise(FlowErrors.ThisParamMayNotBeOptional, {
              at: param
            });
          }

          param.optional = true;
        }

        if (this.match(14)) {
          param.typeAnnotation = this.flowParseTypeAnnotation();
        } else if (this.isThisParam(param)) {
          this.raise(FlowErrors.ThisParamAnnotationRequired, {
            at: param
          });
        }

        if (this.match(29) && this.isThisParam(param)) {
          this.raise(FlowErrors.ThisParamNoDefault, {
            at: param
          });
        }

        this.resetEndLocation(param);
        return param;
      }

      parseMaybeDefault(startLoc, left) {
        const node = super.parseMaybeDefault(startLoc, left);

        if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
          this.raise(FlowErrors.TypeBeforeInitializer, {
            at: node.typeAnnotation
          });
        }

        return node;
      }

      shouldParseDefaultImport(node) {
        if (!hasTypeImportKind(node)) {
          return super.shouldParseDefaultImport(node);
        }

        return isMaybeDefaultImport(this.state.type);
      }

      checkImportReflection(node) {
        super.checkImportReflection(node);

        if (node.module && node.importKind !== "value") {
          this.raise(FlowErrors.ImportReflectionHasImportType, {
            at: node.specifiers[0].loc.start
          });
        }
      }

      parseImportSpecifierLocal(node, specifier, type) {
        specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
        node.specifiers.push(this.finishImportSpecifier(specifier, type));
      }

      maybeParseDefaultImportSpecifier(node) {
        node.importKind = "value";
        let kind = null;

        if (this.match(87)) {
          kind = "typeof";
        } else if (this.isContextual(128)) {
          kind = "type";
        }

        if (kind) {
          const lh = this.lookahead();
          const {
            type
          } = lh;

          if (kind === "type" && type === 55) {
            this.unexpected(null, lh.type);
          }

          if (isMaybeDefaultImport(type) || type === 5 || type === 55) {
            this.next();
            node.importKind = kind;
          }
        }

        return super.maybeParseDefaultImportSpecifier(node);
      }

      parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
        const firstIdent = specifier.imported;
        let specifierTypeKind = null;

        if (firstIdent.type === "Identifier") {
          if (firstIdent.name === "type") {
            specifierTypeKind = "type";
          } else if (firstIdent.name === "typeof") {
            specifierTypeKind = "typeof";
          }
        }

        let isBinding = false;

        if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
          const as_ident = this.parseIdentifier(true);

          if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
            specifier.imported = as_ident;
            specifier.importKind = specifierTypeKind;
            specifier.local = cloneIdentifier(as_ident);
          } else {
            specifier.imported = firstIdent;
            specifier.importKind = null;
            specifier.local = this.parseIdentifier();
          }
        } else {
          if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
            specifier.imported = this.parseIdentifier(true);
            specifier.importKind = specifierTypeKind;
          } else {
            if (importedIsString) {
              throw this.raise(Errors.ImportBindingIsString, {
                at: specifier,
                importName: firstIdent.value
              });
            }

            specifier.imported = firstIdent;
            specifier.importKind = null;
          }

          if (this.eatContextual(93)) {
            specifier.local = this.parseIdentifier();
          } else {
            isBinding = true;
            specifier.local = cloneIdentifier(specifier.imported);
          }
        }

        const specifierIsTypeImport = hasTypeImportKind(specifier);

        if (isInTypeOnlyImport && specifierIsTypeImport) {
          this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {
            at: specifier
          });
        }

        if (isInTypeOnlyImport || specifierIsTypeImport) {
          this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
        }

        if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {
          this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
        }

        return this.finishImportSpecifier(specifier, "ImportSpecifier");
      }

      parseBindingAtom() {
        switch (this.state.type) {
          case 78:
            return this.parseIdentifier(true);

          default:
            return super.parseBindingAtom();
        }
      }

      parseFunctionParams(node, allowModifiers) {
        const kind = node.kind;

        if (kind !== "get" && kind !== "set" && this.match(47)) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        }

        super.parseFunctionParams(node, allowModifiers);
      }

      parseVarId(decl, kind) {
        super.parseVarId(decl, kind);

        if (this.match(14)) {
          decl.id.typeAnnotation = this.flowParseTypeAnnotation();
          this.resetEndLocation(decl.id);
        }
      }

      parseAsyncArrowFromCallExpression(node, call) {
        if (this.match(14)) {
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          this.state.noAnonFunctionType = true;
          node.returnType = this.flowParseTypeAnnotation();
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
        }

        return super.parseAsyncArrowFromCallExpression(node, call);
      }

      shouldParseAsyncArrow() {
        return this.match(14) || super.shouldParseAsyncArrow();
      }

      parseMaybeAssign(refExpressionErrors, afterLeftParse) {
        var _jsx;

        let state = null;
        let jsx2;

        if (this.hasPlugin("jsx") && (this.match(140) || this.match(47))) {
          state = this.state.clone();
          jsx2 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
          if (!jsx2.error) return jsx2.node;
          const {
            context
          } = this.state;
          const currentContext = context[context.length - 1];

          if (currentContext === types.j_oTag || currentContext === types.j_expr) {
            context.pop();
          }
        }

        if ((_jsx = jsx2) != null && _jsx.error || this.match(47)) {
          var _jsx2, _jsx3;

          state = state || this.state.clone();
          let typeParameters;
          const arrow = this.tryParse(abort => {
            var _arrowExpression$extr;

            typeParameters = this.flowParseTypeParameterDeclaration();
            const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
              const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
              this.resetStartLocationFromNode(result, typeParameters);
              return result;
            });
            if ((_arrowExpression$extr = arrowExpression2.extra) != null && _arrowExpression$extr.parenthesized) abort();
            const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
            if (expr.type !== "ArrowFunctionExpression") abort();
            expr.typeParameters = typeParameters;
            this.resetStartLocationFromNode(expr, typeParameters);
            return arrowExpression2;
          }, state);
          let arrowExpression = null;

          if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
            if (!arrow.error && !arrow.aborted) {
              if (arrow.node.async) {
                this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {
                  at: typeParameters
                });
              }

              return arrow.node;
            }

            arrowExpression = arrow.node;
          }

          if ((_jsx2 = jsx2) != null && _jsx2.node) {
            this.state = jsx2.failState;
            return jsx2.node;
          }

          if (arrowExpression) {
            this.state = arrow.failState;
            return arrowExpression;
          }

          if ((_jsx3 = jsx2) != null && _jsx3.thrown) throw jsx2.error;
          if (arrow.thrown) throw arrow.error;
          throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {
            at: typeParameters
          });
        }

        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
      }

      parseArrow(node) {
        if (this.match(14)) {
          const result = this.tryParse(() => {
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            this.state.noAnonFunctionType = true;
            const typeNode = this.startNode();
            [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
            if (this.canInsertSemicolon()) this.unexpected();
            if (!this.match(19)) this.unexpected();
            return typeNode;
          });
          if (result.thrown) return null;
          if (result.error) this.state = result.failState;
          node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
        }

        return super.parseArrow(node);
      }

      shouldParseArrow(params) {
        return this.match(14) || super.shouldParseArrow(params);
      }

      setArrowFunctionParameters(node, params) {
        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
          node.params = params;
        } else {
          super.setArrowFunctionParameters(node, params);
        }
      }

      checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
        if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
          return;
        }

        for (let i = 0; i < node.params.length; i++) {
          if (this.isThisParam(node.params[i]) && i > 0) {
            this.raise(FlowErrors.ThisParamMustBeFirst, {
              at: node.params[i]
            });
          }
        }

        return super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
      }

      parseParenAndDistinguishExpression(canBeArrow) {
        return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
      }

      parseSubscripts(base, startLoc, noCalls) {
        if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.indexOf(startLoc.index) !== -1) {
          this.next();
          const node = this.startNodeAt(startLoc);
          node.callee = base;
          node.arguments = super.parseCallExpressionArguments(11, false);
          base = this.finishNode(node, "CallExpression");
        } else if (base.type === "Identifier" && base.name === "async" && this.match(47)) {
          const state = this.state.clone();
          const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
          if (!arrow.error && !arrow.aborted) return arrow.node;
          const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
          if (result.node && !result.error) return result.node;

          if (arrow.node) {
            this.state = arrow.failState;
            return arrow.node;
          }

          if (result.node) {
            this.state = result.failState;
            return result.node;
          }

          throw arrow.error || result.error;
        }

        return super.parseSubscripts(base, startLoc, noCalls);
      }

      parseSubscript(base, startLoc, noCalls, subscriptState) {
        if (this.match(18) && this.isLookaheadToken_lt()) {
          subscriptState.optionalChainMember = true;

          if (noCalls) {
            subscriptState.stop = true;
            return base;
          }

          this.next();
          const node = this.startNodeAt(startLoc);
          node.callee = base;
          node.typeArguments = this.flowParseTypeParameterInstantiation();
          this.expect(10);
          node.arguments = this.parseCallExpressionArguments(11, false);
          node.optional = true;
          return this.finishCallExpression(node, true);
        } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {
          const node = this.startNodeAt(startLoc);
          node.callee = base;
          const result = this.tryParse(() => {
            node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
            this.expect(10);
            node.arguments = super.parseCallExpressionArguments(11, false);

            if (subscriptState.optionalChainMember) {
              node.optional = false;
            }

            return this.finishCallExpression(node, subscriptState.optionalChainMember);
          });

          if (result.node) {
            if (result.error) this.state = result.failState;
            return result.node;
          }
        }

        return super.parseSubscript(base, startLoc, noCalls, subscriptState);
      }

      parseNewCallee(node) {
        super.parseNewCallee(node);
        let targs = null;

        if (this.shouldParseTypes() && this.match(47)) {
          targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
        }

        node.typeArguments = targs;
      }

      parseAsyncArrowWithTypeParameters(startLoc) {
        const node = this.startNodeAt(startLoc);
        this.parseFunctionParams(node);
        if (!this.parseArrow(node)) return;
        return super.parseArrowExpression(node, void 0, true);
      }

      readToken_mult_modulo(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);

        if (code === 42 && next === 47 && this.state.hasFlowComment) {
          this.state.hasFlowComment = false;
          this.state.pos += 2;
          this.nextToken();
          return;
        }

        super.readToken_mult_modulo(code);
      }

      readToken_pipe_amp(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);

        if (code === 124 && next === 125) {
          this.finishOp(9, 2);
          return;
        }

        super.readToken_pipe_amp(code);
      }

      parseTopLevel(file, program) {
        const fileNode = super.parseTopLevel(file, program);

        if (this.state.hasFlowComment) {
          this.raise(FlowErrors.UnterminatedFlowComment, {
            at: this.state.curPosition()
          });
        }

        return fileNode;
      }

      skipBlockComment() {
        if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
          if (this.state.hasFlowComment) {
            throw this.raise(FlowErrors.NestedFlowComment, {
              at: this.state.startLoc
            });
          }

          this.hasFlowCommentCompletion();
          const commentSkip = this.skipFlowComment();

          if (commentSkip) {
            this.state.pos += commentSkip;
            this.state.hasFlowComment = true;
          }

          return;
        }

        return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
      }

      skipFlowComment() {
        const {
          pos
        } = this.state;
        let shiftToFirstNonWhiteSpace = 2;

        while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
          shiftToFirstNonWhiteSpace++;
        }

        const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
        const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);

        if (ch2 === 58 && ch3 === 58) {
          return shiftToFirstNonWhiteSpace + 2;
        }

        if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
          return shiftToFirstNonWhiteSpace + 12;
        }

        if (ch2 === 58 && ch3 !== 58) {
          return shiftToFirstNonWhiteSpace;
        }

        return false;
      }

      hasFlowCommentCompletion() {
        const end = this.input.indexOf("*/", this.state.pos);

        if (end === -1) {
          throw this.raise(Errors.UnterminatedComment, {
            at: this.state.curPosition()
          });
        }
      }

      flowEnumErrorBooleanMemberNotInitialized(loc, {
        enumName,
        memberName
      }) {
        this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {
          at: loc,
          memberName,
          enumName
        });
      }

      flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
        return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({
          at: loc
        }, enumContext));
      }

      flowEnumErrorNumberMemberNotInitialized(loc, {
        enumName,
        memberName
      }) {
        this.raise(FlowErrors.EnumNumberMemberNotInitialized, {
          at: loc,
          enumName,
          memberName
        });
      }

      flowEnumErrorStringMemberInconsistentlyInitailized(node, {
        enumName
      }) {
        this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {
          at: node,
          enumName
        });
      }

      flowEnumMemberInit() {
        const startLoc = this.state.startLoc;

        const endOfInit = () => this.match(12) || this.match(8);

        switch (this.state.type) {
          case 132:
            {
              const literal = this.parseNumericLiteral(this.state.value);

              if (endOfInit()) {
                return {
                  type: "number",
                  loc: literal.loc.start,
                  value: literal
                };
              }

              return {
                type: "invalid",
                loc: startLoc
              };
            }

          case 131:
            {
              const literal = this.parseStringLiteral(this.state.value);

              if (endOfInit()) {
                return {
                  type: "string",
                  loc: literal.loc.start,
                  value: literal
                };
              }

              return {
                type: "invalid",
                loc: startLoc
              };
            }

          case 85:
          case 86:
            {
              const literal = this.parseBooleanLiteral(this.match(85));

              if (endOfInit()) {
                return {
                  type: "boolean",
                  loc: literal.loc.start,
                  value: literal
                };
              }

              return {
                type: "invalid",
                loc: startLoc
              };
            }

          default:
            return {
              type: "invalid",
              loc: startLoc
            };
        }
      }

      flowEnumMemberRaw() {
        const loc = this.state.startLoc;
        const id = this.parseIdentifier(true);
        const init = this.eat(29) ? this.flowEnumMemberInit() : {
          type: "none",
          loc
        };
        return {
          id,
          init
        };
      }

      flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
        const {
          explicitType
        } = context;

        if (explicitType === null) {
          return;
        }

        if (explicitType !== expectedType) {
          this.flowEnumErrorInvalidMemberInitializer(loc, context);
        }
      }

      flowEnumMembers({
        enumName,
        explicitType
      }) {
        const seenNames = new Set();
        const members = {
          booleanMembers: [],
          numberMembers: [],
          stringMembers: [],
          defaultedMembers: []
        };
        let hasUnknownMembers = false;

        while (!this.match(8)) {
          if (this.eat(21)) {
            hasUnknownMembers = true;
            break;
          }

          const memberNode = this.startNode();
          const {
            id,
            init
          } = this.flowEnumMemberRaw();
          const memberName = id.name;

          if (memberName === "") {
            continue;
          }

          if (/^[a-z]/.test(memberName)) {
            this.raise(FlowErrors.EnumInvalidMemberName, {
              at: id,
              memberName,
              suggestion: memberName[0].toUpperCase() + memberName.slice(1),
              enumName
            });
          }

          if (seenNames.has(memberName)) {
            this.raise(FlowErrors.EnumDuplicateMemberName, {
              at: id,
              memberName,
              enumName
            });
          }

          seenNames.add(memberName);
          const context = {
            enumName,
            explicitType,
            memberName
          };
          memberNode.id = id;

          switch (init.type) {
            case "boolean":
              {
                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean");
                memberNode.init = init.value;
                members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
                break;
              }

            case "number":
              {
                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number");
                memberNode.init = init.value;
                members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
                break;
              }

            case "string":
              {
                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string");
                memberNode.init = init.value;
                members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
                break;
              }

            case "invalid":
              {
                throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
              }

            case "none":
              {
                switch (explicitType) {
                  case "boolean":
                    this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                    break;

                  case "number":
                    this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                    break;

                  default:
                    members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
                }
              }
          }

          if (!this.match(8)) {
            this.expect(12);
          }
        }

        return {
          members,
          hasUnknownMembers
        };
      }

      flowEnumStringMembers(initializedMembers, defaultedMembers, {
        enumName
      }) {
        if (initializedMembers.length === 0) {
          return defaultedMembers;
        } else if (defaultedMembers.length === 0) {
          return initializedMembers;
        } else if (defaultedMembers.length > initializedMembers.length) {
          for (const member of initializedMembers) {
            this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {
              enumName
            });
          }

          return defaultedMembers;
        } else {
          for (const member of defaultedMembers) {
            this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {
              enumName
            });
          }

          return initializedMembers;
        }
      }

      flowEnumParseExplicitType({
        enumName
      }) {
        if (!this.eatContextual(101)) return null;

        if (!tokenIsIdentifier(this.state.type)) {
          throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {
            at: this.state.startLoc,
            enumName
          });
        }

        const {
          value
        } = this.state;
        this.next();

        if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {
          this.raise(FlowErrors.EnumInvalidExplicitType, {
            at: this.state.startLoc,
            enumName,
            invalidEnumType: value
          });
        }

        return value;
      }

      flowEnumBody(node, id) {
        const enumName = id.name;
        const nameLoc = id.loc.start;
        const explicitType = this.flowEnumParseExplicitType({
          enumName
        });
        this.expect(5);
        const {
          members,
          hasUnknownMembers
        } = this.flowEnumMembers({
          enumName,
          explicitType
        });
        node.hasUnknownMembers = hasUnknownMembers;

        switch (explicitType) {
          case "boolean":
            node.explicitType = true;
            node.members = members.booleanMembers;
            this.expect(8);
            return this.finishNode(node, "EnumBooleanBody");

          case "number":
            node.explicitType = true;
            node.members = members.numberMembers;
            this.expect(8);
            return this.finishNode(node, "EnumNumberBody");

          case "string":
            node.explicitType = true;
            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
              enumName
            });
            this.expect(8);
            return this.finishNode(node, "EnumStringBody");

          case "symbol":
            node.members = members.defaultedMembers;
            this.expect(8);
            return this.finishNode(node, "EnumSymbolBody");

          default:
            {
              const empty = () => {
                node.members = [];
                this.expect(8);
                return this.finishNode(node, "EnumStringBody");
              };

              node.explicitType = false;
              const boolsLen = members.booleanMembers.length;
              const numsLen = members.numberMembers.length;
              const strsLen = members.stringMembers.length;
              const defaultedLen = members.defaultedMembers.length;

              if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
                return empty();
              } else if (!boolsLen && !numsLen) {
                node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                  enumName
                });
                this.expect(8);
                return this.finishNode(node, "EnumStringBody");
              } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                for (const member of members.defaultedMembers) {
                  this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
                    enumName,
                    memberName: member.id.name
                  });
                }

                node.members = members.booleanMembers;
                this.expect(8);
                return this.finishNode(node, "EnumBooleanBody");
              } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                for (const member of members.defaultedMembers) {
                  this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
                    enumName,
                    memberName: member.id.name
                  });
                }

                node.members = members.numberMembers;
                this.expect(8);
                return this.finishNode(node, "EnumNumberBody");
              } else {
                this.raise(FlowErrors.EnumInconsistentMemberValues, {
                  at: nameLoc,
                  enumName
                });
                return empty();
              }
            }
        }
      }

      flowParseEnumDeclaration(node) {
        const id = this.parseIdentifier();
        node.id = id;
        node.body = this.flowEnumBody(this.startNode(), id);
        return this.finishNode(node, "EnumDeclaration");
      }

      isLookaheadToken_lt() {
        const next = this.nextTokenStart();

        if (this.input.charCodeAt(next) === 60) {
          const afterNext = this.input.charCodeAt(next + 1);
          return afterNext !== 60 && afterNext !== 61;
        }

        return false;
      }

      maybeUnwrapTypeCastExpression(node) {
        return node.type === "TypeCastExpression" ? node.expression : node;
      }

    };

    var entities = {
      __proto__: null,
      quot: '"',
      amp: "&",
      apos: "'",
      lt: "<",
      gt: ">",
      nbsp: "\xA0",
      iexcl: "\xA1",
      cent: "\xA2",
      pound: "\xA3",
      curren: "\xA4",
      yen: "\xA5",
      brvbar: "\xA6",
      sect: "\xA7",
      uml: "\xA8",
      copy: "\xA9",
      ordf: "\xAA",
      laquo: "\xAB",
      not: "\xAC",
      shy: "\xAD",
      reg: "\xAE",
      macr: "\xAF",
      deg: "\xB0",
      plusmn: "\xB1",
      sup2: "\xB2",
      sup3: "\xB3",
      acute: "\xB4",
      micro: "\xB5",
      para: "\xB6",
      middot: "\xB7",
      cedil: "\xB8",
      sup1: "\xB9",
      ordm: "\xBA",
      raquo: "\xBB",
      frac14: "\xBC",
      frac12: "\xBD",
      frac34: "\xBE",
      iquest: "\xBF",
      Agrave: "\xC0",
      Aacute: "\xC1",
      Acirc: "\xC2",
      Atilde: "\xC3",
      Auml: "\xC4",
      Aring: "\xC5",
      AElig: "\xC6",
      Ccedil: "\xC7",
      Egrave: "\xC8",
      Eacute: "\xC9",
      Ecirc: "\xCA",
      Euml: "\xCB",
      Igrave: "\xCC",
      Iacute: "\xCD",
      Icirc: "\xCE",
      Iuml: "\xCF",
      ETH: "\xD0",
      Ntilde: "\xD1",
      Ograve: "\xD2",
      Oacute: "\xD3",
      Ocirc: "\xD4",
      Otilde: "\xD5",
      Ouml: "\xD6",
      times: "\xD7",
      Oslash: "\xD8",
      Ugrave: "\xD9",
      Uacute: "\xDA",
      Ucirc: "\xDB",
      Uuml: "\xDC",
      Yacute: "\xDD",
      THORN: "\xDE",
      szlig: "\xDF",
      agrave: "\xE0",
      aacute: "\xE1",
      acirc: "\xE2",
      atilde: "\xE3",
      auml: "\xE4",
      aring: "\xE5",
      aelig: "\xE6",
      ccedil: "\xE7",
      egrave: "\xE8",
      eacute: "\xE9",
      ecirc: "\xEA",
      euml: "\xEB",
      igrave: "\xEC",
      iacute: "\xED",
      icirc: "\xEE",
      iuml: "\xEF",
      eth: "\xF0",
      ntilde: "\xF1",
      ograve: "\xF2",
      oacute: "\xF3",
      ocirc: "\xF4",
      otilde: "\xF5",
      ouml: "\xF6",
      divide: "\xF7",
      oslash: "\xF8",
      ugrave: "\xF9",
      uacute: "\xFA",
      ucirc: "\xFB",
      uuml: "\xFC",
      yacute: "\xFD",
      thorn: "\xFE",
      yuml: "\xFF",
      OElig: "\u0152",
      oelig: "\u0153",
      Scaron: "\u0160",
      scaron: "\u0161",
      Yuml: "\u0178",
      fnof: "\u0192",
      circ: "\u02C6",
      tilde: "\u02DC",
      Alpha: "\u0391",
      Beta: "\u0392",
      Gamma: "\u0393",
      Delta: "\u0394",
      Epsilon: "\u0395",
      Zeta: "\u0396",
      Eta: "\u0397",
      Theta: "\u0398",
      Iota: "\u0399",
      Kappa: "\u039A",
      Lambda: "\u039B",
      Mu: "\u039C",
      Nu: "\u039D",
      Xi: "\u039E",
      Omicron: "\u039F",
      Pi: "\u03A0",
      Rho: "\u03A1",
      Sigma: "\u03A3",
      Tau: "\u03A4",
      Upsilon: "\u03A5",
      Phi: "\u03A6",
      Chi: "\u03A7",
      Psi: "\u03A8",
      Omega: "\u03A9",
      alpha: "\u03B1",
      beta: "\u03B2",
      gamma: "\u03B3",
      delta: "\u03B4",
      epsilon: "\u03B5",
      zeta: "\u03B6",
      eta: "\u03B7",
      theta: "\u03B8",
      iota: "\u03B9",
      kappa: "\u03BA",
      lambda: "\u03BB",
      mu: "\u03BC",
      nu: "\u03BD",
      xi: "\u03BE",
      omicron: "\u03BF",
      pi: "\u03C0",
      rho: "\u03C1",
      sigmaf: "\u03C2",
      sigma: "\u03C3",
      tau: "\u03C4",
      upsilon: "\u03C5",
      phi: "\u03C6",
      chi: "\u03C7",
      psi: "\u03C8",
      omega: "\u03C9",
      thetasym: "\u03D1",
      upsih: "\u03D2",
      piv: "\u03D6",
      ensp: "\u2002",
      emsp: "\u2003",
      thinsp: "\u2009",
      zwnj: "\u200C",
      zwj: "\u200D",
      lrm: "\u200E",
      rlm: "\u200F",
      ndash: "\u2013",
      mdash: "\u2014",
      lsquo: "\u2018",
      rsquo: "\u2019",
      sbquo: "\u201A",
      ldquo: "\u201C",
      rdquo: "\u201D",
      bdquo: "\u201E",
      dagger: "\u2020",
      Dagger: "\u2021",
      bull: "\u2022",
      hellip: "\u2026",
      permil: "\u2030",
      prime: "\u2032",
      Prime: "\u2033",
      lsaquo: "\u2039",
      rsaquo: "\u203A",
      oline: "\u203E",
      frasl: "\u2044",
      euro: "\u20AC",
      image: "\u2111",
      weierp: "\u2118",
      real: "\u211C",
      trade: "\u2122",
      alefsym: "\u2135",
      larr: "\u2190",
      uarr: "\u2191",
      rarr: "\u2192",
      darr: "\u2193",
      harr: "\u2194",
      crarr: "\u21B5",
      lArr: "\u21D0",
      uArr: "\u21D1",
      rArr: "\u21D2",
      dArr: "\u21D3",
      hArr: "\u21D4",
      forall: "\u2200",
      part: "\u2202",
      exist: "\u2203",
      empty: "\u2205",
      nabla: "\u2207",
      isin: "\u2208",
      notin: "\u2209",
      ni: "\u220B",
      prod: "\u220F",
      sum: "\u2211",
      minus: "\u2212",
      lowast: "\u2217",
      radic: "\u221A",
      prop: "\u221D",
      infin: "\u221E",
      ang: "\u2220",
      and: "\u2227",
      or: "\u2228",
      cap: "\u2229",
      cup: "\u222A",
      int: "\u222B",
      there4: "\u2234",
      sim: "\u223C",
      cong: "\u2245",
      asymp: "\u2248",
      ne: "\u2260",
      equiv: "\u2261",
      le: "\u2264",
      ge: "\u2265",
      sub: "\u2282",
      sup: "\u2283",
      nsub: "\u2284",
      sube: "\u2286",
      supe: "\u2287",
      oplus: "\u2295",
      otimes: "\u2297",
      perp: "\u22A5",
      sdot: "\u22C5",
      lceil: "\u2308",
      rceil: "\u2309",
      lfloor: "\u230A",
      rfloor: "\u230B",
      lang: "\u2329",
      rang: "\u232A",
      loz: "\u25CA",
      spades: "\u2660",
      clubs: "\u2663",
      hearts: "\u2665",
      diams: "\u2666"
    };
    var JsxErrors = ParseErrorEnum`jsx`({
      AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
      MissingClosingTagElement: ({
        openingTagName
      }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,
      MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
      UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
      UnexpectedToken: ({
        unexpected,
        HTMLEntity
      }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`,
      UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
      UnterminatedJsxContent: "Unterminated JSX contents.",
      UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
    });

    function isFragment(object) {
      return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
    }

    function getQualifiedJSXName(object) {
      if (object.type === "JSXIdentifier") {
        return object.name;
      }

      if (object.type === "JSXNamespacedName") {
        return object.namespace.name + ":" + object.name.name;
      }

      if (object.type === "JSXMemberExpression") {
        return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
      }

      throw new Error("Node had unexpected type: " + object.type);
    }

    var jsx = superClass => class JSXParserMixin extends superClass {
      jsxReadToken() {
        let out = "";
        let chunkStart = this.state.pos;

        for (;;) {
          if (this.state.pos >= this.length) {
            throw this.raise(JsxErrors.UnterminatedJsxContent, {
              at: this.state.startLoc
            });
          }

          const ch = this.input.charCodeAt(this.state.pos);

          switch (ch) {
            case 60:
            case 123:
              if (this.state.pos === this.state.start) {
                if (ch === 60 && this.state.canStartJSXElement) {
                  ++this.state.pos;
                  return this.finishToken(140);
                }

                return super.getTokenFromCode(ch);
              }

              out += this.input.slice(chunkStart, this.state.pos);
              return this.finishToken(139, out);

            case 38:
              out += this.input.slice(chunkStart, this.state.pos);
              out += this.jsxReadEntity();
              chunkStart = this.state.pos;
              break;

            case 62:
            case 125:
            default:
              if (isNewLine(ch)) {
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.jsxReadNewLine(true);
                chunkStart = this.state.pos;
              } else {
                ++this.state.pos;
              }

          }
        }
      }

      jsxReadNewLine(normalizeCRLF) {
        const ch = this.input.charCodeAt(this.state.pos);
        let out;
        ++this.state.pos;

        if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
          ++this.state.pos;
          out = normalizeCRLF ? "\n" : "\r\n";
        } else {
          out = String.fromCharCode(ch);
        }

        ++this.state.curLine;
        this.state.lineStart = this.state.pos;
        return out;
      }

      jsxReadString(quote) {
        let out = "";
        let chunkStart = ++this.state.pos;

        for (;;) {
          if (this.state.pos >= this.length) {
            throw this.raise(Errors.UnterminatedString, {
              at: this.state.startLoc
            });
          }

          const ch = this.input.charCodeAt(this.state.pos);
          if (ch === quote) break;

          if (ch === 38) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadEntity();
            chunkStart = this.state.pos;
          } else if (isNewLine(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadNewLine(false);
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }
        }

        out += this.input.slice(chunkStart, this.state.pos++);
        return this.finishToken(131, out);
      }

      jsxReadEntity() {
        const startPos = ++this.state.pos;

        if (this.codePointAtPos(this.state.pos) === 35) {
          ++this.state.pos;
          let radix = 10;

          if (this.codePointAtPos(this.state.pos) === 120) {
            radix = 16;
            ++this.state.pos;
          }

          const codePoint = this.readInt(radix, void 0, false, "bail");

          if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {
            ++this.state.pos;
            return String.fromCodePoint(codePoint);
          }
        } else {
          let count = 0;
          let semi = false;

          while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {
            ++this.state.pos;
          }

          if (semi) {
            const desc = this.input.slice(startPos, this.state.pos);
            const entity = entities[desc];
            ++this.state.pos;

            if (entity) {
              return entity;
            }
          }
        }

        this.state.pos = startPos;
        return "&";
      }

      jsxReadWord() {
        let ch;
        const start = this.state.pos;

        do {
          ch = this.input.charCodeAt(++this.state.pos);
        } while (isIdentifierChar(ch) || ch === 45);

        return this.finishToken(138, this.input.slice(start, this.state.pos));
      }

      jsxParseIdentifier() {
        const node = this.startNode();

        if (this.match(138)) {
          node.name = this.state.value;
        } else if (tokenIsKeyword(this.state.type)) {
          node.name = tokenLabelName(this.state.type);
        } else {
          this.unexpected();
        }

        this.next();
        return this.finishNode(node, "JSXIdentifier");
      }

      jsxParseNamespacedName() {
        const startLoc = this.state.startLoc;
        const name = this.jsxParseIdentifier();
        if (!this.eat(14)) return name;
        const node = this.startNodeAt(startLoc);
        node.namespace = name;
        node.name = this.jsxParseIdentifier();
        return this.finishNode(node, "JSXNamespacedName");
      }

      jsxParseElementName() {
        const startLoc = this.state.startLoc;
        let node = this.jsxParseNamespacedName();

        if (node.type === "JSXNamespacedName") {
          return node;
        }

        while (this.eat(16)) {
          const newNode = this.startNodeAt(startLoc);
          newNode.object = node;
          newNode.property = this.jsxParseIdentifier();
          node = this.finishNode(newNode, "JSXMemberExpression");
        }

        return node;
      }

      jsxParseAttributeValue() {
        let node;

        switch (this.state.type) {
          case 5:
            node = this.startNode();
            this.setContext(types.brace);
            this.next();
            node = this.jsxParseExpressionContainer(node, types.j_oTag);

            if (node.expression.type === "JSXEmptyExpression") {
              this.raise(JsxErrors.AttributeIsEmpty, {
                at: node
              });
            }

            return node;

          case 140:
          case 131:
            return this.parseExprAtom();

          default:
            throw this.raise(JsxErrors.UnsupportedJsxValue, {
              at: this.state.startLoc
            });
        }
      }

      jsxParseEmptyExpression() {
        const node = this.startNodeAt(this.state.lastTokEndLoc);
        return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
      }

      jsxParseSpreadChild(node) {
        this.next();
        node.expression = this.parseExpression();
        this.setContext(types.j_expr);
        this.state.canStartJSXElement = true;
        this.expect(8);
        return this.finishNode(node, "JSXSpreadChild");
      }

      jsxParseExpressionContainer(node, previousContext) {
        if (this.match(8)) {
          node.expression = this.jsxParseEmptyExpression();
        } else {
          const expression = this.parseExpression();
          node.expression = expression;
        }

        this.setContext(previousContext);
        this.state.canStartJSXElement = true;
        this.expect(8);
        return this.finishNode(node, "JSXExpressionContainer");
      }

      jsxParseAttribute() {
        const node = this.startNode();

        if (this.match(5)) {
          this.setContext(types.brace);
          this.next();
          this.expect(21);
          node.argument = this.parseMaybeAssignAllowIn();
          this.setContext(types.j_oTag);
          this.state.canStartJSXElement = true;
          this.expect(8);
          return this.finishNode(node, "JSXSpreadAttribute");
        }

        node.name = this.jsxParseNamespacedName();
        node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
        return this.finishNode(node, "JSXAttribute");
      }

      jsxParseOpeningElementAt(startLoc) {
        const node = this.startNodeAt(startLoc);

        if (this.eat(141)) {
          return this.finishNode(node, "JSXOpeningFragment");
        }

        node.name = this.jsxParseElementName();
        return this.jsxParseOpeningElementAfterName(node);
      }

      jsxParseOpeningElementAfterName(node) {
        const attributes = [];

        while (!this.match(56) && !this.match(141)) {
          attributes.push(this.jsxParseAttribute());
        }

        node.attributes = attributes;
        node.selfClosing = this.eat(56);
        this.expect(141);
        return this.finishNode(node, "JSXOpeningElement");
      }

      jsxParseClosingElementAt(startLoc) {
        const node = this.startNodeAt(startLoc);

        if (this.eat(141)) {
          return this.finishNode(node, "JSXClosingFragment");
        }

        node.name = this.jsxParseElementName();
        this.expect(141);
        return this.finishNode(node, "JSXClosingElement");
      }

      jsxParseElementAt(startLoc) {
        const node = this.startNodeAt(startLoc);
        const children = [];
        const openingElement = this.jsxParseOpeningElementAt(startLoc);
        let closingElement = null;

        if (!openingElement.selfClosing) {
          contents: for (;;) {
            switch (this.state.type) {
              case 140:
                startLoc = this.state.startLoc;
                this.next();

                if (this.eat(56)) {
                  closingElement = this.jsxParseClosingElementAt(startLoc);
                  break contents;
                }

                children.push(this.jsxParseElementAt(startLoc));
                break;

              case 139:
                children.push(this.parseExprAtom());
                break;

              case 5:
                {
                  const node2 = this.startNode();
                  this.setContext(types.brace);
                  this.next();

                  if (this.match(21)) {
                    children.push(this.jsxParseSpreadChild(node2));
                  } else {
                    children.push(this.jsxParseExpressionContainer(node2, types.j_expr));
                  }

                  break;
                }

              default:
                throw this.unexpected();
            }
          }

          if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {
            this.raise(JsxErrors.MissingClosingTagFragment, {
              at: closingElement
            });
          } else if (!isFragment(openingElement) && isFragment(closingElement)) {
            this.raise(JsxErrors.MissingClosingTagElement, {
              at: closingElement,
              openingTagName: getQualifiedJSXName(openingElement.name)
            });
          } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
              this.raise(JsxErrors.MissingClosingTagElement, {
                at: closingElement,
                openingTagName: getQualifiedJSXName(openingElement.name)
              });
            }
          }
        }

        if (isFragment(openingElement)) {
          node.openingFragment = openingElement;
          node.closingFragment = closingElement;
        } else {
          node.openingElement = openingElement;
          node.closingElement = closingElement;
        }

        node.children = children;

        if (this.match(47)) {
          throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {
            at: this.state.startLoc
          });
        }

        return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
      }

      jsxParseElement() {
        const startLoc = this.state.startLoc;
        this.next();
        return this.jsxParseElementAt(startLoc);
      }

      setContext(newContext) {
        const {
          context
        } = this.state;
        context[context.length - 1] = newContext;
      }

      parseExprAtom(refExpressionErrors) {
        if (this.match(139)) {
          return this.parseLiteral(this.state.value, "JSXText");
        } else if (this.match(140)) {
          return this.jsxParseElement();
        } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {
          this.replaceToken(140);
          return this.jsxParseElement();
        } else {
          return super.parseExprAtom(refExpressionErrors);
        }
      }

      skipSpace() {
        const curContext = this.curContext();
        if (!curContext.preserveSpace) super.skipSpace();
      }

      getTokenFromCode(code) {
        const context = this.curContext();

        if (context === types.j_expr) {
          return this.jsxReadToken();
        }

        if (context === types.j_oTag || context === types.j_cTag) {
          if (isIdentifierStart(code)) {
            return this.jsxReadWord();
          }

          if (code === 62) {
            ++this.state.pos;
            return this.finishToken(141);
          }

          if ((code === 34 || code === 39) && context === types.j_oTag) {
            return this.jsxReadString(code);
          }
        }

        if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
          ++this.state.pos;
          return this.finishToken(140);
        }

        return super.getTokenFromCode(code);
      }

      updateContext(prevType) {
        const {
          context,
          type
        } = this.state;

        if (type === 56 && prevType === 140) {
          context.splice(-2, 2, types.j_cTag);
          this.state.canStartJSXElement = false;
        } else if (type === 140) {
          context.push(types.j_oTag);
        } else if (type === 141) {
          const out = context[context.length - 1];

          if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {
            context.pop();
            this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;
          } else {
            this.setContext(types.j_expr);
            this.state.canStartJSXElement = true;
          }
        } else {
          this.state.canStartJSXElement = tokenComesBeforeExpression(type);
        }
      }

    };

    var TypeScriptScope = class extends Scope {
      constructor(...args) {
        super(...args);
        this.types = new Set();
        this.enums = new Set();
        this.constEnums = new Set();
        this.classes = new Set();
        this.exportOnlyBindings = new Set();
      }

    };
    var TypeScriptScopeHandler = class extends ScopeHandler {
      constructor(...args) {
        super(...args);
        this.importsStack = [];
      }

      createScope(flags) {
        this.importsStack.push(new Set());
        return new TypeScriptScope(flags);
      }

      enter(flags) {
        if (flags == SCOPE_TS_MODULE) {
          this.importsStack.push(new Set());
        }

        super.enter(flags);
      }

      exit() {
        const flags = super.exit();

        if (flags == SCOPE_TS_MODULE) {
          this.importsStack.pop();
        }

        return flags;
      }

      hasImport(name, allowShadow) {
        const len = this.importsStack.length;

        if (this.importsStack[len - 1].has(name)) {
          return true;
        }

        if (!allowShadow && len > 1) {
          for (let i = 0; i < len - 1; i++) {
            if (this.importsStack[i].has(name)) return true;
          }
        }

        return false;
      }

      declareName(name, bindingType, loc) {
        if (bindingType & BIND_FLAGS_TS_IMPORT) {
          if (this.hasImport(name, true)) {
            this.parser.raise(Errors.VarRedeclaration, {
              at: loc,
              identifierName: name
            });
          }

          this.importsStack[this.importsStack.length - 1].add(name);
          return;
        }

        const scope = this.currentScope();

        if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {
          this.maybeExportDefined(scope, name);
          scope.exportOnlyBindings.add(name);
          return;
        }

        super.declareName(name, bindingType, loc);

        if (bindingType & BIND_KIND_TYPE) {
          if (!(bindingType & BIND_KIND_VALUE)) {
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            this.maybeExportDefined(scope, name);
          }

          scope.types.add(name);
        }

        if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);
        if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);
        if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);
      }

      isRedeclaredInScope(scope, name, bindingType) {
        if (scope.enums.has(name)) {
          if (bindingType & BIND_FLAGS_TS_ENUM) {
            const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);
            const wasConst = scope.constEnums.has(name);
            return isConst !== wasConst;
          }

          return true;
        }

        if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {
          if (scope.lexical.has(name)) {
            return !!(bindingType & BIND_KIND_VALUE);
          } else {
            return false;
          }
        }

        if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {
          return true;
        }

        return super.isRedeclaredInScope(scope, name, bindingType);
      }

      checkLocalExport(id) {
        const {
          name
        } = id;
        if (this.hasImport(name)) return;
        const len = this.scopeStack.length;

        for (let i = len - 1; i >= 0; i--) {
          const scope = this.scopeStack[i];
          if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;
        }

        super.checkLocalExport(id);
      }

    };

    var getOwn$1 = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];

    function nonNull(x) {
      if (x == null) {
        throw new Error(`Unexpected ${x} value.`);
      }

      return x;
    }

    function assert(x) {
      if (!x) {
        throw new Error("Assert fail");
      }
    }

    var TSErrors = ParseErrorEnum`typescript`({
      AbstractMethodHasImplementation: ({
        methodName
      }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,
      AbstractPropertyHasInitializer: ({
        propertyName
      }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,
      AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
      AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
      ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
      ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
      ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
      ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
      DeclareAccessor: ({
        kind
      }) => `'declare' is not allowed in ${kind}ters.`,
      DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
      DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
      DuplicateAccessibilityModifier: ({
        modifier
      }) => `Accessibility modifier already seen.`,
      DuplicateModifier: ({
        modifier
      }) => `Duplicate modifier: '${modifier}'.`,
      EmptyHeritageClauseType: ({
        token
      }) => `'${token}' list cannot be empty.`,
      EmptyTypeArguments: "Type argument list cannot be empty.",
      EmptyTypeParameters: "Type parameter list cannot be empty.",
      ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
      ImportAliasHasImportType: "An import alias can not use 'import type'.",
      ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
      IncompatibleModifiers: ({
        modifiers
      }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,
      IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
      IndexSignatureHasAccessibility: ({
        modifier
      }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,
      IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
      IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
      IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
      InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
      InvalidModifierOnTypeMember: ({
        modifier
      }) => `'${modifier}' modifier cannot appear on a type member.`,
      InvalidModifierOnTypeParameter: ({
        modifier
      }) => `'${modifier}' modifier cannot appear on a type parameter.`,
      InvalidModifierOnTypeParameterPositions: ({
        modifier
      }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,
      InvalidModifiersOrder: ({
        orderedModifiers
      }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,
      InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.",
      InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
      MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
      MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.",
      NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
      NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
      OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
      OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
      PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
      PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
      PrivateElementHasAccessibility: ({
        modifier
      }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,
      ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
      ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
      ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
      SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
      SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
      SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
      SingleTypeParameterWithoutTrailingComma: ({
        typeParameterName
      }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,
      StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
      TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
      TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
      TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
      TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
      UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
      UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
      UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
      UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
      UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
      UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
      UnsupportedSignatureParameterKind: ({
        type
      }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`
    });

    function keywordTypeFromName(value) {
      switch (value) {
        case "any":
          return "TSAnyKeyword";

        case "boolean":
          return "TSBooleanKeyword";

        case "bigint":
          return "TSBigIntKeyword";

        case "never":
          return "TSNeverKeyword";

        case "number":
          return "TSNumberKeyword";

        case "object":
          return "TSObjectKeyword";

        case "string":
          return "TSStringKeyword";

        case "symbol":
          return "TSSymbolKeyword";

        case "undefined":
          return "TSUndefinedKeyword";

        case "unknown":
          return "TSUnknownKeyword";

        default:
          return void 0;
      }
    }

    function tsIsAccessModifier(modifier) {
      return modifier === "private" || modifier === "public" || modifier === "protected";
    }

    function tsIsVarianceAnnotations(modifier) {
      return modifier === "in" || modifier === "out";
    }

    var typescript = superClass => class TypeScriptParserMixin extends superClass {
      getScopeHandler() {
        return TypeScriptScopeHandler;
      }

      tsIsIdentifier() {
        return tokenIsIdentifier(this.state.type);
      }

      tsTokenCanFollowModifier() {
        return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(136) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
      }

      tsNextTokenCanFollowModifier() {
        this.next();
        return this.tsTokenCanFollowModifier();
      }

      tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
        if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58) {
          return void 0;
        }

        const modifier = this.state.value;

        if (allowedModifiers.indexOf(modifier) !== -1) {
          if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
            return void 0;
          }

          if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
            return modifier;
          }
        }

        return void 0;
      }

      tsParseModifiers({
        modified,
        allowedModifiers,
        disallowedModifiers,
        stopOnStartOfClassStaticBlock,
        errorTemplate = TSErrors.InvalidModifierOnTypeMember
      }) {
        const enforceOrder = (loc, modifier, before, after) => {
          if (modifier === before && modified[after]) {
            this.raise(TSErrors.InvalidModifiersOrder, {
              at: loc,
              orderedModifiers: [before, after]
            });
          }
        };

        const incompatible = (loc, modifier, mod1, mod2) => {
          if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
            this.raise(TSErrors.IncompatibleModifiers, {
              at: loc,
              modifiers: [mod1, mod2]
            });
          }
        };

        for (;;) {
          const {
            startLoc
          } = this.state;
          const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
          if (!modifier) break;

          if (tsIsAccessModifier(modifier)) {
            if (modified.accessibility) {
              this.raise(TSErrors.DuplicateAccessibilityModifier, {
                at: startLoc,
                modifier
              });
            } else {
              enforceOrder(startLoc, modifier, modifier, "override");
              enforceOrder(startLoc, modifier, modifier, "static");
              enforceOrder(startLoc, modifier, modifier, "readonly");
              modified.accessibility = modifier;
            }
          } else if (tsIsVarianceAnnotations(modifier)) {
            if (modified[modifier]) {
              this.raise(TSErrors.DuplicateModifier, {
                at: startLoc,
                modifier
              });
            }

            modified[modifier] = true;
            enforceOrder(startLoc, modifier, "in", "out");
          } else {
            if (Object.hasOwnProperty.call(modified, modifier)) {
              this.raise(TSErrors.DuplicateModifier, {
                at: startLoc,
                modifier
              });
            } else {
              enforceOrder(startLoc, modifier, "static", "readonly");
              enforceOrder(startLoc, modifier, "static", "override");
              enforceOrder(startLoc, modifier, "override", "readonly");
              enforceOrder(startLoc, modifier, "abstract", "override");
              incompatible(startLoc, modifier, "declare", "override");
              incompatible(startLoc, modifier, "static", "abstract");
            }

            modified[modifier] = true;
          }

          if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
            this.raise(errorTemplate, {
              at: startLoc,
              modifier
            });
          }
        }
      }

      tsIsListTerminator(kind) {
        switch (kind) {
          case "EnumMembers":
          case "TypeMembers":
            return this.match(8);

          case "HeritageClauseElement":
            return this.match(5);

          case "TupleElementTypes":
            return this.match(3);

          case "TypeParametersOrArguments":
            return this.match(48);
        }

        throw new Error("Unreachable");
      }

      tsParseList(kind, parseElement) {
        const result = [];

        while (!this.tsIsListTerminator(kind)) {
          result.push(parseElement());
        }

        return result;
      }

      tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
        return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
      }

      tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
        const result = [];
        let trailingCommaPos = -1;

        for (;;) {
          if (this.tsIsListTerminator(kind)) {
            break;
          }

          trailingCommaPos = -1;
          const element = parseElement();

          if (element == null) {
            return void 0;
          }

          result.push(element);

          if (this.eat(12)) {
            trailingCommaPos = this.state.lastTokStart;
            continue;
          }

          if (this.tsIsListTerminator(kind)) {
            break;
          }

          if (expectSuccess) {
            this.expect(12);
          }

          return void 0;
        }

        if (refTrailingCommaPos) {
          refTrailingCommaPos.value = trailingCommaPos;
        }

        return result;
      }

      tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
        if (!skipFirstToken) {
          if (bracket) {
            this.expect(0);
          } else {
            this.expect(47);
          }
        }

        const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);

        if (bracket) {
          this.expect(3);
        } else {
          this.expect(48);
        }

        return result;
      }

      tsParseImportType() {
        const node = this.startNode();
        this.expect(83);
        this.expect(10);

        if (!this.match(131)) {
          this.raise(TSErrors.UnsupportedImportTypeArgument, {
            at: this.state.startLoc
          });
        }

        node.argument = super.parseExprAtom();
        this.expect(11);

        if (this.eat(16)) {
          node.qualifier = this.tsParseEntityName();
        }

        if (this.match(47)) {
          node.typeParameters = this.tsParseTypeArguments();
        }

        return this.finishNode(node, "TSImportType");
      }

      tsParseEntityName(allowReservedWords = true) {
        let entity = this.parseIdentifier(allowReservedWords);

        while (this.eat(16)) {
          const node = this.startNodeAtNode(entity);
          node.left = entity;
          node.right = this.parseIdentifier(allowReservedWords);
          entity = this.finishNode(node, "TSQualifiedName");
        }

        return entity;
      }

      tsParseTypeReference() {
        const node = this.startNode();
        node.typeName = this.tsParseEntityName();

        if (!this.hasPrecedingLineBreak() && this.match(47)) {
          node.typeParameters = this.tsParseTypeArguments();
        }

        return this.finishNode(node, "TSTypeReference");
      }

      tsParseThisTypePredicate(lhs) {
        this.next();
        const node = this.startNodeAtNode(lhs);
        node.parameterName = lhs;
        node.typeAnnotation = this.tsParseTypeAnnotation(false);
        node.asserts = false;
        return this.finishNode(node, "TSTypePredicate");
      }

      tsParseThisTypeNode() {
        const node = this.startNode();
        this.next();
        return this.finishNode(node, "TSThisType");
      }

      tsParseTypeQuery() {
        const node = this.startNode();
        this.expect(87);

        if (this.match(83)) {
          node.exprName = this.tsParseImportType();
        } else {
          node.exprName = this.tsParseEntityName();
        }

        if (!this.hasPrecedingLineBreak() && this.match(47)) {
          node.typeParameters = this.tsParseTypeArguments();
        }

        return this.finishNode(node, "TSTypeQuery");
      }

      tsParseInOutModifiers(node) {
        this.tsParseModifiers({
          modified: node,
          allowedModifiers: ["in", "out"],
          disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
          errorTemplate: TSErrors.InvalidModifierOnTypeParameter
        });
      }

      tsParseNoneModifiers(node) {
        this.tsParseModifiers({
          modified: node,
          allowedModifiers: [],
          disallowedModifiers: ["in", "out"],
          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
        });
      }

      tsParseTypeParameter(parseModifiers = this.tsParseNoneModifiers.bind(this)) {
        const node = this.startNode();
        parseModifiers(node);
        node.name = this.tsParseTypeParameterName();
        node.constraint = this.tsEatThenParseType(81);
        node.default = this.tsEatThenParseType(29);
        return this.finishNode(node, "TSTypeParameter");
      }

      tsTryParseTypeParameters(parseModifiers) {
        if (this.match(47)) {
          return this.tsParseTypeParameters(parseModifiers);
        }
      }

      tsParseTypeParameters(parseModifiers) {
        const node = this.startNode();

        if (this.match(47) || this.match(140)) {
          this.next();
        } else {
          this.unexpected();
        }

        const refTrailingCommaPos = {
          value: -1
        };
        node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);

        if (node.params.length === 0) {
          this.raise(TSErrors.EmptyTypeParameters, {
            at: node
          });
        }

        if (refTrailingCommaPos.value !== -1) {
          this.addExtra(node, "trailingComma", refTrailingCommaPos.value);
        }

        return this.finishNode(node, "TSTypeParameterDeclaration");
      }

      tsFillSignature(returnToken, signature) {
        const returnTokenRequired = returnToken === 19;
        const paramsKey = "parameters";
        const returnTypeKey = "typeAnnotation";
        signature.typeParameters = this.tsTryParseTypeParameters();
        this.expect(10);
        signature[paramsKey] = this.tsParseBindingListForSignature();

        if (returnTokenRequired) {
          signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
        } else if (this.match(returnToken)) {
          signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
        }
      }

      tsParseBindingListForSignature() {
        return super.parseBindingList(11, 41).map(pattern => {
          if (pattern.type !== "Identifier" && pattern.type !== "RestElement" && pattern.type !== "ObjectPattern" && pattern.type !== "ArrayPattern") {
            this.raise(TSErrors.UnsupportedSignatureParameterKind, {
              at: pattern,
              type: pattern.type
            });
          }

          return pattern;
        });
      }

      tsParseTypeMemberSemicolon() {
        if (!this.eat(12) && !this.isLineTerminator()) {
          this.expect(13);
        }
      }

      tsParseSignatureMember(kind, node) {
        this.tsFillSignature(14, node);
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(node, kind);
      }

      tsIsUnambiguouslyIndexSignature() {
        this.next();

        if (tokenIsIdentifier(this.state.type)) {
          this.next();
          return this.match(14);
        }

        return false;
      }

      tsTryParseIndexSignature(node) {
        if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
          return void 0;
        }

        this.expect(0);
        const id = this.parseIdentifier();
        id.typeAnnotation = this.tsParseTypeAnnotation();
        this.resetEndLocation(id);
        this.expect(3);
        node.parameters = [id];
        const type = this.tsTryParseTypeAnnotation();
        if (type) node.typeAnnotation = type;
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(node, "TSIndexSignature");
      }

      tsParsePropertyOrMethodSignature(node, readonly) {
        if (this.eat(17)) node.optional = true;
        const nodeAny = node;

        if (this.match(10) || this.match(47)) {
          if (readonly) {
            this.raise(TSErrors.ReadonlyForMethodSignature, {
              at: node
            });
          }

          const method = nodeAny;

          if (method.kind && this.match(47)) {
            this.raise(TSErrors.AccesorCannotHaveTypeParameters, {
              at: this.state.curPosition()
            });
          }

          this.tsFillSignature(14, method);
          this.tsParseTypeMemberSemicolon();
          const paramsKey = "parameters";
          const returnTypeKey = "typeAnnotation";

          if (method.kind === "get") {
            if (method[paramsKey].length > 0) {
              this.raise(Errors.BadGetterArity, {
                at: this.state.curPosition()
              });

              if (this.isThisParam(method[paramsKey][0])) {
                this.raise(TSErrors.AccesorCannotDeclareThisParameter, {
                  at: this.state.curPosition()
                });
              }
            }
          } else if (method.kind === "set") {
            if (method[paramsKey].length !== 1) {
              this.raise(Errors.BadSetterArity, {
                at: this.state.curPosition()
              });
            } else {
              const firstParameter = method[paramsKey][0];

              if (this.isThisParam(firstParameter)) {
                this.raise(TSErrors.AccesorCannotDeclareThisParameter, {
                  at: this.state.curPosition()
                });
              }

              if (firstParameter.type === "Identifier" && firstParameter.optional) {
                this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {
                  at: this.state.curPosition()
                });
              }

              if (firstParameter.type === "RestElement") {
                this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {
                  at: this.state.curPosition()
                });
              }
            }

            if (method[returnTypeKey]) {
              this.raise(TSErrors.SetAccesorCannotHaveReturnType, {
                at: method[returnTypeKey]
              });
            }
          } else {
            method.kind = "method";
          }

          return this.finishNode(method, "TSMethodSignature");
        } else {
          const property = nodeAny;
          if (readonly) property.readonly = true;
          const type = this.tsTryParseTypeAnnotation();
          if (type) property.typeAnnotation = type;
          this.tsParseTypeMemberSemicolon();
          return this.finishNode(property, "TSPropertySignature");
        }
      }

      tsParseTypeMember() {
        const node = this.startNode();

        if (this.match(10) || this.match(47)) {
          return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
        }

        if (this.match(77)) {
          const id = this.startNode();
          this.next();

          if (this.match(10) || this.match(47)) {
            return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);
          } else {
            node.key = this.createIdentifier(id, "new");
            return this.tsParsePropertyOrMethodSignature(node, false);
          }
        }

        this.tsParseModifiers({
          modified: node,
          allowedModifiers: ["readonly"],
          disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
        });
        const idx = this.tsTryParseIndexSignature(node);

        if (idx) {
          return idx;
        }

        super.parsePropertyName(node);

        if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {
          node.kind = node.key.name;
          super.parsePropertyName(node);
        }

        return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
      }

      tsParseTypeLiteral() {
        const node = this.startNode();
        node.members = this.tsParseObjectTypeMembers();
        return this.finishNode(node, "TSTypeLiteral");
      }

      tsParseObjectTypeMembers() {
        this.expect(5);
        const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
        this.expect(8);
        return members;
      }

      tsIsStartOfMappedType() {
        this.next();

        if (this.eat(53)) {
          return this.isContextual(120);
        }

        if (this.isContextual(120)) {
          this.next();
        }

        if (!this.match(0)) {
          return false;
        }

        this.next();

        if (!this.tsIsIdentifier()) {
          return false;
        }

        this.next();
        return this.match(58);
      }

      tsParseMappedTypeParameter() {
        const node = this.startNode();
        node.name = this.tsParseTypeParameterName();
        node.constraint = this.tsExpectThenParseType(58);
        return this.finishNode(node, "TSTypeParameter");
      }

      tsParseMappedType() {
        const node = this.startNode();
        this.expect(5);

        if (this.match(53)) {
          node.readonly = this.state.value;
          this.next();
          this.expectContextual(120);
        } else if (this.eatContextual(120)) {
          node.readonly = true;
        }

        this.expect(0);
        node.typeParameter = this.tsParseMappedTypeParameter();
        node.nameType = this.eatContextual(93) ? this.tsParseType() : null;
        this.expect(3);

        if (this.match(53)) {
          node.optional = this.state.value;
          this.next();
          this.expect(17);
        } else if (this.eat(17)) {
          node.optional = true;
        }

        node.typeAnnotation = this.tsTryParseType();
        this.semicolon();
        this.expect(8);
        return this.finishNode(node, "TSMappedType");
      }

      tsParseTupleType() {
        const node = this.startNode();
        node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
        let seenOptionalElement = false;
        let labeledElements = null;
        node.elementTypes.forEach(elementNode => {
          var _labeledElements;

          const {
            type
          } = elementNode;

          if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
            this.raise(TSErrors.OptionalTypeBeforeRequired, {
              at: elementNode
            });
          }

          seenOptionalElement || (seenOptionalElement = type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType");
          let checkType = type;

          if (type === "TSRestType") {
            elementNode = elementNode.typeAnnotation;
            checkType = elementNode.type;
          }

          const isLabeled = checkType === "TSNamedTupleMember";
          (_labeledElements = labeledElements) != null ? _labeledElements : labeledElements = isLabeled;

          if (labeledElements !== isLabeled) {
            this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {
              at: elementNode
            });
          }
        });
        return this.finishNode(node, "TSTupleType");
      }

      tsParseTupleElementType() {
        const {
          startLoc
        } = this.state;
        const rest = this.eat(21);
        let type = this.tsParseType();
        const optional = this.eat(17);
        const labeled = this.eat(14);

        if (labeled) {
          const labeledNode = this.startNodeAtNode(type);
          labeledNode.optional = optional;

          if (type.type === "TSTypeReference" && !type.typeParameters && type.typeName.type === "Identifier") {
            labeledNode.label = type.typeName;
          } else {
            this.raise(TSErrors.InvalidTupleMemberLabel, {
              at: type
            });
            labeledNode.label = type;
          }

          labeledNode.elementType = this.tsParseType();
          type = this.finishNode(labeledNode, "TSNamedTupleMember");
        } else if (optional) {
          const optionalTypeNode = this.startNodeAtNode(type);
          optionalTypeNode.typeAnnotation = type;
          type = this.finishNode(optionalTypeNode, "TSOptionalType");
        }

        if (rest) {
          const restNode = this.startNodeAt(startLoc);
          restNode.typeAnnotation = type;
          type = this.finishNode(restNode, "TSRestType");
        }

        return type;
      }

      tsParseParenthesizedType() {
        const node = this.startNode();
        this.expect(10);
        node.typeAnnotation = this.tsParseType();
        this.expect(11);
        return this.finishNode(node, "TSParenthesizedType");
      }

      tsParseFunctionOrConstructorType(type, abstract) {
        const node = this.startNode();

        if (type === "TSConstructorType") {
          node.abstract = !!abstract;
          if (abstract) this.next();
          this.next();
        }

        this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));
        return this.finishNode(node, type);
      }

      tsParseLiteralTypeNode() {
        const node = this.startNode();

        node.literal = (() => {
          switch (this.state.type) {
            case 132:
            case 133:
            case 131:
            case 85:
            case 86:
              return super.parseExprAtom();

            default:
              throw this.unexpected();
          }
        })();

        return this.finishNode(node, "TSLiteralType");
      }

      tsParseTemplateLiteralType() {
        const node = this.startNode();
        node.literal = super.parseTemplate(false);
        return this.finishNode(node, "TSLiteralType");
      }

      parseTemplateSubstitution() {
        if (this.state.inType) return this.tsParseType();
        return super.parseTemplateSubstitution();
      }

      tsParseThisTypeOrThisTypePredicate() {
        const thisKeyword = this.tsParseThisTypeNode();

        if (this.isContextual(114) && !this.hasPrecedingLineBreak()) {
          return this.tsParseThisTypePredicate(thisKeyword);
        } else {
          return thisKeyword;
        }
      }

      tsParseNonArrayType() {
        switch (this.state.type) {
          case 131:
          case 132:
          case 133:
          case 85:
          case 86:
            return this.tsParseLiteralTypeNode();

          case 53:
            if (this.state.value === "-") {
              const node = this.startNode();
              const nextToken = this.lookahead();

              if (nextToken.type !== 132 && nextToken.type !== 133) {
                throw this.unexpected();
              }

              node.literal = this.parseMaybeUnary();
              return this.finishNode(node, "TSLiteralType");
            }

            break;

          case 78:
            return this.tsParseThisTypeOrThisTypePredicate();

          case 87:
            return this.tsParseTypeQuery();

          case 83:
            return this.tsParseImportType();

          case 5:
            return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();

          case 0:
            return this.tsParseTupleType();

          case 10:
            return this.tsParseParenthesizedType();

          case 25:
          case 24:
            return this.tsParseTemplateLiteralType();

          default:
            {
              const {
                type
              } = this.state;

              if (tokenIsIdentifier(type) || type === 88 || type === 84) {
                const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);

                if (nodeType !== void 0 && this.lookaheadCharCode() !== 46) {
                  const node = this.startNode();
                  this.next();
                  return this.finishNode(node, nodeType);
                }

                return this.tsParseTypeReference();
              }
            }
        }

        throw this.unexpected();
      }

      tsParseArrayTypeOrHigher() {
        let type = this.tsParseNonArrayType();

        while (!this.hasPrecedingLineBreak() && this.eat(0)) {
          if (this.match(3)) {
            const node = this.startNodeAtNode(type);
            node.elementType = type;
            this.expect(3);
            type = this.finishNode(node, "TSArrayType");
          } else {
            const node = this.startNodeAtNode(type);
            node.objectType = type;
            node.indexType = this.tsParseType();
            this.expect(3);
            type = this.finishNode(node, "TSIndexedAccessType");
          }
        }

        return type;
      }

      tsParseTypeOperator() {
        const node = this.startNode();
        const operator = this.state.value;
        this.next();
        node.operator = operator;
        node.typeAnnotation = this.tsParseTypeOperatorOrHigher();

        if (operator === "readonly") {
          this.tsCheckTypeAnnotationForReadOnly(node);
        }

        return this.finishNode(node, "TSTypeOperator");
      }

      tsCheckTypeAnnotationForReadOnly(node) {
        switch (node.typeAnnotation.type) {
          case "TSTupleType":
          case "TSArrayType":
            return;

          default:
            this.raise(TSErrors.UnexpectedReadonly, {
              at: node
            });
        }
      }

      tsParseInferType() {
        const node = this.startNode();
        this.expectContextual(113);
        const typeParameter = this.startNode();
        typeParameter.name = this.tsParseTypeParameterName();
        typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());
        node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
        return this.finishNode(node, "TSInferType");
      }

      tsParseConstraintForInferType() {
        if (this.eat(81)) {
          const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());

          if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {
            return constraint;
          }
        }
      }

      tsParseTypeOperatorOrHigher() {
        const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
        return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(113) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
      }

      tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
        const node = this.startNode();
        const hasLeadingOperator = this.eat(operator);
        const types2 = [];

        do {
          types2.push(parseConstituentType());
        } while (this.eat(operator));

        if (types2.length === 1 && !hasLeadingOperator) {
          return types2[0];
        }

        node.types = types2;
        return this.finishNode(node, kind);
      }

      tsParseIntersectionTypeOrHigher() {
        return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
      }

      tsParseUnionTypeOrHigher() {
        return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
      }

      tsIsStartOfFunctionType() {
        if (this.match(47)) {
          return true;
        }

        return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
      }

      tsSkipParameterStart() {
        if (tokenIsIdentifier(this.state.type) || this.match(78)) {
          this.next();
          return true;
        }

        if (this.match(5)) {
          const {
            errors
          } = this.state;
          const previousErrorCount = errors.length;

          try {
            this.parseObjectLike(8, true);
            return errors.length === previousErrorCount;
          } catch (_unused) {
            return false;
          }
        }

        if (this.match(0)) {
          this.next();
          const {
            errors
          } = this.state;
          const previousErrorCount = errors.length;

          try {
            super.parseBindingList(3, 93, true);
            return errors.length === previousErrorCount;
          } catch (_unused2) {
            return false;
          }
        }

        return false;
      }

      tsIsUnambiguouslyStartOfFunctionType() {
        this.next();

        if (this.match(11) || this.match(21)) {
          return true;
        }

        if (this.tsSkipParameterStart()) {
          if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {
            return true;
          }

          if (this.match(11)) {
            this.next();

            if (this.match(19)) {
              return true;
            }
          }
        }

        return false;
      }

      tsParseTypeOrTypePredicateAnnotation(returnToken) {
        return this.tsInType(() => {
          const t42 = this.startNode();
          this.expect(returnToken);
          const node = this.startNode();
          const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));

          if (asserts && this.match(78)) {
            let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();

            if (thisTypePredicate.type === "TSThisType") {
              node.parameterName = thisTypePredicate;
              node.asserts = true;
              node.typeAnnotation = null;
              thisTypePredicate = this.finishNode(node, "TSTypePredicate");
            } else {
              this.resetStartLocationFromNode(thisTypePredicate, node);
              thisTypePredicate.asserts = true;
            }

            t42.typeAnnotation = thisTypePredicate;
            return this.finishNode(t42, "TSTypeAnnotation");
          }

          const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));

          if (!typePredicateVariable) {
            if (!asserts) {
              return this.tsParseTypeAnnotation(false, t42);
            }

            node.parameterName = this.parseIdentifier();
            node.asserts = asserts;
            node.typeAnnotation = null;
            t42.typeAnnotation = this.finishNode(node, "TSTypePredicate");
            return this.finishNode(t42, "TSTypeAnnotation");
          }

          const type = this.tsParseTypeAnnotation(false);
          node.parameterName = typePredicateVariable;
          node.typeAnnotation = type;
          node.asserts = asserts;
          t42.typeAnnotation = this.finishNode(node, "TSTypePredicate");
          return this.finishNode(t42, "TSTypeAnnotation");
        });
      }

      tsTryParseTypeOrTypePredicateAnnotation() {
        return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : void 0;
      }

      tsTryParseTypeAnnotation() {
        return this.match(14) ? this.tsParseTypeAnnotation() : void 0;
      }

      tsTryParseType() {
        return this.tsEatThenParseType(14);
      }

      tsParseTypePredicatePrefix() {
        const id = this.parseIdentifier();

        if (this.isContextual(114) && !this.hasPrecedingLineBreak()) {
          this.next();
          return id;
        }
      }

      tsParseTypePredicateAsserts() {
        if (this.state.type !== 107) {
          return false;
        }

        const containsEsc = this.state.containsEsc;
        this.next();

        if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {
          return false;
        }

        if (containsEsc) {
          this.raise(Errors.InvalidEscapedReservedWord, {
            at: this.state.lastTokStartLoc,
            reservedWord: "asserts"
          });
        }

        return true;
      }

      tsParseTypeAnnotation(eatColon = true, t42 = this.startNode()) {
        this.tsInType(() => {
          if (eatColon) this.expect(14);
          t42.typeAnnotation = this.tsParseType();
        });
        return this.finishNode(t42, "TSTypeAnnotation");
      }

      tsParseType() {
        assert(this.state.inType);
        const type = this.tsParseNonConditionalType();

        if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {
          return type;
        }

        const node = this.startNodeAtNode(type);
        node.checkType = type;
        node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());
        this.expect(17);
        node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
        this.expect(14);
        node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
        return this.finishNode(node, "TSConditionalType");
      }

      isAbstractConstructorSignature() {
        return this.isContextual(122) && this.lookahead().type === 77;
      }

      tsParseNonConditionalType() {
        if (this.tsIsStartOfFunctionType()) {
          return this.tsParseFunctionOrConstructorType("TSFunctionType");
        }

        if (this.match(77)) {
          return this.tsParseFunctionOrConstructorType("TSConstructorType");
        } else if (this.isAbstractConstructorSignature()) {
          return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
        }

        return this.tsParseUnionTypeOrHigher();
      }

      tsParseTypeAssertion() {
        if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
          this.raise(TSErrors.ReservedTypeAssertion, {
            at: this.state.startLoc
          });
        }

        const node = this.startNode();
        node.typeAnnotation = this.tsInType(() => {
          this.next();
          return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();
        });
        this.expect(48);
        node.expression = this.parseMaybeUnary();
        return this.finishNode(node, "TSTypeAssertion");
      }

      tsParseHeritageClause(token) {
        const originalStartLoc = this.state.startLoc;
        const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
          const node = this.startNode();
          node.expression = this.tsParseEntityName();

          if (this.match(47)) {
            node.typeParameters = this.tsParseTypeArguments();
          }

          return this.finishNode(node, "TSExpressionWithTypeArguments");
        });

        if (!delimitedList.length) {
          this.raise(TSErrors.EmptyHeritageClauseType, {
            at: originalStartLoc,
            token
          });
        }

        return delimitedList;
      }

      tsParseInterfaceDeclaration(node, properties = {}) {
        if (this.hasFollowingLineBreak()) return null;
        this.expectContextual(127);
        if (properties.declare) node.declare = true;

        if (tokenIsIdentifier(this.state.type)) {
          node.id = this.parseIdentifier();
          this.checkIdentifier(node.id, BIND_TS_INTERFACE);
        } else {
          node.id = null;
          this.raise(TSErrors.MissingInterfaceName, {
            at: this.state.startLoc
          });
        }

        node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));

        if (this.eat(81)) {
          node.extends = this.tsParseHeritageClause("extends");
        }

        const body = this.startNode();
        body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
        node.body = this.finishNode(body, "TSInterfaceBody");
        return this.finishNode(node, "TSInterfaceDeclaration");
      }

      tsParseTypeAliasDeclaration(node) {
        node.id = this.parseIdentifier();
        this.checkIdentifier(node.id, BIND_TS_TYPE);
        node.typeAnnotation = this.tsInType(() => {
          node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));
          this.expect(29);

          if (this.isContextual(112) && this.lookahead().type !== 16) {
            const node2 = this.startNode();
            this.next();
            return this.finishNode(node2, "TSIntrinsicKeyword");
          }

          return this.tsParseType();
        });
        this.semicolon();
        return this.finishNode(node, "TSTypeAliasDeclaration");
      }

      tsInNoContext(cb) {
        const oldContext = this.state.context;
        this.state.context = [oldContext[0]];

        try {
          return cb();
        } finally {
          this.state.context = oldContext;
        }
      }

      tsInType(cb) {
        const oldInType = this.state.inType;
        this.state.inType = true;

        try {
          return cb();
        } finally {
          this.state.inType = oldInType;
        }
      }

      tsInDisallowConditionalTypesContext(cb) {
        const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
        this.state.inDisallowConditionalTypesContext = true;

        try {
          return cb();
        } finally {
          this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
        }
      }

      tsInAllowConditionalTypesContext(cb) {
        const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
        this.state.inDisallowConditionalTypesContext = false;

        try {
          return cb();
        } finally {
          this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
        }
      }

      tsEatThenParseType(token) {
        return !this.match(token) ? void 0 : this.tsNextThenParseType();
      }

      tsExpectThenParseType(token) {
        return this.tsDoThenParseType(() => this.expect(token));
      }

      tsNextThenParseType() {
        return this.tsDoThenParseType(() => this.next());
      }

      tsDoThenParseType(cb) {
        return this.tsInType(() => {
          cb();
          return this.tsParseType();
        });
      }

      tsParseEnumMember() {
        const node = this.startNode();
        node.id = this.match(131) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);

        if (this.eat(29)) {
          node.initializer = super.parseMaybeAssignAllowIn();
        }

        return this.finishNode(node, "TSEnumMember");
      }

      tsParseEnumDeclaration(node, properties = {}) {
        if (properties.const) node.const = true;
        if (properties.declare) node.declare = true;
        this.expectContextual(124);
        node.id = this.parseIdentifier();
        this.checkIdentifier(node.id, node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);
        this.expect(5);
        node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
        this.expect(8);
        return this.finishNode(node, "TSEnumDeclaration");
      }

      tsParseModuleBlock() {
        const node = this.startNode();
        this.scope.enter(SCOPE_OTHER);
        this.expect(5);
        super.parseBlockOrModuleBlockBody(node.body = [], void 0, true, 8);
        this.scope.exit();
        return this.finishNode(node, "TSModuleBlock");
      }

      tsParseModuleOrNamespaceDeclaration(node, nested = false) {
        node.id = this.parseIdentifier();

        if (!nested) {
          this.checkIdentifier(node.id, BIND_TS_NAMESPACE);
        }

        if (this.eat(16)) {
          const inner = this.startNode();
          this.tsParseModuleOrNamespaceDeclaration(inner, true);
          node.body = inner;
        } else {
          this.scope.enter(SCOPE_TS_MODULE);
          this.prodParam.enter(PARAM);
          node.body = this.tsParseModuleBlock();
          this.prodParam.exit();
          this.scope.exit();
        }

        return this.finishNode(node, "TSModuleDeclaration");
      }

      tsParseAmbientExternalModuleDeclaration(node) {
        if (this.isContextual(110)) {
          node.global = true;
          node.id = this.parseIdentifier();
        } else if (this.match(131)) {
          node.id = super.parseStringLiteral(this.state.value);
        } else {
          this.unexpected();
        }

        if (this.match(5)) {
          this.scope.enter(SCOPE_TS_MODULE);
          this.prodParam.enter(PARAM);
          node.body = this.tsParseModuleBlock();
          this.prodParam.exit();
          this.scope.exit();
        } else {
          this.semicolon();
        }

        return this.finishNode(node, "TSModuleDeclaration");
      }

      tsParseImportEqualsDeclaration(node, isExport) {
        node.isExport = isExport || false;
        node.id = this.parseIdentifier();
        this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);
        this.expect(29);
        const moduleReference = this.tsParseModuleReference();

        if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
          this.raise(TSErrors.ImportAliasHasImportType, {
            at: moduleReference
          });
        }

        node.moduleReference = moduleReference;
        this.semicolon();
        return this.finishNode(node, "TSImportEqualsDeclaration");
      }

      tsIsExternalModuleReference() {
        return this.isContextual(117) && this.lookaheadCharCode() === 40;
      }

      tsParseModuleReference() {
        return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
      }

      tsParseExternalModuleReference() {
        const node = this.startNode();
        this.expectContextual(117);
        this.expect(10);

        if (!this.match(131)) {
          throw this.unexpected();
        }

        node.expression = super.parseExprAtom();
        this.expect(11);
        return this.finishNode(node, "TSExternalModuleReference");
      }

      tsLookAhead(f) {
        const state = this.state.clone();
        const res = f();
        this.state = state;
        return res;
      }

      tsTryParseAndCatch(f) {
        const result = this.tryParse(abort => f() || abort());
        if (result.aborted || !result.node) return void 0;
        if (result.error) this.state = result.failState;
        return result.node;
      }

      tsTryParse(f) {
        const state = this.state.clone();
        const result = f();

        if (result !== void 0 && result !== false) {
          return result;
        } else {
          this.state = state;
          return void 0;
        }
      }

      tsTryParseDeclare(nany) {
        if (this.isLineTerminator()) {
          return;
        }

        let starttype = this.state.type;
        let kind;

        if (this.isContextual(99)) {
          starttype = 74;
          kind = "let";
        }

        return this.tsInAmbientContext(() => {
          if (starttype === 68) {
            nany.declare = true;
            return super.parseFunctionStatement(nany, false, true);
          }

          if (starttype === 80) {
            nany.declare = true;
            return this.parseClass(nany, true, false);
          }

          if (starttype === 124) {
            return this.tsParseEnumDeclaration(nany, {
              declare: true
            });
          }

          if (starttype === 110) {
            return this.tsParseAmbientExternalModuleDeclaration(nany);
          }

          if (starttype === 75 || starttype === 74) {
            if (!this.match(75) || !this.isLookaheadContextual("enum")) {
              nany.declare = true;
              return this.parseVarStatement(nany, kind || this.state.value, true);
            }

            this.expect(75);
            return this.tsParseEnumDeclaration(nany, {
              const: true,
              declare: true
            });
          }

          if (starttype === 127) {
            const result = this.tsParseInterfaceDeclaration(nany, {
              declare: true
            });
            if (result) return result;
          }

          if (tokenIsIdentifier(starttype)) {
            return this.tsParseDeclaration(nany, this.state.value, true, null);
          }
        });
      }

      tsTryParseExportDeclaration() {
        return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
      }

      tsParseExpressionStatement(node, expr, decorators) {
        switch (expr.name) {
          case "declare":
            {
              const declaration = this.tsTryParseDeclare(node);

              if (declaration) {
                declaration.declare = true;
                return declaration;
              }

              break;
            }

          case "global":
            if (this.match(5)) {
              this.scope.enter(SCOPE_TS_MODULE);
              this.prodParam.enter(PARAM);
              const mod = node;
              mod.global = true;
              mod.id = expr;
              mod.body = this.tsParseModuleBlock();
              this.scope.exit();
              this.prodParam.exit();
              return this.finishNode(mod, "TSModuleDeclaration");
            }

            break;

          default:
            return this.tsParseDeclaration(node, expr.name, false, decorators);
        }
      }

      tsParseDeclaration(node, value, next, decorators) {
        switch (value) {
          case "abstract":
            if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {
              return this.tsParseAbstractDeclaration(node, decorators);
            }

            break;

          case "module":
            if (this.tsCheckLineTerminator(next)) {
              if (this.match(131)) {
                return this.tsParseAmbientExternalModuleDeclaration(node);
              } else if (tokenIsIdentifier(this.state.type)) {
                return this.tsParseModuleOrNamespaceDeclaration(node);
              }
            }

            break;

          case "namespace":
            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
              return this.tsParseModuleOrNamespaceDeclaration(node);
            }

            break;

          case "type":
            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
              return this.tsParseTypeAliasDeclaration(node);
            }

            break;
        }
      }

      tsCheckLineTerminator(next) {
        if (next) {
          if (this.hasFollowingLineBreak()) return false;
          this.next();
          return true;
        }

        return !this.isLineTerminator();
      }

      tsTryParseGenericAsyncArrowFunction(startLoc) {
        if (!this.match(47)) {
          return void 0;
        }

        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = true;
        const res = this.tsTryParseAndCatch(() => {
          const node = this.startNodeAt(startLoc);
          node.typeParameters = this.tsParseTypeParameters();
          super.parseFunctionParams(node);
          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
          this.expect(19);
          return node;
        });
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;

        if (!res) {
          return void 0;
        }

        return super.parseArrowExpression(res, null, true);
      }

      tsParseTypeArgumentsInExpression() {
        if (this.reScan_lt() !== 47) {
          return void 0;
        }

        return this.tsParseTypeArguments();
      }

      tsParseTypeArguments() {
        const node = this.startNode();
        node.params = this.tsInType(() => this.tsInNoContext(() => {
          this.expect(47);
          return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
        }));

        if (node.params.length === 0) {
          this.raise(TSErrors.EmptyTypeArguments, {
            at: node
          });
        }

        this.expect(48);
        return this.finishNode(node, "TSTypeParameterInstantiation");
      }

      tsIsDeclarationStart() {
        return tokenIsTSDeclarationStart(this.state.type);
      }

      isExportDefaultSpecifier() {
        if (this.tsIsDeclarationStart()) return false;
        return super.isExportDefaultSpecifier();
      }

      parseAssignableListItem(allowModifiers, decorators) {
        const startLoc = this.state.startLoc;
        let accessibility;
        let readonly = false;
        let override = false;

        if (allowModifiers !== void 0) {
          const modified = {};
          this.tsParseModifiers({
            modified,
            allowedModifiers: ["public", "private", "protected", "override", "readonly"]
          });
          accessibility = modified.accessibility;
          override = modified.override;
          readonly = modified.readonly;

          if (allowModifiers === false && (accessibility || readonly || override)) {
            this.raise(TSErrors.UnexpectedParameterModifier, {
              at: startLoc
            });
          }
        }

        const left = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(left);
        const elt = this.parseMaybeDefault(left.loc.start, left);

        if (accessibility || readonly || override) {
          const pp = this.startNodeAt(startLoc);

          if (decorators.length) {
            pp.decorators = decorators;
          }

          if (accessibility) pp.accessibility = accessibility;
          if (readonly) pp.readonly = readonly;
          if (override) pp.override = override;

          if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
            this.raise(TSErrors.UnsupportedParameterPropertyKind, {
              at: pp
            });
          }

          pp.parameter = elt;
          return this.finishNode(pp, "TSParameterProperty");
        }

        if (decorators.length) {
          left.decorators = decorators;
        }

        return elt;
      }

      isSimpleParameter(node) {
        return node.type === "TSParameterProperty" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
      }

      parseFunctionBodyAndFinish(node, type, isMethod = false) {
        if (this.match(14)) {
          node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
        }

        const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;

        if (bodilessType && !this.match(5) && this.isLineTerminator()) {
          return this.finishNode(node, bodilessType);
        }

        if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
          this.raise(TSErrors.DeclareFunctionHasImplementation, {
            at: node
          });

          if (node.declare) {
            return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);
          }
        }

        return super.parseFunctionBodyAndFinish(node, type, isMethod);
      }

      registerFunctionStatementId(node) {
        if (!node.body && node.id) {
          this.checkIdentifier(node.id, BIND_TS_AMBIENT);
        } else {
          super.registerFunctionStatementId(node);
        }
      }

      tsCheckForInvalidTypeCasts(items) {
        items.forEach(node => {
          if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") {
            this.raise(TSErrors.UnexpectedTypeAnnotation, {
              at: node.typeAnnotation
            });
          }
        });
      }

      toReferencedList(exprList, isInParens) {
        this.tsCheckForInvalidTypeCasts(exprList);
        return exprList;
      }

      parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);

        if (node.type === "ArrayExpression") {
          this.tsCheckForInvalidTypeCasts(node.elements);
        }

        return node;
      }

      parseSubscript(base, startLoc, noCalls, state) {
        if (!this.hasPrecedingLineBreak() && this.match(35)) {
          this.state.canStartJSXElement = false;
          this.next();
          const nonNullExpression = this.startNodeAt(startLoc);
          nonNullExpression.expression = base;
          return this.finishNode(nonNullExpression, "TSNonNullExpression");
        }

        let isOptionalCall = false;

        if (this.match(18) && this.lookaheadCharCode() === 60) {
          if (noCalls) {
            state.stop = true;
            return base;
          }

          state.optionalChainMember = isOptionalCall = true;
          this.next();
        }

        if (this.match(47) || this.match(51)) {
          let missingParenErrorLoc;
          const result = this.tsTryParseAndCatch(() => {
            if (!noCalls && this.atPossibleAsyncArrow(base)) {
              const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);

              if (asyncArrowFn) {
                return asyncArrowFn;
              }
            }

            const typeArguments = this.tsParseTypeArgumentsInExpression();
            if (!typeArguments) return;

            if (isOptionalCall && !this.match(10)) {
              missingParenErrorLoc = this.state.curPosition();
              return;
            }

            if (tokenIsTemplate(this.state.type)) {
              const result2 = super.parseTaggedTemplateExpression(base, startLoc, state);
              result2.typeParameters = typeArguments;
              return result2;
            }

            if (!noCalls && this.eat(10)) {
              const node2 = this.startNodeAt(startLoc);
              node2.callee = base;
              node2.arguments = this.parseCallExpressionArguments(11, false);
              this.tsCheckForInvalidTypeCasts(node2.arguments);
              node2.typeParameters = typeArguments;

              if (state.optionalChainMember) {
                node2.optional = isOptionalCall;
              }

              return this.finishCallExpression(node2, state.optionalChainMember);
            }

            const tokenType = this.state.type;

            if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {
              return;
            }

            const node = this.startNodeAt(startLoc);
            node.expression = base;
            node.typeParameters = typeArguments;
            return this.finishNode(node, "TSInstantiationExpression");
          });

          if (missingParenErrorLoc) {
            this.unexpected(missingParenErrorLoc, 10);
          }

          if (result) {
            if (result.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {
              this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, {
                at: this.state.startLoc
              });
            }

            return result;
          }
        }

        return super.parseSubscript(base, startLoc, noCalls, state);
      }

      parseNewCallee(node) {
        var _callee$extra;

        super.parseNewCallee(node);
        const {
          callee
        } = node;

        if (callee.type === "TSInstantiationExpression" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {
          node.typeParameters = callee.typeParameters;
          node.callee = callee.expression;
        }
      }

      parseExprOp(left, leftStartLoc, minPrec) {
        let isSatisfies;

        if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(118)))) {
          const node = this.startNodeAt(leftStartLoc);
          node.expression = left;
          node.typeAnnotation = this.tsInType(() => {
            this.next();

            if (this.match(75)) {
              if (isSatisfies) {
                this.raise(Errors.UnexpectedKeyword, {
                  at: this.state.startLoc,
                  keyword: "const"
                });
              }

              return this.tsParseTypeReference();
            }

            return this.tsParseType();
          });
          this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression");
          this.reScan_lt_gt();
          return this.parseExprOp(node, leftStartLoc, minPrec);
        }

        return super.parseExprOp(left, leftStartLoc, minPrec);
      }

      checkReservedWord(word, startLoc, checkKeywords, isBinding) {
        if (!this.state.isAmbientContext) {
          super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
        }
      }

      checkImportReflection(node) {
        super.checkImportReflection(node);

        if (node.module && node.importKind !== "value") {
          this.raise(TSErrors.ImportReflectionHasImportType, {
            at: node.specifiers[0].loc.start
          });
        }
      }

      checkDuplicateExports() {}

      parseImport(node) {
        node.importKind = "value";

        if (tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {
          let ahead = this.lookahead();

          if (this.isContextual(128) && ahead.type !== 12 && ahead.type !== 97 && ahead.type !== 29) {
            node.importKind = "type";
            this.next();
            ahead = this.lookahead();
          }

          if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {
            return this.tsParseImportEqualsDeclaration(node);
          }
        }

        const importNode = super.parseImport(node);

        if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
          this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {
            at: importNode
          });
        }

        return importNode;
      }

      parseExport(node, decorators) {
        if (this.match(83)) {
          this.next();

          if (this.isContextual(128) && this.lookaheadCharCode() !== 61) {
            node.importKind = "type";
            this.next();
          } else {
            node.importKind = "value";
          }

          return this.tsParseImportEqualsDeclaration(node, true);
        } else if (this.eat(29)) {
          const assign = node;
          assign.expression = super.parseExpression();
          this.semicolon();
          return this.finishNode(assign, "TSExportAssignment");
        } else if (this.eatContextual(93)) {
          const decl = node;
          this.expectContextual(126);
          decl.id = this.parseIdentifier();
          this.semicolon();
          return this.finishNode(decl, "TSNamespaceExportDeclaration");
        } else {
          if (this.isContextual(128) && this.lookahead().type === 5) {
            this.next();
            node.exportKind = "type";
          } else {
            node.exportKind = "value";
          }

          return super.parseExport(node, decorators);
        }
      }

      isAbstractClass() {
        return this.isContextual(122) && this.lookahead().type === 80;
      }

      parseExportDefaultExpression() {
        if (this.isAbstractClass()) {
          const cls = this.startNode();
          this.next();
          cls.abstract = true;
          return this.parseClass(cls, true, true);
        }

        if (this.match(127)) {
          const result = this.tsParseInterfaceDeclaration(this.startNode());
          if (result) return result;
        }

        return super.parseExportDefaultExpression();
      }

      parseVarStatement(node, kind, allowMissingInitializer = false) {
        const {
          isAmbientContext
        } = this.state;
        const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
        if (!isAmbientContext) return declaration;

        for (const {
          id,
          init
        } of declaration.declarations) {
          if (!init) continue;

          if (kind !== "const" || !!id.typeAnnotation) {
            this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {
              at: init
            });
          } else if (init.type !== "StringLiteral" && init.type !== "BooleanLiteral" && init.type !== "NumericLiteral" && init.type !== "BigIntLiteral" && (init.type !== "TemplateLiteral" || init.expressions.length > 0) && !isPossiblyLiteralEnum(init)) {
            this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {
              at: init
            });
          }
        }

        return declaration;
      }

      parseStatementContent(context, topLevel, decorators) {
        if (this.match(75) && this.isLookaheadContextual("enum")) {
          const node = this.startNode();
          this.expect(75);
          return this.tsParseEnumDeclaration(node, {
            const: true
          });
        }

        if (this.isContextual(124)) {
          return this.tsParseEnumDeclaration(this.startNode());
        }

        if (this.isContextual(127)) {
          const result = this.tsParseInterfaceDeclaration(this.startNode());
          if (result) return result;
        }

        return super.parseStatementContent(context, topLevel, decorators);
      }

      parseAccessModifier() {
        return this.tsParseModifier(["public", "protected", "private"]);
      }

      tsHasSomeModifiers(member, modifiers) {
        return modifiers.some(modifier => {
          if (tsIsAccessModifier(modifier)) {
            return member.accessibility === modifier;
          }

          return !!member[modifier];
        });
      }

      tsIsStartOfStaticBlocks() {
        return this.isContextual(104) && this.lookaheadCharCode() === 123;
      }

      parseClassMember(classBody, member, state) {
        const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
        this.tsParseModifiers({
          modified: member,
          allowedModifiers: modifiers,
          disallowedModifiers: ["in", "out"],
          stopOnStartOfClassStaticBlock: true,
          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
        });

        const callParseClassMemberWithIsStatic = () => {
          if (this.tsIsStartOfStaticBlocks()) {
            this.next();
            this.next();

            if (this.tsHasSomeModifiers(member, modifiers)) {
              this.raise(TSErrors.StaticBlockCannotHaveModifier, {
                at: this.state.curPosition()
              });
            }

            super.parseClassStaticBlock(classBody, member);
          } else {
            this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
          }
        };

        if (member.declare) {
          this.tsInAmbientContext(callParseClassMemberWithIsStatic);
        } else {
          callParseClassMemberWithIsStatic();
        }
      }

      parseClassMemberWithIsStatic(classBody, member, state, isStatic2) {
        const idx = this.tsTryParseIndexSignature(member);

        if (idx) {
          classBody.body.push(idx);

          if (member.abstract) {
            this.raise(TSErrors.IndexSignatureHasAbstract, {
              at: member
            });
          }

          if (member.accessibility) {
            this.raise(TSErrors.IndexSignatureHasAccessibility, {
              at: member,
              modifier: member.accessibility
            });
          }

          if (member.declare) {
            this.raise(TSErrors.IndexSignatureHasDeclare, {
              at: member
            });
          }

          if (member.override) {
            this.raise(TSErrors.IndexSignatureHasOverride, {
              at: member
            });
          }

          return;
        }

        if (!this.state.inAbstractClass && member.abstract) {
          this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {
            at: member
          });
        }

        if (member.override) {
          if (!state.hadSuperClass) {
            this.raise(TSErrors.OverrideNotInSubClass, {
              at: member
            });
          }
        }

        super.parseClassMemberWithIsStatic(classBody, member, state, isStatic2);
      }

      parsePostMemberNameModifiers(methodOrProp) {
        const optional = this.eat(17);
        if (optional) methodOrProp.optional = true;

        if (methodOrProp.readonly && this.match(10)) {
          this.raise(TSErrors.ClassMethodHasReadonly, {
            at: methodOrProp
          });
        }

        if (methodOrProp.declare && this.match(10)) {
          this.raise(TSErrors.ClassMethodHasDeclare, {
            at: methodOrProp
          });
        }
      }

      parseExpressionStatement(node, expr, decorators) {
        const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr, decorators) : void 0;
        return decl || super.parseExpressionStatement(node, expr, decorators);
      }

      shouldParseExportDeclaration() {
        if (this.tsIsDeclarationStart()) return true;
        return super.shouldParseExportDeclaration();
      }

      parseConditional(expr, startLoc, refExpressionErrors) {
        if (!this.state.maybeInArrowParameters || !this.match(17)) {
          return super.parseConditional(expr, startLoc, refExpressionErrors);
        }

        const result = this.tryParse(() => super.parseConditional(expr, startLoc));

        if (!result.node) {
          if (result.error) {
            super.setOptionalParametersError(refExpressionErrors, result.error);
          }

          return expr;
        }

        if (result.error) this.state = result.failState;
        return result.node;
      }

      parseParenItem(node, startLoc) {
        node = super.parseParenItem(node, startLoc);

        if (this.eat(17)) {
          node.optional = true;
          this.resetEndLocation(node);
        }

        if (this.match(14)) {
          const typeCastNode = this.startNodeAt(startLoc);
          typeCastNode.expression = node;
          typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
          return this.finishNode(typeCastNode, "TSTypeCastExpression");
        }

        return node;
      }

      parseExportDeclaration(node) {
        if (!this.state.isAmbientContext && this.isContextual(123)) {
          return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
        }

        const startLoc = this.state.startLoc;
        const isDeclare = this.eatContextual(123);

        if (isDeclare && (this.isContextual(123) || !this.shouldParseExportDeclaration())) {
          throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {
            at: this.state.startLoc
          });
        }

        const isIdentifier = tokenIsIdentifier(this.state.type);
        const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
        if (!declaration) return null;

        if (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) {
          node.exportKind = "type";
        }

        if (isDeclare) {
          this.resetStartLocation(declaration, startLoc);
          declaration.declare = true;
        }

        return declaration;
      }

      parseClassId(node, isStatement, optionalId, bindingType) {
        if ((!isStatement || optionalId) && this.isContextual(111)) {
          return;
        }

        super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);
        const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));
        if (typeParameters) node.typeParameters = typeParameters;
      }

      parseClassPropertyAnnotation(node) {
        if (!node.optional && this.eat(35)) {
          node.definite = true;
        }

        const type = this.tsTryParseTypeAnnotation();
        if (type) node.typeAnnotation = type;
      }

      parseClassProperty(node) {
        this.parseClassPropertyAnnotation(node);

        if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {
          this.raise(TSErrors.DeclareClassFieldHasInitializer, {
            at: this.state.startLoc
          });
        }

        if (node.abstract && this.match(29)) {
          const {
            key
          } = node;
          this.raise(TSErrors.AbstractPropertyHasInitializer, {
            at: this.state.startLoc,
            propertyName: key.type === "Identifier" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
          });
        }

        return super.parseClassProperty(node);
      }

      parseClassPrivateProperty(node) {
        if (node.abstract) {
          this.raise(TSErrors.PrivateElementHasAbstract, {
            at: node
          });
        }

        if (node.accessibility) {
          this.raise(TSErrors.PrivateElementHasAccessibility, {
            at: node,
            modifier: node.accessibility
          });
        }

        this.parseClassPropertyAnnotation(node);
        return super.parseClassPrivateProperty(node);
      }

      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        const typeParameters = this.tsTryParseTypeParameters();

        if (typeParameters && isConstructor) {
          this.raise(TSErrors.ConstructorHasTypeParameters, {
            at: typeParameters
          });
        }

        const {
          declare = false,
          kind
        } = method;

        if (declare && (kind === "get" || kind === "set")) {
          this.raise(TSErrors.DeclareAccessor, {
            at: method,
            kind
          });
        }

        if (typeParameters) method.typeParameters = typeParameters;
        super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
      }

      pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters) method.typeParameters = typeParameters;
        super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
      }

      declareClassPrivateMethodInScope(node, kind) {
        if (node.type === "TSDeclareMethod") return;
        if (node.type === "MethodDefinition" && !node.value.body) return;
        super.declareClassPrivateMethodInScope(node, kind);
      }

      parseClassSuper(node) {
        super.parseClassSuper(node);

        if (node.superClass && (this.match(47) || this.match(51))) {
          node.superTypeParameters = this.tsParseTypeArgumentsInExpression();
        }

        if (this.eatContextual(111)) {
          node.implements = this.tsParseHeritageClause("implements");
        }
      }

      parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters) prop.typeParameters = typeParameters;
        return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
      }

      parseFunctionParams(node, allowModifiers) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters) node.typeParameters = typeParameters;
        super.parseFunctionParams(node, allowModifiers);
      }

      parseVarId(decl, kind) {
        super.parseVarId(decl, kind);

        if (decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) {
          decl.definite = true;
        }

        const type = this.tsTryParseTypeAnnotation();

        if (type) {
          decl.id.typeAnnotation = type;
          this.resetEndLocation(decl.id);
        }
      }

      parseAsyncArrowFromCallExpression(node, call) {
        if (this.match(14)) {
          node.returnType = this.tsParseTypeAnnotation();
        }

        return super.parseAsyncArrowFromCallExpression(node, call);
      }

      parseMaybeAssign(refExpressionErrors, afterLeftParse) {
        var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;

        let state;
        let jsx2;
        let typeCast;

        if (this.hasPlugin("jsx") && (this.match(140) || this.match(47))) {
          state = this.state.clone();
          jsx2 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
          if (!jsx2.error) return jsx2.node;
          const {
            context
          } = this.state;
          const currentContext = context[context.length - 1];

          if (currentContext === types.j_oTag || currentContext === types.j_expr) {
            context.pop();
          }
        }

        if (!((_jsx = jsx2) != null && _jsx.error) && !this.match(47)) {
          return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
        }

        if (!state || state === this.state) state = this.state.clone();
        let typeParameters;
        const arrow = this.tryParse(abort => {
          var _expr$extra, _typeParameters;

          typeParameters = this.tsParseTypeParameters();
          const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);

          if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
            abort();
          }

          if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
            this.resetStartLocationFromNode(expr, typeParameters);
          }

          expr.typeParameters = typeParameters;
          return expr;
        }, state);

        if (!arrow.error && !arrow.aborted) {
          if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
          return arrow.node;
        }

        if (!jsx2) {
          assert(!this.hasPlugin("jsx"));
          typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
          if (!typeCast.error) return typeCast.node;
        }

        if ((_jsx2 = jsx2) != null && _jsx2.node) {
          this.state = jsx2.failState;
          return jsx2.node;
        }

        if (arrow.node) {
          this.state = arrow.failState;
          if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
          return arrow.node;
        }

        if ((_typeCast = typeCast) != null && _typeCast.node) {
          this.state = typeCast.failState;
          return typeCast.node;
        }

        if ((_jsx3 = jsx2) != null && _jsx3.thrown) throw jsx2.error;
        if (arrow.thrown) throw arrow.error;
        if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;
        throw ((_jsx4 = jsx2) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);
      }

      reportReservedArrowTypeParam(node) {
        var _node$extra;

        if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
          this.raise(TSErrors.ReservedArrowTypeParam, {
            at: node
          });
        }
      }

      parseMaybeUnary(refExpressionErrors, sawUnary) {
        if (!this.hasPlugin("jsx") && this.match(47)) {
          return this.tsParseTypeAssertion();
        } else {
          return super.parseMaybeUnary(refExpressionErrors, sawUnary);
        }
      }

      parseArrow(node) {
        if (this.match(14)) {
          const result = this.tryParse(abort => {
            const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
            if (this.canInsertSemicolon() || !this.match(19)) abort();
            return returnType;
          });
          if (result.aborted) return;

          if (!result.thrown) {
            if (result.error) this.state = result.failState;
            node.returnType = result.node;
          }
        }

        return super.parseArrow(node);
      }

      parseAssignableListItemTypes(param) {
        if (this.eat(17)) {
          if (param.type !== "Identifier" && !this.state.isAmbientContext && !this.state.inType) {
            this.raise(TSErrors.PatternIsOptional, {
              at: param
            });
          }

          param.optional = true;
        }

        const type = this.tsTryParseTypeAnnotation();
        if (type) param.typeAnnotation = type;
        this.resetEndLocation(param);
        return param;
      }

      isAssignable(node, isBinding) {
        switch (node.type) {
          case "TSTypeCastExpression":
            return this.isAssignable(node.expression, isBinding);

          case "TSParameterProperty":
            return true;

          default:
            return super.isAssignable(node, isBinding);
        }
      }

      toAssignable(node, isLHS = false) {
        switch (node.type) {
          case "ParenthesizedExpression":
            this.toAssignableParenthesizedExpression(node, isLHS);
            break;

          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "TSNonNullExpression":
          case "TSTypeAssertion":
            if (isLHS) {
              this.expressionScope.recordArrowParemeterBindingError(TSErrors.UnexpectedTypeCastInParameter, {
                at: node
              });
            } else {
              this.raise(TSErrors.UnexpectedTypeCastInParameter, {
                at: node
              });
            }

            this.toAssignable(node.expression, isLHS);
            break;

          case "AssignmentExpression":
            if (!isLHS && node.left.type === "TSTypeCastExpression") {
              node.left = this.typeCastToParameter(node.left);
            }

          default:
            super.toAssignable(node, isLHS);
        }
      }

      toAssignableParenthesizedExpression(node, isLHS) {
        switch (node.expression.type) {
          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "TSNonNullExpression":
          case "TSTypeAssertion":
          case "ParenthesizedExpression":
            this.toAssignable(node.expression, isLHS);
            break;

          default:
            super.toAssignable(node, isLHS);
        }
      }

      checkToRestConversion(node, allowPattern) {
        switch (node.type) {
          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "TSTypeAssertion":
          case "TSNonNullExpression":
            this.checkToRestConversion(node.expression, false);
            break;

          default:
            super.checkToRestConversion(node, allowPattern);
        }
      }

      isValidLVal(type, isUnparenthesizedInAssign, binding) {
        return getOwn$1({
          TSTypeCastExpression: true,
          TSParameterProperty: "parameter",
          TSNonNullExpression: "expression",
          TSAsExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && ["expression", true],
          TSSatisfiesExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && ["expression", true],
          TSTypeAssertion: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && ["expression", true]
        }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding);
      }

      parseBindingAtom() {
        switch (this.state.type) {
          case 78:
            return this.parseIdentifier(true);

          default:
            return super.parseBindingAtom();
        }
      }

      parseMaybeDecoratorArguments(expr) {
        if (this.match(47) || this.match(51)) {
          const typeArguments = this.tsParseTypeArgumentsInExpression();

          if (this.match(10)) {
            const call = super.parseMaybeDecoratorArguments(expr);
            call.typeParameters = typeArguments;
            return call;
          }

          this.unexpected(null, 10);
        }

        return super.parseMaybeDecoratorArguments(expr);
      }

      checkCommaAfterRest(close) {
        if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
          this.next();
          return false;
        } else {
          return super.checkCommaAfterRest(close);
        }
      }

      isClassMethod() {
        return this.match(47) || super.isClassMethod();
      }

      isClassProperty() {
        return this.match(35) || this.match(14) || super.isClassProperty();
      }

      parseMaybeDefault(startLoc, left) {
        const node = super.parseMaybeDefault(startLoc, left);

        if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
          this.raise(TSErrors.TypeAnnotationAfterAssign, {
            at: node.typeAnnotation
          });
        }

        return node;
      }

      getTokenFromCode(code) {
        if (this.state.inType) {
          if (code === 62) {
            return this.finishOp(48, 1);
          }

          if (code === 60) {
            return this.finishOp(47, 1);
          }
        }

        return super.getTokenFromCode(code);
      }

      reScan_lt_gt() {
        const {
          type
        } = this.state;

        if (type === 47) {
          this.state.pos -= 1;
          this.readToken_lt();
        } else if (type === 48) {
          this.state.pos -= 1;
          this.readToken_gt();
        }
      }

      reScan_lt() {
        const {
          type
        } = this.state;

        if (type === 51) {
          this.state.pos -= 2;
          this.finishOp(47, 1);
          return 47;
        }

        return type;
      }

      toAssignableList(exprList, trailingCommaLoc, isLHS) {
        for (let i = 0; i < exprList.length; i++) {
          const expr = exprList[i];

          if ((expr == null ? void 0 : expr.type) === "TSTypeCastExpression") {
            exprList[i] = this.typeCastToParameter(expr);
          }
        }

        super.toAssignableList(exprList, trailingCommaLoc, isLHS);
      }

      typeCastToParameter(node) {
        node.expression.typeAnnotation = node.typeAnnotation;
        this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
        return node.expression;
      }

      shouldParseArrow(params) {
        if (this.match(14)) {
          return params.every(expr => this.isAssignable(expr, true));
        }

        return super.shouldParseArrow(params);
      }

      shouldParseAsyncArrow() {
        return this.match(14) || super.shouldParseAsyncArrow();
      }

      canHaveLeadingDecorator() {
        return super.canHaveLeadingDecorator() || this.isAbstractClass();
      }

      jsxParseOpeningElementAfterName(node) {
        if (this.match(47) || this.match(51)) {
          const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
          if (typeArguments) node.typeParameters = typeArguments;
        }

        return super.jsxParseOpeningElementAfterName(node);
      }

      getGetterSetterExpectedParamCount(method) {
        const baseCount = super.getGetterSetterExpectedParamCount(method);
        const params = this.getObjectOrClassMethodParams(method);
        const firstParam = params[0];
        const hasContextParam = firstParam && this.isThisParam(firstParam);
        return hasContextParam ? baseCount + 1 : baseCount;
      }

      parseCatchClauseParam() {
        const param = super.parseCatchClauseParam();
        const type = this.tsTryParseTypeAnnotation();

        if (type) {
          param.typeAnnotation = type;
          this.resetEndLocation(param);
        }

        return param;
      }

      tsInAmbientContext(cb) {
        const oldIsAmbientContext = this.state.isAmbientContext;
        this.state.isAmbientContext = true;

        try {
          return cb();
        } finally {
          this.state.isAmbientContext = oldIsAmbientContext;
        }
      }

      parseClass(node, isStatement, optionalId) {
        const oldInAbstractClass = this.state.inAbstractClass;
        this.state.inAbstractClass = !!node.abstract;

        try {
          return super.parseClass(node, isStatement, optionalId);
        } finally {
          this.state.inAbstractClass = oldInAbstractClass;
        }
      }

      tsParseAbstractDeclaration(node, decorators) {
        if (this.match(80)) {
          node.abstract = true;
          return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
        } else if (this.isContextual(127)) {
          if (!this.hasFollowingLineBreak()) {
            node.abstract = true;
            this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {
              at: node
            });
            return this.tsParseInterfaceDeclaration(node);
          }
        } else {
          this.unexpected(null, 80);
        }
      }

      parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
        const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);

        if (method.abstract) {
          const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;

          if (hasBody) {
            const {
              key
            } = method;
            this.raise(TSErrors.AbstractMethodHasImplementation, {
              at: method,
              methodName: key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
            });
          }
        }

        return method;
      }

      tsParseTypeParameterName() {
        const typeName = this.parseIdentifier();
        return typeName.name;
      }

      shouldParseAsAmbientContext() {
        return !!this.getPluginOption("typescript", "dts");
      }

      parse() {
        if (this.shouldParseAsAmbientContext()) {
          this.state.isAmbientContext = true;
        }

        return super.parse();
      }

      getExpression() {
        if (this.shouldParseAsAmbientContext()) {
          this.state.isAmbientContext = true;
        }

        return super.getExpression();
      }

      parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
        if (!isString && isMaybeTypeOnly) {
          this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);
          return this.finishNode(node, "ExportSpecifier");
        }

        node.exportKind = "value";
        return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);
      }

      parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
        if (!importedIsString && isMaybeTypeOnly) {
          this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
          return this.finishNode(specifier, "ImportSpecifier");
        }

        specifier.importKind = "value";
        return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT);
      }

      parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
        const leftOfAsKey = isImport ? "imported" : "local";
        const rightOfAsKey = isImport ? "local" : "exported";
        let leftOfAs = node[leftOfAsKey];
        let rightOfAs;
        let hasTypeSpecifier = false;
        let canParseAsKeyword = true;
        const loc = leftOfAs.loc.start;

        if (this.isContextual(93)) {
          const firstAs = this.parseIdentifier();

          if (this.isContextual(93)) {
            const secondAs = this.parseIdentifier();

            if (tokenIsKeywordOrIdentifier(this.state.type)) {
              hasTypeSpecifier = true;
              leftOfAs = firstAs;
              rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
              canParseAsKeyword = false;
            } else {
              rightOfAs = secondAs;
              canParseAsKeyword = false;
            }
          } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
            canParseAsKeyword = false;
            rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
          } else {
            hasTypeSpecifier = true;
            leftOfAs = firstAs;
          }
        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
          hasTypeSpecifier = true;

          if (isImport) {
            leftOfAs = this.parseIdentifier(true);

            if (!this.isContextual(93)) {
              this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);
            }
          } else {
            leftOfAs = this.parseModuleExportName();
          }
        }

        if (hasTypeSpecifier && isInTypeOnlyImportExport) {
          this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {
            at: loc
          });
        }

        node[leftOfAsKey] = leftOfAs;
        node[rightOfAsKey] = rightOfAs;
        const kindKey = isImport ? "importKind" : "exportKind";
        node[kindKey] = hasTypeSpecifier ? "type" : "value";

        if (canParseAsKeyword && this.eatContextual(93)) {
          node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
        }

        if (!node[rightOfAsKey]) {
          node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);
        }

        if (isImport) {
          this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT);
        }
      }

    };

    function isPossiblyLiteralEnum(expression) {
      if (expression.type !== "MemberExpression") return false;
      const {
        computed,
        property
      } = expression;

      if (computed && property.type !== "StringLiteral" && (property.type !== "TemplateLiteral" || property.expressions.length > 0)) {
        return false;
      }

      return isUncomputedMemberExpressionChain(expression.object);
    }

    function isUncomputedMemberExpressionChain(expression) {
      if (expression.type === "Identifier") return true;
      if (expression.type !== "MemberExpression") return false;
      if (expression.computed) return false;
      return isUncomputedMemberExpressionChain(expression.object);
    }

    var PlaceholderErrors = ParseErrorEnum`placeholders`({
      ClassNameIsRequired: "A class name is required.",
      UnexpectedSpace: "Unexpected space in placeholder."
    });

    var placeholders = superClass => class PlaceholdersParserMixin extends superClass {
      parsePlaceholder(expectedNode) {
        if (this.match(142)) {
          const node = this.startNode();
          this.next();
          this.assertNoSpace();
          node.name = super.parseIdentifier(true);
          this.assertNoSpace();
          this.expect(142);
          return this.finishPlaceholder(node, expectedNode);
        }
      }

      finishPlaceholder(node, expectedNode) {
        const isFinished = !!(node.expectedNode && node.type === "Placeholder");
        node.expectedNode = expectedNode;
        return isFinished ? node : this.finishNode(node, "Placeholder");
      }

      getTokenFromCode(code) {
        if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
          return this.finishOp(142, 2);
        }

        return super.getTokenFromCode(code);
      }

      parseExprAtom(refExpressionErrors) {
        return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
      }

      parseIdentifier(liberal) {
        return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
      }

      checkReservedWord(word, startLoc, checkKeywords, isBinding) {
        if (word !== void 0) {
          super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
        }
      }

      parseBindingAtom() {
        return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
      }

      isValidLVal(type, isParenthesized, binding) {
        return type === "Placeholder" || super.isValidLVal(type, isParenthesized, binding);
      }

      toAssignable(node, isLHS) {
        if (node && node.type === "Placeholder" && node.expectedNode === "Expression") {
          node.expectedNode = "Pattern";
        } else {
          super.toAssignable(node, isLHS);
        }
      }

      hasFollowingIdentifier(context) {
        if (super.hasFollowingIdentifier(context)) {
          return true;
        }

        if (context) return false;
        const nextToken = this.lookahead();

        if (nextToken.type === 142) {
          return true;
        }

        return false;
      }

      verifyBreakContinue(node, isBreak) {
        if (node.label && node.label.type === "Placeholder") return;
        super.verifyBreakContinue(node, isBreak);
      }

      parseExpressionStatement(node, expr) {
        if (expr.type !== "Placeholder" || expr.extra && expr.extra.parenthesized) {
          return super.parseExpressionStatement(node, expr);
        }

        if (this.match(14)) {
          const stmt = node;
          stmt.label = this.finishPlaceholder(expr, "Identifier");
          this.next();
          stmt.body = super.parseStatement("label");
          return this.finishNode(stmt, "LabeledStatement");
        }

        this.semicolon();
        node.name = expr.name;
        return this.finishPlaceholder(node, "Statement");
      }

      parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
        return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
      }

      parseFunctionId(requireId) {
        return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
      }

      parseClass(node, isStatement, optionalId) {
        const type = isStatement ? "ClassDeclaration" : "ClassExpression";
        this.next();
        const oldStrict = this.state.strict;
        const placeholder = this.parsePlaceholder("Identifier");

        if (placeholder) {
          if (this.match(81) || this.match(142) || this.match(5)) {
            node.id = placeholder;
          } else if (optionalId || !isStatement) {
            node.id = null;
            node.body = this.finishPlaceholder(placeholder, "ClassBody");
            return this.finishNode(node, type);
          } else {
            throw this.raise(PlaceholderErrors.ClassNameIsRequired, {
              at: this.state.startLoc
            });
          }
        } else {
          this.parseClassId(node, isStatement, optionalId);
        }

        super.parseClassSuper(node);
        node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict);
        return this.finishNode(node, type);
      }

      parseExport(node, decorators) {
        const placeholder = this.parsePlaceholder("Identifier");
        if (!placeholder) return super.parseExport(node, decorators);

        if (!this.isContextual(97) && !this.match(12)) {
          node.specifiers = [];
          node.source = null;
          node.declaration = this.finishPlaceholder(placeholder, "Declaration");
          return this.finishNode(node, "ExportNamedDeclaration");
        }

        this.expectPlugin("exportDefaultFrom");
        const specifier = this.startNode();
        specifier.exported = placeholder;
        node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
        return super.parseExport(node, decorators);
      }

      isExportDefaultSpecifier() {
        if (this.match(65)) {
          const next = this.nextTokenStart();

          if (this.isUnparsedContextual(next, "from")) {
            if (this.input.startsWith(tokenLabelName(142), this.nextTokenStartSince(next + 4))) {
              return true;
            }
          }
        }

        return super.isExportDefaultSpecifier();
      }

      maybeParseExportDefaultSpecifier(node) {
        if (node.specifiers && node.specifiers.length > 0) {
          return true;
        }

        return super.maybeParseExportDefaultSpecifier(node);
      }

      checkExport(node) {
        const {
          specifiers
        } = node;

        if (specifiers != null && specifiers.length) {
          node.specifiers = specifiers.filter(node2 => node2.exported.type === "Placeholder");
        }

        super.checkExport(node);
        node.specifiers = specifiers;
      }

      parseImport(node) {
        const placeholder = this.parsePlaceholder("Identifier");
        if (!placeholder) return super.parseImport(node);
        node.specifiers = [];

        if (!this.isContextual(97) && !this.match(12)) {
          node.source = this.finishPlaceholder(placeholder, "StringLiteral");
          this.semicolon();
          return this.finishNode(node, "ImportDeclaration");
        }

        const specifier = this.startNodeAtNode(placeholder);
        specifier.local = placeholder;
        node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier"));

        if (this.eat(12)) {
          const hasStarImport = this.maybeParseStarImportSpecifier(node);
          if (!hasStarImport) this.parseNamedImportSpecifiers(node);
        }

        this.expectContextual(97);
        node.source = this.parseImportSource();
        this.semicolon();
        return this.finishNode(node, "ImportDeclaration");
      }

      parseImportSource() {
        return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
      }

      assertNoSpace() {
        if (this.state.start > this.state.lastTokEndLoc.index) {
          this.raise(PlaceholderErrors.UnexpectedSpace, {
            at: this.state.lastTokEndLoc
          });
        }
      }

    };

    var v8intrinsic = superClass => class V8IntrinsicMixin extends superClass {
      parseV8Intrinsic() {
        if (this.match(54)) {
          const v8IntrinsicStartLoc = this.state.startLoc;
          const node = this.startNode();
          this.next();

          if (tokenIsIdentifier(this.state.type)) {
            const name = this.parseIdentifierName();
            const identifier = this.createIdentifier(node, name);
            identifier.type = "V8IntrinsicIdentifier";

            if (this.match(10)) {
              return identifier;
            }
          }

          this.unexpected(v8IntrinsicStartLoc);
        }
      }

      parseExprAtom(refExpressionErrors) {
        return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
      }

    };

    function hasPlugin(plugins, expectedConfig) {
      const [expectedName, expectedOptions] = typeof expectedConfig === "string" ? [expectedConfig, {}] : expectedConfig;
      const expectedKeys = Object.keys(expectedOptions);
      const expectedOptionsIsEmpty = expectedKeys.length === 0;
      return plugins.some(p => {
        if (typeof p === "string") {
          return expectedOptionsIsEmpty && p === expectedName;
        } else {
          const [pluginName, pluginOptions] = p;

          if (pluginName !== expectedName) {
            return false;
          }

          for (const key of expectedKeys) {
            if (pluginOptions[key] !== expectedOptions[key]) {
              return false;
            }
          }

          return true;
        }
      });
    }

    function getPluginOption(plugins, name, option) {
      const plugin = plugins.find(plugin2 => {
        if (Array.isArray(plugin2)) {
          return plugin2[0] === name;
        } else {
          return plugin2 === name;
        }
      });

      if (plugin && Array.isArray(plugin) && plugin.length > 1) {
        return plugin[1][option];
      }

      return null;
    }

    var PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
    var TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
    var RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];

    function validatePlugins(plugins) {
      if (hasPlugin(plugins, "decorators")) {
        if (hasPlugin(plugins, "decorators-legacy")) {
          throw new Error("Cannot use the decorators and decorators-legacy plugin together");
        }

        const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");

        if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== "boolean") {
          throw new Error("'decoratorsBeforeExport' must be a boolean.");
        }

        const allowCallParenthesized = getPluginOption(plugins, "decorators", "allowCallParenthesized");

        if (allowCallParenthesized != null && typeof allowCallParenthesized !== "boolean") {
          throw new Error("'allowCallParenthesized' must be a boolean.");
        }
      }

      if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) {
        throw new Error("Cannot combine flow and typescript plugins.");
      }

      if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic")) {
        throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
      }

      if (hasPlugin(plugins, "pipelineOperator")) {
        const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");

        if (!PIPELINE_PROPOSALS.includes(proposal)) {
          const proposalList = PIPELINE_PROPOSALS.map(p => `"${p}"`).join(", ");
          throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
        }

        const tupleSyntaxIsHash = hasPlugin(plugins, ["recordAndTuple", {
          syntaxType: "hash"
        }]);

        if (proposal === "hack") {
          if (hasPlugin(plugins, "placeholders")) {
            throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
          }

          if (hasPlugin(plugins, "v8intrinsic")) {
            throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
          }

          const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");

          if (!TOPIC_TOKENS.includes(topicToken)) {
            const tokenList = TOPIC_TOKENS.map(t42 => `"${t42}"`).join(", ");
            throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
          }

          if (topicToken === "#" && tupleSyntaxIsHash) {
            throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
          }
        } else if (proposal === "smart" && tupleSyntaxIsHash) {
          throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
        }
      }

      if (hasPlugin(plugins, "moduleAttributes")) {
        {
          if (hasPlugin(plugins, "importAssertions")) {
            throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
          }

          const moduleAttributesVersionPluginOption = getPluginOption(plugins, "moduleAttributes", "version");

          if (moduleAttributesVersionPluginOption !== "may-2020") {
            throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
          }
        }
      }

      if (hasPlugin(plugins, "recordAndTuple") && getPluginOption(plugins, "recordAndTuple", "syntaxType") != null && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType"))) {
        throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(", "));
      }

      if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
        const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
        error.missingPlugins = "doExpressions";
        throw error;
      }
    }

    var mixinPlugins = {
      estree,
      jsx,
      flow,
      typescript,
      v8intrinsic,
      placeholders
    };
    var mixinPluginNames = Object.keys(mixinPlugins);
    var defaultOptions = {
      sourceType: "script",
      sourceFilename: void 0,
      startColumn: 0,
      startLine: 1,
      allowAwaitOutsideFunction: false,
      allowReturnOutsideFunction: false,
      allowImportExportEverywhere: false,
      allowSuperOutsideMethod: false,
      allowUndeclaredExports: false,
      plugins: [],
      strictMode: null,
      ranges: false,
      tokens: false,
      createParenthesizedExpressions: false,
      errorRecovery: false,
      attachComment: true
    };

    function getOptions(opts) {
      const options = {};

      for (const key of Object.keys(defaultOptions)) {
        options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];
      }

      return options;
    }

    var getOwn = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];

    var unwrapParenthesizedExpression = node => {
      return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;
    };

    var LValParser = class extends NodeUtils {
      toAssignable(node, isLHS = false) {
        var _node$extra, _node$extra3;

        let parenthesized = void 0;

        if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
          parenthesized = unwrapParenthesizedExpression(node);

          if (isLHS) {
            if (parenthesized.type === "Identifier") {
              this.expressionScope.recordArrowParemeterBindingError(Errors.InvalidParenthesizedAssignment, {
                at: node
              });
            } else if (parenthesized.type !== "MemberExpression") {
              this.raise(Errors.InvalidParenthesizedAssignment, {
                at: node
              });
            }
          } else {
            this.raise(Errors.InvalidParenthesizedAssignment, {
              at: node
            });
          }
        }

        switch (node.type) {
          case "Identifier":
          case "ObjectPattern":
          case "ArrayPattern":
          case "AssignmentPattern":
          case "RestElement":
            break;

          case "ObjectExpression":
            node.type = "ObjectPattern";

            for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
              var _node$extra2;

              const prop = node.properties[i];
              const isLast = i === last;
              this.toAssignableObjectExpressionProp(prop, isLast, isLHS);

              if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {
                this.raise(Errors.RestTrailingComma, {
                  at: node.extra.trailingCommaLoc
                });
              }
            }

            break;

          case "ObjectProperty":
            {
              const {
                key,
                value
              } = node;

              if (this.isPrivateName(key)) {
                this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
              }

              this.toAssignable(value, isLHS);
              break;
            }

          case "SpreadElement":
            {
              throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
            }

          case "ArrayExpression":
            node.type = "ArrayPattern";
            this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
            break;

          case "AssignmentExpression":
            if (node.operator !== "=") {
              this.raise(Errors.MissingEqInAssignment, {
                at: node.left.loc.end
              });
            }

            node.type = "AssignmentPattern";
            delete node.operator;
            this.toAssignable(node.left, isLHS);
            break;

          case "ParenthesizedExpression":
            this.toAssignable(parenthesized, isLHS);
            break;
        }
      }

      toAssignableObjectExpressionProp(prop, isLast, isLHS) {
        if (prop.type === "ObjectMethod") {
          this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {
            at: prop.key
          });
        } else if (prop.type === "SpreadElement") {
          prop.type = "RestElement";
          const arg = prop.argument;
          this.checkToRestConversion(arg, false);
          this.toAssignable(arg, isLHS);

          if (!isLast) {
            this.raise(Errors.RestTrailingComma, {
              at: prop
            });
          }
        } else {
          this.toAssignable(prop, isLHS);
        }
      }

      toAssignableList(exprList, trailingCommaLoc, isLHS) {
        const end = exprList.length - 1;

        for (let i = 0; i <= end; i++) {
          const elt = exprList[i];
          if (!elt) continue;

          if (elt.type === "SpreadElement") {
            elt.type = "RestElement";
            const arg = elt.argument;
            this.checkToRestConversion(arg, true);
            this.toAssignable(arg, isLHS);
          } else {
            this.toAssignable(elt, isLHS);
          }

          if (elt.type === "RestElement") {
            if (i < end) {
              this.raise(Errors.RestTrailingComma, {
                at: elt
              });
            } else if (trailingCommaLoc) {
              this.raise(Errors.RestTrailingComma, {
                at: trailingCommaLoc
              });
            }
          }
        }
      }

      isAssignable(node, isBinding) {
        switch (node.type) {
          case "Identifier":
          case "ObjectPattern":
          case "ArrayPattern":
          case "AssignmentPattern":
          case "RestElement":
            return true;

          case "ObjectExpression":
            {
              const last = node.properties.length - 1;
              return node.properties.every((prop, i) => {
                return prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop);
              });
            }

          case "ObjectProperty":
            return this.isAssignable(node.value);

          case "SpreadElement":
            return this.isAssignable(node.argument);

          case "ArrayExpression":
            return node.elements.every(element => element === null || this.isAssignable(element));

          case "AssignmentExpression":
            return node.operator === "=";

          case "ParenthesizedExpression":
            return this.isAssignable(node.expression);

          case "MemberExpression":
          case "OptionalMemberExpression":
            return !isBinding;

          default:
            return false;
        }
      }

      toReferencedList(exprList, isParenthesizedExpr) {
        return exprList;
      }

      toReferencedListDeep(exprList, isParenthesizedExpr) {
        this.toReferencedList(exprList, isParenthesizedExpr);

        for (const expr of exprList) {
          if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
            this.toReferencedListDeep(expr.elements);
          }
        }
      }

      parseSpread(refExpressionErrors) {
        const node = this.startNode();
        this.next();
        node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0);
        return this.finishNode(node, "SpreadElement");
      }

      parseRestBinding() {
        const node = this.startNode();
        this.next();
        node.argument = this.parseBindingAtom();
        return this.finishNode(node, "RestElement");
      }

      parseBindingAtom() {
        switch (this.state.type) {
          case 0:
            {
              const node = this.startNode();
              this.next();
              node.elements = this.parseBindingList(3, 93, true);
              return this.finishNode(node, "ArrayPattern");
            }

          case 5:
            return this.parseObjectLike(8, true);
        }

        return this.parseIdentifier();
      }

      parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {
        const elts = [];
        let first = true;

        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
          }

          if (allowEmpty && this.match(12)) {
            elts.push(null);
          } else if (this.eat(close)) {
            break;
          } else if (this.match(21)) {
            elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));

            if (!this.checkCommaAfterRest(closeCharCode)) {
              this.expect(close);
              break;
            }
          } else {
            const decorators = [];

            if (this.match(26) && this.hasPlugin("decorators")) {
              this.raise(Errors.UnsupportedParameterDecorator, {
                at: this.state.startLoc
              });
            }

            while (this.match(26)) {
              decorators.push(this.parseDecorator());
            }

            elts.push(this.parseAssignableListItem(allowModifiers, decorators));
          }
        }

        return elts;
      }

      parseBindingRestProperty(prop) {
        this.next();
        prop.argument = this.parseIdentifier();
        this.checkCommaAfterRest(125);
        return this.finishNode(prop, "RestElement");
      }

      parseBindingProperty() {
        const prop = this.startNode();
        const {
          type,
          startLoc
        } = this.state;

        if (type === 21) {
          return this.parseBindingRestProperty(prop);
        } else if (type === 136) {
          this.expectPlugin("destructuringPrivate", startLoc);
          this.classScope.usePrivateName(this.state.value, startLoc);
          prop.key = this.parsePrivateName();
        } else {
          this.parsePropertyName(prop);
        }

        prop.method = false;
        return this.parseObjPropValue(prop, startLoc, false, false, true, false);
      }

      parseAssignableListItem(allowModifiers, decorators) {
        const left = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(left);
        const elt = this.parseMaybeDefault(left.loc.start, left);

        if (decorators.length) {
          left.decorators = decorators;
        }

        return elt;
      }

      parseAssignableListItemTypes(param) {
        return param;
      }

      parseMaybeDefault(startLoc, left) {
        var _startLoc, _left;

        (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
        left = (_left = left) != null ? _left : this.parseBindingAtom();
        if (!this.eat(29)) return left;
        const node = this.startNodeAt(startLoc);
        node.left = left;
        node.right = this.parseMaybeAssignAllowIn();
        return this.finishNode(node, "AssignmentPattern");
      }

      isValidLVal(type, isUnparenthesizedInAssign, binding) {
        return getOwn({
          AssignmentPattern: "left",
          RestElement: "argument",
          ObjectProperty: "value",
          ParenthesizedExpression: "expression",
          ArrayPattern: "elements",
          ObjectPattern: "properties"
        }, type);
      }

      checkLVal(expression, {
        in: ancestor,
        binding = BIND_NONE,
        checkClashes = false,
        strictModeChanged = false,
        allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),
        hasParenthesizedAncestor = false
      }) {
        var _expression$extra;

        const type = expression.type;
        if (this.isObjectMethod(expression)) return;

        if (type === "MemberExpression") {
          if (binding !== BIND_NONE) {
            this.raise(Errors.InvalidPropertyBindingPattern, {
              at: expression
            });
          }

          return;
        }

        if (expression.type === "Identifier") {
          this.checkIdentifier(expression, binding, strictModeChanged, allowingSloppyLetBinding);
          const {
            name
          } = expression;

          if (checkClashes) {
            if (checkClashes.has(name)) {
              this.raise(Errors.ParamDupe, {
                at: expression
              });
            } else {
              checkClashes.add(name);
            }
          }

          return;
        }

        const validity = this.isValidLVal(expression.type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding);
        if (validity === true) return;

        if (validity === false) {
          const ParseErrorClass = binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
          this.raise(ParseErrorClass, {
            at: expression,
            ancestor: ancestor.type === "UpdateExpression" ? {
              type: "UpdateExpression",
              prefix: ancestor.prefix
            } : {
              type: ancestor.type
            }
          });
          return;
        }

        const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === "ParenthesizedExpression"];
        const nextAncestor = expression.type === "ArrayPattern" || expression.type === "ObjectPattern" || expression.type === "ParenthesizedExpression" ? expression : ancestor;

        for (const child of [].concat(expression[key])) {
          if (child) {
            this.checkLVal(child, {
              in: nextAncestor,
              binding,
              checkClashes,
              allowingSloppyLetBinding,
              strictModeChanged,
              hasParenthesizedAncestor: isParenthesizedExpression
            });
          }
        }
      }

      checkIdentifier(at, bindingType, strictModeChanged = false, allowLetBinding = !(bindingType & BIND_SCOPE_LEXICAL)) {
        if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {
          if (bindingType === BIND_NONE) {
            this.raise(Errors.StrictEvalArguments, {
              at,
              referenceName: at.name
            });
          } else {
            this.raise(Errors.StrictEvalArgumentsBinding, {
              at,
              bindingName: at.name
            });
          }
        }

        if (!allowLetBinding && at.name === "let") {
          this.raise(Errors.LetInLexicalBinding, {
            at
          });
        }

        if (!(bindingType & BIND_NONE)) {
          this.declareNameFromIdentifier(at, bindingType);
        }
      }

      declareNameFromIdentifier(identifier, binding) {
        this.scope.declareName(identifier.name, binding, identifier.loc.start);
      }

      checkToRestConversion(node, allowPattern) {
        switch (node.type) {
          case "ParenthesizedExpression":
            this.checkToRestConversion(node.expression, allowPattern);
            break;

          case "Identifier":
          case "MemberExpression":
            break;

          case "ArrayExpression":
          case "ObjectExpression":
            if (allowPattern) break;

          default:
            this.raise(Errors.InvalidRestAssignmentPattern, {
              at: node
            });
        }
      }

      checkCommaAfterRest(close) {
        if (!this.match(12)) {
          return false;
        }

        this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {
          at: this.state.startLoc
        });
        return true;
      }

    };
    var ExpressionParser = class extends LValParser {
      checkProto(prop, isRecord, protoRef, refExpressionErrors) {
        if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
          return;
        }

        const key = prop.key;
        const name = key.type === "Identifier" ? key.name : key.value;

        if (name === "__proto__") {
          if (isRecord) {
            this.raise(Errors.RecordNoProto, {
              at: key
            });
            return;
          }

          if (protoRef.used) {
            if (refExpressionErrors) {
              if (refExpressionErrors.doubleProtoLoc === null) {
                refExpressionErrors.doubleProtoLoc = key.loc.start;
              }
            } else {
              this.raise(Errors.DuplicateProto, {
                at: key
              });
            }
          }

          protoRef.used = true;
        }
      }

      shouldExitDescending(expr, potentialArrowAt) {
        return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
      }

      getExpression() {
        this.enterInitialScopes();
        this.nextToken();
        const expr = this.parseExpression();

        if (!this.match(137)) {
          this.unexpected();
        }

        this.finalizeRemainingComments();
        expr.comments = this.state.comments;
        expr.errors = this.state.errors;

        if (this.options.tokens) {
          expr.tokens = this.tokens;
        }

        return expr;
      }

      parseExpression(disallowIn, refExpressionErrors) {
        if (disallowIn) {
          return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
        }

        return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
      }

      parseExpressionBase(refExpressionErrors) {
        const startLoc = this.state.startLoc;
        const expr = this.parseMaybeAssign(refExpressionErrors);

        if (this.match(12)) {
          const node = this.startNodeAt(startLoc);
          node.expressions = [expr];

          while (this.eat(12)) {
            node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
          }

          this.toReferencedList(node.expressions);
          return this.finishNode(node, "SequenceExpression");
        }

        return expr;
      }

      parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
        return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
      }

      parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
        return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
      }

      setOptionalParametersError(refExpressionErrors, resultError) {
        var _resultError$loc;

        refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;
      }

      parseMaybeAssign(refExpressionErrors, afterLeftParse) {
        const startLoc = this.state.startLoc;

        if (this.isContextual(106)) {
          if (this.prodParam.hasYield) {
            let left2 = this.parseYield();

            if (afterLeftParse) {
              left2 = afterLeftParse.call(this, left2, startLoc);
            }

            return left2;
          }
        }

        let ownExpressionErrors;

        if (refExpressionErrors) {
          ownExpressionErrors = false;
        } else {
          refExpressionErrors = new ExpressionErrors();
          ownExpressionErrors = true;
        }

        const {
          type
        } = this.state;

        if (type === 10 || tokenIsIdentifier(type)) {
          this.state.potentialArrowAt = this.state.start;
        }

        let left = this.parseMaybeConditional(refExpressionErrors);

        if (afterLeftParse) {
          left = afterLeftParse.call(this, left, startLoc);
        }

        if (tokenIsAssignment(this.state.type)) {
          const node = this.startNodeAt(startLoc);
          const operator = this.state.value;
          node.operator = operator;

          if (this.match(29)) {
            this.toAssignable(left, true);
            node.left = left;
            const startIndex = startLoc.index;

            if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {
              refExpressionErrors.doubleProtoLoc = null;
            }

            if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {
              refExpressionErrors.shorthandAssignLoc = null;
            }

            if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {
              this.checkDestructuringPrivate(refExpressionErrors);
              refExpressionErrors.privateKeyLoc = null;
            }
          } else {
            node.left = left;
          }

          this.next();
          node.right = this.parseMaybeAssign();
          this.checkLVal(left, {
            in: this.finishNode(node, "AssignmentExpression")
          });
          return node;
        } else if (ownExpressionErrors) {
          this.checkExpressionErrors(refExpressionErrors, true);
        }

        return left;
      }

      parseMaybeConditional(refExpressionErrors) {
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseExprOps(refExpressionErrors);

        if (this.shouldExitDescending(expr, potentialArrowAt)) {
          return expr;
        }

        return this.parseConditional(expr, startLoc, refExpressionErrors);
      }

      parseConditional(expr, startLoc, refExpressionErrors) {
        if (this.eat(17)) {
          const node = this.startNodeAt(startLoc);
          node.test = expr;
          node.consequent = this.parseMaybeAssignAllowIn();
          this.expect(14);
          node.alternate = this.parseMaybeAssign();
          return this.finishNode(node, "ConditionalExpression");
        }

        return expr;
      }

      parseMaybeUnaryOrPrivate(refExpressionErrors) {
        return this.match(136) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
      }

      parseExprOps(refExpressionErrors) {
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);

        if (this.shouldExitDescending(expr, potentialArrowAt)) {
          return expr;
        }

        return this.parseExprOp(expr, startLoc, -1);
      }

      parseExprOp(left, leftStartLoc, minPrec) {
        if (this.isPrivateName(left)) {
          const value = this.getPrivateNameSV(left);

          if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {
            this.raise(Errors.PrivateInExpectedIn, {
              at: left,
              identifierName: value
            });
          }

          this.classScope.usePrivateName(value, left.loc.start);
        }

        const op = this.state.type;

        if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {
          let prec = tokenOperatorPrecedence(op);

          if (prec > minPrec) {
            if (op === 39) {
              this.expectPlugin("pipelineOperator");

              if (this.state.inFSharpPipelineDirectBody) {
                return left;
              }

              this.checkPipelineAtInfixOperator(left, leftStartLoc);
            }

            const node = this.startNodeAt(leftStartLoc);
            node.left = left;
            node.operator = this.state.value;
            const logical = op === 41 || op === 42;
            const coalesce = op === 40;

            if (coalesce) {
              prec = tokenOperatorPrecedence(42);
            }

            this.next();

            if (op === 39 && this.hasPlugin(["pipelineOperator", {
              proposal: "minimal"
            }])) {
              if (this.state.type === 96 && this.prodParam.hasAwait) {
                throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {
                  at: this.state.startLoc
                });
              }
            }

            node.right = this.parseExprOpRightExpr(op, prec);
            const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
            const nextOp = this.state.type;

            if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {
              throw this.raise(Errors.MixingCoalesceWithLogical, {
                at: this.state.startLoc
              });
            }

            return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
          }
        }

        return left;
      }

      parseExprOpRightExpr(op, prec) {
        const startLoc = this.state.startLoc;

        switch (op) {
          case 39:
            switch (this.getPluginOption("pipelineOperator", "proposal")) {
              case "hack":
                return this.withTopicBindingContext(() => {
                  return this.parseHackPipeBody();
                });

              case "smart":
                return this.withTopicBindingContext(() => {
                  if (this.prodParam.hasYield && this.isContextual(106)) {
                    throw this.raise(Errors.PipeBodyIsTighter, {
                      at: this.state.startLoc
                    });
                  }

                  return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
                });

              case "fsharp":
                return this.withSoloAwaitPermittingContext(() => {
                  return this.parseFSharpPipelineBody(prec);
                });
            }

          default:
            return this.parseExprOpBaseRightExpr(op, prec);
        }
      }

      parseExprOpBaseRightExpr(op, prec) {
        const startLoc = this.state.startLoc;
        return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
      }

      parseHackPipeBody() {
        var _body$extra;

        const {
          startLoc
        } = this.state;
        const body = this.parseMaybeAssign();
        const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);

        if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
          this.raise(Errors.PipeUnparenthesizedBody, {
            at: startLoc,
            type: body.type
          });
        }

        if (!this.topicReferenceWasUsedInCurrentContext()) {
          this.raise(Errors.PipeTopicUnused, {
            at: startLoc
          });
        }

        return body;
      }

      checkExponentialAfterUnary(node) {
        if (this.match(57)) {
          this.raise(Errors.UnexpectedTokenUnaryExponentiation, {
            at: node.argument
          });
        }
      }

      parseMaybeUnary(refExpressionErrors, sawUnary) {
        const startLoc = this.state.startLoc;
        const isAwait = this.isContextual(96);

        if (isAwait && this.isAwaitAllowed()) {
          this.next();
          const expr2 = this.parseAwait(startLoc);
          if (!sawUnary) this.checkExponentialAfterUnary(expr2);
          return expr2;
        }

        const update = this.match(34);
        const node = this.startNode();

        if (tokenIsPrefix(this.state.type)) {
          node.operator = this.state.value;
          node.prefix = true;

          if (this.match(72)) {
            this.expectPlugin("throwExpressions");
          }

          const isDelete = this.match(89);
          this.next();
          node.argument = this.parseMaybeUnary(null, true);
          this.checkExpressionErrors(refExpressionErrors, true);

          if (this.state.strict && isDelete) {
            const arg = node.argument;

            if (arg.type === "Identifier") {
              this.raise(Errors.StrictDelete, {
                at: node
              });
            } else if (this.hasPropertyAsPrivateName(arg)) {
              this.raise(Errors.DeletePrivateField, {
                at: node
              });
            }
          }

          if (!update) {
            if (!sawUnary) {
              this.checkExponentialAfterUnary(node);
            }

            return this.finishNode(node, "UnaryExpression");
          }
        }

        const expr = this.parseUpdate(node, update, refExpressionErrors);

        if (isAwait) {
          const {
            type
          } = this.state;
          const startsExpr2 = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);

          if (startsExpr2 && !this.isAmbiguousAwait()) {
            this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {
              at: startLoc
            });
            return this.parseAwait(startLoc);
          }
        }

        return expr;
      }

      parseUpdate(node, update, refExpressionErrors) {
        if (update) {
          const updateExpressionNode = node;
          this.checkLVal(updateExpressionNode.argument, {
            in: this.finishNode(updateExpressionNode, "UpdateExpression")
          });
          return node;
        }

        const startLoc = this.state.startLoc;
        let expr = this.parseExprSubscripts(refExpressionErrors);
        if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;

        while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
          const node2 = this.startNodeAt(startLoc);
          node2.operator = this.state.value;
          node2.prefix = false;
          node2.argument = expr;
          this.next();
          this.checkLVal(expr, {
            in: expr = this.finishNode(node2, "UpdateExpression")
          });
        }

        return expr;
      }

      parseExprSubscripts(refExpressionErrors) {
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseExprAtom(refExpressionErrors);

        if (this.shouldExitDescending(expr, potentialArrowAt)) {
          return expr;
        }

        return this.parseSubscripts(expr, startLoc);
      }

      parseSubscripts(base, startLoc, noCalls) {
        const state = {
          optionalChainMember: false,
          maybeAsyncArrow: this.atPossibleAsyncArrow(base),
          stop: false
        };

        do {
          base = this.parseSubscript(base, startLoc, noCalls, state);
          state.maybeAsyncArrow = false;
        } while (!state.stop);

        return base;
      }

      parseSubscript(base, startLoc, noCalls, state) {
        const {
          type
        } = this.state;

        if (!noCalls && type === 15) {
          return this.parseBind(base, startLoc, noCalls, state);
        } else if (tokenIsTemplate(type)) {
          return this.parseTaggedTemplateExpression(base, startLoc, state);
        }

        let optional = false;

        if (type === 18) {
          if (noCalls && this.lookaheadCharCode() === 40) {
            state.stop = true;
            return base;
          }

          state.optionalChainMember = optional = true;
          this.next();
        }

        if (!noCalls && this.match(10)) {
          return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
        } else {
          const computed = this.eat(0);

          if (computed || optional || this.eat(16)) {
            return this.parseMember(base, startLoc, state, computed, optional);
          } else {
            state.stop = true;
            return base;
          }
        }
      }

      parseMember(base, startLoc, state, computed, optional) {
        const node = this.startNodeAt(startLoc);
        node.object = base;
        node.computed = computed;

        if (computed) {
          node.property = this.parseExpression();
          this.expect(3);
        } else if (this.match(136)) {
          if (base.type === "Super") {
            this.raise(Errors.SuperPrivateField, {
              at: startLoc
            });
          }

          this.classScope.usePrivateName(this.state.value, this.state.startLoc);
          node.property = this.parsePrivateName();
        } else {
          node.property = this.parseIdentifier(true);
        }

        if (state.optionalChainMember) {
          node.optional = optional;
          return this.finishNode(node, "OptionalMemberExpression");
        } else {
          return this.finishNode(node, "MemberExpression");
        }
      }

      parseBind(base, startLoc, noCalls, state) {
        const node = this.startNodeAt(startLoc);
        node.object = base;
        this.next();
        node.callee = this.parseNoCallExpr();
        state.stop = true;
        return this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
      }

      parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        let refExpressionErrors = null;
        this.state.maybeInArrowParameters = true;
        this.next();
        const node = this.startNodeAt(startLoc);
        node.callee = base;
        const {
          maybeAsyncArrow,
          optionalChainMember
        } = state;

        if (maybeAsyncArrow) {
          this.expressionScope.enter(newAsyncArrowScope());
          refExpressionErrors = new ExpressionErrors();
        }

        if (optionalChainMember) {
          node.optional = optional;
        }

        if (optional) {
          node.arguments = this.parseCallExpressionArguments(11);
        } else {
          node.arguments = this.parseCallExpressionArguments(11, base.type === "Import", base.type !== "Super", node, refExpressionErrors);
        }

        let finishedNode = this.finishCallExpression(node, optionalChainMember);

        if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
          state.stop = true;
          this.checkDestructuringPrivate(refExpressionErrors);
          this.expressionScope.validateAsPattern();
          this.expressionScope.exit();
          finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);
        } else {
          if (maybeAsyncArrow) {
            this.checkExpressionErrors(refExpressionErrors, true);
            this.expressionScope.exit();
          }

          this.toReferencedArguments(finishedNode);
        }

        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return finishedNode;
      }

      toReferencedArguments(node, isParenthesizedExpr) {
        this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
      }

      parseTaggedTemplateExpression(base, startLoc, state) {
        const node = this.startNodeAt(startLoc);
        node.tag = base;
        node.quasi = this.parseTemplate(true);

        if (state.optionalChainMember) {
          this.raise(Errors.OptionalChainingNoTemplate, {
            at: startLoc
          });
        }

        return this.finishNode(node, "TaggedTemplateExpression");
      }

      atPossibleAsyncArrow(base) {
        return base.type === "Identifier" && base.name === "async" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;
      }

      finishCallExpression(node, optional) {
        if (node.callee.type === "Import") {
          if (node.arguments.length === 2) {
            {
              if (!this.hasPlugin("moduleAttributes")) {
                this.expectPlugin("importAssertions");
              }
            }
          }

          if (node.arguments.length === 0 || node.arguments.length > 2) {
            this.raise(Errors.ImportCallArity, {
              at: node,
              maxArgumentCount: this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1
            });
          } else {
            for (const arg of node.arguments) {
              if (arg.type === "SpreadElement") {
                this.raise(Errors.ImportCallSpreadArgument, {
                  at: arg
                });
              }
            }
          }
        }

        return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
      }

      parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
        const elts = [];
        let first = true;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;

        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);

            if (this.match(close)) {
              if (dynamicImport && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
                this.raise(Errors.ImportCallArgumentTrailingComma, {
                  at: this.state.lastTokStartLoc
                });
              }

              if (nodeForExtra) {
                this.addTrailingCommaExtraToNode(nodeForExtra);
              }

              this.next();
              break;
            }
          }

          elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
        }

        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return elts;
      }

      shouldParseAsyncArrow() {
        return this.match(19) && !this.canInsertSemicolon();
      }

      parseAsyncArrowFromCallExpression(node, call) {
        var _call$extra;

        this.resetPreviousNodeTrailingComments(call);
        this.expect(19);
        this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);

        if (call.innerComments) {
          setInnerComments(node, call.innerComments);
        }

        if (call.callee.trailingComments) {
          setInnerComments(node, call.callee.trailingComments);
        }

        return node;
      }

      parseNoCallExpr() {
        const startLoc = this.state.startLoc;
        return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
      }

      parseExprAtom(refExpressionErrors) {
        let node;
        let decorators = null;
        const {
          type
        } = this.state;

        switch (type) {
          case 79:
            return this.parseSuper();

          case 83:
            node = this.startNode();
            this.next();

            if (this.match(16)) {
              return this.parseImportMetaProperty(node);
            }

            if (!this.match(10)) {
              this.raise(Errors.UnsupportedImport, {
                at: this.state.lastTokStartLoc
              });
            }

            return this.finishNode(node, "Import");

          case 78:
            node = this.startNode();
            this.next();
            return this.finishNode(node, "ThisExpression");

          case 90:
            {
              return this.parseDo(this.startNode(), false);
            }

          case 56:
          case 31:
            {
              this.readRegexp();
              return this.parseRegExpLiteral(this.state.value);
            }

          case 132:
            return this.parseNumericLiteral(this.state.value);

          case 133:
            return this.parseBigIntLiteral(this.state.value);

          case 134:
            return this.parseDecimalLiteral(this.state.value);

          case 131:
            return this.parseStringLiteral(this.state.value);

          case 84:
            return this.parseNullLiteral();

          case 85:
            return this.parseBooleanLiteral(true);

          case 86:
            return this.parseBooleanLiteral(false);

          case 10:
            {
              const canBeArrow = this.state.potentialArrowAt === this.state.start;
              return this.parseParenAndDistinguishExpression(canBeArrow);
            }

          case 2:
          case 1:
            {
              return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
            }

          case 0:
            {
              return this.parseArrayLike(3, true, false, refExpressionErrors);
            }

          case 6:
          case 7:
            {
              return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
            }

          case 5:
            {
              return this.parseObjectLike(8, false, false, refExpressionErrors);
            }

          case 68:
            return this.parseFunctionOrFunctionSent();

          case 26:
            decorators = this.parseDecorators();

          case 80:
            return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);

          case 77:
            return this.parseNewOrNewTarget();

          case 25:
          case 24:
            return this.parseTemplate(false);

          case 15:
            {
              node = this.startNode();
              this.next();
              node.object = null;
              const callee = node.callee = this.parseNoCallExpr();

              if (callee.type === "MemberExpression") {
                return this.finishNode(node, "BindExpression");
              } else {
                throw this.raise(Errors.UnsupportedBind, {
                  at: callee
                });
              }
            }

          case 136:
            {
              this.raise(Errors.PrivateInExpectedIn, {
                at: this.state.startLoc,
                identifierName: this.state.value
              });
              return this.parsePrivateName();
            }

          case 33:
            {
              return this.parseTopicReferenceThenEqualsSign(54, "%");
            }

          case 32:
            {
              return this.parseTopicReferenceThenEqualsSign(44, "^");
            }

          case 37:
          case 38:
            {
              return this.parseTopicReference("hack");
            }

          case 44:
          case 54:
          case 27:
            {
              const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");

              if (pipeProposal) {
                return this.parseTopicReference(pipeProposal);
              } else {
                throw this.unexpected();
              }
            }

          case 47:
            {
              const lookaheadCh = this.input.codePointAt(this.nextTokenStart());

              if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
                this.expectOnePlugin(["jsx", "flow", "typescript"]);
                break;
              } else {
                throw this.unexpected();
              }
            }

          default:
            if (tokenIsIdentifier(type)) {
              if (this.isContextual(125) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {
                return this.parseModuleExpression();
              }

              const canBeArrow = this.state.potentialArrowAt === this.state.start;
              const containsEsc = this.state.containsEsc;
              const id = this.parseIdentifier();

              if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
                const {
                  type: type2
                } = this.state;

                if (type2 === 68) {
                  this.resetPreviousNodeTrailingComments(id);
                  this.next();
                  return this.parseFunction(this.startNodeAtNode(id), void 0, true);
                } else if (tokenIsIdentifier(type2)) {
                  if (this.lookaheadCharCode() === 61) {
                    return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));
                  } else {
                    return id;
                  }
                } else if (type2 === 90) {
                  this.resetPreviousNodeTrailingComments(id);
                  return this.parseDo(this.startNodeAtNode(id), true);
                }
              }

              if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
                this.next();
                return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
              }

              return id;
            } else {
              throw this.unexpected();
            }

        }
      }

      parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
        const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");

        if (pipeProposal) {
          this.state.type = topicTokenType;
          this.state.value = topicTokenValue;
          this.state.pos--;
          this.state.end--;
          this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
          return this.parseTopicReference(pipeProposal);
        } else {
          throw this.unexpected();
        }
      }

      parseTopicReference(pipeProposal) {
        const node = this.startNode();
        const startLoc = this.state.startLoc;
        const tokenType = this.state.type;
        this.next();
        return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
      }

      finishTopicReference(node, startLoc, pipeProposal, tokenType) {
        if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
          const nodeType = pipeProposal === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";

          if (!this.topicReferenceIsAllowedInCurrentContext()) {
            this.raise(pipeProposal === "smart" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {
              at: startLoc
            });
          }

          this.registerTopicReference();
          return this.finishNode(node, nodeType);
        } else {
          throw this.raise(Errors.PipeTopicUnconfiguredToken, {
            at: startLoc,
            token: tokenLabelName(tokenType)
          });
        }
      }

      testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
        switch (pipeProposal) {
          case "hack":
            {
              return this.hasPlugin(["pipelineOperator", {
                topicToken: tokenLabelName(tokenType)
              }]);
            }

          case "smart":
            return tokenType === 27;

          default:
            throw this.raise(Errors.PipeTopicRequiresHackPipes, {
              at: startLoc
            });
        }
      }

      parseAsyncArrowUnaryFunction(node) {
        this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
        const params = [this.parseIdentifier()];
        this.prodParam.exit();

        if (this.hasPrecedingLineBreak()) {
          this.raise(Errors.LineTerminatorBeforeArrow, {
            at: this.state.curPosition()
          });
        }

        this.expect(19);
        return this.parseArrowExpression(node, params, true);
      }

      parseDo(node, isAsync) {
        this.expectPlugin("doExpressions");

        if (isAsync) {
          this.expectPlugin("asyncDoExpressions");
        }

        node.async = isAsync;
        this.next();
        const oldLabels = this.state.labels;
        this.state.labels = [];

        if (isAsync) {
          this.prodParam.enter(PARAM_AWAIT);
          node.body = this.parseBlock();
          this.prodParam.exit();
        } else {
          node.body = this.parseBlock();
        }

        this.state.labels = oldLabels;
        return this.finishNode(node, "DoExpression");
      }

      parseSuper() {
        const node = this.startNode();
        this.next();

        if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
          this.raise(Errors.SuperNotAllowed, {
            at: node
          });
        } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
          this.raise(Errors.UnexpectedSuper, {
            at: node
          });
        }

        if (!this.match(10) && !this.match(0) && !this.match(16)) {
          this.raise(Errors.UnsupportedSuper, {
            at: node
          });
        }

        return this.finishNode(node, "Super");
      }

      parsePrivateName() {
        const node = this.startNode();
        const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));
        const name = this.state.value;
        this.next();
        node.id = this.createIdentifier(id, name);
        return this.finishNode(node, "PrivateName");
      }

      parseFunctionOrFunctionSent() {
        const node = this.startNode();
        this.next();

        if (this.prodParam.hasYield && this.match(16)) {
          const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
          this.next();

          if (this.match(102)) {
            this.expectPlugin("functionSent");
          } else if (!this.hasPlugin("functionSent")) {
            this.unexpected();
          }

          return this.parseMetaProperty(node, meta, "sent");
        }

        return this.parseFunction(node);
      }

      parseMetaProperty(node, meta, propertyName) {
        node.meta = meta;
        const containsEsc = this.state.containsEsc;
        node.property = this.parseIdentifier(true);

        if (node.property.name !== propertyName || containsEsc) {
          this.raise(Errors.UnsupportedMetaProperty, {
            at: node.property,
            target: meta.name,
            onlyValidPropertyName: propertyName
          });
        }

        return this.finishNode(node, "MetaProperty");
      }

      parseImportMetaProperty(node) {
        const id = this.createIdentifier(this.startNodeAtNode(node), "import");
        this.next();

        if (this.isContextual(100)) {
          if (!this.inModule) {
            this.raise(Errors.ImportMetaOutsideModule, {
              at: id
            });
          }

          this.sawUnambiguousESM = true;
        }

        return this.parseMetaProperty(node, id, "meta");
      }

      parseLiteralAtNode(value, type, node) {
        this.addExtra(node, "rawValue", value);
        this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
        node.value = value;
        this.next();
        return this.finishNode(node, type);
      }

      parseLiteral(value, type) {
        const node = this.startNode();
        return this.parseLiteralAtNode(value, type, node);
      }

      parseStringLiteral(value) {
        return this.parseLiteral(value, "StringLiteral");
      }

      parseNumericLiteral(value) {
        return this.parseLiteral(value, "NumericLiteral");
      }

      parseBigIntLiteral(value) {
        return this.parseLiteral(value, "BigIntLiteral");
      }

      parseDecimalLiteral(value) {
        return this.parseLiteral(value, "DecimalLiteral");
      }

      parseRegExpLiteral(value) {
        const node = this.parseLiteral(value.value, "RegExpLiteral");
        node.pattern = value.pattern;
        node.flags = value.flags;
        return node;
      }

      parseBooleanLiteral(value) {
        const node = this.startNode();
        node.value = value;
        this.next();
        return this.finishNode(node, "BooleanLiteral");
      }

      parseNullLiteral() {
        const node = this.startNode();
        this.next();
        return this.finishNode(node, "NullLiteral");
      }

      parseParenAndDistinguishExpression(canBeArrow) {
        const startLoc = this.state.startLoc;
        let val;
        this.next();
        this.expressionScope.enter(newArrowHeadScope());
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.maybeInArrowParameters = true;
        this.state.inFSharpPipelineDirectBody = false;
        const innerStartLoc = this.state.startLoc;
        const exprList = [];
        const refExpressionErrors = new ExpressionErrors();
        let first = true;
        let spreadStartLoc;
        let optionalCommaStartLoc;

        while (!this.match(11)) {
          if (first) {
            first = false;
          } else {
            this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);

            if (this.match(11)) {
              optionalCommaStartLoc = this.state.startLoc;
              break;
            }
          }

          if (this.match(21)) {
            const spreadNodeStartLoc = this.state.startLoc;
            spreadStartLoc = this.state.startLoc;
            exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));

            if (!this.checkCommaAfterRest(41)) {
              break;
            }
          } else {
            exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
          }
        }

        const innerEndLoc = this.state.lastTokEndLoc;
        this.expect(11);
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        let arrowNode = this.startNodeAt(startLoc);

        if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
          this.checkDestructuringPrivate(refExpressionErrors);
          this.expressionScope.validateAsPattern();
          this.expressionScope.exit();
          this.parseArrowExpression(arrowNode, exprList, false);
          return arrowNode;
        }

        this.expressionScope.exit();

        if (!exprList.length) {
          this.unexpected(this.state.lastTokStartLoc);
        }

        if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);
        if (spreadStartLoc) this.unexpected(spreadStartLoc);
        this.checkExpressionErrors(refExpressionErrors, true);
        this.toReferencedListDeep(exprList, true);

        if (exprList.length > 1) {
          val = this.startNodeAt(innerStartLoc);
          val.expressions = exprList;
          this.finishNode(val, "SequenceExpression");
          this.resetEndLocation(val, innerEndLoc);
        } else {
          val = exprList[0];
        }

        return this.wrapParenthesis(startLoc, val);
      }

      wrapParenthesis(startLoc, expression) {
        if (!this.options.createParenthesizedExpressions) {
          this.addExtra(expression, "parenthesized", true);
          this.addExtra(expression, "parenStart", startLoc.index);
          this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);
          return expression;
        }

        const parenExpression = this.startNodeAt(startLoc);
        parenExpression.expression = expression;
        return this.finishNode(parenExpression, "ParenthesizedExpression");
      }

      shouldParseArrow(params) {
        return !this.canInsertSemicolon();
      }

      parseArrow(node) {
        if (this.eat(19)) {
          return node;
        }
      }

      parseParenItem(node, startLoc) {
        return node;
      }

      parseNewOrNewTarget() {
        const node = this.startNode();
        this.next();

        if (this.match(16)) {
          const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
          this.next();
          const metaProp = this.parseMetaProperty(node, meta, "target");

          if (!this.scope.inNonArrowFunction && !this.scope.inClass) {
            this.raise(Errors.UnexpectedNewTarget, {
              at: metaProp
            });
          }

          return metaProp;
        }

        return this.parseNew(node);
      }

      parseNew(node) {
        this.parseNewCallee(node);

        if (this.eat(10)) {
          const args = this.parseExprList(11);
          this.toReferencedList(args);
          node.arguments = args;
        } else {
          node.arguments = [];
        }

        return this.finishNode(node, "NewExpression");
      }

      parseNewCallee(node) {
        node.callee = this.parseNoCallExpr();

        if (node.callee.type === "Import") {
          this.raise(Errors.ImportCallNotNewExpression, {
            at: node.callee
          });
        } else if (this.isOptionalChain(node.callee)) {
          this.raise(Errors.OptionalChainingNoNew, {
            at: this.state.lastTokEndLoc
          });
        } else if (this.eat(18)) {
          this.raise(Errors.OptionalChainingNoNew, {
            at: this.state.startLoc
          });
        }
      }

      parseTemplateElement(isTagged) {
        const {
          start,
          startLoc,
          end,
          value
        } = this.state;
        const elemStart = start + 1;
        const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));

        if (value === null) {
          if (!isTagged) {
            this.raise(Errors.InvalidEscapeSequenceTemplate, {
              at: createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1)
            });
          }
        }

        const isTail = this.match(24);
        const endOffset = isTail ? -1 : -2;
        const elemEnd = end + endOffset;
        elem.value = {
          raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
          cooked: value === null ? null : value.slice(1, endOffset)
        };
        elem.tail = isTail;
        this.next();
        const finishedNode = this.finishNode(elem, "TemplateElement");
        this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
        return finishedNode;
      }

      parseTemplate(isTagged) {
        const node = this.startNode();
        node.expressions = [];
        let curElt = this.parseTemplateElement(isTagged);
        node.quasis = [curElt];

        while (!curElt.tail) {
          node.expressions.push(this.parseTemplateSubstitution());
          this.readTemplateContinuation();
          node.quasis.push(curElt = this.parseTemplateElement(isTagged));
        }

        return this.finishNode(node, "TemplateLiteral");
      }

      parseTemplateSubstitution() {
        return this.parseExpression();
      }

      parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
        if (isRecord) {
          this.expectPlugin("recordAndTuple");
        }

        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const propHash = Object.create(null);
        let first = true;
        const node = this.startNode();
        node.properties = [];
        this.next();

        while (!this.match(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);

            if (this.match(close)) {
              this.addTrailingCommaExtraToNode(node);
              break;
            }
          }

          let prop;

          if (isPattern) {
            prop = this.parseBindingProperty();
          } else {
            prop = this.parsePropertyDefinition(refExpressionErrors);
            this.checkProto(prop, isRecord, propHash, refExpressionErrors);
          }

          if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
            this.raise(Errors.InvalidRecordProperty, {
              at: prop
            });
          }

          if (prop.shorthand) {
            this.addExtra(prop, "shorthand", true);
          }

          node.properties.push(prop);
        }

        this.next();
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        let type = "ObjectExpression";

        if (isPattern) {
          type = "ObjectPattern";
        } else if (isRecord) {
          type = "RecordExpression";
        }

        return this.finishNode(node, type);
      }

      addTrailingCommaExtraToNode(node) {
        this.addExtra(node, "trailingComma", this.state.lastTokStart);
        this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
      }

      maybeAsyncOrAccessorProp(prop) {
        return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
      }

      parsePropertyDefinition(refExpressionErrors) {
        let decorators = [];

        if (this.match(26)) {
          if (this.hasPlugin("decorators")) {
            this.raise(Errors.UnsupportedPropertyDecorator, {
              at: this.state.startLoc
            });
          }

          while (this.match(26)) {
            decorators.push(this.parseDecorator());
          }
        }

        const prop = this.startNode();
        let isAsync = false;
        let isAccessor = false;
        let startLoc;

        if (this.match(21)) {
          if (decorators.length) this.unexpected();
          return this.parseSpread();
        }

        if (decorators.length) {
          prop.decorators = decorators;
          decorators = [];
        }

        prop.method = false;

        if (refExpressionErrors) {
          startLoc = this.state.startLoc;
        }

        let isGenerator = this.eat(55);
        this.parsePropertyNamePrefixOperator(prop);
        const containsEsc = this.state.containsEsc;
        const key = this.parsePropertyName(prop, refExpressionErrors);

        if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
          const keyName = key.name;

          if (keyName === "async" && !this.hasPrecedingLineBreak()) {
            isAsync = true;
            this.resetPreviousNodeTrailingComments(key);
            isGenerator = this.eat(55);
            this.parsePropertyName(prop);
          }

          if (keyName === "get" || keyName === "set") {
            isAccessor = true;
            this.resetPreviousNodeTrailingComments(key);
            prop.kind = keyName;

            if (this.match(55)) {
              isGenerator = true;
              this.raise(Errors.AccessorIsGenerator, {
                at: this.state.curPosition(),
                kind: keyName
              });
              this.next();
            }

            this.parsePropertyName(prop);
          }
        }

        return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
      }

      getGetterSetterExpectedParamCount(method) {
        return method.kind === "get" ? 0 : 1;
      }

      getObjectOrClassMethodParams(method) {
        return method.params;
      }

      checkGetterSetterParams(method) {
        var _params;

        const paramCount = this.getGetterSetterExpectedParamCount(method);
        const params = this.getObjectOrClassMethodParams(method);

        if (params.length !== paramCount) {
          this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, {
            at: method
          });
        }

        if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
          this.raise(Errors.BadSetterRestParameter, {
            at: method
          });
        }
      }

      parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
        if (isAccessor) {
          const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
          this.checkGetterSetterParams(finishedProp);
          return finishedProp;
        }

        if (isAsync || isGenerator || this.match(10)) {
          if (isPattern) this.unexpected();
          prop.kind = "method";
          prop.method = true;
          return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
        }
      }

      parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
        prop.shorthand = false;

        if (this.eat(14)) {
          prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
          return this.finishNode(prop, "ObjectProperty");
        }

        if (!prop.computed && prop.key.type === "Identifier") {
          this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);

          if (isPattern) {
            prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
          } else if (this.match(29)) {
            const shorthandAssignLoc = this.state.startLoc;

            if (refExpressionErrors != null) {
              if (refExpressionErrors.shorthandAssignLoc === null) {
                refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
              }
            } else {
              this.raise(Errors.InvalidCoverInitializedName, {
                at: shorthandAssignLoc
              });
            }

            prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
          } else {
            prop.value = cloneIdentifier(prop.key);
          }

          prop.shorthand = true;
          return this.finishNode(prop, "ObjectProperty");
        }
      }

      parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
        if (!node) this.unexpected();
        return node;
      }

      parsePropertyName(prop, refExpressionErrors) {
        if (this.eat(0)) {
          prop.computed = true;
          prop.key = this.parseMaybeAssignAllowIn();
          this.expect(3);
        } else {
          const {
            type,
            value
          } = this.state;
          let key;

          if (tokenIsKeywordOrIdentifier(type)) {
            key = this.parseIdentifier(true);
          } else {
            switch (type) {
              case 132:
                key = this.parseNumericLiteral(value);
                break;

              case 131:
                key = this.parseStringLiteral(value);
                break;

              case 133:
                key = this.parseBigIntLiteral(value);
                break;

              case 134:
                key = this.parseDecimalLiteral(value);
                break;

              case 136:
                {
                  const privateKeyLoc = this.state.startLoc;

                  if (refExpressionErrors != null) {
                    if (refExpressionErrors.privateKeyLoc === null) {
                      refExpressionErrors.privateKeyLoc = privateKeyLoc;
                    }
                  } else {
                    this.raise(Errors.UnexpectedPrivateField, {
                      at: privateKeyLoc
                    });
                  }

                  key = this.parsePrivateName();
                  break;
                }

              default:
                throw this.unexpected();
            }
          }

          prop.key = key;

          if (type !== 136) {
            prop.computed = false;
          }
        }

        return prop.key;
      }

      initFunction(node, isAsync) {
        node.id = null;
        node.generator = false;
        node.async = !!isAsync;
      }

      parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
        this.initFunction(node, isAsync);
        node.generator = !!isGenerator;
        const allowModifiers = isConstructor;
        this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
        this.prodParam.enter(functionFlags(isAsync, node.generator));
        this.parseFunctionParams(node, allowModifiers);
        const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
        this.prodParam.exit();
        this.scope.exit();
        return finishedNode;
      }

      parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        if (isTuple) {
          this.expectPlugin("recordAndTuple");
        }

        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const node = this.startNode();
        this.next();
        node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
      }

      parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
        let flags = functionFlags(isAsync, false);

        if (!this.match(5) && this.prodParam.hasIn) {
          flags |= PARAM_IN;
        }

        this.prodParam.enter(flags);
        this.initFunction(node, isAsync);
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;

        if (params) {
          this.state.maybeInArrowParameters = true;
          this.setArrowFunctionParameters(node, params, trailingCommaLoc);
        }

        this.state.maybeInArrowParameters = false;
        this.parseFunctionBody(node, true);
        this.prodParam.exit();
        this.scope.exit();
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return this.finishNode(node, "ArrowFunctionExpression");
      }

      setArrowFunctionParameters(node, params, trailingCommaLoc) {
        this.toAssignableList(params, trailingCommaLoc, false);
        node.params = params;
      }

      parseFunctionBodyAndFinish(node, type, isMethod = false) {
        this.parseFunctionBody(node, false, isMethod);
        return this.finishNode(node, type);
      }

      parseFunctionBody(node, allowExpression, isMethod = false) {
        const isExpression = allowExpression && !this.match(5);
        this.expressionScope.enter(newExpressionScope());

        if (isExpression) {
          node.body = this.parseMaybeAssign();
          this.checkParams(node, false, allowExpression, false);
        } else {
          const oldStrict = this.state.strict;
          const oldLabels = this.state.labels;
          this.state.labels = [];
          this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);
          node.body = this.parseBlock(true, false, hasStrictModeDirective => {
            const nonSimple = !this.isSimpleParamList(node.params);

            if (hasStrictModeDirective && nonSimple) {
              this.raise(Errors.IllegalLanguageModeDirective, {
                at: (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.loc.end : node
              });
            }

            const strictModeChanged = !oldStrict && this.state.strict;
            this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);

            if (this.state.strict && node.id) {
              this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);
            }
          });
          this.prodParam.exit();
          this.state.labels = oldLabels;
        }

        this.expressionScope.exit();
      }

      isSimpleParameter(node) {
        return node.type === "Identifier";
      }

      isSimpleParamList(params) {
        for (let i = 0, len = params.length; i < len; i++) {
          if (!this.isSimpleParameter(params[i])) return false;
        }

        return true;
      }

      checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
        const checkClashes = !allowDuplicates && new Set();
        const formalParameters = {
          type: "FormalParameters"
        };

        for (const param of node.params) {
          this.checkLVal(param, {
            in: formalParameters,
            binding: BIND_VAR,
            checkClashes,
            strictModeChanged
          });
        }
      }

      parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
        const elts = [];
        let first = true;

        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);

            if (this.match(close)) {
              if (nodeForExtra) {
                this.addTrailingCommaExtraToNode(nodeForExtra);
              }

              this.next();
              break;
            }
          }

          elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
        }

        return elts;
      }

      parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
        let elt;

        if (this.match(12)) {
          if (!allowEmpty) {
            this.raise(Errors.UnexpectedToken, {
              at: this.state.curPosition(),
              unexpected: ","
            });
          }

          elt = null;
        } else if (this.match(21)) {
          const spreadNodeStartLoc = this.state.startLoc;
          elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
        } else if (this.match(17)) {
          this.expectPlugin("partialApplication");

          if (!allowPlaceholder) {
            this.raise(Errors.UnexpectedArgumentPlaceholder, {
              at: this.state.startLoc
            });
          }

          const node = this.startNode();
          this.next();
          elt = this.finishNode(node, "ArgumentPlaceholder");
        } else {
          elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
        }

        return elt;
      }

      parseIdentifier(liberal) {
        const node = this.startNode();
        const name = this.parseIdentifierName(liberal);
        return this.createIdentifier(node, name);
      }

      createIdentifier(node, name) {
        node.name = name;
        node.loc.identifierName = name;
        return this.finishNode(node, "Identifier");
      }

      parseIdentifierName(liberal) {
        let name;
        const {
          startLoc,
          type
        } = this.state;

        if (tokenIsKeywordOrIdentifier(type)) {
          name = this.state.value;
        } else {
          throw this.unexpected();
        }

        const tokenIsKeyword2 = tokenKeywordOrIdentifierIsKeyword(type);

        if (liberal) {
          if (tokenIsKeyword2) {
            this.replaceToken(130);
          }
        } else {
          this.checkReservedWord(name, startLoc, tokenIsKeyword2, false);
        }

        this.next();
        return name;
      }

      checkReservedWord(word, startLoc, checkKeywords, isBinding) {
        if (word.length > 10) {
          return;
        }

        if (!canBeReservedWord(word)) {
          return;
        }

        if (word === "yield") {
          if (this.prodParam.hasYield) {
            this.raise(Errors.YieldBindingIdentifier, {
              at: startLoc
            });
            return;
          }
        } else if (word === "await") {
          if (this.prodParam.hasAwait) {
            this.raise(Errors.AwaitBindingIdentifier, {
              at: startLoc
            });
            return;
          }

          if (this.scope.inStaticBlock) {
            this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {
              at: startLoc
            });
            return;
          }

          this.expressionScope.recordAsyncArrowParametersError({
            at: startLoc
          });
        } else if (word === "arguments") {
          if (this.scope.inClassAndNotInNonArrowFunction) {
            this.raise(Errors.ArgumentsInClass, {
              at: startLoc
            });
            return;
          }
        }

        if (checkKeywords && isKeyword(word)) {
          this.raise(Errors.UnexpectedKeyword, {
            at: startLoc,
            keyword: word
          });
          return;
        }

        const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;

        if (reservedTest(word, this.inModule)) {
          this.raise(Errors.UnexpectedReservedWord, {
            at: startLoc,
            reservedWord: word
          });
        }
      }

      isAwaitAllowed() {
        if (this.prodParam.hasAwait) return true;

        if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
          return true;
        }

        return false;
      }

      parseAwait(startLoc) {
        const node = this.startNodeAt(startLoc);
        this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {
          at: node
        });

        if (this.eat(55)) {
          this.raise(Errors.ObsoleteAwaitStar, {
            at: node
          });
        }

        if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
          if (this.isAmbiguousAwait()) {
            this.ambiguousScriptDifferentAst = true;
          } else {
            this.sawUnambiguousESM = true;
          }
        }

        if (!this.state.soloAwait) {
          node.argument = this.parseMaybeUnary(null, true);
        }

        return this.finishNode(node, "AwaitExpression");
      }

      isAmbiguousAwait() {
        if (this.hasPrecedingLineBreak()) return true;
        const {
          type
        } = this.state;
        return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 101 && !this.state.containsEsc || type === 135 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
      }

      parseYield() {
        const node = this.startNode();
        this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {
          at: node
        });
        this.next();
        let delegating = false;
        let argument = null;

        if (!this.hasPrecedingLineBreak()) {
          delegating = this.eat(55);

          switch (this.state.type) {
            case 13:
            case 137:
            case 8:
            case 11:
            case 3:
            case 9:
            case 14:
            case 12:
              if (!delegating) break;

            default:
              argument = this.parseMaybeAssign();
          }
        }

        node.delegate = delegating;
        node.argument = argument;
        return this.finishNode(node, "YieldExpression");
      }

      checkPipelineAtInfixOperator(left, leftStartLoc) {
        if (this.hasPlugin(["pipelineOperator", {
          proposal: "smart"
        }])) {
          if (left.type === "SequenceExpression") {
            this.raise(Errors.PipelineHeadSequenceExpression, {
              at: leftStartLoc
            });
          }
        }
      }

      parseSmartPipelineBodyInStyle(childExpr, startLoc) {
        if (this.isSimpleReference(childExpr)) {
          const bodyNode = this.startNodeAt(startLoc);
          bodyNode.callee = childExpr;
          return this.finishNode(bodyNode, "PipelineBareFunction");
        } else {
          const bodyNode = this.startNodeAt(startLoc);
          this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
          bodyNode.expression = childExpr;
          return this.finishNode(bodyNode, "PipelineTopicExpression");
        }
      }

      isSimpleReference(expression) {
        switch (expression.type) {
          case "MemberExpression":
            return !expression.computed && this.isSimpleReference(expression.object);

          case "Identifier":
            return true;

          default:
            return false;
        }
      }

      checkSmartPipeTopicBodyEarlyErrors(startLoc) {
        if (this.match(19)) {
          throw this.raise(Errors.PipelineBodyNoArrow, {
            at: this.state.startLoc
          });
        }

        if (!this.topicReferenceWasUsedInCurrentContext()) {
          this.raise(Errors.PipelineTopicUnused, {
            at: startLoc
          });
        }
      }

      withTopicBindingContext(callback) {
        const outerContextTopicState = this.state.topicContext;
        this.state.topicContext = {
          maxNumOfResolvableTopics: 1,
          maxTopicIndex: null
        };

        try {
          return callback();
        } finally {
          this.state.topicContext = outerContextTopicState;
        }
      }

      withSmartMixTopicForbiddingContext(callback) {
        if (this.hasPlugin(["pipelineOperator", {
          proposal: "smart"
        }])) {
          const outerContextTopicState = this.state.topicContext;
          this.state.topicContext = {
            maxNumOfResolvableTopics: 0,
            maxTopicIndex: null
          };

          try {
            return callback();
          } finally {
            this.state.topicContext = outerContextTopicState;
          }
        } else {
          return callback();
        }
      }

      withSoloAwaitPermittingContext(callback) {
        const outerContextSoloAwaitState = this.state.soloAwait;
        this.state.soloAwait = true;

        try {
          return callback();
        } finally {
          this.state.soloAwait = outerContextSoloAwaitState;
        }
      }

      allowInAnd(callback) {
        const flags = this.prodParam.currentFlags();
        const prodParamToSet = PARAM_IN & ~flags;

        if (prodParamToSet) {
          this.prodParam.enter(flags | PARAM_IN);

          try {
            return callback();
          } finally {
            this.prodParam.exit();
          }
        }

        return callback();
      }

      disallowInAnd(callback) {
        const flags = this.prodParam.currentFlags();
        const prodParamToClear = PARAM_IN & flags;

        if (prodParamToClear) {
          this.prodParam.enter(flags & ~PARAM_IN);

          try {
            return callback();
          } finally {
            this.prodParam.exit();
          }
        }

        return callback();
      }

      registerTopicReference() {
        this.state.topicContext.maxTopicIndex = 0;
      }

      topicReferenceIsAllowedInCurrentContext() {
        return this.state.topicContext.maxNumOfResolvableTopics >= 1;
      }

      topicReferenceWasUsedInCurrentContext() {
        return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
      }

      parseFSharpPipelineBody(prec) {
        const startLoc = this.state.startLoc;
        this.state.potentialArrowAt = this.state.start;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = true;
        const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return ret;
      }

      parseModuleExpression() {
        this.expectPlugin("moduleBlocks");
        const node = this.startNode();
        this.next();

        if (!this.match(5)) {
          this.unexpected(null, 5);
        }

        const program = this.startNodeAt(this.state.endLoc);
        this.next();
        const revertScopes = this.initializeScopes(true);
        this.enterInitialScopes();

        try {
          node.body = this.parseProgram(program, 8, "module");
        } finally {
          revertScopes();
        }

        return this.finishNode(node, "ModuleExpression");
      }

      parsePropertyNamePrefixOperator(prop) {}

    };
    var loopLabel = {
      kind: "loop"
    };
    var switchLabel = {
      kind: "switch"
    };
    var FUNC_NO_FLAGS = 0;
    var FUNC_STATEMENT = 1;
    var FUNC_HANGING_STATEMENT = 2;
    var FUNC_NULLABLE_ID = 4;
    var loneSurrogate = /[\uD800-\uDFFF]/u;
    var keywordRelationalOperator = /in(?:stanceof)?/y;

    function babel7CompatTokens(tokens, input) {
      for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        const {
          type
        } = token;

        if (typeof type === "number") {
          {
            if (type === 136) {
              const {
                loc,
                start,
                value,
                end
              } = token;
              const hashEndPos = start + 1;
              const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
              tokens.splice(i, 1, new Token({
                type: getExportedToken(27),
                value: "#",
                start,
                end: hashEndPos,
                startLoc: loc.start,
                endLoc: hashEndLoc
              }), new Token({
                type: getExportedToken(130),
                value,
                start: hashEndPos,
                end,
                startLoc: hashEndLoc,
                endLoc: loc.end
              }));
              i++;
              continue;
            }

            if (tokenIsTemplate(type)) {
              const {
                loc,
                start,
                value,
                end
              } = token;
              const backquoteEnd = start + 1;
              const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
              let startToken;

              if (input.charCodeAt(start) === 96) {
                startToken = new Token({
                  type: getExportedToken(22),
                  value: "`",
                  start,
                  end: backquoteEnd,
                  startLoc: loc.start,
                  endLoc: backquoteEndLoc
                });
              } else {
                startToken = new Token({
                  type: getExportedToken(8),
                  value: "}",
                  start,
                  end: backquoteEnd,
                  startLoc: loc.start,
                  endLoc: backquoteEndLoc
                });
              }

              let templateValue, templateElementEnd, templateElementEndLoc, endToken;

              if (type === 24) {
                templateElementEnd = end - 1;
                templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
                templateValue = value === null ? null : value.slice(1, -1);
                endToken = new Token({
                  type: getExportedToken(22),
                  value: "`",
                  start: templateElementEnd,
                  end,
                  startLoc: templateElementEndLoc,
                  endLoc: loc.end
                });
              } else {
                templateElementEnd = end - 2;
                templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
                templateValue = value === null ? null : value.slice(1, -2);
                endToken = new Token({
                  type: getExportedToken(23),
                  value: "${",
                  start: templateElementEnd,
                  end,
                  startLoc: templateElementEndLoc,
                  endLoc: loc.end
                });
              }

              tokens.splice(i, 1, startToken, new Token({
                type: getExportedToken(20),
                value: templateValue,
                start: backquoteEnd,
                end: templateElementEnd,
                startLoc: backquoteEndLoc,
                endLoc: templateElementEndLoc
              }), endToken);
              i += 2;
              continue;
            }
          }
          token.type = getExportedToken(type);
        }
      }

      return tokens;
    }

    var StatementParser = class extends ExpressionParser {
      parseTopLevel(file, program) {
        file.program = this.parseProgram(program);
        file.comments = this.state.comments;

        if (this.options.tokens) {
          file.tokens = babel7CompatTokens(this.tokens, this.input);
        }

        return this.finishNode(file, "File");
      }

      parseProgram(program, end = 137, sourceType = this.options.sourceType) {
        program.sourceType = sourceType;
        program.interpreter = this.parseInterpreterDirective();
        this.parseBlockBody(program, true, true, end);

        if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
          for (const [localName, at] of Array.from(this.scope.undefinedExports)) {
            this.raise(Errors.ModuleExportUndefined, {
              at,
              localName
            });
          }
        }

        let finishedProgram;

        if (end === 137) {
          finishedProgram = this.finishNode(program, "Program");
        } else {
          finishedProgram = this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1));
        }

        return finishedProgram;
      }

      stmtToDirective(stmt) {
        const directive = stmt;
        directive.type = "Directive";
        directive.value = directive.expression;
        delete directive.expression;
        const directiveLiteral = directive.value;
        const expressionValue = directiveLiteral.value;
        const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
        const val = directiveLiteral.value = raw.slice(1, -1);
        this.addExtra(directiveLiteral, "raw", raw);
        this.addExtra(directiveLiteral, "rawValue", val);
        this.addExtra(directiveLiteral, "expressionValue", expressionValue);
        directiveLiteral.type = "DirectiveLiteral";
        return directive;
      }

      parseInterpreterDirective() {
        if (!this.match(28)) {
          return null;
        }

        const node = this.startNode();
        node.value = this.state.value;
        this.next();
        return this.finishNode(node, "InterpreterDirective");
      }

      isLet(context) {
        if (!this.isContextual(99)) {
          return false;
        }

        return this.hasFollowingIdentifier(context);
      }

      hasFollowingIdentifier(context) {
        const next = this.nextTokenStart();
        const nextCh = this.codePointAtPos(next);

        if (nextCh === 92 || nextCh === 91) {
          return true;
        }

        if (context) return false;
        if (nextCh === 123) return true;

        if (isIdentifierStart(nextCh)) {
          keywordRelationalOperator.lastIndex = next;

          if (keywordRelationalOperator.test(this.input)) {
            const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);

            if (!isIdentifierChar(endCh) && endCh !== 92) {
              return false;
            }
          }

          return true;
        }

        return false;
      }

      startsUsingForOf() {
        const lookahead = this.lookahead();

        if (lookahead.type === 101 && !lookahead.containsEsc) {
          return false;
        } else {
          this.expectPlugin("explicitResourceManagement");
          return true;
        }
      }

      parseStatement(context, topLevel) {
        let decorators = null;

        if (this.match(26)) {
          decorators = this.parseDecorators(true);
        }

        return this.parseStatementContent(context, topLevel, decorators);
      }

      parseStatementContent(context, topLevel, decorators) {
        const starttype = this.state.type;
        const node = this.startNode();

        switch (starttype) {
          case 60:
            return this.parseBreakContinueStatement(node, true);

          case 63:
            return this.parseBreakContinueStatement(node, false);

          case 64:
            return this.parseDebuggerStatement(node);

          case 90:
            return this.parseDoStatement(node);

          case 91:
            return this.parseForStatement(node);

          case 68:
            if (this.lookaheadCharCode() === 46) break;

            if (context) {
              if (this.state.strict) {
                this.raise(Errors.StrictFunction, {
                  at: this.state.startLoc
                });
              } else if (context !== "if" && context !== "label") {
                this.raise(Errors.SloppyFunction, {
                  at: this.state.startLoc
                });
              }
            }

            return this.parseFunctionStatement(node, false, !context);

          case 80:
            if (context) this.unexpected();
            return this.parseClass(this.maybeTakeDecorators(decorators, node), true);

          case 69:
            return this.parseIfStatement(node);

          case 70:
            return this.parseReturnStatement(node);

          case 71:
            return this.parseSwitchStatement(node);

          case 72:
            return this.parseThrowStatement(node);

          case 73:
            return this.parseTryStatement(node);

          case 105:
            if (this.hasFollowingLineBreak()) {
              break;
            }

          case 99:
            if (this.state.containsEsc || !this.hasFollowingIdentifier(context)) {
              break;
            }

          case 75:
          case 74:
            {
              const kind = this.state.value;

              if (kind === "using") {
                this.expectPlugin("explicitResourceManagement");

                if (!this.scope.inModule && this.scope.inTopLevel) {
                  this.raise(Errors.UnexpectedUsingDeclaration, {
                    at: this.state.startLoc
                  });
                }
              }

              if (context && kind !== "var") {
                this.raise(Errors.UnexpectedLexicalDeclaration, {
                  at: this.state.startLoc
                });
              }

              return this.parseVarStatement(node, kind);
            }

          case 92:
            return this.parseWhileStatement(node);

          case 76:
            return this.parseWithStatement(node);

          case 5:
            return this.parseBlock();

          case 13:
            return this.parseEmptyStatement(node);

          case 83:
            {
              const nextTokenCharCode = this.lookaheadCharCode();

              if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
                break;
              }
            }

          case 82:
            {
              if (!this.options.allowImportExportEverywhere && !topLevel) {
                this.raise(Errors.UnexpectedImportExport, {
                  at: this.state.startLoc
                });
              }

              this.next();
              let result;

              if (starttype === 83) {
                result = this.parseImport(node);

                if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) {
                  this.sawUnambiguousESM = true;
                }
              } else {
                result = this.parseExport(node, decorators);

                if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") {
                  this.sawUnambiguousESM = true;
                }
              }

              this.assertModuleNodeAllowed(result);
              return result;
            }

          default:
            {
              if (this.isAsyncFunction()) {
                if (context) {
                  this.raise(Errors.AsyncFunctionInSingleStatementContext, {
                    at: this.state.startLoc
                  });
                }

                this.next();
                return this.parseFunctionStatement(node, true, !context);
              }
            }
        }

        const maybeName = this.state.value;
        const expr = this.parseExpression();

        if (tokenIsIdentifier(starttype) && expr.type === "Identifier" && this.eat(14)) {
          return this.parseLabeledStatement(node, maybeName, expr, context);
        } else {
          return this.parseExpressionStatement(node, expr, decorators);
        }
      }

      assertModuleNodeAllowed(node) {
        if (!this.options.allowImportExportEverywhere && !this.inModule) {
          this.raise(Errors.ImportOutsideModule, {
            at: node
          });
        }
      }

      decoratorsEnabledBeforeExport() {
        if (this.hasPlugin("decorators-legacy")) return true;
        return this.hasPlugin("decorators") && !!this.getPluginOption("decorators", "decoratorsBeforeExport");
      }

      maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
        if (maybeDecorators) {
          classNode.decorators = maybeDecorators;
          this.resetStartLocationFromNode(classNode, maybeDecorators[0]);
          if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);
        }

        return classNode;
      }

      canHaveLeadingDecorator() {
        return this.match(80);
      }

      parseDecorators(allowExport) {
        const decorators = [];

        do {
          decorators.push(this.parseDecorator());
        } while (this.match(26));

        if (this.match(82)) {
          if (!allowExport) {
            this.unexpected();
          }

          if (!this.decoratorsEnabledBeforeExport()) {
            this.raise(Errors.DecoratorExportClass, {
              at: this.state.startLoc
            });
          }
        } else if (!this.canHaveLeadingDecorator()) {
          throw this.raise(Errors.UnexpectedLeadingDecorator, {
            at: this.state.startLoc
          });
        }

        return decorators;
      }

      parseDecorator() {
        this.expectOnePlugin(["decorators", "decorators-legacy"]);
        const node = this.startNode();
        this.next();

        if (this.hasPlugin("decorators")) {
          const startLoc = this.state.startLoc;
          let expr;

          if (this.match(10)) {
            const startLoc2 = this.state.startLoc;
            this.next();
            expr = this.parseExpression();
            this.expect(11);
            expr = this.wrapParenthesis(startLoc2, expr);
            const paramsStartLoc = this.state.startLoc;
            node.expression = this.parseMaybeDecoratorArguments(expr);

            if (this.getPluginOption("decorators", "allowCallParenthesized") === false && node.expression !== expr) {
              this.raise(Errors.DecoratorArgumentsOutsideParentheses, {
                at: paramsStartLoc
              });
            }
          } else {
            expr = this.parseIdentifier(false);

            while (this.eat(16)) {
              const node2 = this.startNodeAt(startLoc);
              node2.object = expr;

              if (this.match(136)) {
                this.classScope.usePrivateName(this.state.value, this.state.startLoc);
                node2.property = this.parsePrivateName();
              } else {
                node2.property = this.parseIdentifier(true);
              }

              node2.computed = false;
              expr = this.finishNode(node2, "MemberExpression");
            }

            node.expression = this.parseMaybeDecoratorArguments(expr);
          }
        } else {
          node.expression = this.parseExprSubscripts();
        }

        return this.finishNode(node, "Decorator");
      }

      parseMaybeDecoratorArguments(expr) {
        if (this.eat(10)) {
          const node = this.startNodeAtNode(expr);
          node.callee = expr;
          node.arguments = this.parseCallExpressionArguments(11, false);
          this.toReferencedList(node.arguments);
          return this.finishNode(node, "CallExpression");
        }

        return expr;
      }

      parseBreakContinueStatement(node, isBreak) {
        this.next();

        if (this.isLineTerminator()) {
          node.label = null;
        } else {
          node.label = this.parseIdentifier();
          this.semicolon();
        }

        this.verifyBreakContinue(node, isBreak);
        return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
      }

      verifyBreakContinue(node, isBreak) {
        let i;

        for (i = 0; i < this.state.labels.length; ++i) {
          const lab = this.state.labels[i];

          if (node.label == null || lab.name === node.label.name) {
            if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
            if (node.label && isBreak) break;
          }
        }

        if (i === this.state.labels.length) {
          const type = isBreak ? "BreakStatement" : "ContinueStatement";
          this.raise(Errors.IllegalBreakContinue, {
            at: node,
            type
          });
        }
      }

      parseDebuggerStatement(node) {
        this.next();
        this.semicolon();
        return this.finishNode(node, "DebuggerStatement");
      }

      parseHeaderExpression() {
        this.expect(10);
        const val = this.parseExpression();
        this.expect(11);
        return val;
      }

      parseDoStatement(node) {
        this.next();
        this.state.labels.push(loopLabel);
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("do"));
        this.state.labels.pop();
        this.expect(92);
        node.test = this.parseHeaderExpression();
        this.eat(13);
        return this.finishNode(node, "DoWhileStatement");
      }

      parseForStatement(node) {
        this.next();
        this.state.labels.push(loopLabel);
        let awaitAt = null;

        if (this.isAwaitAllowed() && this.eatContextual(96)) {
          awaitAt = this.state.lastTokStartLoc;
        }

        this.scope.enter(SCOPE_OTHER);
        this.expect(10);

        if (this.match(13)) {
          if (awaitAt !== null) {
            this.unexpected(awaitAt);
          }

          return this.parseFor(node, null);
        }

        const startsWithLet = this.isContextual(99);
        const startsWithUsing = this.isContextual(105) && !this.hasFollowingLineBreak();
        const isLetOrUsing = startsWithLet && this.hasFollowingIdentifier() || startsWithUsing && this.hasFollowingIdentifier() && this.startsUsingForOf();

        if (this.match(74) || this.match(75) || isLetOrUsing) {
          const initNode = this.startNode();
          const kind = this.state.value;
          this.next();
          this.parseVar(initNode, true, kind);
          const init2 = this.finishNode(initNode, "VariableDeclaration");
          const isForIn = this.match(58);

          if (isForIn && startsWithUsing) {
            this.raise(Errors.ForInUsing, {
              at: init2
            });
          }

          if ((isForIn || this.isContextual(101)) && init2.declarations.length === 1) {
            return this.parseForIn(node, init2, awaitAt);
          }

          if (awaitAt !== null) {
            this.unexpected(awaitAt);
          }

          return this.parseFor(node, init2);
        }

        const startsWithAsync = this.isContextual(95);
        const refExpressionErrors = new ExpressionErrors();
        const init = this.parseExpression(true, refExpressionErrors);
        const isForOf = this.isContextual(101);

        if (isForOf) {
          if (startsWithLet) {
            this.raise(Errors.ForOfLet, {
              at: init
            });
          }

          if (awaitAt === null && startsWithAsync && init.type === "Identifier") {
            this.raise(Errors.ForOfAsync, {
              at: init
            });
          }
        }

        if (isForOf || this.match(58)) {
          this.checkDestructuringPrivate(refExpressionErrors);
          this.toAssignable(init, true);
          const type = isForOf ? "ForOfStatement" : "ForInStatement";
          this.checkLVal(init, {
            in: {
              type
            }
          });
          return this.parseForIn(node, init, awaitAt);
        } else {
          this.checkExpressionErrors(refExpressionErrors, true);
        }

        if (awaitAt !== null) {
          this.unexpected(awaitAt);
        }

        return this.parseFor(node, init);
      }

      parseFunctionStatement(node, isAsync, declarationPosition) {
        this.next();
        return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);
      }

      parseIfStatement(node) {
        this.next();
        node.test = this.parseHeaderExpression();
        node.consequent = this.parseStatement("if");
        node.alternate = this.eat(66) ? this.parseStatement("if") : null;
        return this.finishNode(node, "IfStatement");
      }

      parseReturnStatement(node) {
        if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
          this.raise(Errors.IllegalReturn, {
            at: this.state.startLoc
          });
        }

        this.next();

        if (this.isLineTerminator()) {
          node.argument = null;
        } else {
          node.argument = this.parseExpression();
          this.semicolon();
        }

        return this.finishNode(node, "ReturnStatement");
      }

      parseSwitchStatement(node) {
        this.next();
        node.discriminant = this.parseHeaderExpression();
        const cases = node.cases = [];
        this.expect(5);
        this.state.labels.push(switchLabel);
        this.scope.enter(SCOPE_OTHER);
        let cur;

        for (let sawDefault; !this.match(8);) {
          if (this.match(61) || this.match(65)) {
            const isCase = this.match(61);
            if (cur) this.finishNode(cur, "SwitchCase");
            cases.push(cur = this.startNode());
            cur.consequent = [];
            this.next();

            if (isCase) {
              cur.test = this.parseExpression();
            } else {
              if (sawDefault) {
                this.raise(Errors.MultipleDefaultsInSwitch, {
                  at: this.state.lastTokStartLoc
                });
              }

              sawDefault = true;
              cur.test = null;
            }

            this.expect(14);
          } else {
            if (cur) {
              cur.consequent.push(this.parseStatement(null));
            } else {
              this.unexpected();
            }
          }
        }

        this.scope.exit();
        if (cur) this.finishNode(cur, "SwitchCase");
        this.next();
        this.state.labels.pop();
        return this.finishNode(node, "SwitchStatement");
      }

      parseThrowStatement(node) {
        this.next();

        if (this.hasPrecedingLineBreak()) {
          this.raise(Errors.NewlineAfterThrow, {
            at: this.state.lastTokEndLoc
          });
        }

        node.argument = this.parseExpression();
        this.semicolon();
        return this.finishNode(node, "ThrowStatement");
      }

      parseCatchClauseParam() {
        const param = this.parseBindingAtom();
        const simple = param.type === "Identifier";
        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);
        this.checkLVal(param, {
          in: {
            type: "CatchClause"
          },
          binding: BIND_LEXICAL,
          allowingSloppyLetBinding: true
        });
        return param;
      }

      parseTryStatement(node) {
        this.next();
        node.block = this.parseBlock();
        node.handler = null;

        if (this.match(62)) {
          const clause = this.startNode();
          this.next();

          if (this.match(10)) {
            this.expect(10);
            clause.param = this.parseCatchClauseParam();
            this.expect(11);
          } else {
            clause.param = null;
            this.scope.enter(SCOPE_OTHER);
          }

          clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
          this.scope.exit();
          node.handler = this.finishNode(clause, "CatchClause");
        }

        node.finalizer = this.eat(67) ? this.parseBlock() : null;

        if (!node.handler && !node.finalizer) {
          this.raise(Errors.NoCatchOrFinally, {
            at: node
          });
        }

        return this.finishNode(node, "TryStatement");
      }

      parseVarStatement(node, kind, allowMissingInitializer = false) {
        this.next();
        this.parseVar(node, false, kind, allowMissingInitializer);
        this.semicolon();
        return this.finishNode(node, "VariableDeclaration");
      }

      parseWhileStatement(node) {
        this.next();
        node.test = this.parseHeaderExpression();
        this.state.labels.push(loopLabel);
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("while"));
        this.state.labels.pop();
        return this.finishNode(node, "WhileStatement");
      }

      parseWithStatement(node) {
        if (this.state.strict) {
          this.raise(Errors.StrictWith, {
            at: this.state.startLoc
          });
        }

        this.next();
        node.object = this.parseHeaderExpression();
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("with"));
        return this.finishNode(node, "WithStatement");
      }

      parseEmptyStatement(node) {
        this.next();
        return this.finishNode(node, "EmptyStatement");
      }

      parseLabeledStatement(node, maybeName, expr, context) {
        for (const label of this.state.labels) {
          if (label.name === maybeName) {
            this.raise(Errors.LabelRedeclaration, {
              at: expr,
              labelName: maybeName
            });
          }
        }

        const kind = tokenIsLoop(this.state.type) ? "loop" : this.match(71) ? "switch" : null;

        for (let i = this.state.labels.length - 1; i >= 0; i--) {
          const label = this.state.labels[i];

          if (label.statementStart === node.start) {
            label.statementStart = this.state.start;
            label.kind = kind;
          } else {
            break;
          }
        }

        this.state.labels.push({
          name: maybeName,
          kind,
          statementStart: this.state.start
        });
        node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
        this.state.labels.pop();
        node.label = expr;
        return this.finishNode(node, "LabeledStatement");
      }

      parseExpressionStatement(node, expr, decorators) {
        node.expression = expr;
        this.semicolon();
        return this.finishNode(node, "ExpressionStatement");
      }

      parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
        const node = this.startNode();

        if (allowDirectives) {
          this.state.strictErrors.clear();
        }

        this.expect(5);

        if (createNewLexicalScope) {
          this.scope.enter(SCOPE_OTHER);
        }

        this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);

        if (createNewLexicalScope) {
          this.scope.exit();
        }

        return this.finishNode(node, "BlockStatement");
      }

      isValidDirective(stmt) {
        return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
      }

      parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
        const body = node.body = [];
        const directives = node.directives = [];
        this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
      }

      parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
        const oldStrict = this.state.strict;
        let hasStrictModeDirective = false;
        let parsedNonDirective = false;

        while (!this.match(end)) {
          const stmt = this.parseStatement(null, topLevel);

          if (directives && !parsedNonDirective) {
            if (this.isValidDirective(stmt)) {
              const directive = this.stmtToDirective(stmt);
              directives.push(directive);

              if (!hasStrictModeDirective && directive.value.value === "use strict") {
                hasStrictModeDirective = true;
                this.setStrict(true);
              }

              continue;
            }

            parsedNonDirective = true;
            this.state.strictErrors.clear();
          }

          body.push(stmt);
        }

        if (afterBlockParse) {
          afterBlockParse.call(this, hasStrictModeDirective);
        }

        if (!oldStrict) {
          this.setStrict(false);
        }

        this.next();
      }

      parseFor(node, init) {
        node.init = init;
        this.semicolon(false);
        node.test = this.match(13) ? null : this.parseExpression();
        this.semicolon(false);
        node.update = this.match(11) ? null : this.parseExpression();
        this.expect(11);
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for"));
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(node, "ForStatement");
      }

      parseForIn(node, init, awaitAt) {
        const isForIn = this.match(58);
        this.next();

        if (isForIn) {
          if (awaitAt !== null) this.unexpected(awaitAt);
        } else {
          node.await = awaitAt !== null;
        }

        if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
          this.raise(Errors.ForInOfLoopInitializer, {
            at: init,
            type: isForIn ? "ForInStatement" : "ForOfStatement"
          });
        }

        if (init.type === "AssignmentPattern") {
          this.raise(Errors.InvalidLhs, {
            at: init,
            ancestor: {
              type: "ForStatement"
            }
          });
        }

        node.left = init;
        node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
        this.expect(11);
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for"));
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
      }

      parseVar(node, isFor, kind, allowMissingInitializer = false) {
        const declarations = node.declarations = [];
        node.kind = kind;

        for (;;) {
          const decl = this.startNode();
          this.parseVarId(decl, kind);
          decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();

          if (decl.init === null && !allowMissingInitializer) {
            if (decl.id.type !== "Identifier" && !(isFor && (this.match(58) || this.isContextual(101)))) {
              this.raise(Errors.DeclarationMissingInitializer, {
                at: this.state.lastTokEndLoc,
                kind: "destructuring"
              });
            } else if (kind === "const" && !(this.match(58) || this.isContextual(101))) {
              this.raise(Errors.DeclarationMissingInitializer, {
                at: this.state.lastTokEndLoc,
                kind: "const"
              });
            }
          }

          declarations.push(this.finishNode(decl, "VariableDeclarator"));
          if (!this.eat(12)) break;
        }

        return node;
      }

      parseVarId(decl, kind) {
        const id = this.parseBindingAtom();

        if (kind === "using" && id.type !== "Identifier") {
          this.raise(Errors.UsingDeclarationHasBindingPattern, {
            at: id
          });
        }

        this.checkLVal(id, {
          in: {
            type: "VariableDeclarator"
          },
          binding: kind === "var" ? BIND_VAR : BIND_LEXICAL
        });
        decl.id = id;
      }

      parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {
        const isStatement = statement & FUNC_STATEMENT;
        const isHangingStatement = statement & FUNC_HANGING_STATEMENT;
        const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);
        this.initFunction(node, isAsync);

        if (this.match(55) && isHangingStatement) {
          this.raise(Errors.GeneratorInSingleStatementContext, {
            at: this.state.startLoc
          });
        }

        node.generator = this.eat(55);

        if (isStatement) {
          node.id = this.parseFunctionId(requireId);
        }

        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = false;
        this.scope.enter(SCOPE_FUNCTION);
        this.prodParam.enter(functionFlags(isAsync, node.generator));

        if (!isStatement) {
          node.id = this.parseFunctionId();
        }

        this.parseFunctionParams(node, false);
        this.withSmartMixTopicForbiddingContext(() => {
          this.parseFunctionBodyAndFinish(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
        });
        this.prodParam.exit();
        this.scope.exit();

        if (isStatement && !isHangingStatement) {
          this.registerFunctionStatementId(node);
        }

        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return node;
      }

      parseFunctionId(requireId) {
        return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
      }

      parseFunctionParams(node, allowModifiers) {
        this.expect(10);
        this.expressionScope.enter(newParameterDeclarationScope());
        node.params = this.parseBindingList(11, 41, false, allowModifiers);
        this.expressionScope.exit();
      }

      registerFunctionStatementId(node) {
        if (!node.id) return;
        this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);
      }

      parseClass(node, isStatement, optionalId) {
        this.next();
        const oldStrict = this.state.strict;
        this.state.strict = true;
        this.parseClassId(node, isStatement, optionalId);
        this.parseClassSuper(node);
        node.body = this.parseClassBody(!!node.superClass, oldStrict);
        return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
      }

      isClassProperty() {
        return this.match(29) || this.match(13) || this.match(8);
      }

      isClassMethod() {
        return this.match(10);
      }

      isNonstaticConstructor(method) {
        return !method.computed && !method.static && (method.key.name === "constructor" || method.key.value === "constructor");
      }

      parseClassBody(hadSuperClass, oldStrict) {
        this.classScope.enter();
        const state = {
          hadConstructor: false,
          hadSuperClass
        };
        let decorators = [];
        const classBody = this.startNode();
        classBody.body = [];
        this.expect(5);
        this.withSmartMixTopicForbiddingContext(() => {
          while (!this.match(8)) {
            if (this.eat(13)) {
              if (decorators.length > 0) {
                throw this.raise(Errors.DecoratorSemicolon, {
                  at: this.state.lastTokEndLoc
                });
              }

              continue;
            }

            if (this.match(26)) {
              decorators.push(this.parseDecorator());
              continue;
            }

            const member = this.startNode();

            if (decorators.length) {
              member.decorators = decorators;
              this.resetStartLocationFromNode(member, decorators[0]);
              decorators = [];
            }

            this.parseClassMember(classBody, member, state);

            if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
              this.raise(Errors.DecoratorConstructor, {
                at: member
              });
            }
          }
        });
        this.state.strict = oldStrict;
        this.next();

        if (decorators.length) {
          throw this.raise(Errors.TrailingDecorator, {
            at: this.state.startLoc
          });
        }

        this.classScope.exit();
        return this.finishNode(classBody, "ClassBody");
      }

      parseClassMemberFromModifier(classBody, member) {
        const key = this.parseIdentifier(true);

        if (this.isClassMethod()) {
          const method = member;
          method.kind = "method";
          method.computed = false;
          method.key = key;
          method.static = false;
          this.pushClassMethod(classBody, method, false, false, false, false);
          return true;
        } else if (this.isClassProperty()) {
          const prop = member;
          prop.computed = false;
          prop.key = key;
          prop.static = false;
          classBody.body.push(this.parseClassProperty(prop));
          return true;
        }

        this.resetPreviousNodeTrailingComments(key);
        return false;
      }

      parseClassMember(classBody, member, state) {
        const isStatic2 = this.isContextual(104);

        if (isStatic2) {
          if (this.parseClassMemberFromModifier(classBody, member)) {
            return;
          }

          if (this.eat(5)) {
            this.parseClassStaticBlock(classBody, member);
            return;
          }
        }

        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic2);
      }

      parseClassMemberWithIsStatic(classBody, member, state, isStatic2) {
        const publicMethod = member;
        const privateMethod = member;
        const publicProp = member;
        const privateProp = member;
        const accessorProp = member;
        const method = publicMethod;
        const publicMember = publicMethod;
        member.static = isStatic2;
        this.parsePropertyNamePrefixOperator(member);

        if (this.eat(55)) {
          method.kind = "method";
          const isPrivateName = this.match(136);
          this.parseClassElementName(method);

          if (isPrivateName) {
            this.pushClassPrivateMethod(classBody, privateMethod, true, false);
            return;
          }

          if (this.isNonstaticConstructor(publicMethod)) {
            this.raise(Errors.ConstructorIsGenerator, {
              at: publicMethod.key
            });
          }

          this.pushClassMethod(classBody, publicMethod, true, false, false, false);
          return;
        }

        const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;
        const isPrivate = this.match(136);
        const key = this.parseClassElementName(member);
        const maybeQuestionTokenStartLoc = this.state.startLoc;
        this.parsePostMemberNameModifiers(publicMember);

        if (this.isClassMethod()) {
          method.kind = "method";

          if (isPrivate) {
            this.pushClassPrivateMethod(classBody, privateMethod, false, false);
            return;
          }

          const isConstructor = this.isNonstaticConstructor(publicMethod);
          let allowsDirectSuper = false;

          if (isConstructor) {
            publicMethod.kind = "constructor";

            if (state.hadConstructor && !this.hasPlugin("typescript")) {
              this.raise(Errors.DuplicateConstructor, {
                at: key
              });
            }

            if (isConstructor && this.hasPlugin("typescript") && member.override) {
              this.raise(Errors.OverrideOnConstructor, {
                at: key
              });
            }

            state.hadConstructor = true;
            allowsDirectSuper = state.hadSuperClass;
          }

          this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
        } else if (this.isClassProperty()) {
          if (isPrivate) {
            this.pushClassPrivateProperty(classBody, privateProp);
          } else {
            this.pushClassProperty(classBody, publicProp);
          }
        } else if (isContextual && key.name === "async" && !this.isLineTerminator()) {
          this.resetPreviousNodeTrailingComments(key);
          const isGenerator = this.eat(55);

          if (publicMember.optional) {
            this.unexpected(maybeQuestionTokenStartLoc);
          }

          method.kind = "method";
          const isPrivate2 = this.match(136);
          this.parseClassElementName(method);
          this.parsePostMemberNameModifiers(publicMember);

          if (isPrivate2) {
            this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
          } else {
            if (this.isNonstaticConstructor(publicMethod)) {
              this.raise(Errors.ConstructorIsAsync, {
                at: publicMethod.key
              });
            }

            this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
          }
        } else if (isContextual && (key.name === "get" || key.name === "set") && !(this.match(55) && this.isLineTerminator())) {
          this.resetPreviousNodeTrailingComments(key);
          method.kind = key.name;
          const isPrivate2 = this.match(136);
          this.parseClassElementName(publicMethod);

          if (isPrivate2) {
            this.pushClassPrivateMethod(classBody, privateMethod, false, false);
          } else {
            if (this.isNonstaticConstructor(publicMethod)) {
              this.raise(Errors.ConstructorIsAccessor, {
                at: publicMethod.key
              });
            }

            this.pushClassMethod(classBody, publicMethod, false, false, false, false);
          }

          this.checkGetterSetterParams(publicMethod);
        } else if (isContextual && key.name === "accessor" && !this.isLineTerminator()) {
          this.expectPlugin("decoratorAutoAccessors");
          this.resetPreviousNodeTrailingComments(key);
          const isPrivate2 = this.match(136);
          this.parseClassElementName(publicProp);
          this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
        } else if (this.isLineTerminator()) {
          if (isPrivate) {
            this.pushClassPrivateProperty(classBody, privateProp);
          } else {
            this.pushClassProperty(classBody, publicProp);
          }
        } else {
          this.unexpected();
        }
      }

      parseClassElementName(member) {
        const {
          type,
          value
        } = this.state;

        if ((type === 130 || type === 131) && member.static && value === "prototype") {
          this.raise(Errors.StaticPrototype, {
            at: this.state.startLoc
          });
        }

        if (type === 136) {
          if (value === "constructor") {
            this.raise(Errors.ConstructorClassPrivateField, {
              at: this.state.startLoc
            });
          }

          const key = this.parsePrivateName();
          member.key = key;
          return key;
        }

        return this.parsePropertyName(member);
      }

      parseClassStaticBlock(classBody, member) {
        var _member$decorators;

        this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);
        const oldLabels = this.state.labels;
        this.state.labels = [];
        this.prodParam.enter(PARAM);
        const body = member.body = [];
        this.parseBlockOrModuleBlockBody(body, void 0, false, 8);
        this.prodParam.exit();
        this.scope.exit();
        this.state.labels = oldLabels;
        classBody.body.push(this.finishNode(member, "StaticBlock"));

        if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
          this.raise(Errors.DecoratorStaticBlock, {
            at: member
          });
        }
      }

      pushClassProperty(classBody, prop) {
        if (!prop.computed && (prop.key.name === "constructor" || prop.key.value === "constructor")) {
          this.raise(Errors.ConstructorClassField, {
            at: prop.key
          });
        }

        classBody.body.push(this.parseClassProperty(prop));
      }

      pushClassPrivateProperty(classBody, prop) {
        const node = this.parseClassPrivateProperty(prop);
        classBody.body.push(node);
        this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);
      }

      pushClassAccessorProperty(classBody, prop, isPrivate) {
        if (!isPrivate && !prop.computed) {
          const key = prop.key;

          if (key.name === "constructor" || key.value === "constructor") {
            this.raise(Errors.ConstructorClassField, {
              at: key
            });
          }
        }

        const node = this.parseClassAccessorProperty(prop);
        classBody.body.push(node);

        if (isPrivate) {
          this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);
        }
      }

      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
      }

      pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
        classBody.body.push(node);
        const kind = node.kind === "get" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === "set" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;
        this.declareClassPrivateMethodInScope(node, kind);
      }

      declareClassPrivateMethodInScope(node, kind) {
        this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
      }

      parsePostMemberNameModifiers(methodOrProp) {}

      parseClassPrivateProperty(node) {
        this.parseInitializer(node);
        this.semicolon();
        return this.finishNode(node, "ClassPrivateProperty");
      }

      parseClassProperty(node) {
        this.parseInitializer(node);
        this.semicolon();
        return this.finishNode(node, "ClassProperty");
      }

      parseClassAccessorProperty(node) {
        this.parseInitializer(node);
        this.semicolon();
        return this.finishNode(node, "ClassAccessorProperty");
      }

      parseInitializer(node) {
        this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);
        this.expressionScope.enter(newExpressionScope());
        this.prodParam.enter(PARAM);
        node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
        this.expressionScope.exit();
        this.prodParam.exit();
        this.scope.exit();
      }

      parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {
        if (tokenIsIdentifier(this.state.type)) {
          node.id = this.parseIdentifier();

          if (isStatement) {
            this.declareNameFromIdentifier(node.id, bindingType);
          }
        } else {
          if (optionalId || !isStatement) {
            node.id = null;
          } else {
            throw this.raise(Errors.MissingClassName, {
              at: this.state.startLoc
            });
          }
        }
      }

      parseClassSuper(node) {
        node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
      }

      parseExport(node, decorators) {
        const hasDefault = this.maybeParseExportDefaultSpecifier(node);
        const parseAfterDefault = !hasDefault || this.eat(12);
        const hasStar = parseAfterDefault && this.eatExportStar(node);
        const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
        const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
        const isFromRequired = hasDefault || hasStar;

        if (hasStar && !hasNamespace) {
          if (hasDefault) this.unexpected();

          if (decorators) {
            throw this.raise(Errors.UnsupportedDecoratorExport, {
              at: node
            });
          }

          this.parseExportFrom(node, true);
          return this.finishNode(node, "ExportAllDeclaration");
        }

        const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);

        if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {
          throw this.unexpected(null, 5);
        }

        let hasDeclaration;

        if (isFromRequired || hasSpecifiers) {
          hasDeclaration = false;

          if (decorators) {
            throw this.raise(Errors.UnsupportedDecoratorExport, {
              at: node
            });
          }

          this.parseExportFrom(node, isFromRequired);
        } else {
          hasDeclaration = this.maybeParseExportDeclaration(node);
        }

        if (isFromRequired || hasSpecifiers || hasDeclaration) {
          var _node2$declaration;

          const node2 = node;
          this.checkExport(node2, true, false, !!node2.source);

          if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === "ClassDeclaration") {
            this.maybeTakeDecorators(decorators, node2.declaration, node2);
          } else if (decorators) {
            throw this.raise(Errors.UnsupportedDecoratorExport, {
              at: node
            });
          }

          return this.finishNode(node2, "ExportNamedDeclaration");
        }

        if (this.eat(65)) {
          const node2 = node;
          const decl = this.parseExportDefaultExpression();
          node2.declaration = decl;

          if (decl.type === "ClassDeclaration") {
            this.maybeTakeDecorators(decorators, decl, node2);
          } else if (decorators) {
            throw this.raise(Errors.UnsupportedDecoratorExport, {
              at: node
            });
          }

          this.checkExport(node2, true, true);
          return this.finishNode(node2, "ExportDefaultDeclaration");
        }

        throw this.unexpected(null, 5);
      }

      eatExportStar(node) {
        return this.eat(55);
      }

      maybeParseExportDefaultSpecifier(node) {
        if (this.isExportDefaultSpecifier()) {
          this.expectPlugin("exportDefaultFrom");
          const specifier = this.startNode();
          specifier.exported = this.parseIdentifier(true);
          node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
          return true;
        }

        return false;
      }

      maybeParseExportNamespaceSpecifier(node) {
        if (this.isContextual(93)) {
          if (!node.specifiers) node.specifiers = [];
          const specifier = this.startNodeAt(this.state.lastTokStartLoc);
          this.next();
          specifier.exported = this.parseModuleExportName();
          node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
          return true;
        }

        return false;
      }

      maybeParseExportNamedSpecifiers(node) {
        if (this.match(5)) {
          if (!node.specifiers) node.specifiers = [];
          const isTypeExport = node.exportKind === "type";
          node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
          node.source = null;
          node.declaration = null;

          if (this.hasPlugin("importAssertions")) {
            node.assertions = [];
          }

          return true;
        }

        return false;
      }

      maybeParseExportDeclaration(node) {
        if (this.shouldParseExportDeclaration()) {
          node.specifiers = [];
          node.source = null;

          if (this.hasPlugin("importAssertions")) {
            node.assertions = [];
          }

          node.declaration = this.parseExportDeclaration(node);
          return true;
        }

        return false;
      }

      isAsyncFunction() {
        if (!this.isContextual(95)) return false;
        const next = this.nextTokenStart();
        return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, "function");
      }

      parseExportDefaultExpression() {
        const expr = this.startNode();
        const isAsync = this.isAsyncFunction();

        if (this.match(68) || isAsync) {
          this.next();

          if (isAsync) {
            this.next();
          }

          return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);
        }

        if (this.match(80)) {
          return this.parseClass(expr, true, true);
        }

        if (this.match(26)) {
          if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport")) {
            this.raise(Errors.DecoratorBeforeExport, {
              at: this.state.startLoc
            });
          }

          return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
        }

        if (this.match(75) || this.match(74) || this.isLet()) {
          throw this.raise(Errors.UnsupportedDefaultExport, {
            at: this.state.startLoc
          });
        }

        const res = this.parseMaybeAssignAllowIn();
        this.semicolon();
        return res;
      }

      parseExportDeclaration(node) {
        if (this.match(80)) {
          const node2 = this.parseClass(this.startNode(), true, false);
          return node2;
        }

        return this.parseStatement(null);
      }

      isExportDefaultSpecifier() {
        const {
          type
        } = this.state;

        if (tokenIsIdentifier(type)) {
          if (type === 95 && !this.state.containsEsc || type === 99) {
            return false;
          }

          if ((type === 128 || type === 127) && !this.state.containsEsc) {
            const {
              type: nextType
            } = this.lookahead();

            if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {
              this.expectOnePlugin(["flow", "typescript"]);
              return false;
            }
          }
        } else if (!this.match(65)) {
          return false;
        }

        const next = this.nextTokenStart();
        const hasFrom = this.isUnparsedContextual(next, "from");

        if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {
          return true;
        }

        if (this.match(65) && hasFrom) {
          const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
          return nextAfterFrom === 34 || nextAfterFrom === 39;
        }

        return false;
      }

      parseExportFrom(node, expect) {
        if (this.eatContextual(97)) {
          node.source = this.parseImportSource();
          this.checkExport(node);
          const assertions = this.maybeParseImportAssertions();

          if (assertions) {
            node.assertions = assertions;
            this.checkJSONModuleImport(node);
          }
        } else if (expect) {
          this.unexpected();
        }

        this.semicolon();
      }

      shouldParseExportDeclaration() {
        const {
          type
        } = this.state;

        if (type === 26) {
          this.expectOnePlugin(["decorators", "decorators-legacy"]);

          if (this.hasPlugin("decorators")) {
            if (this.getPluginOption("decorators", "decoratorsBeforeExport")) {
              throw this.raise(Errors.DecoratorBeforeExport, {
                at: this.state.startLoc
              });
            }

            return true;
          }
        }

        return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
      }

      checkExport(node, checkNames, isDefault, isFrom) {
        if (checkNames) {
          if (isDefault) {
            this.checkDuplicateExports(node, "default");

            if (this.hasPlugin("exportDefaultFrom")) {
              var _declaration$extra;

              const declaration = node.declaration;

              if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
                this.raise(Errors.ExportDefaultFromAsIdentifier, {
                  at: declaration
                });
              }
            }
          } else if (node.specifiers && node.specifiers.length) {
            for (const specifier of node.specifiers) {
              const {
                exported
              } = specifier;
              const exportName = exported.type === "Identifier" ? exported.name : exported.value;
              this.checkDuplicateExports(specifier, exportName);

              if (!isFrom && specifier.local) {
                const {
                  local
                } = specifier;

                if (local.type !== "Identifier") {
                  this.raise(Errors.ExportBindingIsString, {
                    at: specifier,
                    localName: local.value,
                    exportName
                  });
                } else {
                  this.checkReservedWord(local.name, local.loc.start, true, false);
                  this.scope.checkLocalExport(local);
                }
              }
            }
          } else if (node.declaration) {
            if (node.declaration.type === "FunctionDeclaration" || node.declaration.type === "ClassDeclaration") {
              const id = node.declaration.id;
              if (!id) throw new Error("Assertion failure");
              this.checkDuplicateExports(node, id.name);
            } else if (node.declaration.type === "VariableDeclaration") {
              for (const declaration of node.declaration.declarations) {
                this.checkDeclaration(declaration.id);
              }
            }
          }
        }
      }

      checkDeclaration(node) {
        if (node.type === "Identifier") {
          this.checkDuplicateExports(node, node.name);
        } else if (node.type === "ObjectPattern") {
          for (const prop of node.properties) {
            this.checkDeclaration(prop);
          }
        } else if (node.type === "ArrayPattern") {
          for (const elem of node.elements) {
            if (elem) {
              this.checkDeclaration(elem);
            }
          }
        } else if (node.type === "ObjectProperty") {
          this.checkDeclaration(node.value);
        } else if (node.type === "RestElement") {
          this.checkDeclaration(node.argument);
        } else if (node.type === "AssignmentPattern") {
          this.checkDeclaration(node.left);
        }
      }

      checkDuplicateExports(node, exportName) {
        if (this.exportedIdentifiers.has(exportName)) {
          if (exportName === "default") {
            this.raise(Errors.DuplicateDefaultExport, {
              at: node
            });
          } else {
            this.raise(Errors.DuplicateExport, {
              at: node,
              exportName
            });
          }
        }

        this.exportedIdentifiers.add(exportName);
      }

      parseExportSpecifiers(isInTypeExport) {
        const nodes = [];
        let first = true;
        this.expect(5);

        while (!this.eat(8)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.eat(8)) break;
          }

          const isMaybeTypeOnly = this.isContextual(128);
          const isString = this.match(131);
          const node = this.startNode();
          node.local = this.parseModuleExportName();
          nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
        }

        return nodes;
      }

      parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
        if (this.eatContextual(93)) {
          node.exported = this.parseModuleExportName();
        } else if (isString) {
          node.exported = cloneStringLiteral(node.local);
        } else if (!node.exported) {
          node.exported = cloneIdentifier(node.local);
        }

        return this.finishNode(node, "ExportSpecifier");
      }

      parseModuleExportName() {
        if (this.match(131)) {
          const result = this.parseStringLiteral(this.state.value);
          const surrogate = result.value.match(loneSurrogate);

          if (surrogate) {
            this.raise(Errors.ModuleExportNameHasLoneSurrogate, {
              at: result,
              surrogateCharCode: surrogate[0].charCodeAt(0)
            });
          }

          return result;
        }

        return this.parseIdentifier(true);
      }

      isJSONModuleImport(node) {
        if (node.assertions != null) {
          return node.assertions.some(({
            key,
            value
          }) => {
            return value.value === "json" && (key.type === "Identifier" ? key.name === "type" : key.value === "type");
          });
        }

        return false;
      }

      checkImportReflection(node) {
        if (node.module) {
          var _node$assertions;

          if (node.specifiers.length !== 1 || node.specifiers[0].type !== "ImportDefaultSpecifier") {
            this.raise(Errors.ImportReflectionNotBinding, {
              at: node.specifiers[0].loc.start
            });
          }

          if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {
            this.raise(Errors.ImportReflectionHasAssertion, {
              at: node.specifiers[0].loc.start
            });
          }
        }
      }

      checkJSONModuleImport(node) {
        if (this.isJSONModuleImport(node) && node.type !== "ExportAllDeclaration") {
          const {
            specifiers
          } = node;

          if (specifiers != null) {
            const nonDefaultNamedSpecifier = specifiers.find(specifier => {
              let imported;

              if (specifier.type === "ExportSpecifier") {
                imported = specifier.local;
              } else if (specifier.type === "ImportSpecifier") {
                imported = specifier.imported;
              }

              if (imported !== void 0) {
                return imported.type === "Identifier" ? imported.name !== "default" : imported.value !== "default";
              }
            });

            if (nonDefaultNamedSpecifier !== void 0) {
              this.raise(Errors.ImportJSONBindingNotDefault, {
                at: nonDefaultNamedSpecifier.loc.start
              });
            }
          }
        }
      }

      parseMaybeImportReflection(node) {
        let isImportReflection = false;

        if (this.isContextual(125)) {
          const lookahead = this.lookahead();

          if (tokenIsIdentifier(lookahead.type)) {
            if (lookahead.type !== 97) {
              isImportReflection = true;
            } else {
              const nextNextTokenFirstChar = this.input.charCodeAt(this.nextTokenStartSince(lookahead.end));

              if (nextNextTokenFirstChar === 102) {
                isImportReflection = true;
              }
            }
          } else {
            isImportReflection = true;
          }
        }

        if (isImportReflection) {
          this.expectPlugin("importReflection");
          this.next();
          node.module = true;
        } else if (this.hasPlugin("importReflection")) {
          node.module = false;
        }
      }

      parseImport(node) {
        node.specifiers = [];

        if (!this.match(131)) {
          this.parseMaybeImportReflection(node);
          const hasDefault = this.maybeParseDefaultImportSpecifier(node);
          const parseNext = !hasDefault || this.eat(12);
          const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
          if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);
          this.expectContextual(97);
        }

        node.source = this.parseImportSource();
        const assertions = this.maybeParseImportAssertions();

        if (assertions) {
          node.assertions = assertions;
        } else {
          const attributes = this.maybeParseModuleAttributes();

          if (attributes) {
            node.attributes = attributes;
          }
        }

        this.checkImportReflection(node);
        this.checkJSONModuleImport(node);
        this.semicolon();
        return this.finishNode(node, "ImportDeclaration");
      }

      parseImportSource() {
        if (!this.match(131)) this.unexpected();
        return this.parseExprAtom();
      }

      shouldParseDefaultImport(node) {
        return tokenIsIdentifier(this.state.type);
      }

      parseImportSpecifierLocal(node, specifier, type) {
        specifier.local = this.parseIdentifier();
        node.specifiers.push(this.finishImportSpecifier(specifier, type));
      }

      finishImportSpecifier(specifier, type, bindingType = BIND_LEXICAL) {
        this.checkLVal(specifier.local, {
          in: specifier,
          binding: bindingType
        });
        return this.finishNode(specifier, type);
      }

      parseAssertEntries() {
        const attrs2 = [];
        const attrNames = new Set();

        do {
          if (this.match(8)) {
            break;
          }

          const node = this.startNode();
          const keyName = this.state.value;

          if (attrNames.has(keyName)) {
            this.raise(Errors.ModuleAttributesWithDuplicateKeys, {
              at: this.state.startLoc,
              key: keyName
            });
          }

          attrNames.add(keyName);

          if (this.match(131)) {
            node.key = this.parseStringLiteral(keyName);
          } else {
            node.key = this.parseIdentifier(true);
          }

          this.expect(14);

          if (!this.match(131)) {
            throw this.raise(Errors.ModuleAttributeInvalidValue, {
              at: this.state.startLoc
            });
          }

          node.value = this.parseStringLiteral(this.state.value);
          attrs2.push(this.finishNode(node, "ImportAttribute"));
        } while (this.eat(12));

        return attrs2;
      }

      maybeParseModuleAttributes() {
        if (this.match(76) && !this.hasPrecedingLineBreak()) {
          this.expectPlugin("moduleAttributes");
          this.next();
        } else {
          if (this.hasPlugin("moduleAttributes")) return [];
          return null;
        }

        const attrs2 = [];
        const attributes = new Set();

        do {
          const node = this.startNode();
          node.key = this.parseIdentifier(true);

          if (node.key.name !== "type") {
            this.raise(Errors.ModuleAttributeDifferentFromType, {
              at: node.key
            });
          }

          if (attributes.has(node.key.name)) {
            this.raise(Errors.ModuleAttributesWithDuplicateKeys, {
              at: node.key,
              key: node.key.name
            });
          }

          attributes.add(node.key.name);
          this.expect(14);

          if (!this.match(131)) {
            throw this.raise(Errors.ModuleAttributeInvalidValue, {
              at: this.state.startLoc
            });
          }

          node.value = this.parseStringLiteral(this.state.value);
          this.finishNode(node, "ImportAttribute");
          attrs2.push(node);
        } while (this.eat(12));

        return attrs2;
      }

      maybeParseImportAssertions() {
        if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {
          this.expectPlugin("importAssertions");
          this.next();
        } else {
          if (this.hasPlugin("importAssertions")) return [];
          return null;
        }

        this.eat(5);
        const attrs2 = this.parseAssertEntries();
        this.eat(8);
        return attrs2;
      }

      maybeParseDefaultImportSpecifier(node) {
        if (this.shouldParseDefaultImport(node)) {
          this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier");
          return true;
        }

        return false;
      }

      maybeParseStarImportSpecifier(node) {
        if (this.match(55)) {
          const specifier = this.startNode();
          this.next();
          this.expectContextual(93);
          this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier");
          return true;
        }

        return false;
      }

      parseNamedImportSpecifiers(node) {
        let first = true;
        this.expect(5);

        while (!this.eat(8)) {
          if (first) {
            first = false;
          } else {
            if (this.eat(14)) {
              throw this.raise(Errors.DestructureNamedImport, {
                at: this.state.startLoc
              });
            }

            this.expect(12);
            if (this.eat(8)) break;
          }

          const specifier = this.startNode();
          const importedIsString = this.match(131);
          const isMaybeTypeOnly = this.isContextual(128);
          specifier.imported = this.parseModuleExportName();
          const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === "type" || node.importKind === "typeof", isMaybeTypeOnly, void 0);
          node.specifiers.push(importSpecifier);
        }
      }

      parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
        if (this.eatContextual(93)) {
          specifier.local = this.parseIdentifier();
        } else {
          const {
            imported
          } = specifier;

          if (importedIsString) {
            throw this.raise(Errors.ImportBindingIsString, {
              at: specifier,
              importName: imported.value
            });
          }

          this.checkReservedWord(imported.name, specifier.loc.start, true, true);

          if (!specifier.local) {
            specifier.local = cloneIdentifier(imported);
          }
        }

        return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
      }

      isThisParam(param) {
        return param.type === "Identifier" && param.name === "this";
      }

    };
    var Parser = class extends StatementParser {
      constructor(options, input) {
        options = getOptions(options);
        super(options, input);
        this.options = options;
        this.initializeScopes();
        this.plugins = pluginsMap(this.options.plugins);
        this.filename = options.sourceFilename;
      }

      getScopeHandler() {
        return ScopeHandler;
      }

      parse() {
        this.enterInitialScopes();
        const file = this.startNode();
        const program = this.startNode();
        this.nextToken();
        file.errors = null;
        this.parseTopLevel(file, program);
        file.errors = this.state.errors;
        return file;
      }

    };

    function pluginsMap(plugins) {
      const pluginMap = new Map();

      for (const plugin of plugins) {
        const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];
        if (!pluginMap.has(name)) pluginMap.set(name, options || {});
      }

      return pluginMap;
    }

    function parse(input, options) {
      var _options;

      if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {
        options = Object.assign({}, options);

        try {
          options.sourceType = "module";
          const parser = getParser(options, input);
          const ast = parser.parse();

          if (parser.sawUnambiguousESM) {
            return ast;
          }

          if (parser.ambiguousScriptDifferentAst) {
            try {
              options.sourceType = "script";
              return getParser(options, input).parse();
            } catch (_unused) {}
          } else {
            ast.program.sourceType = "script";
          }

          return ast;
        } catch (moduleError) {
          try {
            options.sourceType = "script";
            return getParser(options, input).parse();
          } catch (_unused2) {}

          throw moduleError;
        }
      } else {
        return getParser(options, input).parse();
      }
    }

    function parseExpression(input, options) {
      const parser = getParser(options, input);

      if (parser.options.strictMode) {
        parser.state.strict = true;
      }

      return parser.getExpression();
    }

    function generateExportedTokenTypes(internalTokenTypes) {
      const tokenTypes2 = {};

      for (const typeName of Object.keys(internalTokenTypes)) {
        tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
      }

      return tokenTypes2;
    }

    var tokTypes = generateExportedTokenTypes(tt);

    function getParser(options, input) {
      let cls = Parser;

      if (options != null && options.plugins) {
        validatePlugins(options.plugins);
        cls = getParserClass(options.plugins);
      }

      return new cls(options, input);
    }

    var parserClassCache = {};

    function getParserClass(pluginsFromOptions) {
      const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));
      const key = pluginList.join("/");
      let cls = parserClassCache[key];

      if (!cls) {
        cls = Parser;

        for (const plugin of pluginList) {
          cls = mixinPlugins[plugin](cls);
        }

        parserClassCache[key] = cls;
      }

      return cls;
    }

    exports.parse = parse;
    exports.parseExpression = parseExpression;
    exports.tokTypes = tokTypes;
  }

});

var require_parse = __commonJS({
  "../../node_modules/@marko/babel-utils/dist/parse.js"(exports) {
    "use strict";

    exports.__esModule = true;
    exports.parseExpression = parseExpression;
    exports.parseScript = parseScript4;

    var babelParser = _interopRequireWildcard(require_lib());

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj.default = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    var CODE_AS_WHITE_SPACE_KEY = Symbol();

    function parseScript4(file, str, start) {
      return tryParse(file, false, str, start);
    }

    function parseExpression(file, str, start) {
      return tryParse(file, true, str, start);
    }

    function tryParse(file, isExpression, str, start) {
      if (start) {
        let whitespace = file.metadata.marko[CODE_AS_WHITE_SPACE_KEY];

        if (whitespace === void 0) {
          file.metadata.marko[CODE_AS_WHITE_SPACE_KEY] = whitespace = file.code.replace(/[^\s]/g, " ");
        }

        str = whitespace.slice(0, start) + str;
      }

      try {
        return isExpression ? babelParser.parseExpression(str, file.opts.parserOpts) : babelParser.parse(str, file.opts.parserOpts).program;
      } catch (err) {
        let {
          loc,
          message
        } = err;

        if (loc) {
          throw file.buildCodeFrameError({
            loc: {
              start: loc
            }
          }, message.replace(/ *\(\d+:\d+\)$/, ""));
        } else {
          throw err;
        }
      }
    }
  }

});

var require_dist2 = __commonJS({
  "../../node_modules/@marko/babel-utils/dist/index.js"(exports) {
    "use strict";

    exports.__esModule = true;
    exports.assertNoVar = exports.assertNoParams = exports.assertNoAttributes = exports.assertNoAttributeTags = exports.assertNoArgs = exports.assertAllowedAttributes = void 0;
    exports.defineTag = defineTag;
    exports.withLoc = exports.resolveTagImport = exports.resolveRelativePath = exports.parseScript = exports.parseExpression = exports.normalizeTemplateString = exports.loadFileForTag = exports.loadFileForImport = exports.isTransparentTag = exports.isNativeTag = exports.isMacroTag = exports.isLoopTag = exports.isDynamicTag = exports.isAttributeTag = exports.importNamed = exports.importDefault = exports.getTemplateId = exports.getTaglibLookup = exports.getTagDefForTagName = exports.getTagDef = exports.getMacroIdentifier = exports.getLocRange = exports.getLoc = exports.getFullyResolvedTagName = exports.getArgOrSequence = exports.findParentTag = exports.findAttributeTags = void 0;

    var _tags = require_tags();

    exports.isNativeTag = _tags.isNativeTag;
    exports.isMacroTag = _tags.isMacroTag;
    exports.isDynamicTag = _tags.isDynamicTag;
    exports.isAttributeTag = _tags.isAttributeTag;
    exports.isTransparentTag = _tags.isTransparentTag;
    exports.isLoopTag = _tags.isLoopTag;
    exports.getMacroIdentifier = _tags.getMacroIdentifier;
    exports.getTagDef = _tags.getTagDef;
    exports.getFullyResolvedTagName = _tags.getFullyResolvedTagName;
    exports.findParentTag = _tags.findParentTag;
    exports.findAttributeTags = _tags.findAttributeTags;
    exports.getArgOrSequence = _tags.getArgOrSequence;
    exports.loadFileForTag = _tags.loadFileForTag;
    exports.loadFileForImport = _tags.loadFileForImport;
    exports.getTemplateId = _tags.getTemplateId;
    exports.resolveTagImport = _tags.resolveTagImport;

    var _assert = require_assert();

    exports.assertAllowedAttributes = _assert.assertAllowedAttributes;
    exports.assertNoArgs = _assert.assertNoArgs;
    exports.assertNoAttributes = _assert.assertNoAttributes;
    exports.assertNoParams = _assert.assertNoParams;
    exports.assertNoVar = _assert.assertNoVar;
    exports.assertNoAttributeTags = _assert.assertNoAttributeTags;

    var _templateString = require_template_string();

    exports.normalizeTemplateString = _templateString.normalizeTemplateString;

    var _loc = require_loc();

    exports.getLoc = _loc.getLoc;
    exports.getLocRange = _loc.getLocRange;
    exports.withLoc = _loc.withLoc;

    var _parse = require_parse();

    exports.parseScript = _parse.parseScript;
    exports.parseExpression = _parse.parseExpression;

    var _imports = require_imports();

    exports.resolveRelativePath = _imports.resolveRelativePath;
    exports.importDefault = _imports.importDefault;
    exports.importNamed = _imports.importNamed;

    var _taglib = require_taglib();

    exports.getTaglibLookup = _taglib.getTaglibLookup;
    exports.getTagDefForTagName = _taglib.getTagDefForTagName;

    function defineTag(tag) {
      return tag;
    }
  }

});



function isOutputHTML() {
  return getMarkoOpts().output === "html";
}

function isOutputDOM() {
  return !isOutputHTML();
}

function getMarkoOpts() {
  return currentProgramPath.hub.file.markoOpts;
}

function isOptimize() {
  return getMarkoOpts().optimize;
}




var import_babel_utils = __toESM(require_dist2());


var MARKO_FILE_REG = /^<.*>$|\.marko$/;

function analyzeTagNameType(tag) {
  const extra = tag.node.extra ??= {};

  if (extra.tagNameType === void 0) {
    const name = tag.get("name");

    if (name.isStringLiteral()) {
      extra.tagNameType = name.node.value[0] === "@" ? 3 : (0, import_babel_utils.isNativeTag)(tag) ? 0 : 1;
      extra.tagNameNullable = extra.tagNameNullable = false;
    } else {
      const pending = [name];
      let path3;
      let type = void 0;
      let nullable = false;

      while ((path3 = pending.pop()) && type !== 2) {
        if (path3.isConditionalExpression()) {
          pending.push(path3.get("consequent"));

          if (path3.node.alternate) {
            pending.push(path3.get("alternate"));
          }
        } else if (path3.isLogicalExpression()) {
          if (path3.node.operator === "||") {
            pending.push(path3.get("left"));
          } else {
            nullable = true;
          }

          pending.push(path3.get("right"));
        } else if (path3.isAssignmentExpression()) {
          pending.push(path3.get("right"));
        } else if (path3.isBinaryExpression()) {
          type = path3.node.operator !== "+" || type !== void 0 && type !== 0 ? 2 : 0;
        } else if (path3.isStringLiteral() || path3.isTemplateLiteral()) {
          type = type !== void 0 && type !== 0 ? 2 : 0;
        } else if (path3.isNullLiteral()) {
          nullable = true;
        } else if (path3.isIdentifier()) {
          if (path3.node.name === "undefined") {
            nullable = true;
            continue;
          }

          const binding = path3.scope.getBinding(path3.node.name);

          if (!binding) {
            type = 2;
            continue;
          }

          if (binding.kind === "module") {
            const decl = binding.path.parent;

            if (MARKO_FILE_REG.test(decl.source.value) && decl.specifiers.some(it => external_marko_compiler_namespaceObject.types.isImportDefaultSpecifier(it))) {
              type = type !== void 0 && type !== 1 ? 2 : 1;
            } else {
              type = 2;
            }

            continue;
          }

          const bindingTag = binding.path;

          if (bindingTag.isMarkoTag() && binding.kind === "local") {
            const bindingTagName = bindingTag.get("name").node.value;

            if (bindingTagName === "tag") {
              type = type !== void 0 && type !== 1 ? 2 : 1;
              continue;
            }

            if (bindingTagName === "const") {
              pending.push(bindingTag.get("attributes")[0].get("value"));
              continue;
            }

            if (bindingTagName === "let") {
              const defaultAttr = bindingTag.get("attributes")[0];

              if (defaultAttr.node) {
                pending.push(defaultAttr.get("value"));
              } else {
                nullable = true;
              }

              const assignments = binding.constantViolations;

              for (let i = assignments.length; i--;) {
                const assignment = assignments[i];
                const {
                  operator
                } = assignment.node;

                if (operator === "=") {
                  pending.push(assignment.get("right"));
                } else if (operator === "+=") {
                  type = type !== void 0 && type !== 0 ? 2 : 0;
                } else {
                  type = 2;
                  break;
                }
              }
            }

            continue;
          }

          type = 2;
        } else {
          type = 2;
        }
      }

      extra.tagNameType = isOutputHTML() ? type : 2;
      extra.tagNameNullable = nullable;
      extra.tagNameDynamic = true;
    }

    if (extra.tagNameType === void 0) {
      extra.tagNameType = 2;
    }
  }

  return extra.tagNameType;
}

function startSection(path3) {
  const extra = path3.node.extra ??= {};
  let sectionId = extra.sectionId;

  if (sectionId === void 0) {
    const programExtra = path3.hub.file.path.node.extra ??= {};
    const sectionNameNode = path3.parent?.name;
    const sectionName = sectionNameNode?.value ?? sectionNameNode?.name ?? "dynamic";
    sectionId = extra.sectionId = programExtra.nextSectionId || 0;
    programExtra.nextSectionId = sectionId + 1;
    programExtra.sectionNames = programExtra.sectionNames ?? [];
    programExtra.sectionNames[sectionId] = currentProgramPath.scope.generateUid(sectionName + "Body");
  }

  return sectionId;
}

function getOrCreateSectionId(path3) {
  let cur = path3;

  while (true) {
    if (cur.type === "Program" || cur.type === "MarkoTagBody" && analyzeTagNameType(cur.parentPath) !== 0) {
      return startSection(cur);
    }

    cur = cur.parentPath;
  }
}

function getSectionId(path3) {
  let sectionId;
  let currentPath = path3;

  while ((sectionId = currentPath.node.extra?.sectionId) === void 0) {
    currentPath = currentPath.parentPath;
  }

  return sectionId;
}

function createSectionState(key, init) {
  return [sectionId => {
    const arrayOfSectionData = currentProgramPath.state[key] ??= [];
    const sectionData = arrayOfSectionData[sectionId] ??= init && init(sectionId);
    return sectionData;
  }, (sectionId, value) => {
    const arrayOfSectionData = currentProgramPath.state[key] ??= [];
    arrayOfSectionData[sectionId] = value;
  }];
}

var [getScopeIdentifier] = createSectionState("scopeIdentifier", sectionId => currentProgramPath.scope.generateUidIdentifier(`scope${sectionId}_`));

function forEachSectionId(fn) {
  const {
    nextSectionId
  } = currentProgramPath.node.extra;

  for (let sectionId = 0; sectionId < nextSectionId; sectionId++) {
    fn(sectionId);
  }
}

function forEachSectionIdReverse(fn) {
  const {
    nextSectionId
  } = currentProgramPath.node.extra;

  for (let sectionId = nextSectionId; sectionId--;) {
    fn(sectionId);
  }
}



function insertInArray(compare, arr, val) {
  const len = arr.length;
  let max = len;
  let pos = 0;

  while (pos < max) {
    const mid = pos + max >>> 1;
    const compareResult = compare(arr[mid], val);
    if (compareResult === 0) return arr;
    if (compareResult > 0) max = mid;else pos = mid + 1;
  }

  let cur = val;

  while (pos < len) {
    const next = cur;
    cur = arr[pos];
    arr[pos++] = next;
  }

  arr[len] = cur;
  return arr;
}

function findIndex(compare, arr, val) {
  let max = arr.length;
  let pos = 0;

  while (pos < max) {
    const mid = pos + max >>> 1;
    const compareResult = compare(arr[mid], val);
    if (compareResult === 0) return mid;
    if (compareResult > 0) max = mid;else pos = mid + 1;
  }

  return -1;
}

function createSortedCollection(compare) {
  return {
    insert(data, val, immutable = false) {
      if (data) {
        if (Array.isArray(data)) {
          return insertInArray(compare, immutable ? [...data] : data, val);
        } else {
          const compareResult = compare(data, val);

          if (compareResult !== 0) {
            return compareResult < 0 ? [data, val] : [val, data];
          }
        }
      }

      return val;
    },

    find(data, val) {
      if (data) {
        if (Array.isArray(data)) {
          return data[findIndex(compare, data, val)];
        } else {
          return data === val ? data : void 0;
        }
      }
    },

    count(data) {
      if (data === void 0) return 0;
      if (!Array.isArray(data)) return 1;
      return data.length;
    }

  };
}

var [getReservesByType] = createSectionState("reservesByType", () => [void 0, void 0, void 0]);

function reserveScope(type, sectionId, node, name, debugKey = name) {
  const extra = node.extra ??= {};

  if (extra.reserve) {
    const reserve2 = extra.reserve;
    reserve2.name += "_" + name;
    return reserve2;
  }

  const reservesByType = getReservesByType(sectionId);
  const reserve = extra.reserve = {
    id: 0,
    type,
    name,
    debugKey,
    sectionId
  };

  if (reservesByType[type]) {
    reserve.id = reservesByType[type].push(reserve) - 1;
  } else {
    reservesByType[type] = [reserve];
  }

  return reserve;
}

function assignFinalIds() {
  forEachSectionId(sectionId => {
    let curIndex = 0;

    for (const reserves of getReservesByType(sectionId)) {
      if (reserves) {
        for (const reserve of reserves) {
          reserve.id = curIndex;
          curIndex += 1;
        }
      }
    }
  });
}

function getNodeLiteral(reserve) {
  if (!isOptimize()) {
    return external_marko_compiler_namespaceObject.types.stringLiteral(reserve.debugKey + (reserve.type === 0 ? `/${reserve.id}` : ""));
  }

  return external_marko_compiler_namespaceObject.types.numericLiteral(reserve.id);
}

function compareReserves(a, b) {
  return a.sectionId - b.sectionId || a.type - b.type || a.id - b.id;
}

var {
  insert: insertReserve,
  count: countReserves
} = createSortedCollection(compareReserves);

var import_babel_utils2 = __toESM(require_dist2());



function translator_toString(val) {
  return val == null ? "" : val + "";
}

var escapeXML = escapeIfNeeded(val => {
  let result = "";
  let lastPos = 0;

  for (let i = 0, len = val.length; i < len; i++) {
    let replacement;

    switch (val[i]) {
      case "<":
        replacement = "&lt;";
        break;

      case "&":
        replacement = "&amp;";
        break;

      default:
        continue;
    }

    result += val.slice(lastPos, i) + replacement;
    lastPos = i + 1;
  }

  if (lastPos) {
    return result + val.slice(lastPos);
  }

  return val;
});
var escapeScript = escapeIfNeeded(escapeTagEnding("script"));
var escapeStyle = escapeIfNeeded(escapeTagEnding("style"));

function escapeTagEnding(tagName) {
  const openTag = `</${tagName}`;
  const escaped = `<\\/${tagName}`;
  return val => {
    let result = "";
    let lastPos = 0;
    let i = val.indexOf(openTag, lastPos);

    while (i !== -1) {
      result += val.slice(lastPos, i) + escaped;
      lastPos = i + 1;
      i = val.indexOf(openTag, lastPos);
    }

    if (lastPos) {
      return result + val.slice(lastPos);
    }

    return val;
  };
}

function escapeAttrValue(val) {
  const len = val.length;
  let i = 0;

  do {
    switch (val[i]) {
      case '"':
        return quoteValue(val, i + 1, "'", "&#39;");

      case "'":
      case ">":
      case " ":
      case "	":
      case "\n":
      case "\r":
      case "\f":
        return quoteValue(val, i + 1, '"', "&#34;");

      default:
        i++;
        break;
    }
  } while (i < len);

  return val;
}

function escapeIfNeeded(escape) {
  return val => {
    if (val == null) {
      return "";
    }

    switch (typeof val) {
      case "string":
        return escape(val);

      case "boolean":
      case "number":
        return val + "";

      default:
        return escape(val + "");
    }
  };
}

function quoteValue(val, startPos, quote, escaped) {
  let result = quote;
  let lastPos = 0;

  for (let i = startPos, len = val.length; i < len; i++) {
    if (val[i] === quote) {
      result += val.slice(lastPos, i) + escaped;
      lastPos = i + 1;
    }
  }

  return result + (lastPos ? val.slice(lastPos) : val) + quote;
}

function classValue(value) {
  return toDelimitedString(value, " ", stringifyClassObject);
}

function stringifyClassObject(name, value) {
  if (isVoid(value)) {
    return "";
  }

  return name;
}

function styleValue(value) {
  return toDelimitedString(value, ";", stringifyStyleObject);
}

var NON_DIMENSIONAL = /^(--|ta|or|li|z)|n-c|i(do|nk|m|t)|w$|we/;

function stringifyStyleObject(name, value) {
  if (isVoid(value)) {
    return "";
  }

  if (typeof value === "number" && value && !NON_DIMENSIONAL.test(name)) {
    value += "px";
  }

  return `${name}:${value}`;
}

function toDelimitedString(val, delimiter, stringify) {
  switch (typeof val) {
    case "string":
      return val;

    case "object":
      if (val !== null) {
        let result = "";
        let curDelimiter = "";

        if (Array.isArray(val)) {
          for (const v of val) {
            const part = toDelimitedString(v, delimiter, stringify);

            if (part !== "") {
              result += curDelimiter + part;
              curDelimiter = delimiter;
            }
          }
        } else {
          for (const name in val) {
            const v = val[name];
            const part = stringify(name, v);

            if (part !== "") {
              result += curDelimiter + part;
              curDelimiter = delimiter;
            }
          }
        }

        return result;
      }

  }

  return "";
}

function isVoid(value) {
  return value == null || value === false;
}

function classAttr(val) {
  return stringAttr("class", classValue(val));
}

function styleAttr(val) {
  return stringAttr("style", styleValue(val));
}

function attr(name, val) {
  return isVoid(val) ? "" : nonVoidUntypedAttr(name, val);
}

function stringAttr(name, val) {
  return val && ` ${name}=${escapeAttrValue(val)}`;
}

function nonVoidUntypedAttr(name, val) {
  switch (typeof val) {
    case "string":
      return ` ${name + attrAssignment(val)}`;

    case "boolean":
      return ` ${name}`;

    case "number":
      return ` ${name}=${val}`;

    case "object":
      if (val instanceof RegExp) {
        return ` ${name}=${escapeAttrValue(val.source)}`;
      }

    default:
      return ` ${name + attrAssignment(val + "")}`;
  }
}

function attrAssignment(val) {
  return val ? `=${escapeAttrValue(val)}` : "";
}

function reorder_runtime_default(id, doc, walker, node, replacementNode, targetParent, targetNode, refNode, nextNode, runtimePrefix) {
  runtimePrefix = "RUNTIME_ID$";
  id = runtimePrefix + id;
  doc = document;
  walker = doc[runtimePrefix + "w"] || (doc[runtimePrefix + "w"] = doc.createTreeWalker(doc, 128));

  while (node = walker.nextNode()) {
    if (node.data.indexOf(runtimePrefix) === 0) {
      walker[node.data] = node;
    }
  }

  replacementNode = doc.getElementById(id);
  targetNode = walker[id];
  targetParent = targetNode.parentNode;

  while (refNode = replacementNode.firstChild) {
    targetParent.insertBefore(refNode, targetNode);
  }

  nextNode = replacementNode.parentNode;
  nextNode.removeChild(replacementNode.nextSibling);
  nextNode.removeChild(replacementNode);
  refNode = walker[id + "/"];

  while (nextNode = targetNode.nextSibling, targetParent.removeChild(targetNode) !== refNode) {
    targetNode = nextNode;
  }
}

var {
  hasOwnProperty: translator_hasOwnProperty
} = Object.prototype;
var REF_START_CHARS = "hjkmoquxzABCDEFGHIJKLNPQRTUVWXYZ$_";
var REF_START_CHARS_LEN = REF_START_CHARS.length;
var REF_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$_";
var REF_CHARS_LEN = REF_CHARS.length;
var SYMBOL_REGISTRY_ID = Symbol("REGISTRY_ID");
var SYMBOL_SCOPE = Symbol("SCOPE");
var SYMBOL_OWNER = Symbol("OWNER");
var runtimeId = "M";
var reorderRuntimeString = String(reorder_runtime_default).replace("RUNTIME_ID", runtimeId);
var pureFunctions = ["createRenderFn", "createRenderer", "source", "derivation", "subscriber", "closure", "loop", "conditional", "destructureSources", "bind", "bindRenderer", "inLoopScope", "inConditionalScope"];

function importRuntime(name) {
  const {
    output
  } = getMarkoOpts();
  return (0, import_babel_utils2.importNamed)(currentProgramPath.hub.file, getRuntimePath(output), name);
}

function callRuntime(name, ...args) {
  const callExpression2 = external_marko_compiler_namespaceObject.types.callExpression(importRuntime(name), filterArguments(args));

  if (pureFunctions.includes(name)) {
    callExpression2.leadingComments = [{
      type: "CommentBlock",
      value: ` @__PURE__ `
    }];
  }

  return callExpression2;
}

function getHTMLRuntime() {
  return {
    escapeXML,
    toString: translator_toString,
    attr,
    classAttr,
    styleAttr,
    escapeScript,
    escapeStyle
  };
}

function getRuntimePath(output) {
  const {
    optimize
  } = getMarkoOpts();
  return `@marko/runtime-fluurt/${ false ? 0 : optimize ? "dist" : "dist/debug"}/${output === "html" ? "html" : "dom"}`;
}

function callRead(reference, targetSectionId) {
  return external_marko_compiler_namespaceObject.types.memberExpression(getScopeExpression(reference, targetSectionId), getNodeLiteral(reference), true);
}

function getScopeExpression(reference, sectionId) {
  const diff = reference.sectionId !== sectionId ? 1 : 0;
  let scope = scopeIdentifier;

  for (let i = 0; i < diff; i++) {
    scope = external_marko_compiler_namespaceObject.types.memberExpression(scope, external_marko_compiler_namespaceObject.types.identifier("_"));
  }

  return scope;
}

function filterArguments(args) {
  const filteredArgs = [];

  for (let i = args.length; i--;) {
    const arg = args[i];

    if (arg || filteredArgs.length) {
      filteredArgs[i] = arg || external_marko_compiler_namespaceObject.types.nullLiteral();
    }
  }

  return filteredArgs;
}

var import_babel_utils4 = __toESM(require_dist2());

var import_babel_utils3 = __toESM(require_dist2());





function toTemplateOrStringLiteral(parts) {
  const strs = [];
  const exprs = [];
  let curStr = parts[0];

  for (let i = 1; i < parts.length; i++) {
    let content = parts[i];

    if (typeof content === "object") {
      if (external_marko_compiler_namespaceObject.types.isStringLiteral(content)) {
        content = content.value;
      } else if (external_marko_compiler_namespaceObject.types.isTemplateLiteral(content)) {
        let nextIndex = i + 1;
        const exprLen = content.expressions.length;
        shiftItems(parts, nextIndex, content.quasis.length + exprLen);

        for (let j = 0; j < exprLen; j++) {
          parts[nextIndex++] = content.quasis[j].value.raw;
          parts[nextIndex++] = content.expressions[j];
        }

        parts[nextIndex] = content.quasis[exprLen].value.raw;
        continue;
      } else {
        exprs.push(content);
        strs.push(curStr);
        curStr = "";
        continue;
      }
    }

    curStr += content;
  }

  if (exprs.length) {
    strs.push(curStr);
    return external_marko_compiler_namespaceObject.types.templateLiteral(strs.map(raw => external_marko_compiler_namespaceObject.types.templateElement({
      raw
    })), exprs);
  } else if (curStr) {
    return external_marko_compiler_namespaceObject.types.stringLiteral(curStr);
  }
}

function appendLiteral(arr, str) {
  arr[arr.length - 1] += str;
}

function shiftItems(list, start, offset) {
  for (let i = list.length - 1; i >= start; i--) {
    list[i + offset] = list[i];
  }
}


var [getWalks] = createSectionState("walks", () => [""]);
var [getWalkComment] = createSectionState("walkComment", () => []);
var [getSteps] = createSectionState("steps", () => []);
var walkCodeToName = {
  [32]: "get",
  [33]: "before",
  [35]: "after",
  [36]: "inside",
  [37]: "replace",
  [38]: "endChild",
  [47]: "beginChild",
  [67]: "next",
  [97]: "over",
  [107]: "out",
  [117]: "multiplier",
  [91]: "nextEnd",
  [106]: "overEnd",
  [116]: "outEnd",
  [126]: "multiplierEnd"
};

function enter(path3) {
  getSteps(getSectionId(path3)).push(0);
}

function exit(path3) {
  getSteps(getSectionId(path3)).push(1);
}

function enterShallow(path3) {
  getSteps(getSectionId(path3)).push(0, 1);
}

function injectWalks(path3, expr) {
  const walks = getWalks(getSectionId(path3));
  const walkComment = getWalkComment(getSectionId(path3));
  walkComment.push(`${walkCodeToName[47]}`, expr.name, walkCodeToName[38]);
  appendLiteral(walks, String.fromCharCode(47));
  walks.push(expr, String.fromCharCode(38));
}

function visit(path3, code) {
  const {
    reserve
  } = path3.node.extra;

  if (code && (!reserve || reserve.type !== 0)) {
    throw path3.buildCodeFrameError("Tried to visit a node that was not marked as needing to visit during analyze.");
  }

  if (isOutputHTML()) {
    return;
  }

  const sectionId = getSectionId(path3);
  const steps = getSteps(sectionId);
  const walks = getWalks(sectionId);
  const walkComment = getWalkComment(sectionId);
  let walkString = "";

  if (steps.length) {
    const walks2 = [];
    let depth = 0;

    for (const step of steps) {
      if (step === 0) {
        depth++;
        walks2.push(67);
      } else {
        depth--;

        if (depth >= 0) {
          walks2.length = walks2.lastIndexOf(67);
          walks2.push(97);
        } else {
          walks2.length = walks2.lastIndexOf(107) + 1;
          walks2.push(107);
          depth = 0;
        }
      }
    }

    let current = walks2[0];
    let count = 0;

    for (const walk of walks2) {
      if (walk !== current) {
        walkComment.push(`${walkCodeToName[current]}(${count})`);
        walkString += nCodeString(current, count);
        current = walk;
        count = 1;
      } else {
        count++;
      }
    }

    walkComment.push(`${walkCodeToName[current]}(${count})`);
    walkString += nCodeString(current, count);
    steps.length = 0;
  }

  if (code !== void 0) {
    if (code !== 32) {
      writeTo(path3)`<!>`;
    }

    walkComment.push(`${walkCodeToName[code]}`);
    walkString += String.fromCharCode(code);
  }

  appendLiteral(walks, walkString);
}

function nCodeString(code, number) {
  switch (code) {
    case 67:
      return toCharString(number, code, 20);

    case 97:
      return toCharString(number, code, 10);

    case 107:
      return toCharString(number, code, 10);

    default:
      throw new Error(`Unexpected walk code: ${code}`);
  }
}

function toCharString(number, startCode, rangeSize) {
  let result = "";

  if (number >= rangeSize) {
    const multiplier = Math.floor(number / rangeSize);
    result += toCharString(multiplier, 117, 10);
    number -= multiplier * rangeSize;
  }

  result += String.fromCharCode(startCode + number);
  return result;
}

function getWalkString(sectionId) {
  const walkLiteral = toTemplateOrStringLiteral(getWalks(sectionId)) || external_marko_compiler_namespaceObject.types.stringLiteral("");

  if (walkLiteral.value !== "") {
    walkLiteral.leadingComments = [{
      type: "CommentBlock",
      value: " " + getWalkComment(sectionId).join(", ") + " "
    }];
  }

  return walkLiteral;
}

var [getRenderer] = createSectionState("renderer", sectionId => {
  const name = currentProgramPath.node.extra.sectionNames[sectionId];
  return external_marko_compiler_namespaceObject.types.identifier(name);
});
var [getWrites] = createSectionState("writes", () => [""]);
var [getRegisterRenderer, setRegisterRenderer] = createSectionState("registerRenderer", () => false);

function writeTo(path3) {
  const sectionId = getSectionId(path3);
  return (strs, ...exprs) => {
    const exprsLen = exprs.length;
    const writes = getWrites(sectionId);
    appendLiteral(writes, strs[0]);

    for (let i = 0; i < exprsLen; i++) {
      writes.push(exprs[i], strs[i + 1]);
    }
  };
}

function writePrependTo(path3) {
  const sectionId = getSectionId(path3);
  return (strs, ...exprs) => {
    const exprsLen = exprs.length;
    const writes = getWrites(sectionId);
    writes[0] += strs[exprsLen];

    for (let i = 0; i < exprsLen; i++) {
      writes.unshift(strs[i], exprs[i]);
    }
  };
}

function consumeHTML(path3) {
  const writes = getWrites(getSectionId(path3));
  const result = toTemplateOrStringLiteral(writes);
  writes.length = 0;
  writes[0] = "";

  if (result) {
    return external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("write", result));
  }
}

function hasPendingHTML(path3) {
  const writes = getWrites(getSectionId(path3));
  return Boolean(writes.length > 1 || writes[0]);
}

function flushBefore(path3) {
  const expr = consumeHTML(path3);

  if (expr) {
    path3.insertBefore(expr)[0].skip();
  }
}

function flushInto(path3) {
  const target = path3.isProgram() ? path3 : path3.get("body");
  const expr = consumeHTML(target);

  if (expr) {
    target.pushContainer("body", expr)[0].skip();
  }
}

function getSectionMeta(sectionId) {
  const writes = getWrites(sectionId);
  return {
    apply: getSetup(sectionId),
    walks: getWalkString(sectionId),
    writes: toTemplateOrStringLiteral(writes) || external_marko_compiler_namespaceObject.types.stringLiteral(""),
    register: getRegisterRenderer(sectionId)
  };
}

function markNode(path3) {
  const sectionId = getSectionId(path3);
  const {
    reserve
  } = path3.node.extra;

  if (reserve?.type !== 0) {
    throw path3.buildCodeFrameError("Tried to mark a node that was not determined to need a mark during analyze.");
  }

  if (isOutputHTML()) {
    writeTo(path3)`${callRuntime("markHydrateNode", getScopeIdentifier(sectionId), getNodeLiteral(reserve))}`;
  }
}

function assertNoSpreadAttrs(tag) {
  for (const attr2 of tag.get("attributes")) {
    if (attr2.isMarkoSpreadAttribute()) {
      throw attr2.buildCodeFrameError(`The <${tag.get("name")}> tag does not support ...spread attributes.`);
    }
  }
}

function assertNoBodyContent(tag) {
  if (tag.node.body.body.length) {
    throw tag.get("name").buildCodeFrameError(`The <${tag.get("name")}> tag does not support body content.`);
  }
}

var [returnId, _setReturnId] = createSectionState("returnId");
var translator_return_default = {
  translate(tag) {
    (0, import_babel_utils3.assertNoVar)(tag);
    (0, import_babel_utils3.assertNoParams)(tag);
    assertNoBodyContent(tag);
    assertNoSpreadAttrs(tag);
    const sectionId = getSectionId(tag);
    const {
      node,
      hub: {
        file
      }
    } = tag;
    const [defaultAttr] = node.attributes;

    if (!external_marko_compiler_namespaceObject.types.isMarkoAttribute(defaultAttr) || !defaultAttr.default) {
      throw tag.get("name").buildCodeFrameError(`The '<return>' tag requires default attribute like '<return=VALUE>'.`);
    }

    if (node.attributes.length > 1) {
      const start = node.attributes[1].loc?.start;
      const end = node.attributes[node.attributes.length - 1].loc?.end;
      const msg = `The '<return>' tag only supports a default attribute.`;

      if (start == null || end == null) {
        throw tag.get("name").buildCodeFrameError(msg);
      } else {
        throw tag.hub.buildError({
          loc: {
            start,
            end
          }
        }, msg, Error);
      }
    }

    if (isOutputHTML()) {
      flushBefore(tag);
      const returnId2 = file.path.scope.generateUidIdentifier("return");

      _setReturnId(sectionId, returnId2);

      tag.replaceWith(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(returnId2, defaultAttr.value)]))[0].skip();
    } else {
      const signal = getSignal(sectionId, defaultAttr.extra?.valueReferences?.references);
      const tagVarSignalIdentifier = importRuntime("tagVarSignal");
      signal.subscribers.push(tagVarSignalIdentifier);
      addStatement("apply", sectionId, defaultAttr.extra?.valueReferences, external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("setSource", scopeIdentifier, external_marko_compiler_namespaceObject.types.identifier(tagVarSignalIdentifier.name), defaultAttr.value)));
      tag.remove();
    }
  },

  autocomplete: [{
    displayText: "return=<value>",
    description: "Provides a value for use in a parent template.",
    snippet: "return=${1:value}",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#return"
  }]
};
var [getSignals] = createSectionState("signals", () => new Map());
var [getSubscribeBuilder, _setSubscribeBuilder] = createSectionState("queue");
var [getClosures] = createSectionState("closures", () => []);
var [forceHydrateScope, _setForceHydrateScope] = createSectionState("forceHydrateScope");
var [getSerializedScopeProperties] = createSectionState("serializedScopeProperties", () => new Map());
var [getHydrateScopeBuilder, setHydrateScopeBuilder] = createSectionState("hydrateScopeBuilder");

function setForceHydrateScope(sectionId) {
  _setForceHydrateScope(sectionId, true);
}

function setSubscriberBuilder(tag, builder) {
  _setSubscribeBuilder(getSectionId(tag.get("body")), builder);
}

function getSignal(sectionId, reserve) {
  const key = !Array.isArray(reserve) ? reserve : reserve.map(r => `${r.sectionId}/${r.id}`).sort().join("-");
  const signals = getSignals(sectionId);
  let signal = signals.get(key);

  if (!signal) {
    signals.set(key, signal = {
      identifier: external_marko_compiler_namespaceObject.types.identifier(generateSignalName(sectionId, reserve)),
      reserve,
      sectionId,
      render: [],
      hydrate: [],
      hydrateInlineReferences: void 0,
      subscribers: []
    });

    if (!reserve) {
      signal.build = () => {
        for (const subscriber of signal.subscribers) {
          signal.render.push(external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("notifySignal", scopeIdentifier, subscriber)));
        }

        return external_marko_compiler_namespaceObject.types.arrowFunctionExpression([scopeIdentifier], external_marko_compiler_namespaceObject.types.blockStatement(signal.render));
      };
    } else if (Array.isArray(reserve)) {
      subscribe(reserve, signal);

      signal.build = () => {
        return callRuntime("subscriber", external_marko_compiler_namespaceObject.types.arrayExpression(signal.subscribers), external_marko_compiler_namespaceObject.types.numericLiteral(reserve.length), getComputeFn(sectionId, external_marko_compiler_namespaceObject.types.blockStatement(signal.render), reserve));
      };
    } else if (reserve.sectionId !== sectionId) {
      getClosures(sectionId).push(signal.identifier);

      signal.build = () => {
        const builder = getSubscribeBuilder(sectionId);
        const provider = getSignal(reserve.sectionId, reserve);

        if (builder) {
          provider.subscribers.push(builder(signal.identifier));
        } else if (!provider.hasDynamicSubscribers) {
          provider.hasDynamicSubscribers = true;
          provider.subscribers.push(callRuntime("dynamicSubscribers", getNodeLiteral(reserve)));
        }

        return callRuntime(builder ? "closure" : "dynamicClosure", external_marko_compiler_namespaceObject.types.numericLiteral(1), getNodeLiteral(reserve), external_marko_compiler_namespaceObject.types.arrayExpression(signal.subscribers), external_marko_compiler_namespaceObject.types.arrowFunctionExpression([scopeIdentifier, external_marko_compiler_namespaceObject.types.identifier(reserve.name)], external_marko_compiler_namespaceObject.types.blockStatement(signal.render)));
      };
    } else {
      signal.build = () => {
        return external_marko_compiler_namespaceObject.types.stringLiteral("SIGNAL NOT INITIALIZED");
      };
    }
  }

  return signal;
}

function initSource(reserve) {
  const sectionId = reserve.sectionId;
  const signal = getSignal(sectionId, reserve);

  signal.build = () => {
    return callRuntime("source", getNodeLiteral(reserve), external_marko_compiler_namespaceObject.types.arrayExpression(signal.subscribers), external_marko_compiler_namespaceObject.types.arrowFunctionExpression([scopeIdentifier, external_marko_compiler_namespaceObject.types.identifier(reserve.name)], external_marko_compiler_namespaceObject.types.blockStatement(signal.render)));
  };

  return signal;
}

function initDerivation(reserve, providers, compute) {
  const sectionId = reserve.sectionId;
  const signal = getSignal(sectionId, reserve);

  signal.build = () => {
    return callRuntime("derivation", getNodeLiteral(reserve), external_marko_compiler_namespaceObject.types.numericLiteral(Array.isArray(providers) ? providers.length : 1), external_marko_compiler_namespaceObject.types.arrayExpression(signal.subscribers), getComputeFn(sectionId, compute, providers), external_marko_compiler_namespaceObject.types.arrowFunctionExpression([scopeIdentifier, external_marko_compiler_namespaceObject.types.identifier(reserve.name)], external_marko_compiler_namespaceObject.types.blockStatement(signal.render)));
  };

  subscribe(providers, signal);
  return signal;
}

function initContextProvider(templateId, reserve, providers, compute, renderer) {
  const sectionId = reserve.sectionId;
  const scopeAccessor = getNodeLiteral(reserve);
  const valueAccessor = external_marko_compiler_namespaceObject.types.stringLiteral(`${reserve.id}${":"}`);
  const signal = getSignal(sectionId, reserve);

  signal.build = () => {
    return callRuntime("derivation", valueAccessor, external_marko_compiler_namespaceObject.types.numericLiteral(Array.isArray(providers) ? providers.length : 1), external_marko_compiler_namespaceObject.types.arrayExpression(signal.subscribers), getComputeFn(sectionId, compute, providers), external_marko_compiler_namespaceObject.types.arrowFunctionExpression([scopeIdentifier, external_marko_compiler_namespaceObject.types.identifier(reserve.name)], external_marko_compiler_namespaceObject.types.blockStatement(signal.render)));
  };

  subscribe(providers, signal);
  signal.subscribers.push(callRuntime("dynamicSubscribers", valueAccessor));
  addStatement("apply", reserve.sectionId, void 0, external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("initContextProvider", scopeIdentifier, scopeAccessor, valueAccessor, external_marko_compiler_namespaceObject.types.stringLiteral(templateId), renderer)));
  return signal;
}

function initContextConsumer(templateId, reserve) {
  const sectionId = reserve.sectionId;
  const signal = getSignal(sectionId, reserve);
  getClosures(sectionId).push(signal.identifier);

  signal.build = () => {
    return callRuntime("contextClosure", getNodeLiteral(reserve), external_marko_compiler_namespaceObject.types.stringLiteral(templateId), external_marko_compiler_namespaceObject.types.arrayExpression(signal.subscribers), external_marko_compiler_namespaceObject.types.arrowFunctionExpression([scopeIdentifier, external_marko_compiler_namespaceObject.types.identifier(reserve.name)], external_marko_compiler_namespaceObject.types.blockStatement(signal.render)));
  };

  return signal;
}

function getComputeFn(sectionId, body, references) {
  const params = [scopeIdentifier];

  if (Array.isArray(references)) {
    references.forEach(binding => params.push(external_marko_compiler_namespaceObject.types.assignmentPattern(external_marko_compiler_namespaceObject.types.identifier(binding.name), callRead(binding, sectionId))));
  } else if (references) {
    params.push(external_marko_compiler_namespaceObject.types.assignmentPattern(external_marko_compiler_namespaceObject.types.identifier(references.name), callRead(references, sectionId)));
  }

  return external_marko_compiler_namespaceObject.types.arrowFunctionExpression(params, body);
}

function subscribe(provider, subscriber) {
  if (Array.isArray(provider)) {
    provider.forEach(p => subscribe(p, subscriber));
    return;
  }

  const providerSignal = getSignal(subscriber.sectionId, provider);
  providerSignal.subscribers.push(subscriber.identifier);
}

function generateSignalName(sectionId, references) {
  let name;

  if (references) {
    if (Array.isArray(references)) {
      name = "expr";

      for (const ref of references) {
        name += `_${ref.name}`;
      }
    } else {
      name = references.name;
    }
  } else {
    name = "setup";
  }

  name += sectionId ? currentProgramPath.node.extra.sectionNames[sectionId].replace("_", "$") : "";
  return currentProgramPath.scope.generateUid(name);
}

function queueSource(source, value, targetSectionId) {
  return callRuntime("queueSource", getScopeExpression2(source.sectionId, targetSectionId), source.identifier, value);
}

function getScopeExpression2(ownerSectionId, sectionId) {
  const diff = ownerSectionId !== sectionId ? 1 : 0;
  let scope = scopeIdentifier;

  for (let i = 0; i < diff; i++) {
    scope = external_marko_compiler_namespaceObject.types.memberExpression(scope, external_marko_compiler_namespaceObject.types.identifier("_"));
  }

  return scope;
}

function finalizeSignalArgs(args) {
  for (let i = args.length - 1; i >= 0; i--) {
    const arg = args[i];

    if (external_marko_compiler_namespaceObject.types.isArrowFunctionExpression(arg)) {
      const body = arg.body.body;

      if (body) {
        if (body.length === 0) {
          args[i] = external_marko_compiler_namespaceObject.types.nullLiteral();
        } else if (body.length === 1 && external_marko_compiler_namespaceObject.types.isExpressionStatement(body[0])) {
          arg.body = body[0].expression;
        }
      }
    }
  }

  for (let i = args.length - 1; external_marko_compiler_namespaceObject.types.isNullLiteral(args[i]);) {
    args.length = i--;
  }
}

function addStatement(type, targetSectionId, references, statement, originalNodes, isInlined) {
  const reserve = references?.references;
  const signal = getSignal(targetSectionId, reserve);
  const statements = signal[type === "apply" ? "render" : "hydrate"] ??= [];

  if (Array.isArray(statement)) {
    statements.push(...statement);
  } else {
    statements.push(statement);
  }

  if (type === "hydrate") {
    if (Array.isArray(originalNodes)) {
      for (const node of originalNodes) {
        if (isInlined || !external_marko_compiler_namespaceObject.types.isFunction(node)) {
          addHydrateReferences(signal, node);
        }
      }
    } else {
      if (isInlined || !external_marko_compiler_namespaceObject.types.isFunction(originalNodes)) {
        addHydrateReferences(signal, originalNodes);
      }
    }
  }
}

function addHydrateReferences(signal, expression) {
  const references = expression.extra?.references?.references;
  let refs = signal.hydrateInlineReferences;

  if (references) {
    if (Array.isArray(references)) {
      for (const ref of references) {
        refs = insertReserve(refs, ref);
      }
    } else {
      refs = insertReserve(refs, references);
    }
  }

  signal.hydrateInlineReferences = refs;
}

function getHydrateRegisterId(sectionId, references) {
  const {
    markoOpts: {
      optimize
    },
    opts: {
      filename
    }
  } = currentProgramPath.hub.file;
  let name = "";

  if (references) {
    if (typeof references === "string") {
      name += `_${references}`;
    } else if (Array.isArray(references)) {
      for (const ref of references) {
        name += `_${ref.name}`;
      }
    } else {
      name += `_${references.name}`;
    }
  }

  return (0, import_babel_utils4.getTemplateId)(optimize, `${filename}_${sectionId}${name}`);
}

function writeSignals(sectionId) {
  const signals = getSignals(sectionId);
  const declarations = Array.from(signals.values()).sort(sortSignals).flatMap(signal => {
    let value = signal.build();

    if (signal.register) {
      value = callRuntime("register", external_marko_compiler_namespaceObject.types.stringLiteral(getHydrateRegisterId(sectionId, signal.reserve)), value);
    }

    const signalDeclarator = external_marko_compiler_namespaceObject.types.variableDeclarator(signal.identifier, value);
    let hydrateDeclarator;

    if (signal.hydrate.length) {
      const hydrateIdentifier = external_marko_compiler_namespaceObject.types.identifier("_hydrate" + signal.identifier.name);

      if (signal.hydrateInlineReferences) {
        signal.hydrate.unshift(external_marko_compiler_namespaceObject.types.variableDeclaration("const", (Array.isArray(signal.hydrateInlineReferences) ? signal.hydrateInlineReferences : [signal.hydrateInlineReferences]).map(binding => external_marko_compiler_namespaceObject.types.variableDeclarator(external_marko_compiler_namespaceObject.types.identifier(binding.name), callRead(binding, sectionId)))));
      }

      hydrateDeclarator = external_marko_compiler_namespaceObject.types.variableDeclarator(hydrateIdentifier, callRuntime("register", external_marko_compiler_namespaceObject.types.stringLiteral(getHydrateRegisterId(sectionId, signal.reserve)), external_marko_compiler_namespaceObject.types.arrowFunctionExpression([scopeIdentifier], signal.hydrate.length === 1 && external_marko_compiler_namespaceObject.types.isExpressionStatement(signal.hydrate[0]) ? signal.hydrate[0].expression : external_marko_compiler_namespaceObject.types.blockStatement(signal.hydrate))));
      signal.render.push(external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("queueHydrate", scopeIdentifier, hydrateIdentifier)));
    }

    if (external_marko_compiler_namespaceObject.types.isCallExpression(value)) {
      finalizeSignalArgs(value.arguments);
    }

    return hydrateDeclarator ? [external_marko_compiler_namespaceObject.types.variableDeclaration("const", [hydrateDeclarator]), external_marko_compiler_namespaceObject.types.variableDeclaration("const", [signalDeclarator])] : external_marko_compiler_namespaceObject.types.variableDeclaration("const", [signalDeclarator]);
  });
  const newPaths = currentProgramPath.pushContainer("body", declarations);
  newPaths.forEach(newPath => newPath.traverse(bindFunctionsVisitor, {
    root: newPath,
    sectionId
  }));
}

function sortSignals(a, b) {
  const aReserves = getReserves(a);
  const bReserves = getReserves(b);

  for (let i = Math.max(aReserves.length, bReserves.length) - 1; i >= 0; i--) {
    const diff = (bReserves[i] ?? -1) - (aReserves[i] ?? -1);
    if (diff !== 0) return diff;
  }

  return 0;
}

function getReserves({
  reserve
}) {
  if (!reserve) {
    return [];
  } else if (Array.isArray(reserve)) {
    return reserve.map(getMappedId).sort();
  } else {
    return [getMappedId(reserve)];
  }
}

function getMappedId(reserve) {
  return (reserve.type === 0 ? 1 : 0) * 1e4 + reserve.id;
}

function addHTMLHydrateCall(sectionId, references) {
  addStatement("hydrate", sectionId, references, void 0, []);
}

function writeHTMLHydrateStatements(path3, tagVarIdentifier) {
  const sectionId = getOrCreateSectionId(path3);
  const allSignals = Array.from(getSignals(sectionId).values());
  const scopeIdentifier2 = getScopeIdentifier(sectionId);
  path3.unshiftContainer("body", external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(scopeIdentifier2, callRuntime("nextScopeId"))]));
  const refs = [];

  for (let i = allSignals.length; i--;) {
    if (allSignals[i].hydrate.length) {
      const references = allSignals[i].reserve;

      if (references) {
        if (Array.isArray(references)) {
          for (const ref of references) {
            insertReserve(refs, ref);
          }
        } else {
          insertReserve(refs, references);
        }
      }

      path3.pushContainer("body", external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("writeHydrateCall", scopeIdentifier2, external_marko_compiler_namespaceObject.types.stringLiteral(getHydrateRegisterId(sectionId, references)))));
    }
  }

  const serializedProperties = refs.reduce((acc, ref) => {
    acc.push(external_marko_compiler_namespaceObject.types.objectProperty(getNodeLiteral(ref), external_marko_compiler_namespaceObject.types.identifier(ref.name)));
    return acc;
  }, []);

  if (tagVarIdentifier && returnId(sectionId) !== void 0) {
    serializedProperties.push(external_marko_compiler_namespaceObject.types.objectProperty(external_marko_compiler_namespaceObject.types.stringLiteral("/"), tagVarIdentifier));
  }

  const additionalProperties = getSerializedScopeProperties(sectionId);

  for (const [key, value] of additionalProperties) {
    serializedProperties.push(external_marko_compiler_namespaceObject.types.objectProperty(key, value, !external_marko_compiler_namespaceObject.types.isLiteral(key)));
  }

  if (serializedProperties.length || forceHydrateScope(sectionId)) {
    const hydrateScopeBuilder = getHydrateScopeBuilder(sectionId);
    path3.pushContainer("body", external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("writeHydrateScope", scopeIdentifier2, hydrateScopeBuilder ? hydrateScopeBuilder(external_marko_compiler_namespaceObject.types.objectExpression(serializedProperties)) : external_marko_compiler_namespaceObject.types.objectExpression(serializedProperties))));
  }
}

var bindFunctionsVisitor = {
  FunctionExpression: {
    exit: bindFunction
  },
  ArrowFunctionExpression: {
    exit: bindFunction
  }
};

function bindFunction(fn, {
  root,
  sectionId
}) {
  const {
    node
  } = fn;
  const {
    extra
  } = node;
  const references = extra?.references?.references;
  const program = fn.hub.file.path;
  const functionIdentifier = program.scope.generateUidIdentifier(extra?.name);

  if (references) {
    if (node.body.type !== "BlockStatement") {
      node.body = external_marko_compiler_namespaceObject.types.blockStatement([external_marko_compiler_namespaceObject.types.returnStatement(node.body)]);
    }

    node.body.body.unshift(external_marko_compiler_namespaceObject.types.variableDeclaration("const", (Array.isArray(references) ? references : [references]).map(binding => external_marko_compiler_namespaceObject.types.variableDeclarator(external_marko_compiler_namespaceObject.types.identifier(binding.name), callRead(binding, sectionId)))));
  }

  let parent = fn.parentPath;

  while (parent) {
    if (parent.isFunction()) return;
    if (parent === root) return;
    parent = parent.parentPath;
  }

  root.insertBefore(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(functionIdentifier, node)]));
  node.params.unshift(scopeIdentifier);
  fn.replaceWith(callRuntime("bind", scopeIdentifier, functionIdentifier));
}

function getSetup(sectionId) {
  return getSignals(sectionId).get(void 0)?.identifier;
}

function isStatic(path3) {
  return path3.isImportDeclaration() || path3.isExportDeclaration() || path3.isMarkoScriptlet({
    static: true
  });
}

var html_default = {
  translate: {
    exit(program) {
      const tagVarIdentifier = program.scope.generateUidIdentifier("tagVar");
      flushInto(program);
      writeHTMLHydrateStatements(program, tagVarIdentifier);
      const returnIdentifier = returnId(0);

      if (returnIdentifier !== void 0) {
        program.pushContainer("body", external_marko_compiler_namespaceObject.types.returnStatement(returnIdentifier));
      }

      const renderContent = [];

      for (const child of program.get("body")) {
        if (!isStatic(child)) {
          renderContent.push(child.node);
          child.remove();
        } else if (child.isMarkoScriptlet()) {
          child.replaceWithMultiple(child.node.body);
        }
      }

      const rendererId = program.scope.generateUidIdentifier("renderer");
      const {
        attrs: attrs2
      } = program.node.extra;
      program.pushContainer("body", [external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(rendererId, external_marko_compiler_namespaceObject.types.arrowFunctionExpression([attrs2 ? attrs2.var : external_marko_compiler_namespaceObject.types.identifier("input"), tagVarIdentifier], external_marko_compiler_namespaceObject.types.blockStatement(renderContent)))]), external_marko_compiler_namespaceObject.types.exportDefaultDeclaration(rendererId), external_marko_compiler_namespaceObject.types.exportNamedDeclaration(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(external_marko_compiler_namespaceObject.types.identifier("render"), callRuntime("createRenderer", rendererId))]))]);
    }

  }
};

var dom_default = {
  translate: {
    exit(program) {
      visit(program);
      const sectionId = getSectionId(program);
      const templateIdentifier = external_marko_compiler_namespaceObject.types.identifier("template");
      const walksIdentifier = external_marko_compiler_namespaceObject.types.identifier("walks");
      const setupIdentifier = external_marko_compiler_namespaceObject.types.identifier("setup");
      const attrsSignalIdentifier = external_marko_compiler_namespaceObject.types.identifier("attrs");
      const closuresIdentifier = external_marko_compiler_namespaceObject.types.identifier("closures");
      const {
        attrs: attrs2
      } = program.node.extra;
      const {
        walks,
        writes,
        apply
      } = getSectionMeta(sectionId);
      forEachSectionIdReverse(childSectionId => {
        writeSignals(childSectionId);

        if (childSectionId !== sectionId) {
          const {
            walks: walks2,
            writes: writes2,
            apply: apply2,
            register: register2
          } = getSectionMeta(childSectionId);
          const closures2 = getClosures(childSectionId);
          const identifier = getRenderer(childSectionId);
          const renderer = callRuntime("createRenderer", writes2, walks2, apply2, closures2.length && external_marko_compiler_namespaceObject.types.arrayExpression(closures2));
          program.node.body.push(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(identifier, register2 ? callRuntime("register", external_marko_compiler_namespaceObject.types.stringLiteral(getHydrateRegisterId(childSectionId, "renderer")), renderer) : renderer)]));
        }
      });

      if (attrs2) {
        const exportSpecifiers = [];
        const subscribers = [];
        const statements = [];

        for (const name in attrs2.bindings) {
          const bindingIdentifier = attrs2.bindings[name];
          const signalIdentifier = getSignal(sectionId, bindingIdentifier.extra.reserve).identifier;
          exportSpecifiers.push(external_marko_compiler_namespaceObject.types.exportSpecifier(signalIdentifier, bindingIdentifier.extra.reserve.exportIdentifier));
          subscribers.push(signalIdentifier);
          statements.push(external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("setSource", scopeIdentifier, signalIdentifier, bindingIdentifier)));
        }

        program.node.body.push(external_marko_compiler_namespaceObject.types.exportNamedDeclaration(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(attrsSignalIdentifier, callRuntime("destructureSources", external_marko_compiler_namespaceObject.types.arrayExpression(subscribers), external_marko_compiler_namespaceObject.types.arrowFunctionExpression([scopeIdentifier, attrs2.var], external_marko_compiler_namespaceObject.types.blockStatement(statements))))])), external_marko_compiler_namespaceObject.types.exportNamedDeclaration(null, exportSpecifiers));
      }

      const closures = getClosures(sectionId);
      program.node.body.push(external_marko_compiler_namespaceObject.types.exportNamedDeclaration(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(templateIdentifier, writes || external_marko_compiler_namespaceObject.types.stringLiteral(""))])), external_marko_compiler_namespaceObject.types.exportNamedDeclaration(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(walksIdentifier, walks || external_marko_compiler_namespaceObject.types.stringLiteral(""))])), external_marko_compiler_namespaceObject.types.exportNamedDeclaration(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(setupIdentifier, external_marko_compiler_namespaceObject.types.isNullLiteral(apply) || !apply ? external_marko_compiler_namespaceObject.types.functionExpression(null, [], external_marko_compiler_namespaceObject.types.blockStatement([])) : apply)])));

      if (closures.length) {
        program.node.body.push(external_marko_compiler_namespaceObject.types.exportNamedDeclaration(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(closuresIdentifier, external_marko_compiler_namespaceObject.types.arrayExpression(closures))])));
      }

      program.node.body.push(external_marko_compiler_namespaceObject.types.exportDefaultDeclaration(callRuntime("createRenderFn", templateIdentifier, walksIdentifier, setupIdentifier, attrs2 && attrsSignalIdentifier, closures.length && closuresIdentifier)));
    }

  }
};

var [getReferenceGroups] = createSectionState("apply", () => [{
  sectionId: 0,
  index: 0,
  count: 0,
  references: void 0,
  apply: external_marko_compiler_namespaceObject.types.identifier(""),
  hydrate: external_marko_compiler_namespaceObject.types.identifier("")
}]);

function trackReferences(tag) {
  if (tag.has("var")) {
    trackReferencesForBindings(getOrCreateSectionId(tag), tag.get("var"));
  }

  const body = tag.get("body");

  if (body.get("body").length && body.get("params").length) {
    trackReferencesForBindings(getOrCreateSectionId(body), body);
  }
}

function trackReferencesForBindings(sectionId, path3, reserveType = 1) {
  const scope = path3.scope;
  const bindings = path3.getBindingIdentifiers();

  for (const name in bindings) {
    const references = scope.getBinding(name).referencePaths.concat(scope.getBinding(name).constantViolations.filter(path4 => path4.isAssignmentExpression() && path4.node.operator !== "="));
    const identifier = bindings[name];
    const binding = reserveScope(reserveType, sectionId, identifier, name);
    insertReferenceGroup(getReferenceGroups(sectionId), {
      sectionId,
      index: 0,
      count: 0,
      references: binding,
      apply: external_marko_compiler_namespaceObject.types.identifier(""),
      hydrate: external_marko_compiler_namespaceObject.types.identifier("")
    });

    for (const reference of references) {
      const fnRoot = getFnRoot(reference.scope.path);
      const exprRoot = getExprRoot(fnRoot || reference);
      const markoRoot = exprRoot.parentPath;
      const immediateRoot = fnRoot ?? exprRoot;

      if (immediateRoot) {
        const name2 = immediateRoot.node.id?.name;

        if (!name2) {
          if (markoRoot.isMarkoAttribute() && !markoRoot.node.default) {
            (immediateRoot.node.extra ??= {}).name = markoRoot.node.name;
          }
        }

        updateReferenceGroup(immediateRoot, "references", binding);
      }

      updateReferenceGroup(markoRoot, `${exprRoot.listKey || exprRoot.key}References`, binding);
    }
  }
}

function updateReferenceGroup(path3, extraKey, newBinding) {
  const sectionId = getOrCreateSectionId(path3);
  const currentGroup = (path3.node.extra ??= {})[extraKey];
  const newReferences = insertReserve(currentGroup?.references, newBinding, true);

  if (currentGroup) {
    currentGroup.count--;
  }

  getOrCreateReferenceGroup(sectionId, newBinding);
  path3.node.extra[extraKey] = getOrCreateReferenceGroup(sectionId, newReferences);
}

function mergeReferenceGroups(sectionId, groupEntries) {
  let newReferences;

  for (const [extra, key] of groupEntries) {
    const group = extra[key];
    const references = group.references;
    delete extra[key];
    group.count--;
    sectionId = group.sectionId;

    if (references) {
      if (Array.isArray(references)) {
        for (const binding of references) {
          newReferences = insertReserve(newReferences, binding);
        }
      } else {
        newReferences = insertReserve(newReferences, references);
      }
    }
  }

  return getOrCreateReferenceGroup(sectionId, newReferences);
}

function getOrCreateReferenceGroup(sectionId, references) {
  const newGroup = {
    sectionId,
    index: 0,
    count: 1,
    references,
    apply: external_marko_compiler_namespaceObject.types.identifier(""),
    hydrate: external_marko_compiler_namespaceObject.types.identifier("")
  };
  const referenceGroups = getReferenceGroups(sectionId);
  const existingGroup = findReferenceGroup(referenceGroups, newGroup);

  if (existingGroup) {
    existingGroup.count++;
  } else {
    insertReferenceGroup(referenceGroups, newGroup);
  }

  return existingGroup ?? newGroup;
}

function getExprRoot(path3) {
  let curPath = path3;

  while (!isMarkoPath(curPath.parentPath)) {
    curPath = curPath.parentPath;
  }

  return curPath;
}

function getFnRoot(path3) {
  let curPath = path3;
  if (curPath.isProgram()) return;

  while (!isFunctionExpression(curPath)) {
    if (isMarkoPath(curPath)) return;
    curPath = curPath.parentPath;
  }

  return curPath;
}

function isMarkoPath(path3) {
  switch (path3.type) {
    case "MarkoTag":
    case "MarkoTagBody":
    case "MarkoAttribute":
    case "MarkoSpreadAttribute":
    case "MarkoPlaceholder":
    case "MarkoScriptlet":
      return true;

    default:
      return false;
  }
}

function isFunctionExpression(path3) {
  switch (path3.type) {
    case "FunctionExpression":
    case "ArrowFunctionExpression":
      return true;

    default:
      return false;
  }
}

var {
  insert: insertReferenceGroup,
  find: findReferenceGroup
} = createSortedCollection(function compareReferenceGroups({
  references: a
}, {
  references: b
}) {
  if (a) {
    if (b) {
      if (Array.isArray(a)) {
        if (Array.isArray(b)) {
          const len = a.length;
          const lenDelta = len - b.length;

          if (lenDelta !== 0) {
            return lenDelta;
          }

          for (let i = 0; i < len; i++) {
            const compareResult = compareReserves(a[i], b[i]);

            if (compareResult !== 0) {
              return compareResult;
            }
          }

          return 0;
        } else {
          return 1;
        }
      } else if (Array.isArray(b)) {
        return -1;
      } else {
        return compareReserves(a, b);
      }
    } else {
      return 1;
    }
  } else {
    return b ? -1 : 0;
  }
});

function finalizeReferences() {
  const allReferenceGroups = [];
  forEachSectionId(sectionId => {
    const referenceGroups = getReferenceGroups(sectionId).filter(g => g.count > 0 || !Array.isArray(g.references));
    referenceGroups.forEach((g, i) => {
      g.index = i;
      g.apply.name = generateReferenceGroupName("apply", sectionId, g.references);
      g.hydrate.name = generateReferenceGroupName("hydrate", sectionId, g.references);
    });
    allReferenceGroups[sectionId] = referenceGroups;
  });
  (currentProgramPath.node.extra ??= {}).referenceGroups = allReferenceGroups;
}

function getReferenceGroup(sectionId, lookup, analyze2 = false) {
  const referenceGroups = analyze2 ? getReferenceGroups(sectionId) : currentProgramPath.node.extra.referenceGroups[sectionId];
  let found;

  if (typeof lookup === "number") {
    found = referenceGroups[lookup];
  } else {
    found = findReferenceGroup(referenceGroups, {
      references: lookup
    });
  }

  if (!found) {
    throw new Error(`Reference group not found for section ${sectionId}: ${lookup}`);
  }

  return found;
}

function generateReferenceGroupName(type, sectionId, references) {
  let name = type + (sectionId ? currentProgramPath.node.extra.sectionNames[sectionId].replace("_", "$") : "");

  if (references) {
    if (Array.isArray(references)) {
      name += "With";

      for (const ref of references) {
        name += `_${ref.name}`;
      }
    } else {
      name += `_${references.name}`;
    }
  }

  return currentProgramPath.scope.generateUid(name);
}

var currentProgramPath;
var scopeIdentifier;
var previousProgramPath = new WeakMap();
var program_default = {
  migrate: {
    enter(program) {
      previousProgramPath.set(program, currentProgramPath);
      currentProgramPath = program;
    },

    exit() {
      currentProgramPath.scope.crawl();
      currentProgramPath = previousProgramPath.get(currentProgramPath);
    }

  },
  analyze: {
    enter(program) {
      previousProgramPath.set(program, currentProgramPath);
      currentProgramPath = program;
      startSection(program);
    },

    exit() {
      assignFinalIds();
      finalizeReferences();
      currentProgramPath = previousProgramPath.get(currentProgramPath);
    }

  },
  translate: {
    enter(program) {
      previousProgramPath.set(program, currentProgramPath);
      currentProgramPath = program;
      scopeIdentifier = isOutputDOM() ? program.scope.generateUidIdentifier("scope") : null;

      if (getMarkoOpts().output === "hydrate") {
        program.skip();
        program.node.body = [external_marko_compiler_namespaceObject.types.importDeclaration([], external_marko_compiler_namespaceObject.types.stringLiteral(program.hub.file.opts.filename))];

        if (program.node.extra.hasInteractiveChild || program.node.extra.isInteractive) {
          program.node.body.push(external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("init")));
        }

        return;
      }
    },

    exit(program) {
      if (isOutputHTML()) {
        html_default.translate.exit(program);
      } else {
        dom_default.translate.exit(program);
      }

      currentProgramPath = previousProgramPath.get(currentProgramPath);
    }

  }
};

var import_babel_utils5 = __toESM(require_dist2());

var import_declaration_default = {
  translate: {
    exit(path3) {
      const source = path3.get("source");
      const request = source.node.value;
      source.node.value = (0, import_babel_utils5.resolveTagImport)(source, request) || request;
    }

  }
};
var document_type_default = {
  translate(documentType) {
    if (isOutputHTML()) {
      writeTo(documentType)`<!${documentType.node.value}>`;
    }

    documentType.remove();
  }

};

var assignmentReplacer = new WeakMap();

function getReplacement(assignment, value) {
  return assignmentReplacer.get(assignment.node)?.(assignment, value);
}

function registerAssignmentReplacer(binding, map) {
  for (const assignment of binding.constantViolations) {
    assignmentReplacer.set(assignment.node, map);
  }
}

var assignment_expression_default = {
  translate: {
    exit(assignment) {
      if (isOutputDOM()) {
        const value = assignment.node.operator === "=" ? assignment.node.right : external_marko_compiler_namespaceObject.types.binaryExpression(assignment.node.operator.slice(0, -1), assignment.node.left, assignment.node.right);
        const replacement = getReplacement(assignment, value);

        if (replacement) {
          assignment.replaceWith(replacement);
        }
      }
    }

  }
};

var update_expression_default = {
  translate: {
    exit(assignment) {
      if (isOutputDOM()) {
        const value = external_marko_compiler_namespaceObject.types.binaryExpression(assignment.node.operator === "++" ? "+" : "-", assignment.node.argument, external_marko_compiler_namespaceObject.types.numericLiteral(1));
        const replacement = getReplacement(assignment, value);

        if (replacement) {
          assignment.replaceWith(assignment.node.prefix || assignment.parentPath.isExpressionStatement() ? replacement : external_marko_compiler_namespaceObject.types.sequenceExpression([replacement, assignment.node.argument]));
        }
      }
    }

  }
};
var declaration_default = {
  translate(declaration) {
    if (isOutputHTML()) {
      writeTo(declaration)`<?${declaration.node.value}?>`;
    }

    declaration.remove();
  }

};
var cdata_default = {
  translate(cdata) {
    if (isOutputHTML()) {
      writeTo(cdata)`<![CDATA[${cdata.node.value}]]>`;
    }

    cdata.remove();
  }

};

var text_default = {
  translate(text) {
    const followingSiblings = text.container.slice(text.key + 1);
    let needsSeparator = false;

    if (isOutputHTML()) {
      for (const sibling of followingSiblings) {
        if (external_marko_compiler_namespaceObject.types.isMarkoPlaceholder(sibling)) {
          needsSeparator = true;
          break;
        } else if (external_marko_compiler_namespaceObject.types.isMarkoTag(sibling) || external_marko_compiler_namespaceObject.types.isMarkoText(sibling)) {
          break;
        }
      }
    }

    writeTo(text)`${text.node.value}${needsSeparator ? "<!>" : ""}`;
    enterShallow(text);
    text.remove();
  }

};

var import_babel_utils10 = __toESM(require_dist2());




function enter2(modulePlugin, path3) {
  if (!modulePlugin) {
    return false;
  }

  const {
    node
  } = path3;
  const plugin = isModulePlugin(modulePlugin) ? modulePlugin.default : modulePlugin;

  if (isFunctionPlugin(plugin)) {
    plugin(path3, external_marko_compiler_namespaceObject.types);
  } else if (plugin.enter) {
    plugin.enter(path3, external_marko_compiler_namespaceObject.types);
  }

  return node !== path3.node;
}

function exit2(modulePlugin, path3) {
  if (!modulePlugin) {
    return false;
  }

  const {
    node
  } = path3;
  const plugin = isModulePlugin(modulePlugin) ? modulePlugin.default : modulePlugin;

  if (!isFunctionPlugin(plugin) && plugin.exit) {
    plugin.exit(path3, external_marko_compiler_namespaceObject.types);
  }

  return node !== path3.node;
}

function isModulePlugin(plugin) {
  return Boolean(plugin.default);
}

function isFunctionPlugin(plugin) {
  return typeof plugin === "function";
}

var import_babel_utils6 = __toESM(require_dist2());




var IDENTIFIER_REG = /^[0-9A-Z_$]+$/i;

function toPropertyName(name) {
  return IDENTIFIER_REG.test(name) ? external_marko_compiler_namespaceObject.types.identifier(name) : external_marko_compiler_namespaceObject.types.stringLiteral(name);
}

function attrsToObject(tag, withRenderBody = false) {
  const {
    node
  } = tag;
  let result = external_marko_compiler_namespaceObject.types.objectExpression([]);
  const resultExtra = result.extra = {};

  for (const attr2 of node.attributes) {
    const value = attr2.value;

    if (external_marko_compiler_namespaceObject.types.isMarkoSpreadAttribute(attr2)) {
      result.properties.push(external_marko_compiler_namespaceObject.types.spreadElement(value));
    } else {
      result.properties.push(external_marko_compiler_namespaceObject.types.objectProperty(toPropertyName(attr2.name), value));
    }
  }

  if (withRenderBody) {
    const {
      body,
      params
    } = node.body;
    let hoistedControlFlows = node.extra.hoistedControlFlows;

    if (hoistedControlFlows) {
      for (const child of tag.get("body").get("body")) {
        tag.insertBefore(child.node);
        child.remove();

        if (child.isConditional() || child.isLoop()) {
          if (! --hoistedControlFlows) {
            break;
          }
        }
      }
    }

    if (body.length) {
      result.properties.push(external_marko_compiler_namespaceObject.types.objectMethod("method", external_marko_compiler_namespaceObject.types.identifier("renderBody"), params, external_marko_compiler_namespaceObject.types.blockStatement(body)));
    }
  }

  if (result.properties.length) {
    if (result.properties.length === 1) {
      const [prop] = result.properties;

      if (external_marko_compiler_namespaceObject.types.isSpreadElement(prop)) {
        result = prop.argument;
        result.extra = resultExtra;
      }
    }

    return result;
  }
}

function getRenderBodyProp(attrsObject) {
  if (external_marko_compiler_namespaceObject.types.isObjectExpression(attrsObject)) {
    const lastProp = attrsObject.properties[attrsObject.properties.length - 1];

    if (external_marko_compiler_namespaceObject.types.isObjectMethod(lastProp) && lastProp.key.name === "renderBody") {
      return lastProp;
    }
  }
}



function translateVar(tag, initialValue, kind = "const") {
  const {
    node: {
      var: tagVar
    }
  } = tag;

  if (!tagVar) {
    return;
  }

  tag.get("var").remove();
  tag.insertBefore(external_marko_compiler_namespaceObject.types.variableDeclaration(kind, [external_marko_compiler_namespaceObject.types.variableDeclarator(external_marko_compiler_namespaceObject.types.cloneDeep(tagVar), initialValue)]));
  tag.hub.file.path.scope.crawl();
}

function evaluate(path3) {
  let {
    extra
  } = path3.node;

  if (!extra) {
    extra = path3.node.extra = {};
  }

  if (extra.confident === void 0) {
    const value = path3.get("value");
    const {
      confident,
      value: computed
    } = value.evaluate();
    extra.computed = computed;
    extra.confident = confident;
  }

  return extra;
}

var native_tag_default = {
  analyze: {
    enter(tag) {
      const {
        node
      } = tag;
      const attrs2 = tag.get("attributes");
      let sectionId = tag.has("var") ? getOrCreateSectionId(tag) : void 0;

      if (attrs2.some(isSpreadAttr)) {} else {
        for (const attr2 of attrs2) {
          const attrNode = attr2.node;
          const {
            name: name2
          } = attrNode;

          if (isEventHandler(name2)) {
            sectionId ??= getOrCreateSectionId(tag);
            (currentProgramPath.node.extra ?? {}).isInteractive = true;
          } else if (!evaluate(attr2).confident) {
            sectionId ??= getOrCreateSectionId(tag);
          }
        }
      }

      const name = node.var ? node.var.name : node.name.value;

      if (sectionId !== void 0) {
        reserveScope(0, sectionId, node, name, `#${node.name.value}`);
      }
    }

  },
  translate: {
    enter(tag) {
      const {
        extra
      } = tag.node;
      const isHTML = isOutputHTML();
      const name = tag.get("name");
      const attrs2 = tag.get("attributes");
      const tagDef = (0, import_babel_utils6.getTagDef)(tag);
      const hasSpread = attrs2.some(attr2 => attr2.isMarkoSpreadAttribute());
      const write2 = writeTo(tag);
      const sectionId = getSectionId(tag);

      if (isHTML && extra.tagNameNullable) {
        flushBefore(tag);
      }

      if (tag.has("var")) {
        if (isHTML) {
          translateVar(tag, external_marko_compiler_namespaceObject.types.arrowFunctionExpression([], external_marko_compiler_namespaceObject.types.blockStatement([external_marko_compiler_namespaceObject.types.throwStatement(external_marko_compiler_namespaceObject.types.newExpression(external_marko_compiler_namespaceObject.types.identifier("Error"), [external_marko_compiler_namespaceObject.types.stringLiteral("Cannot reference DOM node from server")]))])));
        } else {
          const varName = tag.node.var.name;
          const references = tag.scope.getBinding(varName).referencePaths;
          let createElFunction = void 0;

          for (const reference of references) {
            const referenceSectionId = getSectionId(reference);

            if (reference.parentPath?.isCallExpression()) {
              reference.parentPath.replaceWith(external_marko_compiler_namespaceObject.types.expressionStatement(callRead(extra.reserve, referenceSectionId)));
            } else {
              createElFunction ??= external_marko_compiler_namespaceObject.types.identifier(varName + "_getter");
              reference.replaceWith(callRuntime("bind", getScopeExpression(extra.reserve, referenceSectionId), createElFunction));
            }
          }

          if (createElFunction) {
            currentProgramPath.pushContainer("body", external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(createElFunction, external_marko_compiler_namespaceObject.types.arrowFunctionExpression([scopeIdentifier], external_marko_compiler_namespaceObject.types.memberExpression(scopeIdentifier, getNodeLiteral(extra.reserve), true)))]));
          }
        }
      }

      let visitAccessor;

      if (extra.reserve) {
        visitAccessor = getNodeLiteral(extra.reserve);
        visit(tag, 32);
      }

      write2`<${name.node}`;

      if (hasSpread) {
        const attrsCallExpr = callRuntime("attrs", scopeIdentifier, attrsToObject(tag));

        if (isHTML) {
          write2`${attrsCallExpr}`;
        } else {
          tag.insertBefore(external_marko_compiler_namespaceObject.types.expressionStatement(attrsCallExpr));
        }
      } else {
        for (const attr2 of attrs2) {
          const name2 = attr2.node.name;
          const extra2 = attr2.node.extra ?? {};
          const value = attr2.get("value");
          const {
            confident,
            computed,
            valueReferences
          } = extra2;

          switch (name2) {
            case "class":
            case "style":
              {
                const helper = `${name2}Attr`;

                if (confident) {
                  write2`${getHTMLRuntime()[helper](computed)}`;
                } else if (isHTML) {
                  write2`${callRuntime(helper, value.node)}`;
                } else {
                  addStatement("apply", sectionId, valueReferences, external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime(helper, external_marko_compiler_namespaceObject.types.memberExpression(scopeIdentifier, visitAccessor, true), value.node)));
                }

                break;
              }

            default:
              if (confident) {
                write2`${getHTMLRuntime().attr(name2, computed)}`;
              } else if (isHTML) {
                if (isEventHandler(name2)) {
                  addHTMLHydrateCall(sectionId, valueReferences);
                } else {
                  write2`${callRuntime("attr", external_marko_compiler_namespaceObject.types.stringLiteral(name2), value.node)}`;
                }
              } else if (isEventHandler(name2)) {
                addStatement("hydrate", sectionId, valueReferences, external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("on", external_marko_compiler_namespaceObject.types.memberExpression(scopeIdentifier, visitAccessor, true), external_marko_compiler_namespaceObject.types.stringLiteral(getEventHandlerName(name2)), value.node)), value.node);
              } else {
                addStatement("apply", sectionId, valueReferences, external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("attr", external_marko_compiler_namespaceObject.types.memberExpression(scopeIdentifier, visitAccessor, true), external_marko_compiler_namespaceObject.types.stringLiteral(name2), value.node)));
              }

              break;
          }
        }
      }

      if (tagDef && tagDef.parseOptions?.openTagOnly) {
        switch (tagDef.htmlType) {
          case "svg":
          case "math":
            write2`/>`;
            break;

          default:
            write2`>`;
            break;
        }
      } else {
        write2`>`;
      }

      if (isHTML && extra.tagNameNullable) {
        tag.insertBefore(external_marko_compiler_namespaceObject.types.ifStatement(name.node, consumeHTML(tag)))[0].skip();
      }

      enter(tag);
    },

    exit(tag) {
      const {
        extra
      } = tag.node;
      const isHTML = isOutputHTML();
      const openTagOnly = (0, import_babel_utils6.getTagDef)(tag)?.parseOptions?.openTagOnly;

      if (isHTML && extra.tagNameNullable) {
        flushInto(tag);
      }

      tag.insertBefore(tag.node.body.body).forEach(child => child.skip());

      if (!openTagOnly) {
        writeTo(tag)`</${tag.node.name}>`;
      }

      if (isHTML && extra.tagNameNullable) {
        tag.insertBefore(external_marko_compiler_namespaceObject.types.ifStatement(tag.node.name, consumeHTML(tag)))[0].skip();
      }

      if (extra.reserve) {
        markNode(tag);
      }

      exit(tag);
      tag.remove();
    }

  }
};

function isSpreadAttr(attr2) {
  return attr2.type === "MarkoSpreadAttribute";
}

function isEventHandler(propName) {
  return /^on[A-Z-]/.test(propName);
}

function getEventHandlerName(propName) {
  return propName.charAt(2) === "-" ? propName.slice(3) : propName.charAt(2).toLowerCase() + propName.slice(3);
}

var import_babel_utils7 = __toESM(require_dist2());


var custom_tag_default = {
  analyze: {
    enter(tag) {
      trackReferences(tag);
      const body = tag.get("body");

      if (body.get("body").length) {
        startSection(body);
      }

      if ((0, import_babel_utils7.getTagDef)(tag)?.template) {
        reserveScope(0, getOrCreateSectionId(tag), tag.node, "#childScope");
      }

      const childFile = (0, import_babel_utils7.loadFileForTag)(tag);
      const childProgramExtra = childFile?.ast.program.extra;
      const hasInteractiveChild = childProgramExtra?.isInteractive || childProgramExtra?.hasInteractiveChild;

      if (hasInteractiveChild) {
        (currentProgramPath.node.extra ?? {}).hasInteractiveChild = true;
      }
    },

    exit(tag) {
      const tagDef = (0, import_babel_utils7.getTagDef)(tag);
      const template = tagDef?.template;
      const sectionId = getOrCreateSectionId(tag);

      if (template) {
        tag.node.extra.attrsReferences = mergeReferenceGroups(sectionId, tag.node.attributes.filter(attr2 => attr2.extra?.valueReferences).map(attr2 => [attr2.extra, "valueReferences"]));
      }
    }

  },
  translate: {
    enter(tag) {
      visit(tag);

      if (isOutputHTML()) {
        flushBefore(tag);
      }
    },

    exit(tag) {
      if (isOutputHTML()) {
        translateHTML(tag);
      } else {
        translateDOM(tag);
      }
    }

  }
};

function translateHTML(tag) {
  const tagBody = tag.get("body");
  const {
    node
  } = tag;
  let tagIdentifier;
  flushInto(tag);
  writeHTMLHydrateStatements(tagBody);

  if (external_marko_compiler_namespaceObject.types.isStringLiteral(node.name)) {
    const {
      file
    } = tag.hub;
    const tagName = node.name.value;
    const relativePath = getTagRelativePath(tag);
    tagIdentifier = (0, import_babel_utils7.importDefault)(file, relativePath, tagName);
  } else {
    tagIdentifier = node.name;
  }

  const tagVar = node.var;
  const attrsObject = attrsToObject(tag, true);
  const renderBodyProp = getRenderBodyProp(attrsObject);

  if (node.extra.tagNameNullable) {
    let renderBodyId = void 0;
    let renderTagExpr = callExpression(tagIdentifier, attrsToObject(tag));

    if (renderBodyProp) {
      renderBodyId = tag.scope.generateUidIdentifier("renderBody");
      const [renderBodyPath] = tag.insertBefore(external_marko_compiler_namespaceObject.types.functionDeclaration(renderBodyId, renderBodyProp.params, renderBodyProp.body));
      renderBodyPath.skip();
      attrsObject.properties[attrsObject.properties.length - 1] = external_marko_compiler_namespaceObject.types.objectProperty(external_marko_compiler_namespaceObject.types.identifier("renderBody"), renderBodyId);
    }

    if (tagVar) {
      translateVar(tag, external_marko_compiler_namespaceObject.types.unaryExpression("void", external_marko_compiler_namespaceObject.types.numericLiteral(0)), "let");
      renderTagExpr = external_marko_compiler_namespaceObject.types.assignmentExpression("=", tagVar, renderTagExpr);
    }

    tag.replaceWith(external_marko_compiler_namespaceObject.types.ifStatement(tagIdentifier, external_marko_compiler_namespaceObject.types.expressionStatement(renderTagExpr), renderBodyId && callStatement(renderBodyId)))[0].skip();
  } else if (tagVar) {
    const sectionId = getSectionId(tag);
    translateVar(tag, callExpression(tagIdentifier, attrsObject, callRuntime("register", external_marko_compiler_namespaceObject.types.arrowFunctionExpression([], external_marko_compiler_namespaceObject.types.blockStatement([])), external_marko_compiler_namespaceObject.types.stringLiteral(getHydrateRegisterId(sectionId, node.var.extra?.reserve)), getScopeIdentifier(sectionId))));
    setForceHydrateScope(sectionId);
    tag.remove();
  } else {
    tag.replaceWith(callStatement(tagIdentifier, attrsObject))[0].skip();
  }
}

function translateDOM(tag) {
  const tagSectionId = getSectionId(tag);
  const tagBody = tag.get("body");
  const tagBodySectionId = getSectionId(tagBody);
  const {
    node
  } = tag;
  const write2 = writeTo(tag);
  const binding = node.extra.reserve;
  const {
    file
  } = tag.hub;
  const tagName = node.name.value;
  const relativePath = getTagRelativePath(tag);
  const childFile = (0, import_babel_utils7.loadFileForTag)(tag);
  const childProgram = childFile.ast.program;
  const tagIdentifier = (0, import_babel_utils7.importNamed)(file, relativePath, "setup", tagName);
  let tagAttrsIdentifier;

  if (childProgram.extra.attrs) {
    tagAttrsIdentifier = (0, import_babel_utils7.importNamed)(file, relativePath, "attrs", `${tagName}_attrs`);
  }

  write2`${(0, import_babel_utils7.importNamed)(file, relativePath, "template", `${tagName}_template`)}`;
  injectWalks(tag, (0, import_babel_utils7.importNamed)(file, relativePath, "walks", `${tagName}_walks`));

  if (childProgram.extra.closures) {
    getClosures(tagSectionId).push(callRuntime("inChildMany", (0, import_babel_utils7.importNamed)(file, relativePath, "closures", `${tagName}_closures`), getNodeLiteral(binding)));
  }

  let attrsObject = attrsToObject(tag);

  if (tagBodySectionId !== tagSectionId) {
    attrsObject ??= external_marko_compiler_namespaceObject.types.objectExpression([]);
    attrsObject.properties.push(external_marko_compiler_namespaceObject.types.objectProperty(external_marko_compiler_namespaceObject.types.identifier("renderBody"), callRuntime("bindRenderer", scopeIdentifier, getRenderer(tagBodySectionId))));
  }

  if (node.var) {
    const source = initSource(node.var.extra.reserve);
    source.register = true;
    addStatement("apply", tagSectionId, void 0, external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("setTagVar", scopeIdentifier, getNodeLiteral(binding), source.identifier)));
  }

  addStatement("apply", tagSectionId, void 0, external_marko_compiler_namespaceObject.types.expressionStatement(external_marko_compiler_namespaceObject.types.callExpression(tagIdentifier, [callRead(binding, tagSectionId)])));

  if (attrsObject && tagAttrsIdentifier) {
    let attrsSubscriber = callRuntime("inChild", tagAttrsIdentifier, getNodeLiteral(binding));

    if (!tag.node.extra.attrsReferences.references) {
      const tagAttrsIdentifierInChild = currentProgramPath.scope.generateUidIdentifier(`${tagName}_attrs_inChild`);
      currentProgramPath.pushContainer("body", external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(tagAttrsIdentifierInChild, attrsSubscriber)]));
      attrsSubscriber = tagAttrsIdentifierInChild;
    }

    getSignal(tagSectionId, tag.node.extra.attrsReferences.references).subscribers.push(attrsSubscriber);
    addStatement("apply", tagSectionId, tag.node.extra.attrsReferences, external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("setSource", callRead(binding, tagSectionId), external_marko_compiler_namespaceObject.types.identifier(tagAttrsIdentifier.name), attrsObject)));
  }

  tag.remove();
}

function getTagRelativePath(tag) {
  const {
    node,
    hub: {
      file
    }
  } = tag;
  const nameIsString = external_marko_compiler_namespaceObject.types.isStringLiteral(node.name);
  let relativePath;

  if (nameIsString) {
    const tagDef = (0, import_babel_utils7.getTagDef)(tag);
    const template = tagDef?.template;
    relativePath = template && (0, import_babel_utils7.resolveRelativePath)(file, template);
  }

  if (!relativePath) {
    throw tag.get("name").buildCodeFrameError(`Unable to find entry point for custom tag <${nameIsString ? node.name.value : node.name}>.`);
  }

  const tags = file.metadata.marko.tags;

  if (!tags.includes(relativePath)) {
    tags.push(relativePath);
  }

  return relativePath;
}

function callStatement(id, ...args) {
  return external_marko_compiler_namespaceObject.types.expressionStatement(callExpression(id, ...args));
}

function callExpression(id, ...args) {
  return external_marko_compiler_namespaceObject.types.callExpression(id, args.filter(Boolean));
}




function toFirstExpressionOrBlock(body) {
  const nodes = body.body;

  if (nodes.length === 1 && external_marko_compiler_namespaceObject.types.isExpressionStatement(nodes[0])) {
    return nodes[0].expression;
  }

  if (external_marko_compiler_namespaceObject.types.isBlockStatement(body)) {
    return body;
  }

  return external_marko_compiler_namespaceObject.types.blockStatement(nodes);
}

var dynamic_tag_default = {
  analyze: {
    enter(tag) {
      reserveScope(0, getOrCreateSectionId(tag), tag.node, "dynamicTagName", "#text");
      custom_tag_default.analyze.enter(tag);
    },

    exit(tag) {
      tag.node.extra.attrsReferences = mergeReferenceGroups(getOrCreateSectionId(tag), tag.node.attributes.filter(attr2 => attr2.extra?.valueReferences).map(attr2 => [attr2.extra, "valueReferences"]));
      updateReferenceGroup(tag, "attrsReferences", tag.node.extra.reserve);
    }

  },
  translate: {
    enter(tag) {
      visit(tag, 37);
      enterShallow(tag);

      if (isOutputHTML()) {
        flushBefore(tag);
      }
    },

    exit(tag) {
      const {
        node
      } = tag;

      if (isOutputHTML()) {
        flushInto(tag);
        const attrsObject = attrsToObject(tag, true);
        const renderBodyProp = getRenderBodyProp(attrsObject);
        const args = [node.name, attrsObject || external_marko_compiler_namespaceObject.types.nullLiteral()];

        if (renderBodyProp) {
          attrsObject.properties.pop();
          args.push(external_marko_compiler_namespaceObject.types.arrowFunctionExpression(renderBodyProp.params, toFirstExpressionOrBlock(renderBodyProp.body)));
        }

        const dynamicTagExpr = callRuntime("dynamicTag", ...args);

        if (node.var) {
          translateVar(tag, dynamicTagExpr);
          tag.remove();
        } else {
          tag.replaceWith(external_marko_compiler_namespaceObject.types.expressionStatement(dynamicTagExpr))[0].skip();
        }
      } else {
        const sectionId = getSectionId(tag);
        const bodySectionId = getSectionId(tag.get("body"));
        const hasBody = sectionId !== bodySectionId;
        const renderBodyIdentifier = hasBody && getRenderer(bodySectionId);
        const tagNameReserve = node.extra?.reserve;
        const references = node.extra?.nameReferences?.references;
        const signal = getSignal(sectionId, tagNameReserve);

        signal.build = () => {
          return callRuntime("conditional", getNodeLiteral(tagNameReserve), external_marko_compiler_namespaceObject.types.numericLiteral(countReserves(references) || 1), getComputeFn(sectionId, renderBodyIdentifier ? external_marko_compiler_namespaceObject.types.logicalExpression("||", node.name, renderBodyIdentifier) : node.name, references), signal.subscribers[0], external_marko_compiler_namespaceObject.types.arrowFunctionExpression([scopeIdentifier], external_marko_compiler_namespaceObject.types.blockStatement(signal.render)));
        };

        subscribe(references, signal);
        const attrsObject = attrsToObject(tag, true);

        if (attrsObject || renderBodyIdentifier) {
          const attrsSignal = getSignal(sectionId, node.extra?.attrsReferences.references);
          attrsSignal.subscribers.push(callRuntime("dynamicAttrsProxy", getNodeLiteral(tagNameReserve)));
          addStatement("apply", sectionId, node.extra?.attrsReferences, external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("dynamicTagAttrs", scopeIdentifier, getNodeLiteral(tagNameReserve), external_marko_compiler_namespaceObject.types.arrowFunctionExpression([], attrsObject ?? external_marko_compiler_namespaceObject.types.objectExpression([])), renderBodyIdentifier)));
        }

        tag.remove();
      }
    }

  }
};

var import_babel_utils8 = __toESM(require_dist2());


var attribute_tag_default = {
  translate: {
    enter(tag) {
      if (hasPendingHTML(tag)) {
        throw tag.get("name").buildCodeFrameError("Dynamic @tags cannot be mixed with body content.");
      }
    },

    exit(tag) {
      (0, import_babel_utils8.assertNoVar)(tag);
      flushInto(tag);
      const parentTag = (0, import_babel_utils8.findParentTag)(tag);

      if (!parentTag) {
        throw tag.get("name").buildCodeFrameError("@tags must be nested within another tag.");
      }

      const parentExtra = parentTag.node.extra;

      if (parentExtra.tagNameType === 0) {
        throw tag.get("name").buildCodeFrameError("@tags cannot be nested under native tags.");
      }

      const attrName = tag.node.name.value.slice(1);
      const info = parentExtra.nestedAttributeTags[attrName];
      const attrsObject = attrsToObject(tag, true) || external_marko_compiler_namespaceObject.types.objectExpression([]);

      if (info.dynamic) {
        if (!info.identifier) {
          info.identifier = parentTag.scope.generateUidIdentifier(attrName);
          parentTag.insertBefore(info.repeated ? external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(info.identifier, external_marko_compiler_namespaceObject.types.arrayExpression([]))]) : external_marko_compiler_namespaceObject.types.variableDeclaration("let", [external_marko_compiler_namespaceObject.types.variableDeclarator(info.identifier)]));
          parentTag.pushContainer("attributes", external_marko_compiler_namespaceObject.types.markoAttribute(attrName, info.identifier));
        }

        tag.replaceWith(external_marko_compiler_namespaceObject.types.expressionStatement(info.repeated ? external_marko_compiler_namespaceObject.types.callExpression(external_marko_compiler_namespaceObject.types.memberExpression(info.identifier, external_marko_compiler_namespaceObject.types.identifier("push")), [attrsObject]) : external_marko_compiler_namespaceObject.types.assignmentExpression("=", info.identifier, attrsObject)));
      } else if (info.repeated) {
        const existingAttr = parentTag.get("attributes").find(attr2 => attr2.node.name === attrName);

        if (existingAttr) {
          existingAttr.get("value").pushContainer("elements", attrsObject);
        } else {
          parentTag.pushContainer("attributes", external_marko_compiler_namespaceObject.types.markoAttribute(attrName, external_marko_compiler_namespaceObject.types.arrayExpression([attrsObject])));
        }

        tag.remove();
      } else {
        parentTag.pushContainer("attributes", external_marko_compiler_namespaceObject.types.markoAttribute(attrName, attrsObject));
        tag.remove();
      }
    }

  }
};

var import_babel_utils9 = __toESM(require_dist2());

function analyzeAttributeTags(tag) {
  const {
    extra
  } = tag.node;
  extra.nestedAttributeTags = {};
  extra.hoistedControlFlows = 0;
  analyzeChildren(extra, false, false, tag);
}

function analyzeChildren(rootExtra, repeated, dynamic, tag) {
  let hasAttributeTags = false;

  for (const child of tag.get("body").get("body")) {
    if (child.isMarkoTag()) {
      if (analyzeChild(rootExtra, repeated, dynamic, child)) {
        hasAttributeTags = true;
      }
    }
  }

  return hasAttributeTags;
}

function analyzeChild(rootExtra, repeated, dynamic, tag) {
  if ((0, import_babel_utils9.isTransparentTag)(tag)) {
    if (analyzeChildren(rootExtra, repeated || (0, import_babel_utils9.isLoopTag)(tag), true, tag)) {
      if (!(0, import_babel_utils9.isTransparentTag)(tag.parentPath.parentPath)) {
        rootExtra.hoistedControlFlows++;
      }

      return true;
    }
  } else if ((0, import_babel_utils9.isAttributeTag)(tag)) {
    const attrName = tag.node.name.value.slice(1);
    const lookup = rootExtra.nestedAttributeTags;
    const existing = lookup[attrName];
    const info = existing || (lookup[attrName] = {
      dynamic: false,
      repeated: false
    });
    info.dynamic ||= dynamic;
    info.repeated ||= repeated || existing !== void 0;
    return true;
  }

  return false;
}

var tag_default = {
  analyze: {
    enter(tag) {
      const tagDef = (0, import_babel_utils10.getTagDef)(tag);
      const type = analyzeTagNameType(tag);
      const hook = tagDef?.analyzer?.hook;

      if (hook) {
        enter2(hook, tag);
        return;
      }

      switch (type) {
        case 0:
          native_tag_default.analyze.enter(tag);
          break;

        case 1:
          custom_tag_default.analyze.enter(tag);
          break;

        case 3:
          break;

        case 2:
          dynamic_tag_default.analyze.enter(tag);
          break;
      }
    },

    exit(tag) {
      const tagDef = (0, import_babel_utils10.getTagDef)(tag);
      const type = analyzeTagNameType(tag);
      const hook = tagDef?.analyzer?.hook;

      if (hook) {
        exit2(hook, tag);
        return;
      }

      if (type === 0) {
        return;
      }

      analyzeAttributeTags(tag);

      switch (type) {
        case 1:
          custom_tag_default.analyze.exit(tag);
          break;

        case 3:
          break;

        case 2:
          dynamic_tag_default.analyze.exit(tag);
          break;
      }
    }

  },
  translate: {
    enter(tag) {
      const tagDef = (0, import_babel_utils10.getTagDef)(tag);
      const extra = tag.node.extra;
      (0, import_babel_utils10.assertNoArgs)(tag);

      if (tagDef?.translator) {
        if (tagDef.translator.path) {
          tag.hub.file.metadata.marko.watchFiles.push(tagDef.translator.path);
        }

        enter2(tagDef.translator.hook, tag);
        return;
      }

      for (const attr2 of tag.get("attributes")) {
        if (attr2.isMarkoAttribute()) {
          if (attr2.node.arguments) {
            throw attr2.buildCodeFrameError(`Unsupported arguments on the "${attr2.node.name}" attribute.`);
          }

          if (attr2.node.modifier) {
            if ((0, import_babel_utils10.isNativeTag)(attr2.parentPath)) {
              attr2.node.name += `:${attr2.node.modifier}`;
            } else {
              throw attr2.buildCodeFrameError(`Unsupported modifier "${attr2.node.modifier}".`);
            }
          }
        }
      }

      if (extra.tagNameDynamic && extra.tagNameNullable && !tag.get("name").isIdentifier() && isOutputHTML()) {
        const tagNameId = tag.scope.generateUidIdentifier("tagName");
        const [tagNameVarPath] = tag.insertBefore(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(tagNameId, tag.node.name)]));
        tagNameVarPath.skip();
        tag.set("name", tagNameId);
      }

      switch (extra.tagNameType) {
        case 0:
          native_tag_default.translate.enter(tag);
          break;

        case 1:
          custom_tag_default.translate.enter(tag);
          break;

        case 2:
          dynamic_tag_default.translate.enter(tag);
          break;

        case 3:
          attribute_tag_default.translate.enter(tag);
          break;
      }
    },

    exit(tag) {
      const translator = (0, import_babel_utils10.getTagDef)(tag)?.translator;

      if (translator) {
        exit2(translator.hook, tag);
        return;
      }

      switch (tag.node.extra.tagNameType) {
        case 0:
          native_tag_default.translate.exit(tag);
          break;

        case 1:
          custom_tag_default.translate.exit(tag);
          break;

        case 2:
          dynamic_tag_default.translate.exit(tag);
          break;

        case 3:
          attribute_tag_default.translate.exit(tag);
          break;
      }
    }

  }
};

var import_babel_utils12 = __toESM(require_dist2());



var import_babel_utils11 = __toESM(require_dist2());

var taglibId = "marko-core";

function isCoreTag(tag) {
  return tag.isMarkoTag() && (0, import_babel_utils11.getTagDef)(tag)?.taglibId === taglibId;
}

function isCoreTagName(tag, name) {
  return isCoreTag(tag) && tag.node.name.value === name;
}

var ESCAPE_TYPES = {
  script: "escapeScript",
  style: "escapeStyle"
};
var placeholder_default = {
  analyze(placeholder) {
    const {
      node
    } = placeholder;
    const {
      confident,
      computed
    } = evaluate(placeholder);

    if (!(confident && (node.escape || !computed))) {
      reserveScope(0, getOrCreateSectionId(placeholder), node, "placeholder", "#text");
      needsMarker(placeholder);
    }
  },

  translate(placeholder) {
    const isHTML = isOutputHTML();
    const write2 = writeTo(placeholder);
    const extra = placeholder.node.extra;
    const {
      confident,
      computed,
      valueReferences,
      reserve
    } = extra;
    const canWriteHTML = isHTML || confident && (placeholder.node.escape || !computed);
    const method = canWriteHTML ? placeholder.node.escape ? ESCAPE_TYPES[getParentTagName(placeholder)] || "escapeXML" : "toString" : placeholder.node.escape ? "data" : "html";

    if (confident && canWriteHTML) {
      write2`${getHTMLRuntime()[method](computed)}`;
    } else {
      if (extra.needsMarker) {
        visit(placeholder, 37);
      } else {
        if (!isHTML) write2` `;
        visit(placeholder, 32);
      }

      if (isHTML) {
        write2`${callRuntime(method, placeholder.node.value)}`;
        markNode(placeholder);
      } else {
        addStatement("apply", getSectionId(placeholder), valueReferences, external_marko_compiler_namespaceObject.types.expressionStatement(method === "data" ? callRuntime("data", external_marko_compiler_namespaceObject.types.memberExpression(scopeIdentifier, getNodeLiteral(reserve), true), placeholder.node.value) : callRuntime("html", scopeIdentifier, placeholder.node.value, getNodeLiteral(reserve))));
      }
    }

    enterShallow(placeholder);
    placeholder.remove();
  }

};

function getParentTagName({
  parentPath
}) {
  return parentPath.isMarkoTag() && (0, import_babel_utils12.isNativeTag)(parentPath) && parentPath.node.name.value || "";
}

function noOutput(path3) {
  return external_marko_compiler_namespaceObject.types.isMarkoComment(path3) || external_marko_compiler_namespaceObject.types.isMarkoTag(path3) && isCoreTag(path3) && ["let", "const", "effect", "lifecycle", "attrs", "get", "id"].includes(path3.node.name.value);
}

function needsMarker(placeholder) {
  let prev = placeholder.getPrevSibling();

  while (prev.node && noOutput(prev)) {
    prev = prev.getPrevSibling();
  }

  if ((prev.node || external_marko_compiler_namespaceObject.types.isProgram(placeholder.parentPath)) && !(external_marko_compiler_namespaceObject.types.isMarkoTag(prev) && (0, import_babel_utils12.isNativeTag)(prev))) {
    return placeholder.node.extra.needsMarker = true;
  }

  let next = placeholder.getNextSibling();

  while (next.node && noOutput(next)) {
    next = next.getNextSibling();
  }

  if ((next.node || external_marko_compiler_namespaceObject.types.isProgram(placeholder.parentPath)) && !(external_marko_compiler_namespaceObject.types.isMarkoTag(next) && (0, import_babel_utils12.isNativeTag)(next))) {
    return placeholder.node.extra.needsMarker = true;
  }

  return placeholder.node.extra.needsMarker = false;
}

var scriptlet_default = {
  translate(scriptlet) {
    if (isOutputHTML()) {
      if (scriptlet.node.static) return;
      scriptlet.replaceWithMultiple(scriptlet.node.body);
    } else {
      if (scriptlet.node.static) {
        scriptlet.replaceWithMultiple(scriptlet.node.body);
      } else {
        addStatement("apply", getSectionId(scriptlet), scriptlet.node.extra?.bodyReferences, scriptlet.node.body);
        scriptlet.remove();
      }
    }
  }

};
var ieConditionalCommentRegExp = /^\[if |<!\[endif\]$/;
var comment_default = {
  translate(comment) {
    if (isOutputHTML()) {
      const {
        value
      } = comment.node;

      if (ieConditionalCommentRegExp.test(value)) {
        writeTo(comment)`<!--${value}-->`;
      }
    }

    comment.remove();
  }

};

var import_babel_utils13 = __toESM(require_dist2());

var import_default = {
  parse(tag) {
    const {
      node
    } = tag;
    tag.replaceWith((0, import_babel_utils13.parseScript)(tag.hub.file, node.rawValue, node.start).body[0]);
  },

  parseOptions: {
    rootOnly: true,
    rawOpenTag: true,
    openTagOnly: true,
    ignoreAttributes: true,
    relaxRequireCommas: true
  },
  autocomplete: [{
    displayText: 'import <scope> from "<path>"',
    description: "Use to import external modules, follows the same syntax as JavaScript imports.",
    snippet: 'import ${2} from "${1:path}"',
    descriptionMoreURL: "https://markojs.com/docs/syntax/#importing-external-files"
  }]
};

var import_babel_utils14 = __toESM(require_dist2());

var export_default = {
  parse(tag) {
    const {
      node
    } = tag;
    tag.replaceWith((0, import_babel_utils14.parseScript)(tag.hub.file, node.rawValue, node.start).body[0]);
  },

  parseOptions: {
    rootOnly: true,
    rawOpenTag: true,
    openTagOnly: true,
    ignoreAttributes: true,
    relaxRequireCommas: true
  },
  autocomplete: [{
    displayText: "export <value>"
  }]
};
var attrs_default = {
  analyze(tag) {
    if (tag.has("var")) {
      const varPath = tag.get("var");
      const bindings = varPath.getBindingIdentifiers();
      const sectionId = getOrCreateSectionId(tag);
      trackReferencesForBindings(sectionId, varPath, 1);

      for (const key in bindings) {
        const binding = bindings[key].extra.reserve;
        binding.exportIdentifier = getReferenceGroup(sectionId, binding, true).apply;
      }

      (currentProgramPath.node.extra ??= {}).attrs = {
        bindings,
        var: varPath.node
      };
    }
  },

  translate(tag) {
    const bindings = currentProgramPath.node.extra?.attrs?.bindings;

    if (bindings) {
      for (const key in bindings) {
        initSource(bindings[key].extra.reserve);
      }
    }

    tag.remove();
  },

  attributes: {},
  autocomplete: [{
    displayText: "attrs/{ ... }",
    description: "Use to receive the attributes passed into this template.",
    snippet: "attrs/{ $1 }$2"
  }]
};

var import_babel_utils15 = __toESM(require_dist2());




function toFirstStatementOrBlock(body) {
  const nodes = body.body;

  if (nodes.length === 1) {
    return nodes[0];
  }

  if (external_marko_compiler_namespaceObject.types.isBlockStatement(body)) {
    return body;
  }

  return external_marko_compiler_namespaceObject.types.blockStatement(nodes);
}

var if_default = {
  analyze: {
    enter(tag) {
      reserveScope(0, getOrCreateSectionId(tag), tag.node, "if", "#text");
      custom_tag_default.analyze.enter(tag);
    },

    exit(tag) {
      analyzeAttributeTags(tag);
      exitBranchAnalyze(tag);
    }

  },
  translate: {
    enter(tag) {
      const {
        node
      } = tag;
      const [testAttr] = node.attributes;
      (0, import_babel_utils15.assertNoVar)(tag);
      (0, import_babel_utils15.assertNoParams)(tag);

      if (!external_marko_compiler_namespaceObject.types.isMarkoAttribute(testAttr) || !testAttr.default) {
        throw tag.get("name").buildCodeFrameError(`The '<if>' tag requires a default attribute like '<if=condition>'.`);
      }

      if (node.attributes.length > 1) {
        const start = node.attributes[1].loc?.start;
        const end = node.attributes[node.attributes.length - 1].loc?.end;
        const msg = `The '<if>' tag only supports a default attribute.`;

        if (start == null || end == null) {
          throw tag.get("name").buildCodeFrameError(msg);
        } else {
          throw tag.hub.buildError({
            loc: {
              start,
              end
            }
          }, msg, Error);
        }
      }

      visit(tag, 37);
      enterShallow(tag);

      if (isOutputHTML()) {
        flushBefore(tag);
      }
    },

    exit(tag) {
      exitBranchTranslate(tag);
    }

  },
  attributes: {},
  autocomplete: [{
    snippet: "if=${1:condition}",
    description: "Use to display content only if the condition is met.",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#if-else-if-else"
  }]
};
var BRANCHES_LOOKUP = new WeakMap();

function getBranches(tag, bodySectionId) {
  const branches = BRANCHES_LOOKUP.get(tag) ?? [];
  const nextTag = tag.getNextSibling();
  const isLast = !(isCoreTagName(nextTag, "else") || isCoreTagName(nextTag, "else-if"));
  branches.push({
    tag,
    sectionId: bodySectionId
  });

  if (!isLast) {
    BRANCHES_LOOKUP.set(nextTag, branches);
  }

  return [isLast, branches];
}

function exitBranchAnalyze(tag) {
  const sectionId = getOrCreateSectionId(tag);
  const tagBody = tag.get("body");
  const bodySectionId = getOrCreateSectionId(tagBody);
  const [isLast, branches] = getBranches(tag, bodySectionId);

  if (isLast) {
    const rootExtra = branches[0].tag.node.extra;
    const conditionalReferences = mergeReferenceGroups(sectionId, branches.filter(({
      tag: tag2
    }) => tag2.node.attributes[0]?.extra?.valueReferences).map(({
      tag: tag2
    }) => [tag2.node.attributes[0].extra, "valueReferences"]));
    rootExtra.conditionalReferences = conditionalReferences;
    rootExtra.isStateful = !!conditionalReferences.references;
    rootExtra.hoistedScopeIdentifier = rootExtra.isStateful && tag.scope.generateUidIdentifier("ifScope");
    rootExtra.singleNodeOptimization = branches.every(({
      tag: tag2
    }) => {
      return tag2.node.body.body.length === 1;
    });
  }
}

function exitBranchTranslate(tag) {
  const tagBody = tag.get("body");
  const sectionId = getSectionId(tag);
  const bodySectionId = getSectionId(tagBody);
  const [isLast, branches] = getBranches(tag, bodySectionId);
  const rootExtra = branches[0].tag.node.extra;
  const isStateful = rootExtra.isStateful;
  const singleNodeOptimization = rootExtra.singleNodeOptimization;

  if (isOutputHTML()) {
    if (isStateful) {
      if (!singleNodeOptimization) {
        writePrependTo(tagBody)`${callRuntime("markHydrateScopeStart", getScopeIdentifier(bodySectionId))}`;
      }

      setHydrateScopeBuilder(bodySectionId, object => {
        return external_marko_compiler_namespaceObject.types.callExpression(external_marko_compiler_namespaceObject.types.memberExpression(external_marko_compiler_namespaceObject.types.identifier("Object"), external_marko_compiler_namespaceObject.types.identifier("assign")), [branches[0].tag.node.extra.hoistedScopeIdentifier, object]);
      });
      getSerializedScopeProperties(bodySectionId).set(importRuntime("SYMBOL_OWNER"), getScopeIdentifier(sectionId));
    }

    flushInto(tag);
    writeHTMLHydrateStatements(tagBody);
  }

  if (isLast) {
    const {
      extra
    } = branches[0].tag.node;

    if (isOutputDOM()) {
      let expr = external_marko_compiler_namespaceObject.types.nullLiteral();

      for (let i = branches.length; i--;) {
        const {
          tag: tag2,
          sectionId: sectionId2
        } = branches[i];
        const [testAttr] = tag2.node.attributes;
        const id = getRenderer(sectionId2);
        setSubscriberBuilder(tag2, subscriber => {
          return callRuntime("inConditionalScope", subscriber, getNodeLiteral(extra.reserve));
        });

        if (isStateful) {
          setRegisterRenderer(sectionId2, true);
        }

        tag2.remove();

        if (testAttr) {
          expr = external_marko_compiler_namespaceObject.types.conditionalExpression(testAttr.value, id, expr);
        } else {
          expr = id;
        }
      }

      const references = extra.conditionalReferences.references;
      const signal = getSignal(sectionId, extra.reserve);

      signal.build = () => {
        return callRuntime("conditional", getNodeLiteral(extra.reserve), external_marko_compiler_namespaceObject.types.numericLiteral(countReserves(references) || 1), getComputeFn(sectionId, expr, references));
      };

      subscribe(references, signal);
    } else {
      const write2 = writeTo(tag);
      const nextTag = tag.getNextSibling();
      const ifScopeIdIdentifier = tag.scope.generateUidIdentifier("ifScopeId");
      const ifScopeIdentifier = branches[0].tag.node.extra.hoistedScopeIdentifier;
      const ifRendererIdentifier = tag.scope.generateUidIdentifier("ifRenderer");
      let statement;

      for (let i = branches.length; i--;) {
        const {
          tag: tag2,
          sectionId: sectionId2
        } = branches[i];

        if (isStateful) {
          tag2.node.body.body.push(external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("register", ifRendererIdentifier, external_marko_compiler_namespaceObject.types.stringLiteral(getHydrateRegisterId(sectionId2, "renderer")))));

          if (singleNodeOptimization) {
            tag2.node.body.body.push(external_marko_compiler_namespaceObject.types.expressionStatement(external_marko_compiler_namespaceObject.types.assignmentExpression("=", ifScopeIdIdentifier, getScopeIdentifier(sectionId2))));
          }
        }

        const [testAttr] = tag2.node.attributes;
        const curStatement = toFirstStatementOrBlock(tag2.node.body);

        if (testAttr) {
          statement = external_marko_compiler_namespaceObject.types.ifStatement(testAttr.value, curStatement, statement);
        } else {
          statement = curStatement;
        }

        tag2.remove();
      }

      if (!isStateful) {
        nextTag.insertBefore(statement);
      } else {
        nextTag.insertBefore([singleNodeOptimization && external_marko_compiler_namespaceObject.types.variableDeclaration("let", [external_marko_compiler_namespaceObject.types.variableDeclarator(ifScopeIdIdentifier)]), external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(ifScopeIdentifier, external_marko_compiler_namespaceObject.types.objectExpression([])), external_marko_compiler_namespaceObject.types.variableDeclarator(ifRendererIdentifier, external_marko_compiler_namespaceObject.types.arrowFunctionExpression([], external_marko_compiler_namespaceObject.types.blockStatement([])))]), statement].filter(Boolean));

        if (singleNodeOptimization) {
          write2`${callRuntime("markHydrateControlSingleNodeEnd", getScopeIdentifier(sectionId), getNodeLiteral(extra.reserve), ifScopeIdIdentifier)}`;
        } else {
          write2`${callRuntime("markHydrateControlEnd", getScopeIdentifier(sectionId), getNodeLiteral(extra.reserve))}`;
        }

        getSerializedScopeProperties(sectionId).set(external_marko_compiler_namespaceObject.types.stringLiteral(getNodeLiteral(extra.reserve).value + "!"), ifScopeIdentifier);
        getSerializedScopeProperties(sectionId).set(external_marko_compiler_namespaceObject.types.stringLiteral(getNodeLiteral(extra.reserve).value + "("), ifRendererIdentifier);
      }
    }
  }
}

var import_babel_utils16 = __toESM(require_dist2());


var else_if_default = {
  analyze: {
    enter(tag) {
      custom_tag_default.analyze.enter(tag);
    },

    exit(tag) {
      exitBranchAnalyze(tag);
    }

  },
  translate: {
    enter(tag) {
      const {
        node
      } = tag;
      const [defaultAttr] = node.attributes;
      (0, import_babel_utils16.assertNoVar)(tag);
      (0, import_babel_utils16.assertNoParams)(tag);

      if (!external_marko_compiler_namespaceObject.types.isMarkoAttribute(defaultAttr) || !defaultAttr.default) {
        throw tag.get("name").buildCodeFrameError(`The '<else-if>' tag requires a default attribute like '<else-if=condition>'.`);
      }

      if (node.attributes.length > 1) {
        const start = node.attributes[1].loc?.start;
        const end = node.attributes[node.attributes.length - 1].loc?.end;
        const msg = `The '<else-if>' tag only supports a default attribute.`;

        if (start == null || end == null) {
          throw tag.get("name").buildCodeFrameError(msg);
        } else {
          throw tag.hub.buildError({
            loc: {
              start,
              end
            }
          }, msg, Error);
        }
      }
    },

    exit(tag) {
      exitBranchTranslate(tag);
    }

  },
  attributes: {},
  autocomplete: [{
    snippet: "else-if=${1:condition}",
    description: "Use after an <if> or <else-if> tag to display content if those conditions do not match and this one does.",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#if-else-if-else"
  }]
};

var import_babel_utils17 = __toESM(require_dist2());

var else_default = {
  analyze: {
    enter(tag) {
      custom_tag_default.analyze.enter(tag);
    },

    exit(tag) {
      exitBranchAnalyze(tag);
    }

  },
  translate: {
    enter(tag) {
      const {
        node
      } = tag;
      const [testAttr] = node.attributes;
      (0, import_babel_utils17.assertNoVar)(tag);
      (0, import_babel_utils17.assertNoParams)(tag);

      if (node.attributes.length > 1 || testAttr && testAttr.name !== "if") {
        const start = node.attributes[1].loc?.start;
        const end = node.attributes[node.attributes.length - 1].loc?.end;
        const msg = `The '<else>' tag only supports an if attribute.`;

        if (start == null || end == null) {
          throw tag.get("name").buildCodeFrameError(msg);
        } else {
          throw tag.hub.buildError({
            loc: {
              start,
              end
            }
          }, msg, Error);
        }
      }
    },

    exit(tag) {
      exitBranchTranslate(tag);
    }

  },
  attributes: {},
  autocomplete: [{
    description: "Use after an <if> or <else-if> tag to display content if those conditions do not match.",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#if-else-if-else"
  }]
};

var import_babel_utils18 = __toESM(require_dist2());


var const_default = {
  translate(tag) {
    const {
      node
    } = tag;
    const [defaultAttr] = node.attributes;
    (0, import_babel_utils18.assertNoParams)(tag);
    assertNoBodyContent(tag);

    if (!node.var) {
      throw tag.get("name").buildCodeFrameError("The 'const' tag requires a tag variable.");
    }

    if (!defaultAttr) {
      throw tag.get("name").buildCodeFrameError("The 'const' tag requires a default attribute.");
    }

    if (node.attributes.length > 1 || !external_marko_compiler_namespaceObject.types.isMarkoAttribute(defaultAttr) || !defaultAttr.default && defaultAttr.name !== "default") {
      throw tag.get("name").buildCodeFrameError("The 'const' tag only supports the 'default' attribute.");
    }

    if (isOutputDOM()) {
      const identifiers = Object.values(tag.get("var").getBindingIdentifiers());

      if (identifiers.length === 1) {
        initDerivation(identifiers[0].extra.reserve, defaultAttr.extra?.valueReferences?.references, defaultAttr.value);
      } else {}
    } else {
      translateVar(tag, defaultAttr.value);
    }

    tag.remove();
  },

  attributes: {},
  autocomplete: [{
    description: "Use to create an constant binding.",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#const"
  }]
};

var import_babel_utils19 = __toESM(require_dist2());


var effect_default = {
  analyze(tag) {
    const sectionId = getSectionId(tag);
    reserveScope(1, sectionId, tag.node, "cleanup");
    (currentProgramPath.node.extra ?? {}).isInteractive = true;
  },

  translate: {
    exit(tag) {
      const {
        node
      } = tag;
      const [defaultAttr] = node.attributes;
      (0, import_babel_utils19.assertNoParams)(tag);
      assertNoBodyContent(tag);

      if (!defaultAttr) {
        throw tag.get("name").buildCodeFrameError("The 'effect' tag requires a default attribute.");
      }

      if (node.attributes.length > 1 || !external_marko_compiler_namespaceObject.types.isMarkoAttribute(defaultAttr) || !defaultAttr.default && defaultAttr.name !== "default") {
        throw tag.get("name").buildCodeFrameError("The 'effect' tag only supports the 'default' attribute.");
      }

      const sectionId = getSectionId(tag);

      if (isOutputDOM()) {
        const {
          value
        } = defaultAttr;
        let inlineStatements = null;

        if (external_marko_compiler_namespaceObject.types.isFunctionExpression(value) || external_marko_compiler_namespaceObject.types.isArrowFunctionExpression(value) && external_marko_compiler_namespaceObject.types.isBlockStatement(value.body)) {
          inlineStatements = value.body.body;
          external_marko_compiler_namespaceObject.types.traverse(value.body, node2 => {
            if (external_marko_compiler_namespaceObject.types.isReturnStatement(node2)) {
              inlineStatements = null;
            }
          });
        }

        addStatement("hydrate", sectionId, defaultAttr.extra?.valueReferences, inlineStatements || external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("userEffect", scopeIdentifier, getNodeLiteral(tag.node.extra.reserve), defaultAttr.value)), value, !!inlineStatements);
      } else {
        addHTMLHydrateCall(sectionId, defaultAttr.extra?.valueReferences);
      }

      tag.remove();
    }

  },
  attributes: {},
  autocomplete: [{
    description: "Use to create a side effects.",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#effect"
  }]
};

var import_babel_utils20 = __toESM(require_dist2());


var lifecycle_default = {
  analyze: {
    enter(tag) {
      custom_tag_default.analyze.enter(tag);
      const sectionId = getSectionId(tag);
      reserveScope(1, sectionId, tag.node, "cleanup");
      (currentProgramPath.node.extra ?? {}).isInteractive = true;
    },

    exit(tag) {
      custom_tag_default.analyze.exit(tag);
      const sectionId = getOrCreateSectionId(tag);
      tag.node.extra.attrsReferences = mergeReferenceGroups(sectionId, tag.node.attributes.filter(attr2 => attr2.extra?.valueReferences).map(attr2 => [attr2.extra, "valueReferences"]));
    }

  },
  translate: {
    exit(tag) {
      const {
        node
      } = tag;
      (0, import_babel_utils20.assertNoParams)(tag);
      assertNoBodyContent(tag);
      const sectionId = getSectionId(tag);

      if (isOutputDOM()) {
        const attrsObject = attrsToObject(tag);
        addStatement("hydrate", sectionId, node.extra.attrsReferences, external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("lifecycle", scopeIdentifier, getNodeLiteral(tag.node.extra.reserve), attrsObject)), node.attributes.map(a => a.value));
      } else {
        addHTMLHydrateCall(sectionId, node.extra.attrsReferences);
      }

      tag.remove();
    }

  },
  attributes: {},
  autocomplete: [{
    description: "Use to create a side effects.",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#effect"
  }]
};

var import_babel_utils21 = __toESM(require_dist2());


var id_default = {
  translate(tag) {
    const {
      node
    } = tag;
    const {
      var: tagVar
    } = node;
    const id = callRuntime("nextTagId");
    (0, import_babel_utils21.assertNoArgs)(tag);
    (0, import_babel_utils21.assertNoAttributes)(tag);
    assertNoBodyContent(tag);
    (0, import_babel_utils21.assertNoParams)(tag);

    if (!node.var) {
      throw tag.get("name").buildCodeFrameError("The 'id' tag requires a tag variable.");
    }

    if (!external_marko_compiler_namespaceObject.types.isIdentifier(tagVar)) {
      throw tag.get("var").buildCodeFrameError("The 'id' tag cannot be destructured");
    }

    if (isOutputHTML()) {
      tag.replaceWith(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(node.var, id)]));
    } else {
      initDerivation(tagVar.extra.reserve, void 0, id);
      tag.remove();
    }
  },

  attributes: {},
  autocomplete: [{
    displayText: "id/<name>",
    description: "Use to create a unique identifier.",
    snippet: "id/${1:name}",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#id"
  }]
};


var import_babel_utils22 = __toESM(require_dist2());

var for_default = {
  analyze: {
    enter(tag) {
      const isOnlyChild = checkOnlyChild(tag);
      const parentTag = isOnlyChild ? tag.parentPath.parent : void 0;
      const parentTagName = parentTag?.name?.value;
      reserveScope(0, getOrCreateSectionId(tag), isOnlyChild ? parentTag : tag.node, "for", isOnlyChild ? `#${parentTagName}` : "#text");
      custom_tag_default.analyze.enter(tag);
    },

    exit(tag) {
      analyzeAttributeTags(tag);
    }

  },
  translate: {
    enter(tag) {
      validateFor(tag);

      if (!isOutputHTML() && Object.keys(tag.node.extra.nestedAttributeTags).length) {
        tag.remove();
        return;
      }

      const {
        extra: {
          isOnlyChild
        }
      } = tag.node;

      if (!isOnlyChild) {
        visit(tag, 37);
        enterShallow(tag);
      }

      if (isOutputHTML()) {
        flushBefore(tag);
      }
    },

    exit(tag) {
      if (isOutputHTML()) {
        translateHTML2.exit(tag);
      } else {
        translateDOM2.exit(tag);
      }
    }

  },
  attributes: {
    of: {
      type: "expression",
      autocomplete: [{
        description: "Iterates over a list of items."
      }]
    },
    in: {
      type: "expression",
      autocomplete: [{
        description: "Iterates over the keys and values of an object."
      }]
    },
    to: {
      type: "number",
      autocomplete: [{
        description: "Iterates up to the provided number (inclusive)"
      }]
    },
    from: {
      type: "number",
      autocomplete: [{
        description: "Iterates starting from the provided number (inclusive)"
      }]
    },
    step: {
      type: "number",
      autocomplete: [{
        description: "The amount to increment during each interation (with from/to)"
      }]
    }
  },
  autocomplete: [{
    snippet: "for|${1:value, index}| of=${3:array}",
    description: "Use to iterate over lists, object properties, or between ranges.",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#iterating-over-a-list"
  }, {
    snippet: "for|${1:name, value}| in=${3:object}",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#iterating-over-an-objects-properties"
  }, {
    snippet: "for|${1:index}| from=${2:number} to=${3:number} step=${4:number}",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#iterating-between-a-range-of-numbers"
  }]
};
var translateDOM2 = {
  exit(tag) {
    const bodySectionId = getSectionId(tag.get("body"));
    const sectionId = getSectionId(tag);
    const {
      node
    } = tag;
    const {
      attributes,
      body: {
        params
      },
      extra: {
        isOnlyChild
      }
    } = node;
    const paramsPath = tag.get("body").get("params");
    const {
      extra: {
        reserve
      }
    } = isOnlyChild ? tag.parentPath.parent : tag.node;
    const ofAttr = findName(attributes, "of");
    const byAttr = findName(attributes, "by");
    setSubscriberBuilder(tag, signal => {
      return callRuntime("inLoopScope", signal, getNodeLiteral(reserve));
    });

    if (ofAttr) {
      const ofAttrValue = ofAttr.value;
      const [valParam] = params;

      if (!external_marko_compiler_namespaceObject.types.isIdentifier(valParam)) {
        throw tag.buildCodeFrameError(`Invalid 'for of' tag, |value| parameter must be an identifier.`);
      }

      const rendererId = getRenderer(bodySectionId);
      tag.remove();
      const references = ofAttr.extra?.valueReferences?.references;
      const signal = getSignal(sectionId, reserve);

      signal.build = () => {
        const bindings = paramsPath.reduce((paramsLookup, param) => {
          return Object.assign(paramsLookup, param.getBindingIdentifiers());
        }, {});
        return callRuntime("loop", getNodeLiteral(reserve), external_marko_compiler_namespaceObject.types.numericLiteral(countReserves(references) || 1), rendererId, external_marko_compiler_namespaceObject.types.arrayExpression(Object.values(bindings).map(binding => getSignal(bodySectionId, binding.extra.reserve).identifier)), external_marko_compiler_namespaceObject.types.arrowFunctionExpression([scopeIdentifier, external_marko_compiler_namespaceObject.types.arrayPattern(params)], external_marko_compiler_namespaceObject.types.blockStatement(Object.values(bindings).map(binding => {
          return external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("setSource", scopeIdentifier, getSignal(bodySectionId, binding.extra.reserve).identifier, binding));
        }))), getComputeFn(sectionId, external_marko_compiler_namespaceObject.types.arrayExpression([ofAttrValue, byAttr ? byAttr.value : external_marko_compiler_namespaceObject.types.nullLiteral()]), references));
      };

      subscribe(references, signal);

      for (const param of params) {
        initSource(param.extra?.reserve);
      }
    }
  }

};
var translateHTML2 = {
  exit(tag) {
    const tagBody = tag.get("body");
    const {
      node
    } = tag;
    const {
      attributes,
      body: {
        body,
        params
      }
    } = node;
    const namePath = tag.get("name");
    const ofAttr = findName(attributes, "of");
    const inAttr = findName(attributes, "in");
    const fromAttr = findName(attributes, "from");
    const toAttr = findName(attributes, "to");
    const block = external_marko_compiler_namespaceObject.types.blockStatement(body);
    let forNode;
    flushInto(tag);
    writeHTMLHydrateStatements(tagBody);

    if (inAttr) {
      const [keyParam, valParam] = params;

      if (valParam) {
        block.body.unshift(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(valParam, external_marko_compiler_namespaceObject.types.memberExpression(inAttr.value, keyParam, true))]));
      }

      forNode = external_marko_compiler_namespaceObject.types.forInStatement(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(keyParam)]), inAttr.value, block);
    } else if (ofAttr) {
      let ofAttrValue = ofAttr.value;
      const [valParam, keyParam, loopParam] = params;

      if (!valParam) {
        throw namePath.buildCodeFrameError("Invalid 'for of' tag, missing |value, index| params.");
      }

      forNode = [];

      if (keyParam) {
        const indexName = tag.scope.generateUidIdentifierBasedOnNode(keyParam, "i");
        forNode.push(external_marko_compiler_namespaceObject.types.variableDeclaration("let", [external_marko_compiler_namespaceObject.types.variableDeclarator(indexName, external_marko_compiler_namespaceObject.types.numericLiteral(0))]));
        block.body.unshift(external_marko_compiler_namespaceObject.types.variableDeclaration("let", [external_marko_compiler_namespaceObject.types.variableDeclarator(keyParam, external_marko_compiler_namespaceObject.types.updateExpression("++", indexName))]));
      }

      if (loopParam) {
        if (external_marko_compiler_namespaceObject.types.isIdentifier(loopParam)) {
          ofAttrValue = loopParam;
        }

        forNode.push(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(loopParam, ofAttr.value)]));
      }

      forNode.push(external_marko_compiler_namespaceObject.types.forOfStatement(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(valParam)]), ofAttrValue, block));
    } else if (fromAttr && toAttr) {
      const stepAttr = findName(attributes, "step") || {
        value: external_marko_compiler_namespaceObject.types.numericLiteral(1)
      };
      const stepValue = stepAttr ? stepAttr.value : external_marko_compiler_namespaceObject.types.numericLiteral(1);
      const [indexParam] = params;
      const stepsName = tag.scope.generateUidIdentifier("steps");
      const stepName = tag.scope.generateUidIdentifier("step");

      if (indexParam) {
        block.body.unshift(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(indexParam, external_marko_compiler_namespaceObject.types.binaryExpression("+", fromAttr.value, external_marko_compiler_namespaceObject.types.binaryExpression("*", stepName, stepValue)))]));
      }

      forNode = external_marko_compiler_namespaceObject.types.forStatement(external_marko_compiler_namespaceObject.types.variableDeclaration("let", [external_marko_compiler_namespaceObject.types.variableDeclarator(stepsName, external_marko_compiler_namespaceObject.types.binaryExpression("/", external_marko_compiler_namespaceObject.types.binaryExpression("-", toAttr.value, fromAttr.value), stepValue)), external_marko_compiler_namespaceObject.types.variableDeclarator(stepName, external_marko_compiler_namespaceObject.types.numericLiteral(0))]), external_marko_compiler_namespaceObject.types.binaryExpression("<=", stepName, stepsName), external_marko_compiler_namespaceObject.types.updateExpression("++", stepName), block);
    }

    block.body.push(external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("maybeFlush")));
    tag.replaceWithMultiple([].concat(forNode));
  }

};

function findName(arr, value) {
  return arr.find(obj => external_marko_compiler_namespaceObject.types.isMarkoAttribute(obj) && obj.name === value);
}

function validateFor(tag) {
  const attrs2 = tag.node.attributes;
  const hasParams = tag.node.body.params.length > 0;
  (0, import_babel_utils22.assertNoVar)(tag);

  if (findName(attrs2, "of")) {
    (0, import_babel_utils22.assertAllowedAttributes)(tag, ["of", "by"]);

    if (!hasParams) {
      throw tag.buildCodeFrameError(`Invalid 'for of' tag, missing |value, index| params.`);
    }
  } else if (findName(attrs2, "in")) {
    (0, import_babel_utils22.assertAllowedAttributes)(tag, ["in", "by"]);

    if (!hasParams) {
      throw tag.buildCodeFrameError(`Invalid 'for in' tag, missing |key, value| params.`);
    }
  } else if (findName(attrs2, "from") && findName(attrs2, "to")) {
    (0, import_babel_utils22.assertAllowedAttributes)(tag, ["from", "to", "step", "by"]);
  } else {
    throw tag.buildCodeFrameError("Invalid 'for' tag, missing an 'of', 'in' or 'to' attribute.");
  }
}

function checkOnlyChild(tag) {
  tag.node.extra ??= {};

  if (external_marko_compiler_namespaceObject.types.isMarkoTag(tag.parentPath?.parent) && (0, import_babel_utils22.getTagDef)(tag.parentPath.parentPath)?.html) {
    return tag.node.extra.isOnlyChild = tag.parent.body.length === 1;
  }

  return tag.node.extra.isOnlyChild = false;
}

var import_babel_utils23 = __toESM(require_dist2());



var get_default = {
  analyze: {
    enter(tag) {
      const sectionId = getOrCreateSectionId(tag);

      if (sectionId === 0) {
        (currentProgramPath.node.extra ??= {}).closures = true;
      }

      custom_tag_default.analyze.enter(tag);
    },

    exit: custom_tag_default.analyze.exit
  },

  translate(tag) {
    (0, import_babel_utils23.assertNoParams)(tag);
    assertNoBodyContent(tag);

    if (isOutputHTML()) {
      flushBefore(tag);
    }

    const {
      node,
      hub: {
        file
      }
    } = tag;
    const [defaultAttr] = node.attributes;
    let refId;

    if (!node.var) {
      throw tag.get("name").buildCodeFrameError("<get> requires a variable to be defined, eg <get/NAME>.");
    }

    if (defaultAttr === void 0) {
      refId = "$";
    } else {
      if (!external_marko_compiler_namespaceObject.types.isMarkoAttribute(defaultAttr) || !defaultAttr.default || !external_marko_compiler_namespaceObject.types.isStringLiteral(defaultAttr.value)) {
        throw tag.get("name").buildCodeFrameError(`The '<get>' tag requires default attribute that is a string that resolves to a Marko file like '<get/val="../file.marko">' or '<get/val="<tag-name>">'.`);
      }

      if (node.attributes.length > 1) {
        const start = node.attributes[1].loc?.start;
        const end = node.attributes[node.attributes.length - 1].loc?.end;
        const msg = `The '<get>' tag only supports a default attribute.`;

        if (start == null || end == null) {
          throw tag.get("name").buildCodeFrameError(msg);
        } else {
          throw tag.hub.buildError({
            loc: {
              start,
              end
            }
          }, msg, Error);
        }
      }

      const defaultAttrValue = tag.get("attributes")[0].get("value");

      if (defaultAttr.value.value === ".") {
        refId = file.metadata.marko.id;
      } else {
        const relativeReferencePath = (0, import_babel_utils23.resolveTagImport)(defaultAttrValue, defaultAttrValue.node.value);

        if (!relativeReferencePath) {
          throw defaultAttrValue.buildCodeFrameError("Unable to resolve template provided to '<get>' tag.");
        }

        refId = (0, import_babel_utils23.getTemplateId)(file.markoOpts.optimize, external_path_default().resolve(file.opts.filename, "..", relativeReferencePath));
      }
    }

    if (isOutputHTML()) {
      tag.replaceWith(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(node.var, callRuntime("getInContext", external_marko_compiler_namespaceObject.types.stringLiteral(refId)))]));
    } else {
      const identifiers = Object.values(tag.get("var").getBindingIdentifiers());
      initContextConsumer(refId, identifiers[0].extra.reserve);
      tag.remove();
    }
  },

  autocomplete: [{
    displayText: 'get/<name>="<from>"',
    description: "Gets a value provided from another template.",
    snippet: 'get/${1:name}="${2:from}"',
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#get"
  }]
};

var import_babel_utils24 = __toESM(require_dist2());

var html_comment_default = {
  analyze() {},

  translate: {
    enter(tag) {
      enter(tag);
      writeTo(tag)`<!--`;
    },

    exit(tag) {
      (0, import_babel_utils24.assertNoVar)(tag);
      (0, import_babel_utils24.assertNoParams)(tag);
      (0, import_babel_utils24.assertNoAttributes)(tag);
      (0, import_babel_utils24.assertNoAttributeTags)(tag);
      exit(tag);
      writeTo(tag)`-->`;
      tag.remove();
    }

  },
  parseOptions: {
    text: true
  },
  attributes: {},
  autocomplete: [{
    description: "Use to create an html comment that is not stripped from the output.",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#html-comment"
  }]
};

var import_babel_utils25 = __toESM(require_dist2());


var let_default = {
  translate(tag) {
    const {
      node
    } = tag;
    const tagVar = node.var;
    const [defaultAttr] = node.attributes;
    (0, import_babel_utils25.assertNoParams)(tag);
    assertNoBodyContent(tag);

    if (!tagVar) {
      throw tag.get("name").buildCodeFrameError("The 'let' tag requires a tag variable.");
    }

    if (!external_marko_compiler_namespaceObject.types.isIdentifier(tagVar)) {
      throw tag.get("var").buildCodeFrameError("The 'let' cannot be destructured.");
    }

    if (!defaultAttr) {
      throw tag.get("name").buildCodeFrameError("The 'let' tag requires a default attribute.");
    }

    if (node.attributes.length > 1 || !external_marko_compiler_namespaceObject.types.isMarkoAttribute(defaultAttr) || !defaultAttr.default && defaultAttr.name !== "default") {
      throw tag.get("name").buildCodeFrameError("The 'let' tag only supports the 'default' attribute.");
    }

    if (isOutputDOM()) {
      const sectionId = getSectionId(tag);
      const binding = tagVar.extra.reserve;
      const source = initSource(binding);
      addStatement("apply", sectionId, defaultAttr.extra?.valueReferences, external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("setSource", scopeIdentifier, source.identifier, defaultAttr.value)));
      registerAssignmentReplacer(tag.scope.getBinding(binding.name), (assignment, value) => queueSource(source, value, getSectionId(assignment)));
    } else {
      translateVar(tag, defaultAttr.value);
    }

    tag.remove();
  },

  attributes: {},
  autocomplete: [{
    description: "Use to create a mutable binding.",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#let"
  }]
};

var import_babel_utils26 = __toESM(require_dist2());


var put_default = {
  analyze: {
    enter(tag) {
      reserveScope(0, getOrCreateSectionId(tag), tag.node, "put", "#text");
      custom_tag_default.analyze.enter(tag);
    },

    exit(tag) {
      custom_tag_default.analyze.exit(tag);
    }

  },
  translate: {
    enter(tag) {
      const {
        node
      } = tag;
      const [defaultAttr] = node.attributes;

      if (!node.body.body.length) {
        throw tag.buildCodeFrameError(`The '<put>' tag requires body content that the context is forwarded through.`);
      }

      if (!external_marko_compiler_namespaceObject.types.isMarkoAttribute(defaultAttr) || !defaultAttr.default) {
        throw tag.get("name").buildCodeFrameError(`The '<put>' tag requires default attribute like '<put=val>'.`);
      }

      if (node.attributes.length > 1) {
        const start = node.attributes[1].loc?.start;
        const end = node.attributes[node.attributes.length - 1].loc?.end;
        const msg = `The '<put>' tag only supports a default attribute.`;

        if (start == null || end == null) {
          throw tag.get("name").buildCodeFrameError(msg);
        } else {
          throw tag.hub.buildError({
            loc: {
              start,
              end
            }
          }, msg, Error);
        }
      }

      if (isOutputHTML()) {
        flushBefore(tag);
        tag.insertBefore(external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("pushContext", external_marko_compiler_namespaceObject.types.stringLiteral(tag.hub.file.metadata.marko.id), defaultAttr.value)));
      } else {
        visit(tag, 37);
        enterShallow(tag);
        const bodySectionId = getSectionId(tag.get("body"));
        const rendererId = getRenderer(bodySectionId);
        initContextProvider(tag.hub.file.metadata.marko.id, node.extra.reserve, defaultAttr.extra?.valueReferences?.references, defaultAttr.value, rendererId);
      }
    },

    exit(tag) {
      (0, import_babel_utils26.assertNoParams)(tag);
      (0, import_babel_utils26.assertNoVar)(tag);

      if (isOutputHTML()) {
        flushInto(tag);
        writeHTMLHydrateStatements(tag.get("body"));
        tag.insertAfter(external_marko_compiler_namespaceObject.types.expressionStatement(callRuntime("popContext")));
      }

      tag.replaceWithMultiple(tag.node.body.body);
    }

  },
  autocomplete: [{
    displayText: "put=<value>",
    description: "Sets a value which can be read from a child template.",
    snippet: "put=${1:value}",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#put"
  }]
};

var import_babel_utils27 = __toESM(require_dist2());



var style_default = {
  translate(tag) {
    const {
      hub: {
        file
      }
    } = tag;
    (0, import_babel_utils27.assertNoParams)(tag);
    assertNoSpreadAttrs(tag);
    let type = "text/css";
    const attrs2 = tag.get("attributes");
    const base = external_path_default().basename(file.opts.sourceFileName);
    const typeAttr = attrs2.find(attr2 => attr2.isMarkoAttribute() && attr2.node.name === "type");
    const classAttr2 = attrs2.find(attr2 => attr2.isMarkoAttribute() && attr2.node.name === "class");

    if (typeAttr && classAttr2) {
      throw classAttr2.buildCodeFrameError(`<style> must only use "type" or "class" and not both.`);
    } else if (typeAttr) {
      const typeValue = typeAttr.get("value");

      if (typeValue.isStringLiteral()) {
        type = typeValue.node.value;
      } else {
        throw typeValue.buildCodeFrameError(`<style> "type" attribute can only be a string literal.`);
      }
    } else if (classAttr2) {
      const classValue2 = classAttr2.get("value");

      if (classValue2.isStringLiteral()) {
        type = classValue2.node.value;
      } else {
        throw classValue2.buildCodeFrameError(`<style> "class" attribute can only be a string literal.`);
      }
    }

    if (type === "text/css") {
      type = "css";
    }

    if (tag.node.var && !type.startsWith("module")) {
      type = "module." + type;
    }

    const body = tag.get("body").get("body");
    const markoText = body[0];

    if (body.length !== 1 || !markoText.isMarkoText()) {
      throw (markoText.isMarkoText() ? body[1] : body[0]).buildCodeFrameError("The '<style>' tag currently only supports static content.");
    }

    const {
      resolveVirtualDependency
    } = getMarkoOpts();

    if (resolveVirtualDependency) {
      const importPath = resolveVirtualDependency(file.opts.filename, {
        type,
        code: markoText.node.value,
        startPos: markoText.node.start,
        endPos: markoText.node.end,
        path: `./${base}`,
        virtualPath: `./${base}.${type}`
      });

      if (!tag.node.var) {
        currentProgramPath.pushContainer("body", external_marko_compiler_namespaceObject.types.importDeclaration([], external_marko_compiler_namespaceObject.types.stringLiteral(importPath)));
      } else if (external_marko_compiler_namespaceObject.types.isIdentifier(tag.node.var)) {
        currentProgramPath.pushContainer("body", external_marko_compiler_namespaceObject.types.importDeclaration([external_marko_compiler_namespaceObject.types.importDefaultSpecifier(tag.node.var)], external_marko_compiler_namespaceObject.types.stringLiteral(importPath)));
      } else {
        currentProgramPath.pushContainer("body", external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(tag.node.var, (0, import_babel_utils27.importDefault)(file, importPath, "style"))]));
      }
    }

    tag.remove();
  },

  attributes: {
    type: {
      enum: ["css", "less", "scss", "text/css"]
    }
  }
};

var tag_default2 = {
  translate: {
    enter(tag) {
      if (isOutputHTML()) {
        flushBefore(tag);
      }

      if (!tag.node.var) {
        throw tag.get("name").buildCodeFrameError("<tag> requires a variable to be defined, eg <tag/NAME>.");
      }
    },

    exit(tag) {
      if (isOutputHTML()) {
        flushInto(tag);
      }

      tag.replaceWith(external_marko_compiler_namespaceObject.types.variableDeclaration("const", [external_marko_compiler_namespaceObject.types.variableDeclarator(tag.node.var, external_marko_compiler_namespaceObject.types.arrowFunctionExpression(tag.node.body.params, toFirstExpressionOrBlock(tag.node.body)))]));
    }

  },
  attributes: {},
  autocomplete: [{
    displayText: "tag/<name>|<params>|",
    description: "Creates a reusable fragment within the template.",
    snippet: "tag/${1:name}|${2:param1, param2}|",
    descriptionMoreURL: "https://markojs.com/docs/core-tags/#tag"
  }]
};

var import_babel_utils28 = __toESM(require_dist2());


var static_default = {
  parse(tag) {
    const {
      node,
      hub: {
        file
      }
    } = tag;
    const rawValue = node.rawValue;
    const code = rawValue.replace(/^static\s*/, "").trim();
    const start = node.name.start + (rawValue.length - code.length);
    let {
      body
    } = (0, import_babel_utils28.parseScript)(file, code, start);

    if (body.length === 1 && external_marko_compiler_namespaceObject.types.isBlockStatement(body[0])) {
      body = body[0].body;
    }

    tag.replaceWith(external_marko_compiler_namespaceObject.types.markoScriptlet(body, true));
  },

  "parse-options": {
    rootOnly: true,
    rawOpenTag: true,
    openTagOnly: true,
    ignoreAttributes: true
  },
  autocomplete: [{
    displayText: "static <statement>",
    description: "A JavaScript statement which is only evaluated once your template is loaded.",
    descriptionMoreURL: "https://markojs.com/docs/syntax/#static-javascript"
  }]
};
var noop_default = {
  migrate: [tag => tag.remove()]
};
var flush_here_and_after_default = {
  migrate: [tag => {
    tag.replaceWithMultiple(tag.node.body.body);
    currentProgramPath.scope.crawl();
  }]
};
var core_default = {
  taglibId,
  "<import>": import_default,
  "<export>": export_default,
  "<attrs>": attrs_default,
  "<if>": if_default,
  "<else-if>": else_if_default,
  "<else>": else_default,
  "<for>": for_default,
  "<let>": let_default,
  "<const>": const_default,
  "<effect>": effect_default,
  "<lifecycle>": lifecycle_default,
  "<id>": id_default,
  "<html-comment>": html_comment_default,
  "<tag>": tag_default2,
  "<put>": put_default,
  "<get>": get_default,
  "<return>": translator_return_default,
  "<style>": style_default,
  "<await-reorderer>": noop_default,
  "<init-widgets>": noop_default,
  "<init-components>": noop_default,
  "<static>": static_default,
  "<__flush_here_and_after__>": flush_here_and_after_default
};

var outGlobalIdentifiers = new WeakMap();
var hasAttrsTag = new WeakSet();
var referenced_identifier_default = {
  migrate(identifier) {
    const {
      name
    } = identifier.node;
    if (identifier.scope.hasBinding(name)) return;

    switch (identifier.node.name) {
      case "input":
        {
          if (!hasAttrsTag.has(currentProgramPath)) {
            hasAttrsTag.add(currentProgramPath);
            insertAfterStatic(external_marko_compiler_namespaceObject.types.markoTag(external_marko_compiler_namespaceObject.types.stringLiteral("attrs"), void 0, external_marko_compiler_namespaceObject.types.markoTagBody(), void 0, identifier.node));
          }

          break;
        }

      case "out":
        if (external_marko_compiler_namespaceObject.types.isMemberExpression(identifier.parent) && external_marko_compiler_namespaceObject.types.isIdentifier(identifier.parent.property) && identifier.parent.property.name === "global") {
          let globalIdentifier = outGlobalIdentifiers.get(currentProgramPath);

          if (!globalIdentifier) {
            globalIdentifier = currentProgramPath.scope.generateUidIdentifier("$global");
            outGlobalIdentifiers.set(currentProgramPath, globalIdentifier);
            insertAfterStatic(external_marko_compiler_namespaceObject.types.markoTag(external_marko_compiler_namespaceObject.types.stringLiteral("get"), void 0, external_marko_compiler_namespaceObject.types.markoTagBody(), void 0, globalIdentifier));
          }

          identifier.parentPath.replaceWith(globalIdentifier);
        } else {
          throw identifier.buildCodeFrameError("Only out.global is supported for compatibility.");
        }

        break;
    }
  }

};

function insertAfterStatic(node) {
  for (const child of currentProgramPath.get("body")) {
    if (!isStatic(child)) {
      child.insertBefore(node);
      return;
    }
  }

  currentProgramPath.unshiftContainer("body", node);
}

var visitors = {
  Program: program_default,
  AssignmentExpression: assignment_expression_default,
  UpdateExpression: update_expression_default,
  ReferencedIdentifier: referenced_identifier_default,
  ImportDeclaration: import_declaration_default,
  MarkoDocumentType: document_type_default,
  MarkoDeclaration: declaration_default,
  MarkoCDATA: cdata_default,
  MarkoText: text_default,
  MarkoTag: tag_default,
  MarkoPlaceholder: placeholder_default,
  MarkoScriptlet: scriptlet_default,
  MarkoComment: comment_default
};

var getVisitorOfType = typename => Object.entries(visitors).reduce((visitor, [name, value]) => {
  if (typename in value) {
    visitor[name] = value[typename];
  }

  return visitor;
}, {});

var analyze = getVisitorOfType("analyze");
var translate = getVisitorOfType("translate");
var taglibs = [[__dirname, { ...core_default,
  migrate: getVisitorOfType("migrate")
}]];

;// CONCATENATED MODULE: ./playground/v6/components/playground-6.marko


const playground_6_marko_marko_componentType = "Mtx/OLsr",
      playground_6_marko_marko_template = (0,index_js_namespaceObject.t)(playground_6_marko_marko_componentType);

/* harmony default export */ const playground_6_marko = (playground_6_marko_marko_template);






const playground_6_marko_marko_component = {
  onCreate() {
    this.state = {};
  }

};
playground_6_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component2, state) {
  var _component = _component2,
      _state = state;

  var _hashValueReturn = return_default()(_component);

  render_tag_js_default()(hash_value_marko, {
    "default": [{
      name: "index.marko",
      path: "/components/index.marko",
      content: "<let/count=0/>\n<button onClick() { count++ }>\n  ${count}\n</button>"
    }],
    "_return": _hashValueReturn
  }, out, _componentDef, "0");

  const {
    "defaultChange": _defaultChange,
    default: files
  } = _hashValueReturn();

  render_tag_js_default()(repl_index_marko, {
    "getCompilerOptions": function () {
      return {
        translator: translator_namespaceObject,
        optimize: false
      };
    },
    "files": files,
    "filesChange": _defaultChange
  }, out, _componentDef, "1");
}, {
  t: playground_6_marko_marko_componentType
}, playground_6_marko_marko_component);
__webpack_require__(7094)
;// CONCATENATED MODULE: ./playground/v6/index.marko


const v6_index_marko_marko_componentType = "//pMzjV4",
      v6_index_marko_marko_template = (0,index_js_namespaceObject.t)(v6_index_marko_marko_componentType);

/* harmony default export */ const v6_index_marko = (v6_index_marko_marko_template);




const v6_index_marko_marko_component = {};
v6_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  render_tag_js_default()(app_layout_index_marko, {
    "title": "Try online",
    "footer": false,
    "discord": false,
    "renderBody": out => {
      out.w("<aside role=\"doc-notice note\" class=unstable-warning>\uD83D\uDEA8 This testbed for Marko 6 is so pre-alpha that its version is a hieroglyph. <b>Features are missing, bugs are known, optimizations are absent, and behavior may change.</b> Ask your doctor before use.</aside>");

      render_tag_js_default()(playground_6_marko, {}, out, _componentDef, "3");
    }
  }, out, _componentDef, "0");

  out.w("<style>\n  html {\n    overflow: hidden;\n  }\n\n  .iframe body {\n    padding: 0;\n  }\n\n  .iframe .site-header {\n    display:none;\n  }\n\n  .playground-link:not(.iframe .playground-link) {\n    display: none\n  }\n\n  .unstable-warning {\n    background-color: #ffee99;\n    width: 100%;\n    text-align: center;\n    font-size:0.8em;\n    padding:0.5em;\n  }\n</style>");
}, {
  t: v6_index_marko_marko_componentType,
  i: true
}, v6_index_marko_marko_component);
__webpack_require__(1030)
;// CONCATENATED MODULE: ./playground/v6/index.marko?server-entry


const v6_index_marko_server_entry_marko_componentType = "jQ+ygbYf",
      v6_index_marko_server_entry_marko_template = (0,index_js_namespaceObject.t)(v6_index_marko_server_entry_marko_componentType);

/* harmony default export */ const v6_index_marko_server_entry = (v6_index_marko_server_entry_marko_template);



const v6_index_marko_server_entry_crossOriginAttr = new URL(__webpack_require__.p, "file:").protocol === "file:" ? "" : " crossorigin";

function v6_index_marko_server_entry_renderAssets(out) {
  const entries = this.___entries;
  this.___entries = undefined;

  if (entries) {
    const buildName = this.buildName;
    const nonce = this.cspNonce;
    const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : "";
    const written = this.___writtenAssets || (this.___writtenAssets = new Set());
    let scripts = "";
    let styles = "";

    for (const entry of entries) {
      const assets = index_js_manifest.getAssets(entry, buildName);

      if (assets.js) {
        for (const href of assets.js) {
          if (!written.has(href)) {
            written.add(href);
            scripts += `<script src=${JSON.stringify(__webpack_require__.p + href)}${nonceAttr + v6_index_marko_server_entry_crossOriginAttr} async></script>`;
          }
        }
      }

      if (assets.css) {
        for (const href of assets.css) {
          if (!written.has(href)) {
            written.add(href);
            styles += `<link rel="stylesheet" href=${JSON.stringify(__webpack_require__.p + href)}>`;
          }
        }
      }
    }

    out.write(scripts + styles);
  }
}






const v6_index_marko_server_entry_marko_component = {};
v6_index_marko_server_entry_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.global.___renderAssets = v6_index_marko_server_entry_renderAssets;
  (out.global.___entries || (out.global.___entries = [])).push("v6_--pM");

  render_tag_js_default()((_flush_here_and_after_js_default()), {
    "renderBody": out => {
      out.global.___renderAssets && out.global.___renderAssets(out);
    }
  }, out, _componentDef, "0");

  render_tag_js_default()(v6_index_marko, input, out, _componentDef, "1");

  render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "2");

  render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "3");
}, {
  t: v6_index_marko_server_entry_marko_componentType,
  i: true
}, v6_index_marko_server_entry_marko_component);
;// CONCATENATED MODULE: ./tutorials/[name]/components/tutorial.marko


const tutorial_marko_marko_componentType = "Rs+7ZDSn",
      tutorial_marko_marko_template = (0,index_js_namespaceObject.t)(tutorial_marko_marko_componentType);

/* harmony default export */ const tutorial_marko = (tutorial_marko_marko_template);







const tutorial_marko_marko_component = {
  onCreate() {
    this.state = {};
  }

};
tutorial_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component2, state) {
  var _component = _component2,
      _state = state;
  const {
    tutorial
  } = input;
  const stepNumber = 0;
  const totalSteps = tutorial.steps.length;
  const step = tutorial.steps[stepNumber];

  const setStep = (0,cached_function_namespaceObject.cache)((0,cached_function_namespaceObject.cached)(_component, [tutorial]) || function (number) {
    stepNumber = number;
    files = tutorial.steps[number].before;
  });

  const files = step.before;
  out.w(`<div class=tutorial-container><div class=tutorial-content><header class=tutorial-header><span>${(0,escape_xml_js_namespaceObject.x)(tutorial.title)}</span><span>Step ${(0,escape_xml_js_namespaceObject.x)(stepNumber + 1)}/${(0,escape_xml_js_namespaceObject.x)(totalSteps)}</span><span><button${attr_js_default()("disabled", stepNumber === 0)}>Prev</button><button${attr_js_default()("disabled", stepNumber + 1 === totalSteps)}>Next</button></span></header><div class=tutorial-body><h1>${(0,escape_xml_js_namespaceObject.x)(step.title)}</h1>${to_string_js_default()(step.content)}</div><button${attr_js_default()("hidden", !step.after)}>Solve</button><button${attr_js_default()("disabled", files === step.before)}>Reset</button></div>`);

  render_tag_js_default()(repl_index_marko, {
    "files": files,
    "filesChange": _ => files = _
  }, out, _componentDef, "12");

  out.w("</div>");
}, {
  t: tutorial_marko_marko_componentType
}, tutorial_marko_marko_component);
__webpack_require__(2677)
;// CONCATENATED MODULE: ./tutorials/[name]/index.marko


const tutorials_name_index_marko_marko_componentType = "ZMauCTeT",
      tutorials_name_index_marko_marko_template = (0,index_js_namespaceObject.t)(tutorials_name_index_marko_marko_componentType);

/* harmony default export */ const tutorials_name_index_marko = (tutorials_name_index_marko_marko_template);





const tutorials_name_index_marko_marko_component = {};
tutorials_name_index_marko_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  const {
    params
  } = input;

  render_tag_js_default()(app_layout_index_marko, {
    "title": tutorials[params.name].title,
    "footer": false,
    "discord": false,
    "renderBody": out => {
      render_tag_js_default()(tutorial_marko, {
        "tutorial": tutorials[params.name]
      }, out, _componentDef, "1");
    }
  }, out, _componentDef, "0");
}, {
  t: tutorials_name_index_marko_marko_componentType,
  i: true
}, tutorials_name_index_marko_marko_component);
__webpack_require__(9779)
;// CONCATENATED MODULE: ./tutorials/[name]/index.marko?server-entry


const tutorials_name_index_marko_server_entry_marko_componentType = "JbdC/2Ot",
      tutorials_name_index_marko_server_entry_marko_template = (0,index_js_namespaceObject.t)(tutorials_name_index_marko_server_entry_marko_componentType);

/* harmony default export */ const tutorials_name_index_marko_server_entry = (tutorials_name_index_marko_server_entry_marko_template);



const tutorials_name_index_marko_server_entry_crossOriginAttr = new URL(__webpack_require__.p, "file:").protocol === "file:" ? "" : " crossorigin";

function tutorials_name_index_marko_server_entry_renderAssets(out) {
  const entries = this.___entries;
  this.___entries = undefined;

  if (entries) {
    const buildName = this.buildName;
    const nonce = this.cspNonce;
    const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : "";
    const written = this.___writtenAssets || (this.___writtenAssets = new Set());
    let scripts = "";
    let styles = "";

    for (const entry of entries) {
      const assets = index_js_manifest.getAssets(entry, buildName);

      if (assets.js) {
        for (const href of assets.js) {
          if (!written.has(href)) {
            written.add(href);
            scripts += `<script src=${JSON.stringify(__webpack_require__.p + href)}${nonceAttr + tutorials_name_index_marko_server_entry_crossOriginAttr} async></script>`;
          }
        }
      }

      if (assets.css) {
        for (const href of assets.css) {
          if (!written.has(href)) {
            written.add(href);
            styles += `<link rel="stylesheet" href=${JSON.stringify(__webpack_require__.p + href)}>`;
          }
        }
      }
    }

    out.write(scripts + styles);
  }
}






const tutorials_name_index_marko_server_entry_marko_component = {};
tutorials_name_index_marko_server_entry_marko_template._ = renderer_js_default()(function (input, out, _componentDef, _component, state) {
  out.global.___renderAssets = tutorials_name_index_marko_server_entry_renderAssets;
  (out.global.___entries || (out.global.___entries = [])).push("[name]_ZMau");

  render_tag_js_default()((_flush_here_and_after_js_default()), {
    "renderBody": out => {
      out.global.___renderAssets && out.global.___renderAssets(out);
    }
  }, out, _componentDef, "0");

  render_tag_js_default()(tutorials_name_index_marko, input, out, _componentDef, "1");

  render_tag_js_default()((init_components_tag_js_default()), {}, out, _componentDef, "2");

  render_tag_js_default()((reorderer_renderer_js_default()), {}, out, _componentDef, "3");
}, {
  t: tutorials_name_index_marko_server_entry_marko_componentType,
  i: true
}, tutorials_name_index_marko_server_entry_marko_component);
;// CONCATENATED MODULE: ../../node_modules/webpack-inject-plugin/dist/webpack-inject-plugin.loader.js?id=webpack-inject-module-2!













function getRoute(url) {
  const normalized = url.replace(/^\/|(\/|(\/index)?(\.marko|\.html)?)$/g, '');
  const pathParts = normalized === '' ? [] : normalized.split('/');

  if ('/' + normalized !== url) {
    return {
      redirect:true,
      path: '/' + normalized
    }
  }

  const params = {};

  const part_0 = pathParts[0];
  if (part_0 === undefined) {
    return { params, template:index_marko_server_entry };
  } else if (part_0 === "examples") {
    const part_1 = pathParts[1];
    if (true) {
      params["name"] = part_1;
      const part_2 = pathParts[2];
      if (part_2 === undefined) {
        return { params, template:examples_name_index_marko_server_entry };
      }
    } else {}
  } else if (part_0 === "docs") {
    const part_1 = pathParts[1];
    if (true) {
      params["name"] = part_1;
      const part_2 = pathParts[2];
      if (part_2 === undefined) {
        return { params, template:_name_index_marko_server_entry };
      }
    } else {}
  } else if (part_0 === "tutorials") {
    const part_1 = pathParts[1];
    if (part_1 === undefined) {
      return { params, template:tutorials_index_marko_server_entry };
    } else if (true) {
      params["name"] = part_1;
      const part_2 = pathParts[2];
      if (part_2 === undefined) {
        return { params, template:tutorials_name_index_marko_server_entry };
      }
    }
  } else if (part_0 === "try-online-new") {
    const part_1 = pathParts[1];
    if (part_1 === undefined) {
      return { params, template:try_online_new_index_marko_server_entry };
    }
  } else if (part_0 === "try-online") {
    const part_1 = pathParts[1];
    if (part_1 === undefined) {
      return { params, template:try_online_index_marko_server_entry };
    }
  } else if (part_0 === "playground") {
    const part_1 = pathParts[1];
    if (part_1 === undefined) {
      return { params, template:playground_index_marko_server_entry };
    } else if (part_1 === "v6") {
      const part_2 = pathParts[2];
      if (part_2 === undefined) {
        return { params, template:v6_index_marko_server_entry };
      }
    }
  }
}

global.GET_ROUTE = getRoute;

})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;


var _interopRequireDefault = __webpack_require__(7880);

exports.__esModule = true;
exports.routes = exports.assets = void 0;

var _path = _interopRequireDefault(__webpack_require__(1017));

const getRoute = global.GET_ROUTE;
const browserEnvs = global.BROWSER_ENVS;

const assets =  true && __webpack_require__(8614)( // eslint-disable-next-line
_path.default.join(require.resolve("."), "..", "assets"), {
  setHeaders(res) {
    if (!res.getHeader("Cache-Control")) {
      res.setHeader("Cache-Control", ["public, max-age=31536000", "public, max-age=31536000, immutable"]);
      res.setHeader("Expires", new Date(Date.now() + 31536000000).toUTCString());
    }
  }

});

exports.assets = assets;

const routes = global.MARKO_MIDDLEWARE || ((req, res, notFound) => {
  res.setHeader("content-type", "text/html; charset=utf-8");
  const [pathname, query] = req.url.split("?");
  const route = getRoute(pathname);

  if (route) {
    if (route.redirect) {
      res.statusCode = 301;
      res.setHeader("location", route.path);
      res.end(`Redirecting to <a href=${JSON.stringify(route.path)}>${route.path}</a>`);
    } else {
      const userAgent = req.headers["user-agent"] || "";
      route.template.render({
        $global: {
          buildName: `Browser-${browserEnvs.find(({
            test
          }) => !test || test.test(userAgent)).env}`
        },
        params: route.params,
        query,
        pathname
      }, res);
    }
  } else {
    notFound();
  }
});

exports.routes = routes;
})();

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,