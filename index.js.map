{"version":3,"sources":["webpack/bootstrap","external \"marko/dist/runtime/helpers/dynamic-tag\"","../components/code-block-marko/index.marko","external \"marko/dist/runtime/html\"","external \"marko/dist/runtime/components/renderer\"","external \"marko/dist/runtime/helpers/render-tag\"","../utils/toc-registry.js","external \"marko/dist/runtime/html/helpers/attr\"","external \"marko/dist/runtime/html/helpers/escape-xml\"","external \"marko/dist/runtime/html/helpers/data-marko\"","external \"marko/dist/runtime/helpers/class-value\"","../utils/format-slug.js","../components/heading/index.marko","external \"marko/dist/runtime/helpers/to-string\"","external \"marko/dist/runtime/helpers/style-value\"","/home/dpiercey/dev/github/marko/website/__MARKO_WEBPACK__MANIFEST.js","external \"marko/dist/core-tags/components/init-components-tag.js\"","external \"marko/dist/core-tags/core/await/reorderer-renderer.js\"","../components/app-layout/index.marko","external \"marko/docs/structure.json\"","/home/dpiercey/dev/github/marko/website/node_modules/marko/src/core-tags/components/init-components-tag.js","/home/dpiercey/dev/github/marko/website/node_modules/marko/src/core-tags/core/await/reorderer-renderer.js","../components/app-layout/components/layout-search/index.marko","../components/app-footer/index.marko","external \"path\"","./index/components/home-benchmarks/data.js","/home/dpiercey/dev/github/marko/website/node_modules/marko/src/runtime/components/index.js","/home/dpiercey/dev/github/marko/website/node_modules/@marko/build/dist/files/dir-index.marko","/home/dpiercey/dev/github/marko/website/node_modules/@marko/build/dist/files/parent-dir.png","/home/dpiercey/dev/github/marko/website/node_modules/@marko/build/dist/files/dir.png","/home/dpiercey/dev/github/marko/website/node_modules/@marko/build/dist/files/file.png","/home/dpiercey/dev/github/marko/website/node_modules/marko/src/core-tags/components/preferred-script-location-tag.js","webpack:///./index/index.marko?a594","./index/index.marko","./index/components/home-hero/index.marko","./index/components/home-hero/logo.png","./index/components/home-hero/marko-text.png","./index/components/home-hero/components/github-link/index.marko","./index/components/home-hero/components/github-link/github.svg","./index/components/home-hero/component.js","./index/components/home-features/index.marko","./index/components/home-components/index.marko","../components/heading/getAnchorName.js","./index/components/home-components/components/counter-example/index.marko","./index/components/home-syntax/index.marko","./index/components/home-animation/index.marko","./index/components/home-animation/components/sine-wave/index.marko","./index/components/home-animation/components/sine-wave/isElementInViewport.js","./index/components/home-tooling/index.marko","./index/components/home-tooling/screen.png","./index/components/home-benchmarks/index.marko","./index/components/home-benchmarks/components/benchmark-chart/index.marko","../components/app-layout/favicon.png","../components/app-layout/components/layout-header/index.marko","../components/app-layout/components/layout-header/logo-header.png","../components/app-layout/components/layout-search/search.png","../components/app-layout/components/layout-sidebar/index.marko","../utils/create-overview-tree.js","../components/app-layout/components/layout-sidebar/components/version-switcher/index.marko","external \"marko/package.json\"","../components/app-footer/openjsf.png","../components/app-footer/osi.png","../components/app-footer/ebay.svg","../components/app-layout/components/google-analytics/index.marko","external \"marko/dist/core-tags/components/preferred-script-location-tag.js\"","webpack:///./try-online/index.marko?c370","./try-online/index.marko","./try-online/components/loader/index.marko","/home/dpiercey/dev/github/marko/website/node_modules/@marko-tags/subscribe/index.marko","webpack:///./docs/:name/index.marko?8665","./docs/:name/index.marko","../utils/document-lookup.js","/home/dpiercey/dev/github/marko/website/examples/examples/color-picker/README.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/10-awesome-marko-features.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/body-content.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/class-components.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/component-diagram.svg","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/concise.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/conditionals-and-lists.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/core-tags.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/custom-tags.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/editor-plugins.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/events.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/express.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/fastify.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/getting-started.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/hapi.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/http.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/huncwot.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/installing.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/koa.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/lasso.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/marko-4-upgrade.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/marko-json.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/marko-v4.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/marko-vs-react.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/redux.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/rendering.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/rollup.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/server-side-rendering.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/state.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/styles.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/syntax.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/webpack.md","/home/dpiercey/dev/github/marko/website/node_modules/marko/docs/why-is-marko-fast.md","./docs/:name/components/edit-on-github/index.marko","./docs/:name/components/edit-on-github/github.svg","./docs/:name/components/contributors/index.marko","./docs/:name/components/contributors/get-contributors.js","external \"marko/dist/core-tags/core/await/renderer.js\"","./docs/:name/components/document-overview/index.marko","external \"@babel/runtime/helpers/interopRequireDefault\"","(webpack)-inject-plugin/dist/webpack-inject-plugin.loader.js","webpack:///(webpack)-inject-plugin/dist/webpack-inject-plugin.loader.js?5f4e","webpack:////home/dpiercey/dev/github/marko/website/node_modules/@marko/build/dist/files/dir-index.marko?9b34","external \"warp10\"","/home/dpiercey/dev/github/marko/website/node_modules/marko/src/core-tags/core/await/client-reorder.js","external \"fs\"","./index/components/home-benchmarks/logos/inferno.png","./index/components/home-benchmarks/logos/marko.png","./index/components/home-benchmarks/logos/preact.png","./index/components/home-benchmarks/logos/react.jpg","./index/components/home-benchmarks/logos/vue.png","./index/components/home-benchmarks/logos/node.jpg","./index/components/home-benchmarks/logos/desktop.png","./index/components/home-benchmarks/logos/mobile.png","./index/components/home-benchmarks/logos/firefox.png","./index/components/home-benchmarks/logos/safari.png","./index/components/home-benchmarks/logos/chrome.png","./index/components/home-benchmarks/logos/safari-ios.png","./index/components/home-benchmarks/logos/chrome-android.png","external \"gh-got\"","/home/dpiercey/dev/github/marko/website/node_modules/@marko/build/dist/files/middleware.js","external \"connect-gzip-static\"","/home/dpiercey/dev/github/marko/website/node_modules/@marko/build/dist/files/server.js","external \"http\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","input","html","concise","Map","replace","toLowerCase","className","text","anchorName","getAnchorName","out","tag","renderBody","$__MARKO_MANIFEST__$","title","class","currentDoc","toc","footer","discord","INIT_COMPONENTS_KEY","addComponentsFromContext","___addComponentsFromContext","getInitComponentsCode","___getInitComponentsCode","addComponentsFromOut","source","target","sourceOut","targetOut","componentsContext","___components","componentDefs","writer","addInitScript","state","root","script","$global","global","undefined","on","isSync","asyncOut","beginAsync","last","timeout","onLast","next","rootOut","_parentOut","end","clientReorder","__awaitReordererInvoked","___clientReorderContext","flush","remaining","awaitContext","instances","length","handleAwait","awaitInfo","emit","result","_afRuntime","getCode","write","id","toString","after","err","error","forEach","libraries","inferno","logo","default","color","marko","preact","react","vue","environments","node","type","desktop","mobile","firefox","safari","chrome","edge","ios","android","benchmarks","colors","description","unit","resultsByBench","entries","keys","map","benchResultsByEnvironment","environmentEntries","numDesktop","filter","entry","numMobile","desktopResults","mobileResults","environmentName","environmentResultsByLibrary","environmentType","results","count","libraryName","libraryResult","benchName","benchmark","localMax","assign","envName","envResultsByLibrary","environment","libName","libResult","library","max","warp10","safeJSONRegExp","IGNORE_GLOBAL_TYPES","Set","safeJSONReplacer","match","charCodeAt","isNotEmpty","obj","safeStringify","data","JSON","stringify","stringifyPrepare","componentsToHydrate","components","len","serializedProps","undefinedPropNames","componentDef","component","___component","flags","___flags","typeName","customEvents","___customEvents","scope","___scope","bubblingDomEvents","___bubblingDomEvents","stateKeys","stateKey","push","___state","___input","___bubblingDomEventsExtraArgsCount","___updatedInput","___updateQueued","extra","b","___domEvents","e","f","u","w","parts","hasExtra","nestedContexts","___nestedContexts","nestedContext","getInitComponentsData","isLast","___isLastFlush","didSerializeComponents","___didSerializeComponents","prefix","componentIdPrefix","widgetIdPrefix","typesLookup","___typesLookup","newTypes","serializedGlobals","typeIndex","size","set","serializedGlobalsLookup","has","getSerializedGlobals","g","getInitComponentsDataFromOut","runtimeId","initComponentsData","arguments","componentGlobalKey","writeInitComponentsCode","getRenderedComponents","pathname","all","split","part","slice","join","dir","params","dirs","file","files","forceScriptTagAtThisPoint","htmlSoFar","clear","_marko_template","__filename","renderAssets","assets","this","___assets","nonce","cspNonce","___renderAssets","___flush","___end","js","nonceAttr","css","outFlushOverride","outEndOverride","encoding","callback","_","_component","getAssets","buildName","meta","tags","taglineStatements","setHeaderClassTimer","header","setTimeout","classList","remove","add","onMount","getEl","originalFadeIn","innerHTML","currentTaglineIndex","setInterval","tagline","background","anchorCache","repeat","onCreate","increment","barCount","barWidth","active","step","nextFrame","subscribeTo","window","scale","registerAnimationViewListener","shouldShowAnimation","start","Math","min","floor","innerWidth","stop","switchDirection","requestAnimationFrame","inView","el","isElementInViewport","translateY","sin","style","width","left","transform","backgroundColor","elementInRange","x","a","element","options","scrollY","scrollBottom","innerHeight","elOffsetTop","offsetTop","elBottomPos","offsetHeight","index","individual","switchBench","toggleIndividual","isIndividual","benchData","bench","selected","sideBySide","apply","getPercent","base","round","pow","sqrt","height","featured","toLocaleString","maximumFractionDigits","parentTree","createOverviewTree","structure","getDocData","section","doc","docSlug","docTitle","formatSlug","isNested","toUpperCase","overviewSlug","docs","nestedTitle","familyTree","j","nestedList","version","trackingId","domain","deps","show","loading","checkIfLargeEnough","windowSize","document","body","clientWidth","examples","listen","onInput","to","onDestroy","subscription","removeAllListeners","events","__events","method","documentLookup","overview","template","docsByRepo","trim","repo","filePath","slug","path","basename","dirname","fileNameToSlug","repoPath","tocRegistry","addOverviewDoc","parentSlug","titleSlug","docName","childDoc","editPath","getContributors","contributors","contributor","profile","photo","username","gh","repoFilePath","then","res","contribution","author","commit","login","avatar_url","html_url","commits","sort","k","catch","message","response","statusCode","test","console","process","exit","BROWSER_ENVS","env","GET_ROUTE","url","normalized","pathParts","redirect","part_0","part_1","code","fs","isSupported","readFileSync","_interopRequireDefault","routes","_path","getRoute","browserEnvs","resolve","maxAge","MARKO_MIDDLEWARE","req","notFound","setHeader","query","route","userAgent","headers","render","find","_http","_middleware","PORT","assetsMatch","createServer"],"mappings":"2BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,WAIjBlC,EAAoBA,EAAoBmC,EAAI,K,gBClFrDhC,EAAOD,QAAUkC,QAAQ,2C,gKCAxB,6DAAA1B,EAAA,QACuD,gBADvD,uFAKU2B,EAAMC,wCALhB,IAQUD,EAAME,0B,sFAGjB,CAAC,kB,sCCXDpC,EAAOD,QAAUkC,QAAQ,4B,cCAzBjC,EAAOD,QAAUkC,QAAQ,2C,cCAzBjC,EAAOD,QAAUkC,QAAQ,0C,6BCAV,QAAII,K,cCAnBrC,EAAOD,QAAUkC,QAAQ,yC,cCAzBjC,EAAOD,QAAUkC,QAAQ,+C,cCAzBjC,EAAOD,QAAUkC,QAAQ,+C,cCAzBjC,EAAOD,QAAUkC,QAAQ,2C,cCAzBjC,EAAOD,QAAUS,GACRA,EACJ8B,QAAQ,gBAAiB,IACzBA,QAAQ,WAAY,KACpBC,e,uLCFH,IAAIC,EAAYN,EAAK,MACjBO,EAAOP,EAAMO,KACbC,EAAaR,EAAMQ,YAAcC,IAAcF,EAAMG,GAmC3D,MAAGV,EAAMW,IAAT,YAAoB,CAAC,UAAWL,KAAhC,IACK,oBAAOE,kBAAP,WAAuC,IAAGA,0CAGvCD,EACA,gBAAEA,IAGF,MAAGP,EAAMY,WAAT,4BARR,mB,mDAWA,CAAC,CAAC,KAAO,MAAM,KAAO,gtBAAktB,SAAW,IAAI,OAAS,IAAI,KAAO,gBAAgB,YAAc,yB,sCClDzyB9C,EAAOD,QAAUkC,QAAQ,yC,cCAzBjC,EAAOD,QAAUkC,QAAQ,2C,cCAzBjC,EAAOD,QAAUgD,ulB,cCAjB/C,EAAOD,QAAUkC,QAAQ,2D,cCAzBjC,EAAOD,QAAUkC,QAAQ,0D,iSCAzB,iFAIaC,EAAMc,MAAQd,EAAMc,MAAQ,WAAa,4DAJtD,grB,sEA2Bc,IAAAd,EAAMe,YAChB,oBACA,oBAA2Bf,EAAMgB,WAAjC,IAAgDhB,EAAMiB,KAAtD,UACC,2BACC,MAAGjB,EAAMY,WAAT,4B,eAEmB,IAAjBZ,EAAMkB,QACR,qBAGF,oBAA8B,gBAA9B,OAAqD,eAArD,WAEsB,IAAlBlB,EAAMmB,SACP,2K,0IAMP,CAAC,e,4XC9CDrD,EAAOD,QAAUkC,QAAQ,8B,6BCEzB,MAAMqB,EAAsBtC,SAEtBuC,EAA2B,EAAQ,IACtCC,4BACGC,EAAwB,EAAQ,IACnCC,yBAEH,SAASC,EAAqBC,EAAQC,GACpC,MAAMC,EAAYF,EAAOhB,KAAOgB,EAC1BG,EAAYF,GAAUC,EACtBE,EAAoBF,EAAUG,cAC9BC,EAAgBH,EAAUI,OAAOrD,IAAI,iBAC3CyC,EAAyBS,EAAmBE,GAG9C,SAASE,EAAcD,GACrB,MAAMvB,EAAMuB,EAAOE,MAAMC,KACnBJ,EAAgBC,EAAOrD,IAAI,iBACjCqD,EAAOI,OAAOd,EAAsBb,EAAKsB,IAG3ClE,EAAOD,QAAU,SAAgBmC,EAAOU,GACtC,MAAM4B,EAAU5B,EAAI6B,OACpB,QAAqCC,IAAjCF,EAAQlB,GAMV,GALAkB,EAAQlB,IAAuB,EAE/BV,EAAI+B,GAAG,eAAgBhB,GACvBf,EAAI+B,GAAG,cAAeP,IAED,IAAjBxB,EAAIgC,SAGNjB,EAAqBf,OAChB,CAIL,MAAMiC,EAAWjC,EAAIkC,WAAW,CAAEC,MAAM,EAAMC,SAAU,IACxDpC,EAAIqC,QAAO,SAASC,GAElB,IAAIC,EAAUvC,EACd,KAAOuC,EAAQC,YACbD,EAAUA,EAAQC,WAGpBzB,EAAqBwB,EAASN,GAC9BA,EAASQ,MACTH,U,6BC/CR,MAAMI,EAAgB,EAAQ,KAE9BtF,EAAOD,QAAU,SAASmC,EAAOU,GAG/B,IAAIA,EAAIgC,SAAR,CAIA,IAAIH,EAAS7B,EAAI6B,OAIjB,IAAIA,EAAOc,wBAAX,CAIAd,EAAOc,yBAA0B,EAE7B3C,EAAI6B,OAAOe,yBACb5C,EAAI6C,QAGN,IAAIZ,EAAWjC,EAAIkC,WAAW,CAC5BC,MAAM,EACNC,SAAU,EACVxE,KAAM,oBAGRoC,EAAIqC,QAAO,SAASC,GAClB,IACIQ,EADAC,EAAelB,EAAOe,wBAI1B,IACGG,IACAA,EAAaC,aACZF,EAAYC,EAAaC,UAAUC,QAIrC,OAFAhB,EAASQ,WACTH,IAIF,SAASY,EAAYC,GACnBA,EAAUnD,IACP+B,GAAG,cAAe/B,EAAIoD,KAAKvE,KAAKmB,EAAK,gBACrC+B,GAAG,UAAU,SAASsB,GAChBxB,EAAOyB,aACVrB,EAASN,OAAOe,EAAca,WAC9B1B,EAAOyB,YAAa,GAGtBrB,EAASuB,MACP,cACEL,EAAUM,GACV,0BACAJ,EAAOK,WACP,UAGJzB,EAASN,OACP,QAC2B,iBAAjBwB,EAAUM,GACdN,EAAUM,GACV,IAAMN,EAAUM,GAAK,MACxBN,EAAUQ,MAAQ,KAAOR,EAAUQ,MAAQ,IAAM,IAClD,KAGJR,EAAUnD,IAAIuB,OAASU,EAASV,OAEhCvB,EAAIoD,KAAK,eAAgBD,GAEzBnD,EAAI6C,QAEgB,KAAdC,IACJb,EAASQ,MACTH,QAGHP,GAAG,SAAS,SAAS6B,GACpB3B,EAAS4B,MAAMD,MAIrBb,EAAaC,UAAUc,QAAQZ,GAE/BlD,EAAI+B,GAAG,uBAAuB,SAASoB,GACrCL,IACAI,EAAYC,aAKPJ,EAAaC,iB,uLCjGvB,yCAA2C,SAA3C,yBAA8D,UAA9D,wBAAK,cAAkB1D,EAAMe,gBAA7B,mDAE0E,UAF1E,uBAE6F,QAF7F,0E,sFAID,CAAC,kB,+MCJA,+BAAO,cAAkBf,EAAMe,4DAA/B,sX,mDAeQ,CAAC,kB,sCCfVjD,EAAOD,QAAUkC,QAAQ,S,gBCAzB,MAAM0E,EAAY,CAChBC,QAAS,CACPpG,KAAM,UACNqG,KAAM5E,EAAQ,KAAuB6E,QACrCC,MAAO,WAETC,MAAO,CACLxG,KAAM,QACNqG,KAAM5E,EAAQ,KAAqB6E,QACnCC,MAAO,QAETE,OAAQ,CACNzG,KAAM,SACNqG,KAAM5E,EAAQ,KAAsB6E,QACpCC,MAAO,WAETG,MAAO,CACL1G,KAAM,QACNqG,KAAM5E,EAAQ,KAAqB6E,QACnCC,MAAO,WAETI,IAAK,CACH3G,KAAM,MACNqG,KAAM5E,EAAQ,KAAmB6E,QACjCC,MAAO,YAILK,EAAe,CACnBC,KAAM,CACJR,KAAM5E,EAAQ,KAAoB6E,QAClCtG,KAAM,UACN8G,KAAM,UAERC,QAAS,CACPV,KAAM5E,EAAQ,KAAuB6E,QACrCtG,KAAM,mBACN8G,KAAM,WAERE,OAAQ,CACNX,KAAM5E,EAAQ,KAAsB6E,QACpCtG,KAAM,kBACN8G,KAAM,WAERG,QAAS,CACPZ,KAAM5E,EAAQ,KAAuB6E,QACrCtG,KAAM,UACN8G,KAAM,WAERI,OAAQ,CACNb,KAAM5E,EAAQ,KAAsB6E,QACpCtG,KAAM,SACN8G,KAAM,WAERK,OAAQ,CACNd,KAAM5E,EAAQ,KAAsB6E,QACpCtG,KAAM,SACN8G,KAAM,WAERM,KAAM,GACNC,IAAK,CACHhB,KAAM5E,EAAQ,KAA0B6E,QACxCtG,KAAM,aACN8G,KAAM,UAERQ,QAAS,CACPjB,KAAM5E,EAAQ,KAA8B6E,QAC5CtG,KAAM,qBACN8G,KAAM,WAIJS,EAAa,CACjBC,OAAQ,CACNxH,KAAM,eACNyH,YAAc,+jBAQdC,KAAM,SAER,iBAAkB,CAChB1H,KAAM,iBACNyH,YAAc,wcAGdC,KAAM,UAIV,IAAIC,EAAiB,CACnBH,OAAQ,CACNX,KAAM,CACJT,QAAS,KACTI,MAAO,KACPC,OAAQ,KACRC,MAAO,IACPC,IAAK,KAEPO,OAAQ,CACNd,QAAS,KACTI,MAAO,KACPC,OAAQ,KACRC,MAAO,KACPC,IAAK,MAEPQ,OAAQ,CACNf,QAAS,KACTI,MAAO,KACPC,OAAQ,KACRC,MAAO,KACPC,IAAK,MAEPM,QAAS,CACPb,QAAS,KACTI,MAAO,KACPC,OAAQ,KACRC,MAAO,IACPC,IAAK,MAEPU,IAAK,CACHjB,QAAS,IACTI,MAAO,KACPC,OAAQ,IACRC,MAAO,IACPC,IAAK,KAEPW,QAAS,CACPlB,QAAS,IACTI,MAAO,KACPC,OAAQ,IACRC,MAAO,IACPC,IAAK,MAGT,iBAAkB,CAChBE,KAAM,CACJT,QAAS,IACTI,MAAO,KACPC,OAAQ,IACRC,MAAO,MACPC,IAAK,KAEPO,OAAQ,CACNd,QAAS,IACTI,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,IAAK,KAEPQ,OAAQ,CACNf,QAAS,IACTI,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,IAAK,KAEPM,QAAS,CACPb,QAAS,IACTI,MAAO,IACPC,OAAQ,MACRC,MAAO,MACPC,IAAK,OAEPU,IAAK,CACHjB,QAAS,MACTI,MAAO,IACPC,OAAQ,MACRC,MAAO,MACPC,IAAK,OAEPW,QAAS,CACPlB,QAAS,MACTI,MAAO,MACPC,OAAQ,MACRC,MAAO,MACPC,IAAK,SAKXxG,OAAOyH,QACLzH,OAAOyH,SACP,SAASzG,GACP,OAAOhB,OAAO0H,KAAK1G,GAAQ2G,IAAI9G,GAAO,CAACA,EAAKG,EAAOH,MAGvDb,OAAOyH,QAAQD,GAAgBzB,QAAQ0B,IACnBA,EAAQ,GAA1B,MACMG,EAA4BH,EAAQ,GACpCI,EAAqB7H,OAAOyH,QAAQG,GACpCE,EAAaD,EAAmBE,OACpCC,GAAyC,YAAhCvB,EAAauB,EAAM,IAAIrB,MAChCzB,OACI+C,EAAYJ,EAAmBE,OACnCC,GAAyC,WAAhCvB,EAAauB,EAAM,IAAIrB,MAChCzB,OAEF,IAAIgD,EAAkBN,EAA0BhB,QAAU,GACtDuB,EAAiBP,EAA0Bf,OAAS,GAExDgB,EAAmB9B,QAAQiC,IACzB,MAAMI,EAAkBJ,EAAM,GACxBK,EAA8BL,EAAM,GACpCM,EAAkB7B,EAAa2B,GAAiBzB,KAEtD,IAAI4B,EACAC,EAEoB,WAApBF,GACFC,EAAUJ,EACVK,EAAQP,GACqB,YAApBK,IACTC,EAAUL,EACVM,EAAQV,GAGNS,GACFvI,OAAOyH,QAAQY,GAA6BtC,QAAQ0B,IAClD,MAAMgB,EAAchB,EAAQ,GACtBiB,EAAgBjB,EAAQ,GAE9Bc,EAAQE,GAAeF,EAAQE,IAAgB,EAC/CF,EAAQE,IAAgBC,EAAgBF,QAMhDnJ,EAAOD,QAAUY,OAAOyH,QAAQD,GAAgBG,IAAIF,IAClD,MAAMkB,EAAYlB,EAAQ,GACpBG,EAA4BH,EAAQ,GACpCmB,EAAYxB,EAAWuB,GAE7B,IAAIE,EAAW,EAGf,OAAO7I,OAAO8I,OAAO,GAAIF,EAAW,CAClCL,QAASvI,OAAOyH,QAAQG,GAA2BD,IAAIF,IACrD,MAAMsB,EAAUtB,EAAQ,GAClBuB,EAAsBvB,EAAQ,GAC9BwB,EAAcxC,EAAasC,GAEjC,OAAO/I,OAAO8I,OAAO,GAAIG,EAAa,CACpCV,QAASvI,OAAOyH,QAAQuB,GAAqBrB,IAAIF,IAC/C,MAAMyB,EAAUzB,EAAQ,GAClB0B,EAAY1B,EAAQ,GACpB2B,EAAUpD,EAAUkD,GAM1B,OAJIC,EAAYN,IACdA,EAAWM,GAGNnJ,OAAO8I,OAAO,GAAIM,EAAS,CAChC7I,MAAO4I,EACP5B,KAAMqB,EAAUrB,aAKxB8B,IAAKR,O,6BCtQT,IAAIS,EAAS,EAAQ,KACjBC,EAAiB,qBACjBC,EAAsB,IAAIC,IAAI,CAAC,YAAa,WAAY,WAM5D,SAASC,EAAiBC,GACxB,MAAc,OAAVA,EACK,WAEA,MAAQA,EAAMC,WAAW,GAAGjE,SAAS,IAIhD,SAASkE,EAAWC,GAElB,IADA,IAAIpC,EAAO1H,OAAO0H,KAAKoC,GACdxK,EAAIoI,EAAKxC,OAAQ5F,KACxB,QAAqByE,IAAjB+F,EAAIpC,EAAKpI,IACX,OAAO,EAIX,OAAO,EAET,SAASyK,EAAcC,GACrB,OAAOC,KAAKC,UAAUZ,EAAOa,iBAAiBH,IAAOrI,QACnD4H,EACAG,GA0BJ,SAAS9G,EAAyBS,EAAmB+G,GAKnD,IAJA,IAAIC,EAAahH,EAAkBC,cAE/BgH,EAAMD,EAAWnF,OAEZ5F,EAAI,EAAGA,EAAIgL,EAAKhL,IAAK,CAC5B,IAUIoE,EACA6G,EACAC,EAZAC,EAAeJ,EAAW/K,GAC1BoG,EAAK+E,EAAa/E,GAClBgF,EAAYD,EAAaE,aACzBC,EAAQH,EAAaI,SACrBtJ,EAAQmJ,EAAUnJ,OAAS,EAC3BuJ,EAAWJ,EAAUI,SACrBC,EAAeL,EAAUM,gBACzBC,EAAQP,EAAUQ,SAClBC,EAAoBT,EAAUU,qBAMlC,GAtEgC,EAsE5BR,EAC8B,mBAArBrJ,EAAMY,aACfyI,GAvEmB,EAwEnBrJ,EAAMY,gBAAa4B,OAEhB,CACL,GAAI2G,EAAUhH,MAAO,CACnBA,EAAQgH,EAAUhH,MAIlB,MAAM2H,EAAYrL,OAAO0H,KAAKhE,GAC9B,IAAK,IAAIpE,EAAI+L,EAAUnG,OAAQ5F,KAAO,CACpC,MAAMgM,EAAWD,EAAU/L,QAEHyE,IAApBL,EAAM4H,KACJd,EACFA,EAAmBe,KAAKD,GAExBd,EAAqB,CAACc,KAM9BZ,EAAUc,cAAWzH,EACrB2G,EAAUe,cAAW1H,EACrB2G,EAAUI,cAAW/G,EACrB2G,EAAUhF,QAAK3B,EACf2G,EAAUM,qBAAkBjH,EAC5B2G,EAAUQ,cAAWnH,EACrB2G,EAAUU,0BAAuBrH,EACjC2G,EAAUgB,wCAAqC3H,EAC/C2G,EAAUiB,qBAAkB5H,EAC5B2G,EAAUkB,qBAAkB7H,EAExB8F,EAAWa,KACbH,EAAkBG,GAItB,IAAImB,EAAQ,CACVC,EAAGX,EACHvL,EAAG6K,EAAasB,aAChBC,EAAGjB,EACHkB,EAAGrB,QAAS7G,EACZ3C,EAAG2J,GAAgBE,EACnB5J,EAAGqC,EACHwI,EAAG1B,EACH2B,EAAG5B,GAGD6B,EAAQ,CAAC1G,EAAIoF,GACbuB,EAAWxC,EAAWgC,GAEtBtK,GACF6K,EAAMb,KAAKhK,GAEP8K,GACFD,EAAMb,KAAKM,IAEJQ,GACTD,EAAMb,KAAK,EAAGM,GAGhBzB,EAAoBmB,KAAKa,GAG3B/B,EAAWnF,OAAS,EAGpB,IAAIoH,EAAiBjJ,EAAkBkJ,uBAChBxI,IAAnBuI,GACFA,EAAevG,SAAQ,SAASyG,GAC9B5J,EAAyB4J,EAAepC,MAK9C,SAASqC,EAAsBxK,EAAKsB,GAClC,MAAM+G,EAAM/G,EAAc2B,OACpBrB,EAAU5B,EAAI6B,OACd4I,EAAS7I,EAAQ8I,eACjBC,EAAyB/I,EAAQgJ,0BACjCC,EAASjJ,EAAQkJ,mBAAqBlJ,EAAQmJ,eAEpD,GAAY,IAAR1C,EACF,OAAIoC,GAAUE,EACL,CAAExL,EAAG0L,EAAQvN,EAAG,QAGzB,EAGF,MACM0N,EACJpJ,EAAQqJ,iBAAmBrJ,EAAQqJ,eAAiB,IAAIxL,KAC1D,IAAIyL,EAqBAC,EAnBJ,IAAK,IAAI9N,EAAI,EAAGA,EAAIgL,EAAKhL,IAAK,CAC5B,MAAMmL,EAAelH,EAAcjE,GAC7BwL,EAAWL,EAPA,GAQjB,IAAI4C,EAAYJ,EAAY9M,IAAI2K,QAEd/G,IAAdsJ,IACFA,EAAYJ,EAAYK,KACxBL,EAAYM,IAAIzC,EAAUuC,GAEtBF,EACFA,EAAS5B,KAAKT,GAEdqC,EAAW,CAACrC,IAIhBL,EArBiB,GAqBU4C,EAU7B,OALKT,IACH/I,EAAQgJ,2BAA4B,EACpCO,EApKJ,SAA8BvJ,GAC5B,IAAI2J,EAA0B3J,EAAQuJ,kBACtC,GAAII,EAAyB,CAC3B,IAAIJ,EACA1F,EAAO1H,OAAO0H,KAAK8F,GACvB,IAAK,IAAIlO,EAAIoI,EAAKxC,OAAQ5F,KAAO,CAC/B,IAAIuB,EAAM6G,EAAKpI,GACf,GAAIkO,EAAwB3M,GAAM,CAChC,IAAIN,EAAQsD,EAAQhD,GACf2I,EAAoBiE,WAAWlN,UACRwD,IAAtBqJ,IACFA,EAAoB,IAEtBA,EAAkBvM,GAAON,IAK/B,OAAO6M,GAkJaM,CAAqB7J,IAGpC,CACLzC,EAAG0L,EACHvN,EAAGmN,GAAU,EACbiB,EAAGP,EACHjB,EAAG5I,EACH/C,EAAG2M,GAIP,SAASS,EAA6B3L,GACpC,MAAMoB,EAAoBpB,EAAIqB,cAE9B,GAA0B,OAAtBD,EACF,OAGF,MAAMQ,EAAU5B,EAAI6B,OACd+J,EAAYhK,EAAQgK,UACpBzD,EAAsB,GAC5BxH,EAAyBS,EAAmB+G,GAE5CvG,EAAQ8I,gBAAiB,EACzB,MAAM3C,EAAOyC,EAAsBxK,EAAKmI,GAOxC,OANAvG,EAAQ8I,oBAAiB5I,EA5NF,MA8NnB8J,IACF7D,EAAK5J,EAAIyN,GAGJ7D,EAOT5K,EAAQ2D,yBAA2B,SACjCd,EACAsB,GAEA,MAAMuK,EACiB,IAArBC,UAAU7I,OACNuH,EAAsBxK,EAAKsB,GAC3BqK,EAA6B3L,GAEnC,QAA2B8B,IAAvB+J,EACF,MAAO,GAGT,MAAMD,EAAY5L,EAAI6B,OAAO+J,UACvBG,EAvPiB,MAwPrBH,EAAmC,KAAOA,EAAY,KAExD,MAAO,IAAIG,cAA+BA,iBAAkCjE,EAC1E+D,OAIJ1O,EAAQyD,4BAA8BD,EACtCxD,EAAQ6O,wBA3BR,SAAiChM,GAC/BA,EAAI2B,OAAOxE,EAAQ2D,yBAAyBd,KAmC9C7C,EAAQ8O,sBAAwB,SAASjM,GACvC,OAAOqH,EAAOa,iBAAiByD,EAA6B3L,M,iPC1M9D,+MAMsBV,EAAM4M,qB,6DAGvB,0B,eAGiBC,EAAQ7M,EAAM4M,SAASxM,QAAQ,UAAW,IAAI0M,MAAM,K,UAA7DC,KAASF,E,KAAH9O,E,gBAAAA,KACC,IAANA,GAAWgP,GACZ,wB,QAEAhP,EAAI8O,EAAIlJ,OAAS,EAAI,IAAM,K,yBAAY,IAAGkJ,EAAIG,MAAM,EAAGjP,EAAI,GAAGkP,KAAK,U,wBACpE,gBAAEF,GAAF,K,4CAKN,MAAM3K,EAAOpC,EAAM4M,SAASxM,QAAQ,MAAO,IAC5C,c,CACKgC,GACD,yE,kBAKE8K,KAAQlN,EAAMmN,OAAOC,K,KACvB,oBAAQ,GAAEhL,KAAQ8K,OAAlB,YAAiCA,EAAF,YAA/B,oCAESA,kB,kBAGPG,KAASrN,EAAMmN,OAAOG,M,KACxB,oBAAQ,GAAElL,KAAQiL,OAAlB,YAAkCA,EAAF,iBAAhC,oCAESA,uB,sCAIT,sB,wNAST,CAAC,CAAC,KAAO,MAAM,KAAO,6vCAA+vC,SAAW,EAAE,OAAS,KAAK,KAAO,oBAAoB,YAAc,0B,oRCzH10C,4B,6BCAA,4B,6BCAA,4B,6BCEf,SAASE,EAA0B7M,GACjC,MAAMuB,EAASvB,EAAIuB,OAEnBvB,EAAI6B,OAAO6I,gBAAiB,EAC5B,MAAMoC,EAAYvL,EAAOmC,WACzB1D,EAAI6B,OAAO6I,oBAAiB5I,EAE5BP,EAAOwL,QACPxL,EAAOiC,MAAMsJ,GAGf1P,EAAOD,QAAU,SAAgBmC,EAAOU,GACtC,IAAqB,IAAjBA,EAAIgC,SACN6K,EAA0B7M,OACrB,CACL,MAAMiC,EAAWjC,EAAIkC,WAAW,CAAEC,MAAM,EAAMC,SAAU,IACxDpC,EAAIqC,QAAO,SAASC,GAClBuK,EAA0B5K,GAC1BA,EAASQ,MACTH,U,8BCrBN,wHAAM0K,EAAkB,YAAGC,GAM3B,SAASC,IACP,MAAMC,EAASC,KAAKC,UACdC,EAAQF,KAAKvL,OAAO0L,SAK1B,GAJAH,KAAKI,gBAAkBJ,KAAKC,eAAYvL,EACxCsL,KAAKvK,MAAQuK,KAAKK,SAClBL,KAAK3K,IAAM2K,KAAKM,OAEZP,EAAQ,CACV,GAAIA,EAAOQ,GAAI,CACb,MAAMC,EAAYN,EAAQ,UAAUtF,KAAKC,UAAUqF,GAAW,GAC9DH,EAAOQ,GAAG7J,QAAQ6J,IAChBP,KAAK5J,MAAM,eAAewE,KAAKC,UAAU,IAA0B0F,KAAMC,wBAIzET,EAAOU,KACTV,EAAOU,IAAI/J,QAAQ+J,IACjBT,KAAK5J,MAAM,+BAA+BwE,KAAKC,UAAU,IAA0B4F,UAM3F,SAASC,IACPV,KAAKI,kBAELJ,KAAKvK,QAGP,SAASkL,EAAehG,EAAMiG,EAAUC,GACtCb,KAAKI,kBAELJ,KAAK3K,IAAIsF,EAAMiG,EAAUC,GApCZ,MA8CfjB,EAAgBkB,EAAI,KAAgB,SAAU5O,EAAOU,EAAKmO,EAAY1F,EAAWhH,GAC/EzB,EAAIyN,SAAWzN,EAAI6C,MACnB7C,EAAI0N,OAAS1N,EAAIyC,IACjBzC,EAAIwN,gBAAkBN,EACtBlN,EAAIqN,UAAY,IAASe,UAAU,aAAcpO,EAAI6B,OAAOwM,WAC5DrO,EAAI6C,MAAQiL,EACZ9N,EAAIyC,IAAMsL,EAEV,IAAW,IAAUzO,EAAOU,EAAKmO,EAAY,KAE7C,IAAW,IAAiB,GAAInO,EAAKmO,EAAY,KAEjD,IAAW,IAAiB,GAAInO,EAAKmO,EAAY,OAChD,CACD5P,EAhB2B,WAiB3BlB,GAAG,GAhBoB,IAkBzB2P,EAAgBsB,KAAO,CACrB7K,GApB2B,WAqB3B8K,KAAM,CAAC,gBAAiB,wDAAyD,2D,uOCnEnF,eAAY,OAAZ,eACE,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,sBAPF,W,2mBCAC,oWAaS,oB,sGA4KV,CAAC,CAAC,KAAO,MAAM,KAAO,2pHAA2pH,SAAW,IAAI,OAAS,KAAK,KAAO,gBAAgB,YAAc,sB,sGCzLpuH,4B,6BCAA,4B,uKCAd,oL,sFA2CA,CAAC,CAAC,KAAO,MAAM,KAAO,ywBAA2wB,SAAW,IAAI,OAAS,IAAI,KAAO,gBAAgB,YAAc,yB,qDC3Cp1B,4B,cCAf,IAAIC,EAAoB,CACtB,sEACA,+DACA,sDACA,sEACA,0DAGF,IAAK,IAAInR,EAAI,EAAGA,EAAImR,EAAkBvL,OAAQ5F,IAC5CmR,EAAkBnR,GAAM,8BAA6BmR,EACnDnR,YAIJ,IAAIoR,EAAsBC,IACxBC,WAAW,KACTD,EAAOE,UAAUC,OAAO,gBACxBH,EAAOE,UAAUE,IAAI,kBACpB,OAGL1R,EAAOD,QAAU,CACf4R,UACE,MAAML,EAAStB,KAAK4B,MAAM,WAEpBC,EAAkB,8BADAP,EAAOQ,mBAG/BT,EAAoBC,GACpB,IAAIS,EAAsB,EAE1BC,YAAY,KACVV,EAAOE,UAAUC,OAAO,iBAExB,MAAMQ,EAAUb,EAAkBW,GAE9BA,IAAwBX,EAAkBvL,QAC5CyL,EAAOQ,UAAYD,EACnBE,EAAsB,IAEtBT,EAAOQ,UAAYG,EACnBF,KAGFV,EAAoBC,IACnB,Q,+HC5CN,yf,mDAkED,CAAC,CAAC,KAAO,MAAM,KAAO,mtBAAmtB,SAAW,IAAI,OAAS,KAAK,KAAO,gBAAgB,YAAc,yB,wNClE1yB,0BAAyC,KAAEY,WAAWhQ,EAAMgQ,sDACzD,aAAmB,KAAnB,KAA6B,yBAA7B,MAAS,SAAT,SAEC,q+DAIO,oB,kFAyDZ,CAAC,CAAC,KAAO,MAAM,KAAO,moCAAmoC,SAAW,IAAI,OAAS,KAAK,KAAO,gBAAgB,YAAc,sB,wIChE3tClS,EAAOD,QAAU,SAAuBiD,EAAOJ,GAC7C,IAAIuP,EAAcvP,EAAI6B,OAAO0N,cAAgBvP,EAAI6B,OAAO0N,YAAc,IAClEzP,EAAaM,EACdV,QAAQ,UAAW,KACnBA,QAAQ,iBAAkB,IAC1BC,cACC6P,EACyB,MAA3BD,EAAYzP,KACNyP,EAAYzP,GACbyP,EAAYzP,GAAc,EAIjC,OAHI0P,IACF1P,GAAc,IAAM0P,GAEf1P,I,kHCZP2P,WACErC,KAAK3L,MAAQ,CAAE8E,MAAO,IAExBmJ,YACEtC,KAAK3L,MAAM8E,U,6BAed,oCACG9E,EAAM8E,iE,uEAKV,CAAC,CAAC,KAAO,MAAM,KAAO,iIAAiI,SAAW,IAAI,OAAS,IAAI,KAAO,gBAAgB,YAAc,yB,gNC1BvN,0BAAqC,KAAE+I,WAAWhQ,EAAMgQ,kDACrD,aAAmB,KAAnB,KAA6B,kBAA7B,MAAS,SAAT,SAEC,wxE,mDAoHL,CAAC,CAAC,KAAO,MAAM,KAAO,4yDAA4yD,SAAW,KAAK,OAAS,KAAK,KAAO,gBAAgB,YAAc,sB,8OCvHp4D,0CAEO,aAAmB,KAAnB,WAAoC,eAApC,MAAS,QAAT,eACI,uCADJ,SAIC,gEAEL,oB,mEAuBJ,CAAC,CAAC,KAAO,MAAM,KAAO,6TAA6T,SAAW,IAAI,OAAS,IAAI,KAAO,gBAAgB,YAAc,sB,yQC7B7Y,IAAIK,EACAC,E,eA2BPH,WACIrC,KAAK3L,MAAQ,CACToO,QAAQ,EACRtJ,MAAO,GAEX6G,KAAK0C,KAAO,IAEhBf,UACI3B,KAAK2C,UAAY3C,KAAK2C,UAAUlR,KAAKuO,MACrCA,KAAK4C,YAAYC,QAAQlO,GAAG,SAAU,IAAMqL,KAAK8C,SACjD9C,KAAK+C,gCACL/C,KAAK8C,QAED9C,KAAKgD,uBACLhD,KAAKiD,SAGbH,QACIP,EAAWW,KAAKC,IAAI,IAAKD,KAAKE,MAAMP,OAAOQ,WAAW,KACtDb,EAAW,IAAID,GAEnBU,QACSjD,KAAK3L,MAAMoO,SACZzC,KAAK3L,MAAMoO,QAAS,EACpBzC,KAAK2C,cAGbW,OACItD,KAAK3L,MAAMoO,QAAS,GAExBc,kBACIvD,KAAK0C,OAAS,GAElBC,YACQ3C,KAAK3L,MAAMoO,SACXzC,KAAK3L,MAAM8E,OAAS6G,KAAK0C,KACzBG,OAAOW,sBAAsBxD,KAAK2C,aAG1CI,gCACI/C,KAAK4C,YAAYC,QAAQlO,GAAG,SAAU,KAClC,MAAM8O,EAASzD,KAAKgD,sBACfS,EAEMA,IAAgC,IAAtBzD,KAAK3L,MAAMoO,QAC5BzC,KAAKiD,QAFLjD,KAAKsD,UAMjBN,sBACI,MAAMU,EAAK1D,KAAK4B,MAAM,uBACtB,OAAO+B,IAAoBD,K,6BAIlC,qCACK,IAAIvK,EAAQ9E,EAAM8E,M,WAEFoJ,EAAL,G,sBAARtS,EAAQ,E,IACP,IAAI2T,EAAwC,IAA3BV,KAAKW,IAAI1K,EAAM,GAAKlJ,EAAE,GAAW,GAM9C6T,EAAQ,CACVC,MAAOvB,EAAW,IAClBwB,KAJSxB,EAAWvS,EAIP,IACbgU,UAAW,4BAA8BL,EAAa,cANxCzK,EAAMlJ,GAAG,IAMyD,OAChFiU,gBARU,QADD,IAAI3B,EAAWtS,EAAIkJ,GAAS,IAChB,aAWxB,uBAAc2K,4B,uFAKMvB,kJ,uEAI7B,CAAC,CAAC,KAAO,MAAM,KAAO,wcAAwc,SAAW,IAAI,OAAS,IAAI,KAAO,gBAAgB,YAAc,yB,sCC/G/hB,SAAS4B,EAAeC,EAAGC,EAAG5H,GAC5B,OAAO2H,GAAKC,GAAKD,GAAK3H,EAGxBzM,EAAOD,QAAU,SAA6BuU,EAASC,GACrD,MAAMC,EAAU3B,OAAO2B,QACjBC,EAAeD,EAAU3B,OAAO6B,YAChCC,EAAcL,EAAQM,UACtBC,EAAcF,EAAcL,EAAQQ,aAC1C,OACEX,EAAeQ,EAAaH,EAASC,IACrCN,EAAeU,EAAaL,EAASC,K,+KCXxC,uQAaW,aAAmB,KAAnB,KAA6B,kBAA7B,MAAS,SAAT,UACC,2pB,mDAoBb,CAAC,e,4GClCc,4B,oNCGXpC,WACIrC,KAAK3L,MAAQ,CACT0Q,MAAM,EACNC,YAAW,IAGnBC,YAAYF,GACR/E,KAAK3L,MAAM0Q,MAAQA,GAEvBG,mBACIlF,KAAK3L,MAAM2Q,YAAchF,KAAK3L,MAAM2Q,a,6BAI1C,IAAIG,EAAe9Q,EAAM2Q,WACrBzL,EAAY6L,IAAU/Q,EAAM0Q,OAEjC,8BACG,aAAmB,KAAnB,WAAoC,aAApC,MAAS,QAAT,eACI,mEADJ,SAIC,wB,mBACQM,KAAaD,I,KAANnV,E,IACP,4BAAI,MAAU,CAAEqV,SAASrV,IAAMoE,EAAM0Q,aAArC,YACKM,EAAM7U,gB,kCAIf,cAAkB,CAAE+U,YAAYJ,4B,CAE3B,IAAInL,EAAMkJ,KAAKlJ,IAAIwL,MAAM,KAAMJ,IAAU9M,IAAIvH,GAAKA,EAAEiJ,MAChD+J,EAAQ,IAAMoB,EAAe5L,EAAUL,QAAQrD,OAAS,GAAK,IAC7D2D,GAAYQ,EAAIT,EAAUS,KAAK,E,kBAChCJ,KAAgBL,EAAUL,Q,oBACzB,IAAI5B,EAAOsC,EAAYtC,MACpB6N,GAAyB,YAAT7N,IAAyB6N,IAA0B,WAAT7N,GAA8B,YAATA,KAChF,aAAqBkC,EAArB,MAAoCuK,EAApC,YAAsDnK,EAAtD,QAA0EA,EAAYV,SAAtF,WAGP,mDACK7E,EAAM2Q,WAAa,gBAAkB,iC,wDAIjCzL,EAAU/I,KAAK+B,gC,IACtBgH,EAAUtB,6H,uEA2GzB,CAAC,CAAC,KAAO,MAAM,KAAO,o8EAAo8E,SAAW,KAAK,OAAS,KAAK,KAAO,gBAAgB,YAAc,sB,8QC5JthF,SAASwN,EAAWvU,EAAOwU,GAC9B,OAAOxC,KAAKyC,MAAM,IAAKzU,EAAMwU,GAAM,GAAG,I,mCAGxC,IAAI1L,EAAMkJ,KAAKlJ,IAAIwL,MAAM,KAAMtT,EAAMgH,QAAQZ,IAAIvH,GAAKA,EAAEG,QACpD6S,EAAQ0B,EAAW,IAAMvT,EAAMgH,QAAQrD,QAE3CmE,EAAM9H,EAAM8H,IAAMkJ,KAAK0C,KAAK1C,KAAK2C,KAAK3T,EAAM8H,KAAoB,EAAfkJ,KAAK2C,KAAK7L,IAAQ,EAAG,GAAKA,EAE5E,uBAAgC,KAAE+J,MAAM7R,EAAM6R,mE,mBAElC9N,KAAW/D,EAAMgH,Q,KAChB,IAAI4M,EAASL,EAAWxP,EAAO/E,MAAO8I,GAClCkK,EAAkBjO,EAAOc,MAC9B,4BAAI,gBAAoB,CAAEgP,SAAyB,UAAhB9P,EAAOzF,WAA1C,YAAmE,KAAEsV,SAAQ/B,QAAOG,yCAApF,YACgBjO,EAAOzF,+BADvB,YAGSyF,EAAO/E,MAAM8U,eAAe,KAAM,CAAEC,sBAAsBhQ,EAAO/E,MAAQ,IAAM,EAAI,wBAH5F,YAIoB+E,EAAOiC,yBAJ3B,UAMiBjC,EAAOY,mD,2BAIZ3E,EAAM0H,YAAY/C,mE,YAC1B3E,EAAM0H,YAAYpJ,iC,YACjB0B,EAAM0H,YAAYtC,yB,mDAsGnC,CAAC,CAAC,KAAO,MAAM,KAAO,osEAAosE,SAAW,KAAK,OAAS,KAAK,KAAO,gBAAgB,YAAc,yB,qDChI/wE,4B,+LCAd,uSAUa,eAAe,UAAf,S,iDAEiB,c,iJAI/B,CAAC,e,8FChBc,4B,6BCAA,4B,6QCIR,MAAM4O,EAAaC,IAAmBC,KAEtC,SAASC,EAAWnT,EAAYoT,EAASC,GAC5C,IAAIC,EACAlB,EAEAmB,EAAWF,EACf,GAAmB,iBAARA,EAAkB,CACzBE,EAAWF,EAAIvT,MAKfwT,EAAW,GAHYE,IAAWJ,EAAQtT,UAC1B0T,IAAWD,cAK3BnB,EAAYY,EAAWhT,IAAegT,EAAWhT,GAAYsT,IAAcA,IAAYtT,OAEvFsT,EAAUE,IAAWD,GACrBnB,EAAWkB,IAAYtT,EAK3B,OAFAsT,GAAW,IAEJ,CACHC,WACAD,UACAlB,Y,6BAoCP,sDAAI,cAAkBpT,EAAMe,mBAA5B,mBAAA1C,EAAA,QACyB,QADzB,gDAEa,qB,aACV,eAAe,UAAf,UACA,OApCJ,cAAO,UAAE6V,EAAF,SAAaO,IAApB,kBACOL,KAAYF,EADnB,oBAEK,sBAAU,IAAAO,EAAW,iBAAmB,mBAF7C,CAGM,IAAKA,EAAL,CACG,0BADH,CAEM,IAAI3T,EAAQsT,EAAQtT,MAAM4T,cACtBC,EAAeH,IAAW1T,GAC/B,oBAAQ,SAAQ6T,kBAAhB,YAA2C7T,UAJhD,aAHN,kBAWWuT,KAAQD,EAAQQ,KAX3B,sBAYS,YAZT,CAaY,IAAI,SAAEL,EAAF,QAAYD,EAAZ,SAAqBlB,GAAae,EAAWnU,EAAMgB,WAAYoT,EAASC,GAC7E,qBAAQ,KAAEjB,gBAAV,WAA2B,SAAQkB,MAAnC,YACGC,UAGAnB,IACiB,iBAARiB,EACT,wBAA4B,CAACA,GAA7B,sCAEsB,iBAARA,GACd,QAAGrU,EAAMiB,OAvBvB,8BAoCI,gBAA4BiT,MAA5B,uB,sGAEJ,CAAC,e,6HCzED,MAAMM,EAAazU,EAAQ,IAQ3BjC,EAAOD,QAAU,SAASoW,EAAmBC,EAAWW,GACtD,IAAIC,EAAa,GAEjB,IAAK,IAAI/W,EAAI,EAAGA,EAAImW,EAAUvQ,OAAQ5F,IAAK,CACzC,MAAMqW,EAAUF,EAAUnW,GAE1B,IAAK,IAAIgX,EAAI,EAAGA,EAAIX,EAAQQ,KAAKjR,OAAQoR,IAAK,CAC5C,MAAMV,EAAMD,EAAQQ,KAAKG,GAGzB,GAAmB,iBAARV,EAAkB,CAC3B,MAGMW,EAAaf,EAAmB,CAACI,GAHhB,GAAEG,EAAWJ,EAAQtT,UAAU0T,EACpDH,EAAIvT,mBAINgU,EAAarW,OAAO8I,OAAO,GAAIuN,EAAYE,QACtC,GAAmB,iBAARX,EAAkB,CAClC,MAAM/U,EAAMkV,EAAWH,EAAIK,eAC3BI,EAAWxV,GAAO,GAEduV,EACFC,EAAWxV,GAAKuV,IAAe,EAE/BC,EAAWxV,GACNkV,EAAWJ,EAAQtT,MAAM4T,eAA3B,cACC,IAMZ,OAAOI,I,8JCtCR,6CAAgB,iBAAhB,mDACsCG,+M,0HCHvCnX,EAAOD,QAAUkC,QAAQ,uB,6BCAV,4B,6BCAA,4B,6BCAA,4B,gJCAb,MAAM,WAAEmV,EAAF,OAAcC,GAAWnV,EAE7BkV,GAAcC,GACf,sXAMkBD,SANlB,IAMoCC,sD,uFCTvCrX,EAAOD,QAAUkC,QAAQ,qE,8BCAzB,wHAAM2N,EAAkB,YAAGC,GAM3B,SAASC,IACP,MAAMC,EAASC,KAAKC,UACdC,EAAQF,KAAKvL,OAAO0L,SAK1B,GAJAH,KAAKI,gBAAkBJ,KAAKC,eAAYvL,EACxCsL,KAAKvK,MAAQuK,KAAKK,SAClBL,KAAK3K,IAAM2K,KAAKM,OAEZP,EAAQ,CACV,GAAIA,EAAOQ,GAAI,CACb,MAAMC,EAAYN,EAAQ,UAAUtF,KAAKC,UAAUqF,GAAW,GAC9DH,EAAOQ,GAAG7J,QAAQ6J,IAChBP,KAAK5J,MAAM,eAAewE,KAAKC,UAAU,IAA0B0F,KAAMC,wBAIzET,EAAOU,KACTV,EAAOU,IAAI/J,QAAQ+J,IACjBT,KAAK5J,MAAM,+BAA+BwE,KAAKC,UAAU,IAA0B4F,UAM3F,SAASC,IACPV,KAAKI,kBAELJ,KAAKvK,QAGP,SAASkL,EAAehG,EAAMiG,EAAUC,GACtCb,KAAKI,kBAELJ,KAAK3K,IAAIsF,EAAMiG,EAAUC,GApCZ,MA8CfjB,EAAgBkB,EAAI,KAAgB,SAAU5O,EAAOU,EAAKmO,EAAY1F,EAAWhH,GAC/EzB,EAAIyN,SAAWzN,EAAI6C,MACnB7C,EAAI0N,OAAS1N,EAAIyC,IACjBzC,EAAIwN,gBAAkBN,EACtBlN,EAAIqN,UAAY,IAASe,UAAU,kBAAmBpO,EAAI6B,OAAOwM,WACjErO,EAAI6C,MAAQiL,EACZ9N,EAAIyC,IAAMsL,EAEV,IAAW,IAAUzO,EAAOU,EAAKmO,EAAY,KAE7C,IAAW,IAAiB,GAAInO,EAAKmO,EAAY,KAEjD,IAAW,IAAiB,GAAInO,EAAKmO,EAAY,OAChD,CACD5P,EAhB2B,WAiB3BlB,GAAG,GAhBoB,IAkBzB2P,EAAgBsB,KAAO,CACrB7K,GApB2B,WAqB3BiR,KAAM,CAAC,eACPnG,KAAM,CAAC,gBAAiB,wDAAyD,2D,uLCpEnF,eAAkB,aAAlB,QAAsC,EAAtC,SAAoD,EAApD,eACE,sBADF,W,mDAGA,CAAC,e,iQCFCkB,WACErC,KAAK3L,MAAQ,CACXgH,eAAW3G,EACX6S,MAAM,I,uBAIc,GACFC,QACpBxH,KAAK3L,MAAMgH,WAFW,EAGtB2E,KAAKyH,sBAEPA,qBACE,IAAIC,EAAaC,SAASC,KAAKvE,YAAcsE,SAASC,KAAKC,YAC3D7H,KAAK3L,MAAMkT,KAAOG,EAAa,M,6BAI/BrT,EAAMgH,UACJhH,EAAMkT,KACR,MAAGlT,EAAMgH,UAAT,eAA6BnJ,EAAM4V,WAAnC,uBAGA,YAAcjF,OAAd,sEAA8B,sBAA9B,KACC,4QAaF,4G,uEAMH,CAAC,e,iLC3CClB,UACE3B,KAAK+H,OAAO/H,KAAK9N,QAGnB8V,QAAQ9V,GACF8N,KAAKnM,QAAUmM,KAAKnM,SAAW3B,EAAM+V,KACvCjI,KAAKkI,YACLlI,KAAK+H,OAAO7V,KAIhBgW,YACElI,KAAKmI,aAAaC,sBAGpBL,OAAO7V,GAKL,IAJA,IAAI2B,EAAUmM,KAAKnM,OAAS3B,EAAM+V,GAC9BE,EAAgBnI,KAAKmI,aAAenI,KAAK4C,YAAY/O,GACrDwU,EAASnW,EAAMoW,SACfrN,EAAMoN,EAAOxS,OACR5F,EAAI,EAAGA,EAAIgL,EAAKhL,GAAK,EAAG,CAC/B,IAAIsY,EAASF,EAAOpY,GAChBO,EAAO6X,EAAOpY,EAAI,GACtBkY,EAAaI,GAAQ/X,EAAMwP,KAAKhK,KAAKvE,KAAKuO,KAAMxP,O,2JCxBtD,wHAAMoP,EAAkB,YAAGC,GAM3B,SAASC,IACP,MAAMC,EAASC,KAAKC,UACdC,EAAQF,KAAKvL,OAAO0L,SAK1B,GAJAH,KAAKI,gBAAkBJ,KAAKC,eAAYvL,EACxCsL,KAAKvK,MAAQuK,KAAKK,SAClBL,KAAK3K,IAAM2K,KAAKM,OAEZP,EAAQ,CACV,GAAIA,EAAOQ,GAAI,CACb,MAAMC,EAAYN,EAAQ,UAAUtF,KAAKC,UAAUqF,GAAW,GAC9DH,EAAOQ,GAAG7J,QAAQ6J,IAChBP,KAAK5J,MAAM,eAAewE,KAAKC,UAAU,IAA0B0F,KAAMC,wBAIzET,EAAOU,KACTV,EAAOU,IAAI/J,QAAQ+J,IACjBT,KAAK5J,MAAM,+BAA+BwE,KAAKC,UAAU,IAA0B4F,UAM3F,SAASC,IACPV,KAAKI,kBAELJ,KAAKvK,QAGP,SAASkL,EAAehG,EAAMiG,EAAUC,GACtCb,KAAKI,kBAELJ,KAAK3K,IAAIsF,EAAMiG,EAAUC,GApCZ,MA8CfjB,EAAgBkB,EAAI,KAAgB,SAAU5O,EAAOU,EAAKmO,EAAY1F,EAAWhH,GAC/EzB,EAAIyN,SAAWzN,EAAI6C,MACnB7C,EAAI0N,OAAS1N,EAAIyC,IACjBzC,EAAIwN,gBAAkBN,EACtBlN,EAAIqN,UAAY,IAASe,UAAU,aAAcpO,EAAI6B,OAAOwM,WAC5DrO,EAAI6C,MAAQiL,EACZ9N,EAAIyC,IAAMsL,EAEV,IAAW,IAAUzO,EAAOU,EAAKmO,EAAY,KAE7C,IAAW,IAAiB,GAAInO,EAAKmO,EAAY,KAEjD,IAAW,IAAiB,GAAInO,EAAKmO,EAAY,OAChD,CACD5P,EAhB2B,WAiB3BlB,GAAG,GAhBoB,IAkBzB2P,EAAgBsB,KAAO,CACrB7K,GApB2B,WAqB3BiR,KAAM,CAAC,eACPnG,KAAM,CAAC,gBAAiB,wDAAyD,2D,+OCjEjF,MAAM,OAAE9B,GAAWnN,EACbqU,EAAMiC,IAAenJ,EAAO7O,MAEpC,eAAuB+V,EAAIvT,MAA3B,WAA4CqM,EAAO7O,KAAnD,IAA4D+V,EAAIpT,IAAhE,QAA2E,EAA3E,MAAY,OAAZ,eACK,8EAGgBoT,EAAIkC,SAML,QAAsBlC,EAAtB,UALA,MAAGA,EAAImC,SAAP,2BACA,QAAmBnC,EAAnB,SACA,QAAiBA,EAAjB,UAKJ,eAAY,cAAZ,SAZhB,uC,mDAiBA,CAAC,e,6oBCjBD,MAAMiC,EAAiB,GACjBG,EAAa,CACjB,iBAAkB,CAChBC,KAAM,sBACNnL,OAAQ,YACRqJ,KAAM,CAAF,q9CAEN,oBAAqB,CACnB8B,KAAM,kBACN9B,KAAM,CAAF,sDAIRnW,OAAO0H,KAAKsQ,GAAYjS,QAAQmS,IAC9B,MAAM,KAAED,EAAF,OAAQnL,EAAS,GAAjB,KAAqBqJ,GAAS6B,EAAWE,GAC/ClY,OAAO0H,KAAKyO,GAAMpQ,QAAQoS,IACxB,MAAMC,EAYV,SAAwBxJ,GACtB,IAAIwJ,EACJ,GACEA,EAAOC,IAAKC,SAAS1J,EAAM,OAC3BA,EAAOyJ,IAAKE,QAAQ3J,SACJ,WAATwJ,GACT,OAAOA,EAlBQI,CAAeL,GACtBvC,EAAMO,EAAKgC,GACXM,EAAWN,EAASxW,QAAQsW,EAAMnL,GACxC+K,EAAeO,GAAQ,CACrBF,OACAO,WACAV,SAAUnC,EAAIzP,QACd3D,IAAKkW,IAAYvY,IAAIgY,QAc3B1C,IAAU1P,QAAQ6P,KAGhB,SAAS+C,EAAe/C,EAAKgD,GAC3B,MAAM,MAAEvW,EAAF,KAAS8T,GAASP,EAClBiD,EAAY9C,IAAW1T,GAU7B,IAAIyW,EANJ3C,EAAKpQ,QAAQgT,IACa,iBAAbA,GACTJ,EAAeI,EAAUF,KAO3BC,EADEF,EACS,GAAEA,KAAcC,aAEdA,EAAF,YAGbhB,EAAeiB,GAAW,CACxBhB,UAAU,EACVzV,QACA8T,QAzBJwC,CAAe/C,KA8BFiC,O,4ICzERa,IAAYnL,IAAI,iDAAkD,of,6BAExE,28G,6uCAiDkB,2S,+8EAuBE,y3E,muKAgFD,itC,y5CA4BA,6oB,82IAkCD,smC,w2HAuCC,88N,kyEAwEA,kxE,+wFAuDA,ylD,iTC9XbmL,IAAYnL,IAAI,6DAA8D,0nC,6BAEpF,kvC,2gDAyBqC,md,w/HAYuB,ijB,utEAyBtC,s2B,s3CAkBA,6D,ogDAI8C,owB,oiCAUR,0/B,u2BAezC,mc,y1DAOuB,+f,ymEAW+B,yF,6kEAUA,8lB,wvDAapD,64E,oeA2BM,ic,iTCnLrBmL,IAAYnL,IAAI,gDAAiD,mkB,6BAEvE,ysE,qwBAiBmB,qG,4lBAIY,mmC,2vBAQqB,8G,8nBAGxB,ilB,2jCAUN,uQ,0lCASF,ssB,+zCAUO,u0B,i4DAmBN,usD,mlDA8BM,2U,gnFAiBN,61D,kzFAkCM,oL,6mFAmBN,kqE,+sGCtLfmL,IAAYnL,IAAI,oDAAqD,8tI,6BAE3E,yzG,q+DA+B6D,iK,uyDAQQ,8R,wrBAMvD,mlF,u1CAsBuD,s5I,yiCAwCK,u3D,kqIAkCf,oqC,4yEAmBmB,+mB,+4EA0BxD,wmF,6kHAyB0B,8e,ojFAiB5B,mH,imCAKF,+yC,shCAMkC,wkB,unJAqBnB,4W,o2BAKZ,sQ,8pBAIF,8S,s4BAIE,mT,kvBAIF,0lD,49DAkBL,8mE,m5DAiB6C,gR,2jBACqB,sT,yjBACD,gpK,+pBA0GvD,mogB,ynBAsNV,mmD,6nEA6BA,43B,6yEAcA,2/D,kMCxqBA,4B,4ICCRmL,IAAYnL,IAAI,2CAA4C,6N,6BAElE,iiB,wwEAQwC,qrC,kTAOqB,wJ,4XAEI,+O,w8BAW5C,2L,wuCASc,+V,wlBAGN,urB,2qBC1CvBmL,IAAYnL,IAAI,0DAA2D,iN,6BAEjF,y0B,2xBAIkB,2H,23DASE,wX,kqCAKF,6mD,y4BAUC,4N,k7FC9BbmL,IAAYnL,IAAI,6CAA8C,m7B,6BAEpE,g+B,24BAUoB,iH,y2BAGF,8M,unJAYA,gwD,ktEAkBA,ugC,4hDAWA,mK,gvDAKA,wB,s+FAQA,qK,07CAMA,+oB,wqCAQG,wmB,o+EAcG,yiB,goEAS2B,2d,kuCAapB,grC,01HA6BV,ywC,+kFAsCsD,2c,mZAEC,+S,6qBACqD,+Y,0tFAahH,+pB,8wDAYA,wa,iTCtNXmL,IAAYnL,IAAI,+CAAgD,6d,6BAEtE,8mB,gyBAQoB,mT,saAEgD,wQ,gqBAOhD,2P,g4BAOA,4I,4nBAE4D,qjH,w3BAyD7D,qqC,47DCrFbmL,IAAYnL,IAAI,kDAAmD,wS,6BAEzE,qlE,oNCFMmL,IAAYnL,IAAI,0CAA2C,uY,6BAEjE,s7B,wiDASe,mtB,o2CAUO,0L,ozBAIA,yD,q1DASA,iQ,ihDASC,qgB,6zDAYJ,82B,kzDAayD,uM,s0BAGxD,kN,0RCvEdmL,IAAYnL,IAAI,2CAA4C,yL,6BAElE,+tH,6LCFMmL,IAAYnL,IAAI,2CAA4C,wH,6BAElE,2jF,oNCFMmL,IAAYnL,IAAI,mDAAoD,iO,6BAE1E,qyB,oaAGmE,wM,2oCAU/C,kqB,4aAIqD,gQ,s/BAQhB,8nB,m+DC3BnDmL,IAAYnL,IAAI,wCAAyC,wH,6BAE/D,khG,6LCFMmL,IAAYnL,IAAI,wCAAyC,wH,6BAE/D,wmF,6LCFMmL,IAAYnL,IAAI,2CAA4C,wH,6BAElE,kwD,oNCFMmL,IAAYnL,IAAI,8CAA+C,uoB,6BAErE,w3D,wjBAM+E,m4E,00KA0DA,ykF,ozCA6B3D,65C,0RC/FdmL,IAAYnL,IAAI,uCAAwC,wH,6BAE9D,+zI,oNCFMmL,IAAYnL,IAAI,yCAA0C,y4B,6BAEhE,8tJ,ovEA+CoB,69N,iTCjDdmL,IAAYnL,IAAI,mDAAoD,urG,6BAE1E,s8F,i2cAiG0B,wE,8+BAOV,ikB,2lBAWW,sV,qkCASP,wE,iqCAWA,iN,+4BAMA,wE,+uBAMA,+xB,mlDAQe,wE,8xCAIA,ysB,m2CAUA,wE,61CAIA,0Z,+fAE6B,oC,6fACD,qS,kpCAGlB,wE,khCAEK,ukB,s0CAIO,wE,grCAEK,wU,ufAI3C,wE,qfAGA,sP,q3BAGA,wE,ukBAGA,kL,mqBAC8E,iB,iqBACD,wE,+lBACA,4lP,6hCA4E9E,2T,mjGA8BC,wuB,wgCAkBA,khC,kzBAaA,0jC,szBAaA,6mH,sbAgDG,oC,+jCAQA,siI,0RC3ZhBmL,IAAYnL,IAAI,8CAA+C,qc,6BAErE,48c,oNCFMmL,IAAYnL,IAAI,4CAA6C,6qK,6BAEnE,y/B,++GAiCmB,25B,gpBAaA,k8a,ijCA4KqB,oC,uiCAGH,6B,+7BAKvB,wN,8wCAMK,4K,+uGAaA,oC,ilGAWA,6B,6jGAaA,o4D,otCAWA,oC,y/BAEoD,66B,gfAQpD,sX,gaAOA,+f,shHAeD,uhB,g0CAMsD,oC,07BAEA,uD,g8BAER,+b,k1BACwC,oC,kjBACd,iB,wbACI,2xF,84BAmC3E,0kB,wwCAgBA,u3D,i1BAiBC,oC,2oBAMA,kjE,yvBAUe,oC,wyBAEE,gwD,4kCAUiB,oC,kjCAED,uoC,gkDAOJ,oC,s5CAGA,2oB,gfAI9B,oC,gaAGA,2V,k+CAMA,4vB,8uBAGkE,oC,4uBACD,0H,uqCAGjC,oC,yqCAED,iX,mqBAE+C,iB,iqBACD,oC,+lBACA,iB,6lBACD,2S,ywBAO3E,kd,s8BAMD,oC,48BAIA,4B,mhCAMA,yJ,+oCAOA,qZ,wfAGA,oC,sfAGA,4a,o4BAGA,oC,slBAGA,gnB,owBAIA,iB,moBAC8E,oC,2eACV,ixK,+oBAkCe,wF,+jBAErB,oC,ufACH,ugB,i+BAIhD,oC,2uBAKT,86B,iTC5iBfmL,IAAYnL,IAAI,kDAAmD,26F,6BAEzE,m/K,4+GA6FmB,2yW,29EAyJmC,8qE,8/FAkCnC,62E,ymDAkB2C,mjE,64DA8B3C,mG,6nDAMA,2yC,w0CAqBD,0K,29DAOkB,ojB,m7BAQlB,qK,u0BAEiB,6J,g1BAEG,mkF,0pBAsByD,sE,w+BAOlC,qJ,gkDAgB1C,gjJ,s1BA6CA,6Z,ohEAcE,qR,goBAE6D,kL,4/EAQpE,sL,6jEAOA,69D,s9BA0BU,++F,iTC3gBlBmL,IAAYnL,IAAI,yCAA0C,8R,6BAEhE,wuC,yqEAoB0C,uqD,iTCtBpCmL,IAAYnL,IAAI,6CAA8C,mvC,6BAEpE,okE,yhBAUkF,+0hB,0RCZ5EmL,IAAYnL,IAAI,0CAA2C,yL,6BAEjE,2lG,oNCFMmL,IAAYnL,IAAI,yDAA0D,0mB,6BAEhF,kyJ,gsEAwCoB,04J,iTC1CdmL,IAAYnL,IAAI,yCAA0C,qf,6BAEhE,40C,6gCAUuD,kjB,2oDAYM,y1G,y3EAwBtC,koC,iTChDjBmL,IAAYnL,IAAI,0CAA2C,uF,6BAEjE,ihB,o2BAOmC,68B,qkCCT7BmL,IAAYnL,IAAI,0CAA2C,mpC,6BAEjE,2lC,8oCAM6D,0uB,6tBAK1C,wL,qpBAGA,oM,0uJAcoC,8vB,0oIAQ4G,yJ,ktFACgD,mxB,wwCAKjK,ulB,20BAKT,wN,kuBAG6D,sgC,4oBAMnB,u8B,sqGAoBb,2uB,q5DAWrB,knB,6tBAMN,qxC,y5BAUtB,+a,62GAeH,44B,25BAMF,kkC,u8BASA,g9B,ymCAQqC,+H,49DAUrC,gtB,0vBAKG,qf,+tCASE,4E,8kCAQM,qV,4wFAaR,mL,irBAIJ,iH,ytCAMD,uI,imJAiB4C,yI,svCAM5C,mc,miCAE8C,+H,ifAC2B,yjB,ykBAK5D,0L,iTCrOrBmL,IAAYnL,IAAI,2CAA4C,4Q,6BAElE,27C,wjBAK+E,2uF,iiICPzEmL,IAAYnL,IAAI,qDAAsD,g0B,6BAE5E,0oG,+nBAuCkF,q3F,u6BAsB3B,+vE,svBA4ByC,8uE,6sBAmBR,qgF,s0BA8BlE,ihC,6TC7ItB,oBAAuB,sBAAqBhM,EAAM2W,oBAAoB3W,EAAMkX,6CAA5E,yB,mDAsBD,CAAC,CAAC,KAAO,MAAM,KAAO,qYAAqY,SAAW,IAAI,OAAS,IAAI,KAAO,gBAAgB,YAAc,yB,qDCtB7c,4B,0MCEb,IAAIO,EAAY,sBAAqBzX,EAAM2W,oBAAoB3W,EAAMkX,WA0CvE,mBAAOQ,IAAgB1X,EAAM2W,KAAM3W,EAAMkX,UAAzC,wEACWS,KACF,+MAQWF,iGAVpB,mBAgBiBG,KAAgBD,EAhBjC,KAiBiB,oBAAmBC,EAAYC,kCAA/B,UACkBD,EAAYE,uCAD9B,YAEgBF,EAAYG,wBAGhC,oBAAuBN,+GAtBpC,4B,mDA+BA,CAAC,CAAC,KAAO,MAAM,KAAO,i3BAAi3B,SAAW,IAAI,OAAS,IAAI,KAAO,gBAAgB,YAAc,sB,+FC3Ex8B,MAAMO,EAAKjY,EAAQ,KAEnBjC,EAAOD,QAAU,SAAgC8Y,EAAMsB,GACrD,IAAIN,EAAe,GAEnB,OAAOK,EAAI,SAAQrB,kBAAqBsB,KACrCC,KAAKC,IACJA,EAAIzC,KAAKlR,QAAQ4T,IACf,IAAIC,EAASD,EAAaC,QAAUD,EAAaE,OAAOD,OACpDA,IACFV,EAAaU,EAAOE,OAAS,CAC3BR,SAAUM,EAAOE,MACjBT,MAAOO,EAAOG,WACdX,QAASQ,EAAOI,SAChBC,QAAU,sBAAqB/B,kBAAqBsB,YAAuBI,EAAOE,YAIjF9Z,OAAO0H,KAAKwR,GAChBgB,OACAvS,IAAIwS,GAAKjB,EAAaiB,MAE1BC,MAAMvU,IACL,IAAIwU,EACDxU,EAAIyU,UAAYzU,EAAIyU,SAASrD,MAAQpR,EAAIyU,SAASrD,KAAKoD,SAAY,GACtE,GAAuB,MAAnBxU,EAAI0U,aAAsB,cAAcC,KAAKH,GAM/C,MAAMxU,EALN4U,QAAQ3U,MACN,6IAEyC4U,QAAQC,KAAK,O,cC7BhEtb,EAAOD,QAAUkC,QAAQ,gD,uLCExB,uBAAKC,EAAMc,eACZ,OAEA,cAAO,MAAEA,EAAF,KAAS8T,IACX,YADL,mBAEaP,KAAQO,EAFrB,oBAGa,YACsB,iBAARP,GACN,oBAAQ,SAAQG,IAAW1T,MAAU0T,IAAWH,EAAIvT,uBAApD,YAAyEuT,EAAIvT,cAC9E,YAAauT,EAAb,yBAGC,oBAAQ,SAAQG,IAAWH,UAA3B,YAAqCA,UAT1D,6BAFA,IAAarU,EAAb,wB,uFCHAlC,EAAOD,QAAUkC,QAAQ,iD,cCAzBwC,OAAO8W,aAAe,CAAC,CACLC,IAAK,aACLL,KAAM,Q,uECwCxB1W,OAAOgX,UAnCP,SAAkBC,GAChB,MAAMC,EAAaD,EAAIpZ,QAAQ,yCAA0C,IACnEsZ,EAA2B,KAAfD,EAAoB,GAAKA,EAAW3M,MAAM,KAE5D,GAAI,IAAM2M,IAAeD,EACvB,MAAO,CACLG,UAAS,EACT7C,KAAM,IAAM2C,GAIhB,MAAMtM,EAAS,GAETyM,EAASF,EAAU,GACzB,QAAelX,IAAXoX,EACF,MAAO,CAAEzM,SAAQqJ,SAAS,KACrB,GAAe,SAAXoD,EAAmB,CAC5B,MAAMC,EAASH,EAAU,GAEvBvM,EAAa,KAAI0M,EAEjB,QAAerX,IADAkX,EAAU,GAEvB,MAAO,CAAEvM,SAAQqJ,SAAS,UAKzB,GAAe,eAAXoD,EAAyB,CAElC,QAAepX,IADAkX,EAAU,GAEvB,MAAO,CAAEvM,SAAQqJ,SAAS,Q,8BCrChC,wHAAM9I,EAAkB,YAAGC,GAM3B,SAASC,IACP,MAAMC,EAASC,KAAKC,UACdC,EAAQF,KAAKvL,OAAO0L,SAK1B,GAJAH,KAAKI,gBAAkBJ,KAAKC,eAAYvL,EACxCsL,KAAKvK,MAAQuK,KAAKK,SAClBL,KAAK3K,IAAM2K,KAAKM,OAEZP,EAAQ,CACV,GAAIA,EAAOQ,GAAI,CACb,MAAMC,EAAYN,EAAQ,UAAUtF,KAAKC,UAAUqF,GAAW,GAC9DH,EAAOQ,GAAG7J,QAAQ6J,IAChBP,KAAK5J,MAAM,eAAewE,KAAKC,UAAU,IAA0B0F,KAAMC,wBAIzET,EAAOU,KACTV,EAAOU,IAAI/J,QAAQ+J,IACjBT,KAAK5J,MAAM,+BAA+BwE,KAAKC,UAAU,IAA0B4F,UAM3F,SAASC,IACPV,KAAKI,kBAELJ,KAAKvK,QAGP,SAASkL,EAAehG,EAAMiG,EAAUC,GACtCb,KAAKI,kBAELJ,KAAK3K,IAAIsF,EAAMiG,EAAUC,GAU3BjB,EAAgBkB,EAAI,KAAgB,SAAU5O,EAAOU,EAAKmO,EAAY1F,EAAWhH,GAC/EzB,EAAIyN,SAAWzN,EAAI6C,MACnB7C,EAAI0N,OAAS1N,EAAIyC,IACjBzC,EAAIwN,gBAAkBN,EACtBlN,EAAIqN,UAAY,IAASe,UAAU,iBAAkBpO,EAAI6B,OAAOwM,WAChErO,EAAI6C,MAAQiL,EACZ9N,EAAIyC,IAAMsL,EAEV,IAAW,IAAUzO,EAAOU,EAAKmO,EAAY,KAE7C,IAAW,IAAiB,GAAInO,EAAKmO,EAAY,KAEjD,IAAW,IAAiB,GAAInO,EAAKmO,EAAY,OAChD,CACD5P,EAhB2B,WAiB3BlB,GAAG,GAhBoB,IAkBzB2P,EAAgBsB,KAAO,CACrB7K,GApB2B,WAqB3B8K,KAAM,CAAC,oBAAqB,oEAAqE,uE,sCCnEnGnR,EAAOD,QAAUkC,QAAQ,W,gBCAzB,IAAI+Z,EACAC,EAAK,EAAQ,KAEjBlc,EAAQmc,aAAc,EAEtBnc,EAAQoG,QAAU,WAOhB,OANK6V,IACHA,EAAOC,EAAGE,aACO,IACf,SAGGH,I,cCZThc,EAAOD,QAAUkC,QAAQ,O,6CCAzB,OAAe,kC,6BCAf,OAAe,kC,6BCAf,OAAe,kC,6BCAf,OAAe,kC,6BCAf,OAAe,kC,6BCAf,OAAe,kC,6BCAf,OAAe,kC,6BCAf,OAAe,kC,6BCAf,OAAe,kC,6BCAf,OAAe,kC,6BCAf,OAAe,kC,6BCAf,OAAe,kC,6BCAf,OAAe,kC,cCAfjC,EAAOD,QAAUkC,QAAQ,W,6BCEzB,IAAIma,EAAyB,EAAQ,KAErCrc,EAAQsB,YAAa,EACrBtB,EAAQsc,OAAStc,EAAQgQ,YAAS,EAElC,IAAIuM,EAAQF,EAAuB,EAAQ,KAE3C,MAAMG,EAAW9X,OAAOgX,UAClBe,EAAc/X,OAAO8W,aAErBxL,EAAkD,EAAQ,IAAR,CACxDuM,EAAMxV,QAAQqI,KAAK,QAAwBsN,QAAQ,KAAM,KAAM,UAAW,CACxEC,OAAQ,UAGV3c,EAAQgQ,OAASA,EAEjB,MAAMsM,EAAS5X,OAAOkY,kBAAoB,EAAEC,EAAKvC,EAAKwC,KACpDxC,EAAIyC,UAAU,eAAgB,aAC9B,MAAOhO,EAAUiO,GAASH,EAAIlB,IAAI1M,MAAM,KAClCgO,EAAQT,EAASzN,GAEvB,GAAIkO,EACF,GAAIA,EAAMnB,SACRxB,EAAIa,WAAa,IACjBb,EAAIyC,UAAU,WAAYE,EAAMhE,MAChCqB,EAAIhV,IAAI,0BAA0BuF,KAAKC,UAAUmS,EAAMhE,SAASgE,EAAMhE,gBACjE,CACL,MAAMiE,EAAYL,EAAIM,QAAQ,eAAiB,GAC/CF,EAAMtE,SAASyE,OAAO,CACpB3Y,QAAS,CACPyM,UAAW,WAAWuL,EAAYY,KAAK,EACrCjC,WACKA,GAAQA,EAAKA,KAAK8B,IAAYzB,KAEvCnM,OAAQ2N,EAAM3N,OACd0N,QACAjO,YACCuL,QAGLwC,MAIJ9c,EAAQsc,OAASA,G,cC/CjBrc,EAAOD,QAAUkC,QAAQ,wB,6ECEzB,IAEIob,EAFyB,EAAQ,IAEzBjB,CAAuB,EAAQ,MAEvCkB,EAAc,EAAQ,KAE1B,MAAMC,EAAOlC,QAAQG,IAAI+B,MAAQ,IAC3BC,EAAc,cAEpBH,EAAMvW,QAAQ2W,aAAa,CAACb,EAAKvC,KAQ/B,SAASwC,IACPxC,EAAIhV,IAAI,aARNmY,EAAYrC,KAAKyB,EAAIlB,MACvBkB,EAAIlB,IAAMkB,EAAIlB,IAAIxM,MAAM,IACxB,EAAIoO,EAAYvN,QAAQ6M,EAAKvC,EAAKwC,KAElC,EAAIS,EAAYjB,QAAQO,EAAKvC,EAAKwC,KAMnC9E,OAAOwF,I,cCtBVvd,EAAOD,QAAUkC,QAAQ","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/assets/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 134);\n","module.exports = require(\"marko/dist/runtime/helpers/dynamic-tag\");","<div.marko-code-block>\n    <button.switch-syntax title=\"Switch Syntax\" on-click('changeSyntax')>\n        ⇄\n    </button>\n    <div.code.html>\n        $!{input.html}\n    </div>\n    <div.code.concise>\n        $!{input.concise}\n    </div>\n</div>\n","module.exports = require(\"marko/dist/runtime/html\");","module.exports = require(\"marko/dist/runtime/components/renderer\");","module.exports = require(\"marko/dist/runtime/helpers/render-tag\");","export default new Map();","module.exports = require(\"marko/dist/runtime/html/helpers/attr\");","module.exports = require(\"marko/dist/runtime/html/helpers/escape-xml\");","module.exports = require(\"marko/dist/runtime/html/helpers/data-marko\");","module.exports = require(\"marko/dist/runtime/helpers/class-value\");","module.exports = name => {\n  return name\n    .replace(/[^\\w\\d\\s\\.-]/g, \"\")\n    .replace(/[\\s\\.]+/g, \"-\")\n    .toLowerCase();\n};\n","import getAnchorName from './getAnchorName';\n\n$ var className = input['class'];\n$ var text = input.text;\n$ var anchorName = input.anchorName || getAnchorName(text, out);\n\nstyle {\n    .heading a.anchor {\n        display: inline-block;\n        cursor: pointer;\n        position: absolute;\n        text-align: center;\n        margin-left: -1.1em;\n        padding: 0 0.3em;\n        opacity: 0;\n        color: #eceef0;\n    }\n\n    .heading:hover a.anchor {\n        opacity: 1;\n    }\n\n    .heading.header-link {\n        display: inline-block;\n        font-family: FontAwesome;\n        font-style: normal;\n        font-weight: normal;\n        line-height: 0.5em;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        font-size: 1em;\n    }\n\n    .heading .header-link:before {\n        content: \"#\";\n        font-weight: 600;\n    }\n}\n\n<${input.tag} class=['heading', className]>\n    <a name=anchorName class=\"anchor\" href=`#${anchorName}`>\n        <span class=\"header-link\"></span>\n    </a>\n    <if(text)>\n        ${text}\n    </if>\n    <else>\n        <${input.renderBody}/>\n    </else>\n</>\n","module.exports = require(\"marko/dist/runtime/helpers/to-string\");","module.exports = require(\"marko/dist/runtime/helpers/style-value\");","module.exports = $__MARKO_MANIFEST__$","module.exports = require(\"marko/dist/core-tags/components/init-components-tag.js\");","module.exports = require(\"marko/dist/core-tags/core/await/reorderer-renderer.js\");","<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>${input.title ? input.title + \" | Marko\" : \"Marko\"}</title>\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"./favicon.png\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n    <meta\n      name=\"Description\"\n      content=\"Marko is a friendly (and fast!) UI library that makes building web apps fun.\"/>\n    <script>\n        var scalingBodyFont = false;\n\n        function scaleBodyFont() {\n            var height = Math.max(window.outerHeight, window.screen.height);\n            document.documentElement.style.fontSize = Math.pow(Math.min(window.innerWidth, height), 0.25)*19+'%';\n            scalingBodyFont = false;\n        }\n\n        window.addEventListener('resize', function() {\n            requestAnimationFrame(scaleBodyFont);\n        });\n\n        scaleBodyFont();\n    </script>\n  </head>\n\n  <body class=input.class>\n    <layout-header/>\n    <layout-sidebar currentDoc=input.currentDoc toc=input.toc/>\n    <div.content>\n      <${input.renderBody}/>\n    </div>\n    <if(input.footer !== false)>\n      <app-footer/>\n    </if>\n\n    <google-analytics tracking-id=\"UA-66854919-1\" domain=\"markojs.com\"/>\n\n    <if(input.discord !== false && process.env.NODE_ENV === \"production\")>\n      <script src=\"https://cdn.jsdelivr.net/npm/@widgetbot/crate@3\" async>\n        new Crate({server:'725013179465203793',channel:'725013179926708226'})\n      </script>\n    </if>\n  </body>\n</html>\n","module.exports = require(\"marko/docs/structure.json\");","\"use strict\";\n\nconst INIT_COMPONENTS_KEY = Symbol();\n\nconst addComponentsFromContext = require(\"../../runtime/components\")\n  .___addComponentsFromContext;\nconst getInitComponentsCode = require(\"../../runtime/components\")\n  .___getInitComponentsCode;\n\nfunction addComponentsFromOut(source, target) {\n  const sourceOut = source.out || source;\n  const targetOut = target || sourceOut;\n  const componentsContext = sourceOut.___components;\n  const componentDefs = targetOut.writer.get(\"componentDefs\");\n  addComponentsFromContext(componentsContext, componentDefs);\n}\n\nfunction addInitScript(writer) {\n  const out = writer.state.root;\n  const componentDefs = writer.get(\"componentDefs\");\n  writer.script(getInitComponentsCode(out, componentDefs));\n}\n\nmodule.exports = function render(input, out) {\n  const $global = out.global;\n  if ($global[INIT_COMPONENTS_KEY] === undefined) {\n    $global[INIT_COMPONENTS_KEY] = true;\n\n    out.on(\"await:finish\", addComponentsFromOut);\n    out.on(\"___toString\", addInitScript);\n\n    if (out.isSync() === true) {\n      // Generate initialization code for any of the UI components that were\n      // rendered synchronously\n      addComponentsFromOut(out);\n    } else {\n      // Generate initialization code for any of the UI components that were\n      // rendered asynchronously, but were outside an `<await>` tag\n      // (each `<await>` tag will have its own component initialization block)\n      const asyncOut = out.beginAsync({ last: true, timeout: -1 });\n      out.onLast(function(next) {\n        // Ensure we're getting init code starting from the root\n        let rootOut = out;\n        while (rootOut._parentOut) {\n          rootOut = rootOut._parentOut;\n        }\n        // Write out all of the component init code from the main out\n        addComponentsFromOut(rootOut, asyncOut);\n        asyncOut.end();\n        next();\n      });\n    }\n  }\n};\n","\"use strict\";\n\nconst clientReorder = require(\"./client-reorder\");\n\nmodule.exports = function(input, out) {\n  // We cannot call beginSync() when using renderSync(). In this case we will\n  // ignore the await-reorderer tag.\n  if (out.isSync()) {\n    return;\n  }\n\n  var global = out.global;\n\n  // We have already invoked an <await-reorderer>. We do not need to do this\n  // work again.\n  if (global.__awaitReordererInvoked) {\n    return;\n  }\n\n  global.__awaitReordererInvoked = true;\n\n  if (out.global.___clientReorderContext) {\n    out.flush();\n  }\n\n  var asyncOut = out.beginAsync({\n    last: true,\n    timeout: -1,\n    name: \"await-reorderer\"\n  });\n\n  out.onLast(function(next) {\n    var awaitContext = global.___clientReorderContext;\n    var remaining;\n\n    // Validate that we have remaining <await> instances that need handled\n    if (\n      !awaitContext ||\n      !awaitContext.instances ||\n      !(remaining = awaitContext.instances.length)\n    ) {\n      asyncOut.end();\n      next();\n      return;\n    }\n\n    function handleAwait(awaitInfo) {\n      awaitInfo.out\n        .on(\"___toString\", out.emit.bind(out, \"___toString\"))\n        .on(\"finish\", function(result) {\n          if (!global._afRuntime) {\n            asyncOut.script(clientReorder.getCode());\n            global._afRuntime = true;\n          }\n\n          asyncOut.write(\n            '<div id=\"af' +\n              awaitInfo.id +\n              '\" style=\"display:none\">' +\n              result.toString() +\n              \"</div>\"\n          );\n\n          asyncOut.script(\n            \"$af(\" +\n              (typeof awaitInfo.id === \"number\"\n                ? awaitInfo.id\n                : '\"' + awaitInfo.id + '\"') +\n              (awaitInfo.after ? ',\"' + awaitInfo.after + '\"' : \"\") +\n              \")\"\n          );\n\n          awaitInfo.out.writer = asyncOut.writer;\n\n          out.emit(\"await:finish\", awaitInfo);\n\n          out.flush();\n\n          if (--remaining === 0) {\n            asyncOut.end();\n            next();\n          }\n        })\n        .on(\"error\", function(err) {\n          asyncOut.error(err);\n        });\n    }\n\n    awaitContext.instances.forEach(handleAwait);\n\n    out.on(\"await:clientReorder\", function(awaitInfo) {\n      remaining++;\n      handleAwait(awaitInfo);\n    });\n\n    // Now that we have a listener attached, we want to receive any additional\n    // out-of-sync instances via an event\n    delete awaitContext.instances;\n  });\n};\n","<form.site-search class=input.class on-click('focus') on-submit('search')>\n  <img src=\"./search.png\"/>\n  <input key=\"input\" type=\"search\" placeholder=\"search the docs...\" on-blur('shrink') on-focus('grow')/>\n</form>\n","<footer.site-footer class=input.class>\n    <a.openjsf href=\"https://openjsf.org/\">\n        <img src=\"./openjsf.png\"/> \n        <span><span.bold>OpenJS</span>&nbsp;<span.light>Foundation</span></span>\n    </a>\n    <div.separator/>\n    <a.osi href=\"https://github.com/marko-js/marko/blob/master/LICENSE\">\n        <img src=\"./osi.png\"/>\n        MIT&nbsp;License\n    </a>\n    <div.separator/>\n    <a.ebay href=\"https://github.com/eBay\">\n        <img src=\"./ebay.svg\"/>\n        open&nbsp;source\n    </a>\n</footer>","module.exports = require(\"path\");","const libraries = {\n  inferno: {\n    name: \"Inferno\",\n    logo: require(\"./logos/inferno.png\").default,\n    color: \"#e60022\"\n  },\n  marko: {\n    name: \"Marko\",\n    logo: require(\"./logos/marko.png\").default,\n    color: \"#d04\"\n  },\n  preact: {\n    name: \"Preact\",\n    logo: require(\"./logos/preact.png\").default,\n    color: \"#673ab8\"\n  },\n  react: {\n    name: \"React\",\n    logo: require(\"./logos/react.jpg\").default,\n    color: \"#61dafb\"\n  },\n  vue: {\n    name: \"Vue\",\n    logo: require(\"./logos/vue.png\").default,\n    color: \"#4fc08d\"\n  }\n};\n\nconst environments = {\n  node: {\n    logo: require(\"./logos/node.jpg\").default,\n    name: \"Node.js\",\n    type: \"server\"\n  },\n  desktop: {\n    logo: require(\"./logos/desktop.png\").default,\n    name: \"Desktop Browsers\",\n    type: \"average\"\n  },\n  mobile: {\n    logo: require(\"./logos/mobile.png\").default,\n    name: \"Mobile Browsers\",\n    type: \"average\"\n  },\n  firefox: {\n    logo: require(\"./logos/firefox.png\").default,\n    name: \"Firefox\",\n    type: \"desktop\"\n  },\n  safari: {\n    logo: require(\"./logos/safari.png\").default,\n    name: \"Safari\",\n    type: \"desktop\"\n  },\n  chrome: {\n    logo: require(\"./logos/chrome.png\").default,\n    name: \"Chrome\",\n    type: \"desktop\"\n  },\n  edge: {},\n  ios: {\n    logo: require(\"./logos/safari-ios.png\").default,\n    name: \"iOS Safari\",\n    type: \"mobile\"\n  },\n  android: {\n    logo: require(\"./logos/chrome-android.png\").default,\n    name: \"Chrome for Android\",\n    type: \"mobile\"\n  }\n};\n\nconst benchmarks = {\n  colors: {\n    name: \"Color picker\",\n    description: `\n            <p>This benchmark measures the time it takes to cycle through 133 colors. The selected color index changes every cycle. When the selected color index changes three things happen:</p>\n            <ul>\n                <li>The new selected color is highlighted</li>\n                <li>The old selected color is unhighlighted</li>\n                <li>The selected color's name is shown at the end</li>\n            </ul>\n            <p>This benchmark measures how well a large render tree is optimized when only a few nodes actually need to be updated.</p>`,\n    unit: \"ops/s\"\n  },\n  \"search-results\": {\n    name: \"Search results\",\n    description: `\n            <p>This benchmark measures the time it takes to render pages of search results. Each page includes 100 search result items. Every iteration renders an entirely new set of search results. As a result of rendering new search results for every cycle, a significant number of DOM nodes must be updated.</p>\n            <p>Because there are many DOM nodes being updated, the DOM itself tends to be the bottleneck in this type of benchmark.</p>`,\n    unit: \"ops/s\"\n  }\n};\n\nlet resultsByBench = {\n  colors: {\n    node: {\n      inferno: 1792,\n      marko: 3262,\n      preact: 2841,\n      react: 212,\n      vue: 824\n    },\n    safari: {\n      inferno: 5080,\n      marko: 9131,\n      preact: 2139,\n      react: 1824,\n      vue: 2531\n    },\n    chrome: {\n      inferno: 6580,\n      marko: 8126,\n      preact: 4214,\n      react: 3105,\n      vue: 4362\n    },\n    firefox: {\n      inferno: 1966,\n      marko: 2881,\n      preact: 1491,\n      react: 992,\n      vue: 1928\n    },\n    ios: {\n      inferno: 568,\n      marko: 2308,\n      preact: 274,\n      react: 369,\n      vue: 287\n    },\n    android: {\n      inferno: 737,\n      marko: 1283,\n      preact: 327,\n      react: 346,\n      vue: 509\n    }\n  },\n  \"search-results\": {\n    node: {\n      inferno: 398,\n      marko: 1657,\n      preact: 496,\n      react: 31.49,\n      vue: 172\n    },\n    safari: {\n      inferno: 406,\n      marko: 459,\n      preact: 200,\n      react: 211,\n      vue: 176\n    },\n    chrome: {\n      inferno: 409,\n      marko: 430,\n      preact: 302,\n      react: 284,\n      vue: 241\n    },\n    firefox: {\n      inferno: 115,\n      marko: 130,\n      preact: 96.82,\n      react: 79.79,\n      vue: 58.65\n    },\n    ios: {\n      inferno: 98.42,\n      marko: 107,\n      preact: 61.91,\n      react: 50.12,\n      vue: 31.32\n    },\n    android: {\n      inferno: 16.22,\n      marko: 20.08,\n      preact: 13.37,\n      react: 14.53,\n      vue: 12.01\n    }\n  }\n};\n\nObject.entries =\n  Object.entries ||\n  function(object) {\n    return Object.keys(object).map(key => [key, object[key]]);\n  };\n\nObject.entries(resultsByBench).forEach(entries => {\n  const benchName = entries[0];\n  const benchResultsByEnvironment = entries[1];\n  const environmentEntries = Object.entries(benchResultsByEnvironment);\n  const numDesktop = environmentEntries.filter(\n    entry => environments[entry[0]].type === \"desktop\"\n  ).length;\n  const numMobile = environmentEntries.filter(\n    entry => environments[entry[0]].type === \"mobile\"\n  ).length;\n\n  let desktopResults = (benchResultsByEnvironment.desktop = {});\n  let mobileResults = (benchResultsByEnvironment.mobile = {});\n\n  environmentEntries.forEach(entry => {\n    const environmentName = entry[0];\n    const environmentResultsByLibrary = entry[1];\n    const environmentType = environments[environmentName].type;\n\n    let results;\n    let count;\n\n    if (environmentType === \"mobile\") {\n      results = mobileResults;\n      count = numMobile;\n    } else if (environmentType === \"desktop\") {\n      results = desktopResults;\n      count = numDesktop;\n    }\n\n    if (results) {\n      Object.entries(environmentResultsByLibrary).forEach(entries => {\n        const libraryName = entries[0];\n        const libraryResult = entries[1];\n\n        results[libraryName] = results[libraryName] || 0;\n        results[libraryName] += libraryResult / count;\n      });\n    }\n  });\n});\n\nmodule.exports = Object.entries(resultsByBench).map(entries => {\n  const benchName = entries[0];\n  const benchResultsByEnvironment = entries[1];\n  const benchmark = benchmarks[benchName];\n\n  let localMax = 0;\n  let avergageResults = {};\n\n  return Object.assign({}, benchmark, {\n    results: Object.entries(benchResultsByEnvironment).map(entries => {\n      const envName = entries[0];\n      const envResultsByLibrary = entries[1];\n      const environment = environments[envName];\n\n      return Object.assign({}, environment, {\n        results: Object.entries(envResultsByLibrary).map(entries => {\n          const libName = entries[0];\n          const libResult = entries[1];\n          const library = libraries[libName];\n\n          if (libResult > localMax) {\n            localMax = libResult;\n          }\n\n          return Object.assign({}, library, {\n            value: libResult,\n            unit: benchmark.unit\n          });\n        })\n      });\n    }),\n    max: localMax\n  });\n});\n","\"use strict\";\n\nvar warp10 = require(\"warp10\");\nvar safeJSONRegExp = /<\\/|\\u2028|\\u2029/g;\nvar IGNORE_GLOBAL_TYPES = new Set([\"undefined\", \"function\", \"symbol\"]);\nvar DEFAULT_RUNTIME_ID = \"M\";\n\nvar FLAG_WILL_RERENDER_IN_BROWSER = 1;\nvar FLAG_HAS_RENDER_BODY = 2;\n\nfunction safeJSONReplacer(match) {\n  if (match === \"</\") {\n    return \"\\\\u003C/\";\n  } else {\n    return \"\\\\u\" + match.charCodeAt(0).toString(16);\n  }\n}\n\nfunction isNotEmpty(obj) {\n  var keys = Object.keys(obj);\n  for (var i = keys.length; i--; ) {\n    if (obj[keys[i]] !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\nfunction safeStringify(data) {\n  return JSON.stringify(warp10.stringifyPrepare(data)).replace(\n    safeJSONRegExp,\n    safeJSONReplacer\n  );\n}\n\nfunction getSerializedGlobals($global) {\n  let serializedGlobalsLookup = $global.serializedGlobals;\n  if (serializedGlobalsLookup) {\n    let serializedGlobals;\n    let keys = Object.keys(serializedGlobalsLookup);\n    for (let i = keys.length; i--; ) {\n      let key = keys[i];\n      if (serializedGlobalsLookup[key]) {\n        let value = $global[key];\n        if (!IGNORE_GLOBAL_TYPES.has(typeof value)) {\n          if (serializedGlobals === undefined) {\n            serializedGlobals = {};\n          }\n          serializedGlobals[key] = value;\n        }\n      }\n    }\n\n    return serializedGlobals;\n  }\n}\n\nfunction addComponentsFromContext(componentsContext, componentsToHydrate) {\n  var components = componentsContext.___components;\n\n  var len = components.length;\n\n  for (var i = 0; i < len; i++) {\n    var componentDef = components[i];\n    var id = componentDef.id;\n    var component = componentDef.___component;\n    var flags = componentDef.___flags;\n    var input = component.input || 0;\n    var typeName = component.typeName;\n    var customEvents = component.___customEvents;\n    var scope = component.___scope;\n    var bubblingDomEvents = component.___bubblingDomEvents;\n\n    var state;\n    var serializedProps;\n    var undefinedPropNames;\n\n    if (flags & FLAG_WILL_RERENDER_IN_BROWSER) {\n      if (typeof input.renderBody === \"function\") {\n        flags |= FLAG_HAS_RENDER_BODY;\n        input.renderBody = undefined;\n      }\n    } else {\n      if (component.state) {\n        state = component.state;\n        // Update state properties with an `undefined` value to have a `null`\n        // value so that the property name will be serialized down to the browser.\n        // This ensures that we add the proper getter/setter for the state property.\n        const stateKeys = Object.keys(state);\n        for (let i = stateKeys.length; i--; ) {\n          const stateKey = stateKeys[i];\n\n          if (state[stateKey] === undefined) {\n            if (undefinedPropNames) {\n              undefinedPropNames.push(stateKey);\n            } else {\n              undefinedPropNames = [stateKey];\n            }\n          }\n        }\n      }\n\n      component.___state = undefined; // We don't use `delete` to avoid V8 deoptimization\n      component.___input = undefined; // We don't use `delete` to avoid V8 deoptimization\n      component.typeName = undefined;\n      component.id = undefined;\n      component.___customEvents = undefined;\n      component.___scope = undefined;\n      component.___bubblingDomEvents = undefined;\n      component.___bubblingDomEventsExtraArgsCount = undefined;\n      component.___updatedInput = undefined;\n      component.___updateQueued = undefined;\n\n      if (isNotEmpty(component)) {\n        serializedProps = component;\n      }\n    }\n\n    var extra = {\n      b: bubblingDomEvents,\n      d: componentDef.___domEvents,\n      e: customEvents,\n      f: flags || undefined,\n      p: customEvents && scope, // Only serialize scope if we need to attach custom events\n      s: state,\n      u: undefinedPropNames,\n      w: serializedProps\n    };\n\n    var parts = [id, typeName];\n    var hasExtra = isNotEmpty(extra);\n\n    if (input) {\n      parts.push(input);\n\n      if (hasExtra) {\n        parts.push(extra);\n      }\n    } else if (hasExtra) {\n      parts.push(0, extra); // empty input;\n    }\n\n    componentsToHydrate.push(parts);\n  }\n\n  components.length = 0;\n\n  // Also add any components from nested contexts\n  var nestedContexts = componentsContext.___nestedContexts;\n  if (nestedContexts !== undefined) {\n    nestedContexts.forEach(function(nestedContext) {\n      addComponentsFromContext(nestedContext, componentsToHydrate);\n    });\n  }\n}\n\nfunction getInitComponentsData(out, componentDefs) {\n  const len = componentDefs.length;\n  const $global = out.global;\n  const isLast = $global.___isLastFlush;\n  const didSerializeComponents = $global.___didSerializeComponents;\n  const prefix = $global.componentIdPrefix || $global.widgetIdPrefix;\n\n  if (len === 0) {\n    if (isLast && didSerializeComponents) {\n      return { p: prefix, l: 1 };\n    }\n\n    return;\n  }\n\n  const TYPE_INDEX = 1;\n  const typesLookup =\n    $global.___typesLookup || ($global.___typesLookup = new Map());\n  let newTypes;\n\n  for (let i = 0; i < len; i++) {\n    const componentDef = componentDefs[i];\n    const typeName = componentDef[TYPE_INDEX];\n    let typeIndex = typesLookup.get(typeName);\n\n    if (typeIndex === undefined) {\n      typeIndex = typesLookup.size;\n      typesLookup.set(typeName, typeIndex);\n\n      if (newTypes) {\n        newTypes.push(typeName);\n      } else {\n        newTypes = [typeName];\n      }\n    }\n\n    componentDef[TYPE_INDEX] = typeIndex;\n  }\n\n  let serializedGlobals;\n\n  if (!didSerializeComponents) {\n    $global.___didSerializeComponents = true;\n    serializedGlobals = getSerializedGlobals($global);\n  }\n\n  return {\n    p: prefix,\n    l: isLast && 1,\n    g: serializedGlobals,\n    w: componentDefs,\n    t: newTypes\n  };\n}\n\nfunction getInitComponentsDataFromOut(out) {\n  const componentsContext = out.___components;\n\n  if (componentsContext === null) {\n    return;\n  }\n\n  const $global = out.global;\n  const runtimeId = $global.runtimeId;\n  const componentsToHydrate = [];\n  addComponentsFromContext(componentsContext, componentsToHydrate);\n\n  $global.___isLastFlush = true;\n  const data = getInitComponentsData(out, componentsToHydrate);\n  $global.___isLastFlush = undefined;\n\n  if (runtimeId !== DEFAULT_RUNTIME_ID) {\n    data.r = runtimeId;\n  }\n\n  return data;\n}\n\nfunction writeInitComponentsCode(out) {\n  out.script(exports.___getInitComponentsCode(out));\n}\n\nexports.___getInitComponentsCode = function getInitComponentsCode(\n  out,\n  componentDefs\n) {\n  const initComponentsData =\n    arguments.length === 2\n      ? getInitComponentsData(out, componentDefs)\n      : getInitComponentsDataFromOut(out);\n\n  if (initComponentsData === undefined) {\n    return \"\";\n  }\n\n  const runtimeId = out.global.runtimeId;\n  const componentGlobalKey =\n    runtimeId === DEFAULT_RUNTIME_ID ? \"MC\" : runtimeId + \"_C\";\n\n  return `$${componentGlobalKey}=(window.$${componentGlobalKey}||[]).concat(${safeStringify(\n    initComponentsData\n  )})`;\n};\n\nexports.___addComponentsFromContext = addComponentsFromContext;\nexports.writeInitComponentsCode = writeInitComponentsCode;\n\n/**\n * Returns an object that can be sent to the browser using JSON.stringify. The parsed object should be\n * passed to require('marko-components').initComponents(...);\n *\n * @param  {ComponentsContext|AsyncWriter} componentsContext A ComponentsContext or an AsyncWriter\n * @return {Object} An object with information about the rendered components that can be serialized to JSON. The object should be treated as opaque\n */\nexports.getRenderedComponents = function(out) {\n  return warp10.stringifyPrepare(getInitComponentsDataFromOut(out));\n};\n","style {\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica,\n      Arial, sans-serif;\n    color: #333;\n    padding: 3em;\n  }\n  h1 {\n    font-weight: 200;\n    margin: 0;\n    padding: 0;\n  }\n  h1 nav {\n    font-weight: 500;\n    pointer-events: none;\n    display: inline;\n  }\n  h1 nav a,\n  h1 nav a:hover ~ a {\n    color: #333;\n    text-decoration: none;\n    pointer-events: auto;\n  }\n  h1 nav:hover a,\n  main a {\n    color: #03d;\n    text-decoration: none;\n  }\n  main a span {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  main {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    grid-gap: 1.5em;\n    margin-top: 3em;\n  }\n  main a {\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  main a:hover {\n    text-decoration: underline;\n  }\n  main a img {\n    height: 24px;\n    margin-right: 0.5em;\n  }\n  footer {\n    text-align: right;\n    margin-top: 5em;\n    font-size: 0.8em;\n    color: #999;\n  }\n  footer a {\n    color: #459;\n    text-decoration: none;\n  }\n  footer a:hover {\n    color: #03d;\n    text-decoration: underline;\n  }\n}\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"/>\n    <title>Index of ${input.pathname}</title>\n  </head>\n  <body>\n    <h1>\n      Index of\n      <nav>\n        <for|part, i, all| of=input.pathname.replace(/^\\/|\\/$/, \"\").split(\"/\")>\n          <if(i === 0 && part)>\n            <a href=\"/\">/</a>\n          </if>\n          <${i < all.length - 1 ? \"a\" : null} href=`/${all.slice(0, i + 1).join(\"/\")}`>\n            ${part}/\n          </>\n        </for>\n      </nav>\n    </h1>\n    $ const root = input.pathname.replace(/\\/$/, \"\");\n    <main>\n      <if(root)>\n        <a href=\".\">\n          <img src=\"./parent-dir.png\"/>\n          <span>Parent Directory</span>\n        </a>\n      </if>\n      <for|dir| of=input.params.dirs>\n        <a href=`${root}/${dir}` title=`${dir}/`>\n          <img src=\"./dir.png\"/>\n          <span>${dir}/</span>\n        </a>\n      </for>\n      <for|file| of=input.params.files>\n        <a href=`${root}/${file}` title=`${file}.marko`>\n          <img src=\"./file.png\"/>\n          <span>${file}.marko</span>\n        </a>\n      </for>\n      <for from=0 to=4>\n        <span/>\n      </for>\n    </main>\n    <footer>\n      Icons by\n      <a href=\"https://icons8.com\">icons8</a>\n    </footer>\n  </body>\n</html>\n","export default \"/assets/ed413020.png\";","export default \"/assets/195b901b.png\";","export default \"/assets/6a44b7bf.png\";","\"use strict\";\n\nfunction forceScriptTagAtThisPoint(out) {\n  const writer = out.writer;\n\n  out.global.___isLastFlush = true;\n  const htmlSoFar = writer.toString();\n  out.global.___isLastFlush = undefined;\n\n  writer.clear();\n  writer.write(htmlSoFar);\n}\n\nmodule.exports = function render(input, out) {\n  if (out.isSync() === true) {\n    forceScriptTagAtThisPoint(out);\n  } else {\n    const asyncOut = out.beginAsync({ last: true, timeout: -1 });\n    out.onLast(function(next) {\n      forceScriptTagAtThisPoint(asyncOut);\n      asyncOut.end();\n      next();\n    });\n  }\n};\n","const _marko_template = _t(__filename);\n\nexport default _marko_template;\nimport template from \"./index.marko\";\nimport manifest from \"./../../../__MARKO_WEBPACK__MANIFEST.js\";\n\nfunction renderAssets() {\n  const assets = this.___assets;\n  const nonce = this.global.cspNonce;\n  this.___renderAssets = this.___assets = undefined;\n  this.flush = this.___flush;\n  this.end = this.___end;\n\n  if (assets) {\n    if (assets.js) {\n      const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : \"\";\n      assets.js.forEach(js => {\n        this.write(`<script src=${JSON.stringify(__webpack_public_path__ + js)}${nonceAttr} async></script>`);\n      });\n    }\n\n    if (assets.css) {\n      assets.css.forEach(css => {\n        this.write(`<link rel=\"stylesheet\" href=${JSON.stringify(__webpack_public_path__ + css)}>`);\n      });\n    }\n  }\n}\n\nfunction outFlushOverride() {\n  this.___renderAssets();\n\n  this.flush();\n}\n\nfunction outEndOverride(data, encoding, callback) {\n  this.___renderAssets();\n\n  this.end(data, encoding, callback);\n}\n\nimport _marko_tag from \"marko/dist/runtime/helpers/render-tag\";\nimport _initComponents from \"marko/dist/core-tags/components/init-components-tag.js\";\nimport _awaitReorderer from \"marko/dist/core-tags/core/await/reorderer-renderer.js\";\nimport _marko_renderer from \"marko/dist/runtime/components/renderer\";\nimport { t as _t } from \"marko/dist/runtime/html\";\nconst _marko_componentType = \"ozGBJIg0\",\n      _marko_component = {};\n_marko_template._ = _marko_renderer(function (input, out, _component, component, state) {\n  out.___flush = out.flush;\n  out.___end = out.end;\n  out.___renderAssets = renderAssets;\n  out.___assets = manifest.getAssets(\"index_df0o\", out.global.buildName);\n  out.flush = outFlushOverride;\n  out.end = outEndOverride;\n\n  _marko_tag(template, input, out, _component, \"0\");\n\n  _marko_tag(_initComponents, {}, out, _component, \"1\");\n\n  _marko_tag(_awaitReorderer, {}, out, _component, \"2\");\n}, {\n  t: _marko_componentType,\n  i: true\n}, _marko_component);\n_marko_template.meta = {\n  id: _marko_componentType,\n  tags: [\"./index.marko\", \"marko/src/core-tags/components/init-components-tag.js\", \"marko/src/core-tags/core/await/reorderer-renderer.js\"]\n};","<app-layout.home>\n  <home-hero/>\n  <home-features/>\n  <home-components/>\n  <home-syntax/>\n  <home-animation/>\n  <home-tooling/>\n  <home-benchmarks/>\n</app-layout>\n","<header.home-header>\n  <img.logo src=\"./logo.png\"/>\n  <div.header-content>\n      <img.logo-text src=\"./marko-text.png\"/>\n      <h1 key=\"tagline\">\n          A friendly and super fast UI library that makes building web apps\n          <p class=\"home-strikethrough\">bearable</p>\n          fun\n      </h1>\n      <div.actions>\n          <a.button.get-started href=\"/docs/getting-started/\">\n              <span>Get started</span>\n          </a>\n          <github-link/>\n      </div>\n  </div>\n</header>\n\nstyle {\n  @keyframes fadein {\n      from { opacity: 0; }\n      to   { opacity: 1; }\n  }\n\n  /* Firefox < 16 */\n  @-moz-keyframes fadein {\n      from { opacity: 0; }\n      to   { opacity: 1; }\n  }\n\n  /* Safari, Chrome and Opera > 12.1 */\n  @-webkit-keyframes fadein {\n      from { opacity: 0; }\n      to   { opacity: 1; }\n  }\n\n  /* Internet Explorer */\n  @-ms-keyframes fadein {\n      from { opacity: 0; }\n      to   { opacity: 1; }\n  }\n\n  /* Opera < 12.1 */\n  @-o-keyframes fadein {\n      from { opacity: 0; }\n      to   { opacity: 1; }\n  }\n\n  @keyframes fadeout {\n      from { opacity: 1; }\n      to   { opacity: 0; }\n  }\n\n  /* Firefox < 16 */\n  @-moz-keyframes fadeout {\n      from { opacity: 1; }\n      to   { opacity: 0; }\n  }\n\n  /* Safari, Chrome and Opera > 12.1 */\n  @-webkit-keyframes fadeout {\n      from { opacity: 1; }\n      to   { opacity: 0; }\n  }\n\n  /* Internet Explorer */\n  @-ms-keyframes fadeout {\n      from { opacity: 1; }\n      to   { opacity: 0; }\n  }\n\n  /* Opera < 12.1 */\n  @-o-keyframes fadeout {\n      from { opacity: 1; }\n      to   { opacity: 0; }\n  }\n\n  .home-header {\n      display: flex;\n      background-color:#fff;\n      width:100%;\n      padding:2.5em 2em;\n      justify-content:center;\n      align-items:flex-start;\n      flex-direction:row;\n  }\n\n  .home-header .header-content {\n      display: flex;\n      align-items:flex-start;\n      flex-direction: column;\n      justify-content: flex-start;\n  }\n\n  .home-header h1 {\n      font-size:2em;\n      font-weight:300;\n      margin:0.5em 0 0.6em;\n      padding:0;\n      border:0;\n      color:#46484a;\n      max-width:17em;\n      transform: translateZ(-1px); /* Force new compositing layer to prevent jank in safari */\n  }\n\n  .home-fade-in {\n      -webkit-animation: fadein 1.0s; /* Safari, Chrome and Opera > 12.1 */\n         -moz-animation: fadein 1.0s; /* Firefox < 16 */\n          -ms-animation: fadein 1.0s; /* Internet Explorer */\n           -o-animation: fadein 1.0s; /* Opera < 12.1 */\n              animation: fadein 1.0s;\n  }\n\n  .home-fade-out {\n      -webkit-animation: fadeout 1.0s; /* Safari, Chrome and Opera > 12.1 */\n         -moz-animation: fadeout 1.0s; /* Firefox < 16 */\n          -ms-animation: fadeout 1.0s; /* Internet Explorer */\n           -o-animation: fadeout 1.0s; /* Opera < 12.1 */\n              animation: fadeout 1.0s;\n  }\n\n  .home-strikethrough {\n      display: inline;\n      text-decoration: line-through;\n  }\n\n  .home-header img.logo {\n      height:9em;\n      width:16.425em;\n      margin-right:2em;\n      margin-top:1.5em;\n  }\n\n  .home-header img.logo-text {\n      height:5em;\n  }\n\n  .home-header .actions {\n      display: flex;\n      flex-direction:row;\n  }\n\n  .home-header .actions .button {\n      display:flex;\n      flex-direction:row;\n      align-items:center;\n      justify-content:space-between;\n      padding:0.75em;\n      text-decoration:none;\n      border-radius:0.2em;\n      margin-left:1em;\n  }\n\n  .home-header .actions .button:first-child {\n      margin-left:0;\n  }\n\n  .home-header .actions .button.get-started {\n      background-color:#d04;\n      color:#fff;\n      padding-left:2em;\n      padding-right:2em;\n  }\n\n  .home-header .actions .button.get-started:hover {\n      background-color:#ffc400;\n  }\n\n  @media (max-width:45em) {\n      .home-header {\n          flex-direction:column;\n          align-items:center;\n      }\n      .home-header .header-content {\n          align-items:center;\n      }\n      .home-header h1 {\n          text-align:center;\n      }\n      .home-header img.logo {\n          margin:0;\n          margin-bottom:1em;\n      }\n  }\n}\n","export default \"/assets/98b37aa1.png\";","export default \"/assets/2f4dcd5e.png\";","<a.github-link href=\"https://github.com/marko-js/marko\">\n    <img src=\"./github.svg\"/>\n    <span.text>GitHub</span>\n    <span.stars key=\"star-count\"/>\n</a>\n\nstyle {\n    .github-link {\n        display:flex;\n        flex-direction:row;\n        align-items:center;\n        justify-content:space-between;\n        padding:0.75em;\n        text-decoration:none;\n        border-radius:0.2em;\n        margin-left:1em;\n        border:1px solid #a4a6a8;\n        color:#343638;\n    }\n\n    .github-link:hover {\n        background-color:#f4f6f8;\n        text-decoration:none;\n    }\n\n    .github-link img {\n        height:1.5em;\n        display:block;\n        margin-right:0.75em;\n    }\n\n    .github-link .text {\n        margin-right:0.75em;\n    }\n\n    .github-link .stars {\n        color:#545658;\n        font-size:0.9em;\n    }\n    .github-link .stars:after {\n        content:\"\\2605\";\n        color:#ffc400;\n    }\n}","export default \"/assets/d7fca0b8.svg\";","let taglineStatements = [\n  \"It's like HTML and JS had a perfect baby that grew up to be awesome\",\n  \"Async! Streaming! UI components! Your dreams have come true!\",\n  \"Yes, you can copy and paste HTML from StackOverflow\",\n  \"Server-side rendering + Client-side rendering = <b>Awesomorphic</b>\",\n  \"Bringing back progressive HTML rendering to the masses\"\n];\n\nfor (let i = 0; i < taglineStatements.length; i++) {\n  taglineStatements[i] = `<span class=\"home-fade-in\">${taglineStatements[\n    i\n  ]}</span>`;\n}\n\nlet setHeaderClassTimer = header => {\n  setTimeout(() => {\n    header.classList.remove(\"home-fade-in\");\n    header.classList.add(\"home-fade-out\");\n  }, 4500);\n};\n\nmodule.exports = {\n  onMount() {\n    const header = this.getEl(\"tagline\");\n    const originalMessage = header.innerHTML;\n    const originalFadeIn = `<span class=\"home-fade-in\">${originalMessage}</span>`;\n\n    setHeaderClassTimer(header);\n    let currentTaglineIndex = 0;\n\n    setInterval(() => {\n      header.classList.remove(\"home-fade-out\");\n\n      const tagline = taglineStatements[currentTaglineIndex];\n\n      if (currentTaglineIndex === taglineStatements.length) {\n        header.innerHTML = originalFadeIn;\n        currentTaglineIndex = 0;\n      } else {\n        header.innerHTML = tagline;\n        currentTaglineIndex++;\n      }\n\n      setHeaderClassTimer(header);\n    }, 5000);\n  }\n};\n","<header.home-features>\n    <div.feature>\n        <h2.blue>simple.</h2>\n        <p>If you know HTML, CSS, and Javascript, you know Marko</p>\n    </div>\n    <div.feature>\n        <h2.red>fast.</h2>\n        <p>Faster loads via streaming and a tiny (~10kb gzip) runtime</p>\n    </div>\n    <div.feature>\n        <h2.yellow>progressive.</h2>\n        <p>From simple HTML templates to powerful UI components</p>\n    </div>\n    <div.feature>\n        <h2.green>trusted.</h2>\n        <p>Marko is powering high-traffic websites like ebay.com</p>\n    </div>\n</header>\n\nstyle {\n    .home-features {\n        display: flex;\n        flex-direction:row;\n        justify-content:space-between;\n        padding:2em;\n        flex-wrap:wrap;\n        max-width:80em;\n    }\n\n    .home-features .feature {\n        width:23%;\n    }\n\n    @media (max-width:50em) {\n        .home-features .feature {\n            width:47%;\n            margin-bottom:1em;\n        }\n    }\n\n    .home-features h2 {\n        padding:0;\n        border:0;\n    }\n\n    .home-features p {\n        padding:0;\n        margin:0;\n    }\n\n    .blue {\n        color:#09d;\n    }\n\n    .green {\n        color:#7d0;\n    }\n\n    .yellow {\n        color:#ffc400;\n    }\n\n    .red {\n        color:#d04;\n    }\n}\n","<header.home-components.solid-color style={ background:input.background }>\n    <heading.title tag=\"h1\" text=\"Reactive UI components\"/>\n\n    <p.description>Change the data backing a view and Marko will automatically and efficiently update the resulting HTML</p>\n    <div.code-example-container>\n        <code-block no-switch file=\"./components/counter-example/index.marko\" lines=\"3,6,22\"/>\n        <div.running-example>\n            <counter-example/>\n        </div>\n    </div>\n</header>\n\nstyle {\n    .home-components {\n        display: flex;\n        background-color:#09d;\n        width:100%;\n        padding:2em;\n        justify-content:center;\n        align-items:center;\n        box-shadow:0 -0.25em 1.5em rgba(0,5,10,0.25);\n    }\n\n    .home-components h1.title {\n        text-align:center;\n        padding-top:0;\n        color:#fff;\n        border:0;\n    }\n\n    .home-components p.description {\n        font-size:1.2em;\n        margin-bottom:1em;\n    }\n\n    .code-example-container {\n        display: flex;\n        flex-direction:row;\n        justify-content:center;\n        width:100%;\n        max-width:60em;\n    }\n\n    .code-example-container pre {\n        margin:0;\n        border-top-right-radius:0;\n        border-bottom-right-radius:0;\n    }\n\n    @media (max-width:45em) {\n        .code-example-container pre {\n            font-size:1.9vw;\n        }\n    }\n\n    .code-example-container .running-example {\n        background-color:#fff;\n        display:block;\n        padding:2em;\n        width:50%;\n        border-top-right-radius:0.2em;\n        border-bottom-right-radius:0.2em;\n    }\n}\n","module.exports = function getAnchorName(title, out) {\n  var anchorCache = out.global.anchorCache || (out.global.anchorCache = {});\n  var anchorName = title\n    .replace(/[ \\-]+/g, \"-\")\n    .replace(/[^A-Z0-9\\-]+/gi, \"\")\n    .toLowerCase();\n  var repeat =\n    anchorCache[anchorName] != null\n      ? ++anchorCache[anchorName]\n      : (anchorCache[anchorName] = 0);\n  if (repeat) {\n    anchorName += \"_\" + repeat;\n  }\n  return anchorName;\n};\n","class {\n  onCreate() {\n    this.state = { count: 0 };\n  }\n  increment() {\n    this.state.count++;\n  }\n}\n\nstyle {\n  .count {\n    color: #09c;\n    font-size: 3em;\n  }\n  .example-button {\n    font-size: 1em;\n    padding: 0.5em;\n  }\n}\n\n<div.count>\n  ${state.count}\n</div>\n<button.example-button on-click(\"increment\")>\n  Click me!\n</button>\n","<header.home-syntax.solid-color style={ background:input.background }>\n    <heading.title tag=\"h1\" text=\"Choose a syntax\"/>\n\n    <p.description>Write in a familiar HTML-like style or drop the angle brackets and use Marko's concise syntax</p>\n    <div.syntaxes>\n        <code-block lang=\"marko\" no-switch>\n            <!doctype html>\n            <html>\n            <head>\n                <title>Hello Marko</title>\n            </head>\n            <body>\n                <h1>My favorite colors</h1>\n                <ul.colors>\n                    <for|color| of=input.colors>\n                        <li>${color}</li>\n                    </for>\n                </ul>\n            </body>\n            </html>\n        </code-block>\n        <div.either>\n            <span>&#8644;</span>\n        </div>\n        <code-block lang=\"marko\" no-switch>\n            <!doctype html>\n            html\n                head\n                    title -- Hello Marko\n                body\n                    h1 -- My favorite colors\n                    ul.colors\n                        for|color| of=input.colors\n                            li -- ${color}\n        </code-block>\n    </div>\n</header>\n\nstyle {\n    .home-syntax {\n        display: flex;\n        background-color:#7d0;\n        width:100%;\n        padding:2em;\n        justify-content:center;\n        align-items:center;\n        box-shadow:0 -0.25em 1.5em rgba(0,5,10,0.25);\n    }\n\n    .home-syntax h1.title {\n        text-align:center;\n        padding-top:0;\n        color:#fff;\n        border:0;\n    }\n\n    .home-syntax .syntaxes {\n        display: flex;\n        flex-direction:row;\n    }\n\n    .home-syntax .syntaxes pre {\n        padding:2em;\n    }\n    .home-syntax .syntaxes .either {\n        display: flex;\n        justify-content:center;\n        align-items:center;\n    }\n    .home-syntax .syntaxes .either span {\n        font-size: 5em;\n        margin-left: -0.55em;\n        color: #fff;\n        margin-right: -0.55em;\n        position: relative;\n        z-index: 1;\n        background-color: #4a0;\n        border: 0.1em solid #7d0;\n        line-height: 1em;\n        width: 1.2em;\n        height: 1.2em;\n        text-align: center;\n        border-radius: 50%;\n    }\n\n    @media (max-width:55em) {\n        .home-syntax .syntaxes {\n            font-size:1.9vw;\n        }\n    }\n\n    .home-syntax p.description {\n        font-size:1.2em;\n        margin-bottom:1em;\n    }\n\n    .code-example-container {\n        display: flex;\n        flex-direction:row;\n        justify-content:center;\n        width:100%;\n        max-width:60em;\n    }\n\n    .code-example-container pre {\n        margin:0;\n        border-top-right-radius:0;\n        border-bottom-right-radius:0;\n    }\n\n    .code-example-container .running-example {\n        background-color:#fff;\n        display:block;\n        padding:2em;\n        width:50%;\n        border-top-right-radius:0.2em;\n        border-bottom-right-radius:0.2em;\n    }\n}\n","<div.home-animation>\n    <header>\n        <heading.title tag=\"h1\" anchor-name=\"silky-smooth\">\n            Silky <strong>smooth</strong>\n        </heading>\n        \n        <p>Fast enough to power animations at 60FPS</p>\n    </header>\n    <sine-wave/>\n</div>\n\nstyle {\n    .home-animation {\n        width: 100%;\n    }\n\n    .home-animation header{\n        text-align:center;\n        width:100%;\n        padding:2em;\n    }\n\n    .home-animation p {\n        margin-bottom:2em;\n    }\n\n    .home-animation h1 strong {\n        color:#7d0;\n        font-weight:600;\n    }\n}\n","import isElementInViewport from './isElementInViewport';\n\nstatic var barCount;\nstatic var barWidth;\n\nstyle {\n    .animated-sin-wave {\n        position: relative;\n        height: 150px;\n        width: 100%;\n        overflow: hidden;\n    }\n\n    .animated-sin-wave > .bar {\n        position: absolute;\n        height: 100%;\n        border-radius: 50%;\n        max-width:10px;\n    }\n\n    .animated-sin-wave-description {\n        width:100%;\n        text-align:center;\n        font-size:0.8em;\n        color:#747678;\n        padding: 2em\n    }\n}\n\nclass {\n    onCreate() {\n        this.state = {\n            active: false,\n            count: 0\n        };\n        this.step = .5;\n    }\n    onMount() {\n        this.nextFrame = this.nextFrame.bind(this);\n        this.subscribeTo(window).on('resize', () => this.scale());\n        this.registerAnimationViewListener();\n        this.scale();\n\n        if (this.shouldShowAnimation()) {\n            this.start();\n        }\n    }\n    scale() {\n        barCount = Math.min(200, Math.floor(window.innerWidth/15));\n        barWidth = 100/barCount;\n    }\n    start() {\n        if (!this.state.active) {\n            this.state.active = true;\n            this.nextFrame();\n        }\n    }\n    stop() {\n        this.state.active = false;\n    }\n    switchDirection() {\n        this.step *= -1;\n    }\n    nextFrame() {\n        if (this.state.active) {\n            this.state.count += this.step;\n            window.requestAnimationFrame(this.nextFrame);\n        }\n    }\n    registerAnimationViewListener() {\n        this.subscribeTo(window).on('scroll', () => {\n            const inView = this.shouldShowAnimation();\n            if (!inView) {\n                this.stop();\n            } else if (inView && this.state.active === false) {\n                this.start();\n            }\n        });\n    }\n    shouldShowAnimation() {\n        const el = this.getEl('sine-wave-animation');\n        return isElementInViewport(el);\n    }\n}\n\n<div.animated-sin-wave on-click('switchDirection') key='sine-wave-animation'>\n    $ var count = state.count;\n\n    <for|i| from=0 to=barCount>\n        $ var translateY = Math.sin(count/10 + i/5) * 100 * .5;\n        $ var hue = (360/barCount * i - count) % 360;\n        $ var color = 'hsl('+hue+',95%,55%)';\n        $ var rotation = (count+i)%360;\n        $ var barX = barWidth * i;\n\n        $ var style = {\n            width: barWidth + '%',\n            left: barX + '%',\n            transform: 'scale(0.8,.5) translateY(' + translateY + '%) rotate(' + rotation + 'deg)',\n            backgroundColor: color\n        };\n\n        <div.bar style=style/>\n    </for>\n</div>\n\n<p.animated-sin-wave-description>\n    The above animation is ${barCount} <code>&lt;div></code> tags.\n    No SVG, no CSS transitions/animations.\n    It's all powered by Marko which does a full re-render every frame.\n</p>\n","function elementInRange(x, a, b) {\n  return x >= a && x <= b;\n}\n\nmodule.exports = function isElementInViewport(element, options) {\n  const scrollY = window.scrollY;\n  const scrollBottom = scrollY + window.innerHeight;\n  const elOffsetTop = element.offsetTop;\n  const elBottomPos = elOffsetTop + element.offsetHeight;\n  return (\n    elementInRange(elOffsetTop, scrollY, scrollBottom) ||\n    elementInRange(elBottomPos, scrollY, scrollBottom)\n  );\n};\n","<header.home-tooling.solid-color>\n    <div.wrapper>\n        <div.screenshot-window>\n            <div.title-bar>\n                <div.red/>\n                <div.yellow/>\n                <div.green/>\n            </div>\n            <div.screen>\n                <img src=\"./screen.png\"/>\n            </div>\n        </div>\n        <div.details>\n            <heading.title tag=\"h1\" text=\"Awesome tooling\"/>\n            <p>Marko provides first-class support for the Atom editor with\n                syntax highlighting,\n                <a href=\"https://github.com/marko-js/atom-language-marko#autocomplete\">\n                    Autocomplete\n                </a> for both HTML and custom tags,\n                <a href=\"https://github.com/marko-js/atom-language-marko#hyperclick\">\n                    Hyperclick\n                </a> to quickly jump to referenced files and methods,\n                and\n                <a href=\"https://github.com/marko-js/atom-language-marko#prettyprint\">\n                    Pretty printing\n                </a> to keep your code readable.\n            </p>\n            <p.pad>Community plugins also provide syntax highlighting for Sublime, VS Code, Webstorm &amp; others!</p>\n            <a.button href=\"/docs/editor-plugins\">\n                View all editor plugins\n            </a>\n        </div>\n    </div>\n</header>\n","export default \"/assets/786f49db.png\";","import benchData from './data';\n\nclass {\n    onCreate() {\n        this.state = {\n            index:0,\n            individual:false\n        }\n    }\n    switchBench(index) {\n        this.state.index = index;\n    }\n    toggleIndividual() {\n        this.state.individual = !this.state.individual;\n    }\n}\n\n$ var isIndividual = state.individual;\n$ var benchmark = benchData[state.index];\n\n<div.benchmarks>\n    <heading.title tag=\"h2\" anchor-name=\"benchmarks\">\n        Re<strong>marko</strong>able performance across the board\n    </heading>\n\n    <div.tabs>\n        <for|bench, i| of=benchData>\n            <div.tab class={ selected:i === state.index } on-click('switchBench', i)>\n                ${bench.name}\n            </div>\n        </for>\n    </div>\n    <div.tab-content class={ sideBySide:!isIndividual }>\n        <div.charts>\n            $ var max = Math.max.apply(null, benchData.map(r => r.max));\n            $ var width = 80 / (isIndividual ? benchmark.results.length : 3) + '%';\n            $ var localMax = (max+benchmark.max)/2;\n            <for|environment| of=benchmark.results>\n                $ var type = environment.type;\n                <if((isIndividual && type !== 'average') || (!isIndividual && (type === 'server' || type === 'average')))>\n                    <benchmark-chart max=localMax width=width environment=environment results=environment.results/>\n                </if>\n            </for>\n            <button.toggle-individual on-click('toggleIndividual')>\n                ${state.individual ? 'Hide browsers' : 'Show all browsers'}\n            </button>\n        </div>\n        <div.description>\n            <h3>The ${benchmark.name.toLowerCase()} benchmark</h3>\n            $!{benchmark.description} <a href=\"https://github.com/marko-js/isomorphic-ui-benchmarks\">View the code on GitHub</a>\n        </div>\n    </div>\n</div>\n\nstyle {\n    .benchmarks {\n        width:100%;\n        padding:2em;\n    }\n    .benchmarks .charts {\n        display: flex;\n        flex-direction:row;\n        flex-wrap:wrap;\n        justify-content:space-between;\n        align-items: stretch;\n        padding:2em;\n        margin-top:4em;\n        position:relative;\n    }\n    .benchmarks h2.title {\n        margin-bottom:0.66rem;\n        text-align:center;\n    }\n    .benchmarks h2.title strong {\n        color:#d04;\n    }\n    .benchmarks .tabs {\n        display: flex;\n        flex-direction:row;\n        justify-content:center;\n        border-top:1px solid #e9ebed;\n        padding:0 1em;\n    }\n    .benchmarks .tab {\n        border:0;\n        border-top:3px solid transparent;\n        font-size:0.8em;\n        margin-top:-2px;\n        background:transparent;\n        color:#727476;\n        cursor:pointer;\n        outline:0;\n        padding:1em;\n        position:relative;\n    }\n    .benchmarks .tab:hover {\n        color:#d04;\n    }\n    .benchmarks .tab.selected {\n        border-top:3px solid #d04;\n        color:#d04;\n    }\n    .benchmarks .tab.selected:after {\n        content:'';\n        border:0.5em solid transparent;\n        border-top-color:#d04;\n        position:absolute;\n        top:0;\n        left:50%;\n        margin-left:-0.5em;\n    }\n    .benchmarks .description p {\n        margin-top:1em;\n    }\n    .benchmarks .tab-content.sideBySide {\n        display: flex;\n        flex-direction:row;\n        justify-content: flex-start;\n        align-items: stretch;\n    }\n    .benchmarks .tab-content.sideBySide .charts {\n        display: flex;\n        width:50%;\n        flex-shrink:0;\n    }\n    .benchmarks .tab-content.sideBySide .description {\n        padding-top:2em;\n        padding-right:2em;\n        order: -1;\n    }\n    .benchmarks .toggle-individual {\n        position:absolute;\n        top:0; right:0;\n        padding: 1em;\n        color:#747678;\n        background:transparent;\n        cursor:pointer;\n        border:0;\n    }\n    .benchmarks .toggle-individual:hover {\n        background:#e4e6e8;\n    }\n\n    @media (max-width:50em) {\n        .benchmarks .tab-content.sideBySide {\n            flex-direction:column;\n        }\n        .benchmarks .tab-content.sideBySide .charts {\n            width:100%;\n        }\n        .benchmarks .tab-content.sideBySide .description {\n            padding:0;\n            order:0;\n        }\n    }\n}\n","static function getPercent(value, base) {\n    return Math.round(1000*value/base)/10+'%';\n}\n\n$ var max = Math.max.apply(null, input.results.map(r => r.value));\n$ var width = getPercent(0.85, input.results.length);\n\n$ max = input.max ? Math.pow((Math.sqrt(input.max)+Math.sqrt(max)*4)/5, 2) : max;\n\n<div.benchmark-chart-group style={ width:input.width }>\n    <div.benchmark-bars>\n        <for|result| of=input.results>\n            $ var height = getPercent(result.value, max);\n            $ var backgroundColor = result.color;\n            <div.benchmark-bar class={ featured:result.name === 'Marko' } style={ height, width, backgroundColor }>\n                <div.label>${result.name}</div>\n                <div.value>\n                    ${result.value.toLocaleString('en', { maximumFractionDigits:result.value > 100 ? 0 : 1 })}\n                    <span.unit>${result.unit}</span>\n                </div>\n                <img.logo src=result.logo width=\"auto\" height=\"auto\"/>\n            </div>\n        </for>\n    </div>\n    <img.environment src=input.environment.logo width=\"auto\" height=\"auto\"/>\n    <span.name>${input.environment.name}</span>\n    <span.type>(${input.environment.type})</span>\n</div>\n\nstyle {\n    .benchmark-chart-group {\n        display: flex;\n        align-items:center;\n        flex-direction: column;\n        justify-content: flex-start;\n        margin:0 0.5em;\n    }\n\n    .benchmark-chart-group img.environment {\n        width:3em;\n    }\n\n    .benchmark-bars {\n        display: flex;\n        flex-direction:row;\n        width:100%;\n        height:10em;\n        align-items:flex-end;\n        justify-content:space-between;\n        margin-bottom:3em;\n    }\n\n    .benchmark-bar {\n        display: flex;\n        background-color:#a7a9ab;\n        position:relative;\n        align-items:center;\n        filter:saturate(0) brightness(100) brightness(0.5);\n        transition: height 0.66s;\n        max-width:1.5em;\n        flex-direction: column;\n        justify-content: flex-start;\n    }\n\n    .benchmark-bar:hover {\n        z-index:2;\n        filter:none;\n    }\n\n    .benchmark-bar.featured {\n        filter:none;\n    }\n\n    .benchmark-bar .label {\n        position:absolute;\n        top:100%; right:50%;\n        transform-origin:100% 50% 0;\n        transform:rotate(-45deg);\n        font-size:0.8em;\n    }\n\n    .benchmark-bar .value {\n        display:none;\n        position:absolute;\n        bottom:100%;\n        font-size:0.9em;\n        width:100%;\n        line-height:1em;\n        align-items:center;\n        padding-bottom:1.5rem;\n        text-shadow:0 0 4px #fff;\n        flex-direction: column;\n        justify-content: flex-start;\n    }\n\n    .benchmark-bar .value .unit {\n        display:block;\n        font-size:0.75em;\n    }\n\n    .benchmark-bar.featured .value,\n    .benchmark-bar:hover .value {\n        display:flex;\n    }\n\n    .benchmark-bar img.logo {\n        position:absolute;\n        bottom:100%;\n        max-width:1em;\n        max-height:1.5em;\n        padding-bottom:0.5rem;\n        display:none;\n    }\n\n    .benchmark-bar.featured img.logo,\n    .benchmark-bar:hover img.logo {\n        display:block;\n    }\n\n    .benchmark-chart-group .name {\n        font-size:0.9em;\n        margin-top:0.66em;\n        text-align:center;\n    }\n    .benchmark-chart-group .type {\n        font-size:0.7em;\n        color:#747678;\n    }\n}","export default \"/assets/bbf6a67c.png\";","<header.site-header key=\"header\">\n  <div.content>\n      <a href=\"/\">\n          <img.site-logo src=\"./logo-header.png\"/>\n      </a>\n      <div.stuff>\n          <nav.site-menu>\n              <a href=\"/docs/getting-started/\">docs</a>\n              <a href=\"/try-online\">try online</a>\n              <a href=\"https://github.com/marko-js/marko\">github</a>\n              <layout-search.search />\n          </nav>\n          <button.menu on-click(\"toggleMenu\")>&#9776;</button>\n      </div>\n  </div>\n</header>\n","export default \"/assets/2a0575bc.png\";","export default \"/assets/b4389f44.png\";","import structure from 'marko/docs/structure.json';\nimport formatSlug from '../../../../utils/format-slug';\nimport createOverviewTree from '../../../../utils/create-overview-tree';\n\nstatic const parentTree = createOverviewTree(structure);\n\nstatic function getDocData(currentDoc, section, doc) {\n    let docSlug;\n    let selected;\n\n    let docTitle = doc;\n    if (typeof doc === 'object') {\n        docTitle = doc.title;\n\n        let sectionTitleSlug = formatSlug(section.title);\n        let titleSlug = formatSlug(docTitle);\n\n        docSlug = `${sectionTitleSlug}-${titleSlug}-overview`;\n\n        // Select the parents of \"selected\" documents, if they exist\n        selected = (parentTree[currentDoc] && parentTree[currentDoc][docSlug]) || (docSlug === currentDoc);\n    } else {\n        docSlug = formatSlug(docTitle);\n        selected = docSlug === currentDoc;\n    }\n\n    docSlug += '/';\n\n    return {\n        docTitle,\n        docSlug,\n        selected\n    };\n}\n\n<macro|{ structure, isNested }| name=\"sidebar-overview\">\n  <for|section| of=structure>\n    <ul class=(isNested ? \"toc toc-level1\" : \"toc-level0\")>\n      <if (!isNested)>\n        <li.section>\n          $ let title = section.title.toUpperCase();\n          $ let overviewSlug = formatSlug(title);\n          <a href=`/docs/${overviewSlug}-overview/`>${title}</a>\n        </li>\n      </if>\n\n      <for|doc| of=section.docs>\n        <li>\n          $ let { docTitle, docSlug, selected } = getDocData(input.currentDoc, section, doc);\n          <a class={ selected } href=`/docs/${docSlug}`>\n            ${docTitle}\n          </a>\n\n          <if(selected)>\n            <if(typeof doc === 'object')>\n              <sidebar-overview structure=[doc] isNested />\n            </if>\n            <else-if(typeof doc === 'string')>\n              $!{input.toc}\n            </else-if>\n          </if>\n        </li>\n      </for>\n    </ul>\n  </for>\n</macro>\n\n<div.doc-sidebar class=input.class key=\"sidebar\">\n    <button.close on-click('hide')>&#10005;</button>\n    <h1>Marko <version-switcher/></h1>\n    <layout-search.search />\n    <sidebar-overview structure=structure />\n</div>\n","const formatSlug = require(\"./format-slug\");\n\n/**\n* Creates an object where each key is the name of a document, and each value\n* are the parents of the document. This allows us to handle nested documents in\n* our sidenav.\n*/\n\nmodule.exports = function createOverviewTree(structure, nestedTitle) {\n  let familyTree = {};\n\n  for (let i = 0; i < structure.length; i++) {\n    const section = structure[i];\n\n    for (let j = 0; j < section.docs.length; j++) {\n      const doc = section.docs[j];\n\n      // handle nested documents\n      if (typeof doc === \"object\") {\n        const overviewTitle = `${formatSlug(section.title)}-${formatSlug(\n          doc.title\n        )}-overview`;\n        const nestedList = createOverviewTree([doc], overviewTitle);\n\n        familyTree = Object.assign({}, familyTree, nestedList);\n      } else if (typeof doc === \"string\") {\n        const key = formatSlug(doc.toUpperCase());\n        familyTree[key] = {};\n\n        if (nestedTitle) {\n          familyTree[key][nestedTitle] = true;\n        } else {\n          familyTree[key][\n            `${formatSlug(section.title.toUpperCase())}-overview`\n          ] = true;\n        }\n      }\n    }\n  }\n\n  return familyTree;\n};\n","import { version } from \"marko/package.json\";\n\n<select on-change('switchVersion')>\n    <option value=\"current\" selected>${version}</option>\n    <option value=\"http://marko-v4.github.io/docs/\">4.x</option>\n    <option value=\"http://v3.markojs.com/docs/\">3.x</option>\n    <option value=\"http://marko-v2.github.io/docs/\">2.x</option>\n</select>\n","module.exports = require(\"marko/package.json\");","export default \"/assets/f9c991e7.png\";","export default \"/assets/07891f9e.png\";","export default \"/assets/bb92c8f9.svg\";","$ const { trackingId, domain } = input;\n\n<if(trackingId && domain)>\n  <script>\n    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n    ga('create', '$!{trackingId}', '$!{domain}');\n    ga('send', 'pageview');\n  </script>\n</if>\n","module.exports = require(\"marko/dist/core-tags/components/preferred-script-location-tag.js\");","const _marko_template = _t(__filename);\n\nexport default _marko_template;\nimport template from \"./index.marko\";\nimport manifest from \"./../../../__MARKO_WEBPACK__MANIFEST.js\";\n\nfunction renderAssets() {\n  const assets = this.___assets;\n  const nonce = this.global.cspNonce;\n  this.___renderAssets = this.___assets = undefined;\n  this.flush = this.___flush;\n  this.end = this.___end;\n\n  if (assets) {\n    if (assets.js) {\n      const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : \"\";\n      assets.js.forEach(js => {\n        this.write(`<script src=${JSON.stringify(__webpack_public_path__ + js)}${nonceAttr} async></script>`);\n      });\n    }\n\n    if (assets.css) {\n      assets.css.forEach(css => {\n        this.write(`<link rel=\"stylesheet\" href=${JSON.stringify(__webpack_public_path__ + css)}>`);\n      });\n    }\n  }\n}\n\nfunction outFlushOverride() {\n  this.___renderAssets();\n\n  this.flush();\n}\n\nfunction outEndOverride(data, encoding, callback) {\n  this.___renderAssets();\n\n  this.end(data, encoding, callback);\n}\n\nimport _marko_tag from \"marko/dist/runtime/helpers/render-tag\";\nimport _initComponents from \"marko/dist/core-tags/components/init-components-tag.js\";\nimport _awaitReorderer from \"marko/dist/core-tags/core/await/reorderer-renderer.js\";\nimport _marko_renderer from \"marko/dist/runtime/components/renderer\";\nimport { t as _t } from \"marko/dist/runtime/html\";\nconst _marko_componentType = \"UYDwdtES\",\n      _marko_component = {};\n_marko_template._ = _marko_renderer(function (input, out, _component, component, state) {\n  out.___flush = out.flush;\n  out.___end = out.end;\n  out.___renderAssets = renderAssets;\n  out.___assets = manifest.getAssets(\"try-online_2V35\", out.global.buildName);\n  out.flush = outFlushOverride;\n  out.end = outEndOverride;\n\n  _marko_tag(template, input, out, _component, \"0\");\n\n  _marko_tag(_initComponents, {}, out, _component, \"1\");\n\n  _marko_tag(_awaitReorderer, {}, out, _component, \"2\");\n}, {\n  t: _marko_componentType,\n  i: true\n}, _marko_component);\n_marko_template.meta = {\n  id: _marko_componentType,\n  deps: [\"./style.css\"],\n  tags: [\"./index.marko\", \"marko/src/core-tags/components/init-components-tag.js\", \"marko/src/core-tags/core/await/reorderer-renderer.js\"]\n};","<app-layout title=\"Try online\" footer=false discord=false>\n  <loader/>\n</app-layout>\n","class {\n  onCreate() {\n    this.state = {\n      component: undefined,\n      show: false\n    };\n  }\n  async onMount() {\n    const rootComponent = typeof window === \"object\" && await import(\"../root\");\n    await rootComponent.loading;\n    this.state.component = rootComponent;\n    this.checkIfLargeEnough();\n  }\n  checkIfLargeEnough() {\n    var windowSize = document.body.innerWidth || document.body.clientWidth;\n    this.state.show = windowSize > 1000;\n  }\n}\n\n<if(state.component)>\n  <if(state.show)>\n    <${state.component} examples=input.examples/>\n  </if>\n  <else>\n    <subscribe to=window on-resize(\"checkIfLargeEnough\")/>\n    <div.too-small>\n      <div.overlay>\n        <h1>Screen width too small</h1>\n        <h2>Please increase the window size or rotate to load.</h2>\n        <h3>If you are on a mobile phone, please open on a desktop</h3>\n        <h4>\n          <a href=\"/docs/getting-started/\">View Docs</a>\n        </h4>\n      </div>\n    </div>\n  </else>\n</if>\n<else>\n  <div.try-loader-container>\n    <div.try-loader>\n      <span.green-loader/>\n    </div>\n  </div>\n</else>\n","class {\n  onMount() {\n    this.listen(this.input);\n  }\n\n  onInput(input) {\n    if (this.target && this.target !== input.to) {\n      this.onDestroy();\n      this.listen(input);\n    }\n  }\n\n  onDestroy() {\n    this.subscription.removeAllListeners();\n  }\n\n  listen(input) {\n    var target = (this.target = input.to);\n    var subscription = (this.subscription = this.subscribeTo(target));\n    var events = input.__events;\n    var len = events.length;\n    for (var i = 0; i < len; i += 2) {\n      var method = events[i];\n      var name = events[i + 1];\n      subscription[method](name, this.emit.bind(this, name));\n    }\n  }\n}\n\n<!--  -->\n","const _marko_template = _t(__filename);\n\nexport default _marko_template;\nimport template from \"./index.marko\";\nimport manifest from \"./../../../../__MARKO_WEBPACK__MANIFEST.js\";\n\nfunction renderAssets() {\n  const assets = this.___assets;\n  const nonce = this.global.cspNonce;\n  this.___renderAssets = this.___assets = undefined;\n  this.flush = this.___flush;\n  this.end = this.___end;\n\n  if (assets) {\n    if (assets.js) {\n      const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : \"\";\n      assets.js.forEach(js => {\n        this.write(`<script src=${JSON.stringify(__webpack_public_path__ + js)}${nonceAttr} async></script>`);\n      });\n    }\n\n    if (assets.css) {\n      assets.css.forEach(css => {\n        this.write(`<link rel=\"stylesheet\" href=${JSON.stringify(__webpack_public_path__ + css)}>`);\n      });\n    }\n  }\n}\n\nfunction outFlushOverride() {\n  this.___renderAssets();\n\n  this.flush();\n}\n\nfunction outEndOverride(data, encoding, callback) {\n  this.___renderAssets();\n\n  this.end(data, encoding, callback);\n}\n\nimport _marko_tag from \"marko/dist/runtime/helpers/render-tag\";\nimport _initComponents from \"marko/dist/core-tags/components/init-components-tag.js\";\nimport _awaitReorderer from \"marko/dist/core-tags/core/await/reorderer-renderer.js\";\nimport _marko_renderer from \"marko/dist/runtime/components/renderer\";\nimport { t as _t } from \"marko/dist/runtime/html\";\nconst _marko_componentType = \"HH41vovz\",\n      _marko_component = {};\n_marko_template._ = _marko_renderer(function (input, out, _component, component, state) {\n  out.___flush = out.flush;\n  out.___end = out.end;\n  out.___renderAssets = renderAssets;\n  out.___assets = manifest.getAssets(\":name_L5D7\", out.global.buildName);\n  out.flush = outFlushOverride;\n  out.end = outEndOverride;\n\n  _marko_tag(template, input, out, _component, \"0\");\n\n  _marko_tag(_initComponents, {}, out, _component, \"1\");\n\n  _marko_tag(_awaitReorderer, {}, out, _component, \"2\");\n}, {\n  t: _marko_componentType,\n  i: true\n}, _marko_component);\n_marko_template.meta = {\n  id: _marko_componentType,\n  deps: [\"./style.css\"],\n  tags: [\"./index.marko\", \"marko/src/core-tags/components/init-components-tag.js\", \"marko/src/core-tags/core/await/reorderer-renderer.js\"]\n};","import \"<code-block-marko>\";\nimport documentLookup from \"../../../utils/document-lookup\";\n\n$ const { params } = input;\n$ const doc = documentLookup[params.name];\n\n<app-layout.docs title=doc.title currentDoc=params.name toc=doc.toc footer=false>\n    <div.doc-layout>\n        <div.doc-container>\n            <div.doc-content>\n                <if(!doc.overview)>\n                    <${doc.template}/>\n                    <edit-on-github ...doc/>\n                    <contributors ...doc/>\n                </if>\n                <else>\n                    <document-overview ...doc/>\n                </else>\n                <app-footer.doc-footer/>\n            </div>\n        </div>\n    </div>\n</app-layout>\n","import path from \"path\";\nimport structure from \"marko/docs/structure.json\";\nimport importAll from \"import-all.macro\";\nimport formatSlug from \"./format-slug\";\nimport tocRegistry from \"./toc-registry\";\n\nconst documentLookup = {};\nconst docsByRepo = {\n  \"marko-js/marko\": {\n    trim: \"../../node_modules/\",\n    prefix: \"packages/\",\n    docs: importAll.sync(\"../../node_modules/marko/docs/*.md\")\n  },\n  \"marko-js/examples\": {\n    trim: \"../../examples/\",\n    docs: importAll.sync(\"../../examples/examples/color-picker/README.md\")\n  }\n}\n\nObject.keys(docsByRepo).forEach(repo => {\n  const { trim, prefix = \"\", docs } = docsByRepo[repo];\n  Object.keys(docs).forEach(filePath => {\n    const slug = fileNameToSlug(filePath);\n    const doc = docs[filePath];\n    const repoPath = filePath.replace(trim, prefix);\n    documentLookup[slug] = {\n      repo,\n      repoPath,\n      template: doc.default,\n      toc: tocRegistry.get(filePath)\n    };\n  });\n});\n\nfunction fileNameToSlug(file) {\n  let slug;\n  do {\n    slug = path.basename(file, \".md\");\n    file = path.dirname(file);\n  } while (slug === \"README\");\n  return slug;\n}\n\nstructure.forEach(doc => {\n  addOverviewDoc(doc);\n  \n  function addOverviewDoc(doc, parentSlug) {\n    const { title, docs } = doc;\n    const titleSlug = formatSlug(title);\n\n    // If one of the child docs is an object, \n    // it is nested and we need to create an outline for it\n    docs.forEach(childDoc => {\n      if (typeof childDoc === \"object\") {\n        addOverviewDoc(childDoc, titleSlug);\n      }\n    });\n\n    let docName;\n\n    if (parentSlug) {\n      docName = `${parentSlug}-${titleSlug}-overview`;\n    } else {\n      docName = `${titleSlug}-overview`;\n    }\n\n    documentLookup[docName] = {\n      overview: true,\n      title,\n      docs\n    };\n  }\n});\n\nexport default documentLookup","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../examples/examples/color-picker/README.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#introduction\\\">Introduction</a></li><li><a href=\\\"#getting-started\\\">Getting Started</a></li><li><a href=\\\"#creating-components\\\">Creating Components</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#child-components\\\">Child Components</a></li></ul></li><li><a href=\\\"#importing-modules\\\">Importing Modules</a></li><li><a href=\\\"#testing\\\">Testing</a></li><li><a href=\\\"#conclusion\\\">Conclusion</a></li><li><a href=\\\"#additional-resources\\\">Additional Resources</a></li></ul>\");\n-----\n<h1 id=\"building-a-color-picker-component\"><a name=\"building-a-color-picker-component\" class=\"anchor\" href=\"#building-a-color-picker-component\"><span class=\"header-link\"></span></a>Building a Color Picker Component</h1><p align=\"center\">\n  <img width=\"100%\" src=\"https://user-images.githubusercontent.com/3771924/26844826-b2334098-4ac2-11e7-81ac-ca2280ef3bbd.png\">\n</p>\n\n<h2 id=\"introduction\"><a name=\"introduction\" class=\"anchor\" href=\"#introduction\"><span class=\"header-link\"></span></a>Introduction</h2><p>Marko makes building UI components extremely easy and fun! Today we are going\nto build a color picker component from scratch. We are going to learn how to:</p>\n<ul>\n<li>Create a project using <a href=\"https://github.com/marko-js/cli\">marko-cli</a></li>\n<li>Create a basic and customizable color picker component</li>\n</ul>\n<p>Our final goal for today is create this component:</p>\n<!-- <color-picker colors=['#333745','#E63462','#FE5F55','#C7EFCF','#EEF5DB','#00B4A6','#007DB6','#FFE972','#9C7671','#0C192B']/>() -->\n<p align=\"center\">\n  <img src=\"https://image.ibb.co/gcmLFk/color_picker_complete.png\">\n</p>\n<!-- </> -->\n\n<p><a href=\"/try-online/?example=Color+Picker\">Try Online</a></p>\n<h2 id=\"getting-started\"><a name=\"getting-started\" class=\"anchor\" href=\"#getting-started\"><span class=\"header-link\"></span></a>Getting Started</h2><p>The quickest way to get up and running with Marko is to use the <a href=\"https://github.com/marko-js/cli/blob/master/packages/create/README.md\"><code>@marko/create</code> cli</a>.</p>\n<p>For this tutorial lets tell <code>@marko/create</code> to give us a basic boilerplate by running the following command:</p>\n<code-block lang=\"bash\" lines=\"\">npx @marko/create --template basic --name color-picker-tutorial</code-block><p>Once the create command has finished, we can move into our new directory and get a development server up and running like so:</p>\n<code-block lang=\"bash\" lines=\"\">cd ./color-picker-tutorial\nnpm run dev</code-block><p>This should open your default browser automatically.</p>\n<h2 id=\"creating-components\"><a name=\"creating-components\" class=\"anchor\" href=\"#creating-components\"><span class=\"header-link\"></span></a>Creating Components</h2><blockquote class=\"null\"><p>NOTE: For a more detailed documentation of components, please see the\n<a href=\"/docs/class-components/\">markojs.com components documentation</a></p>\n</blockquote><p>In our new project, components are located in the <code>color-picker-tutorial/src/components/</code>\ndirectory. Next we need to create our component in the <code>components/</code> directory,\nwhich should look like this:</p>\n<code-block lang=\"\" lines=\"\">color-picker-tutorial/\n  src/\n    components/\n      color-picker/\n        index.marko</code-block><p>Marko also supports creating components using the file name. For example, the\nfollowing is a valid directory structure:</p>\n<code-block lang=\"\" lines=\"\">color-picker-tutorial/\n  src/  \n    components/\n      color-picker.marko</code-block><p>Creating nested component directories is not required, but we recommend\nisolating most components in their own directories. Many components will contain\nadditional files and tests that live alongside the component. Too many components\nliving in a single directory will become very untidy and difficult to manage.</p>\n<p>Let&#39;s begin by adding some initial component code to the <code>color-picker</code>.</p>\n<p><strong>components/color-picker/index.marko</strong></p>\n<code-block lang=\"marko\" lines=\"\"><ul>\n  <for|color| of=input.colors>\n    <li style={color: color}>\n      &#36;{color}\n    </li>\n  </for>\n</ul></code-block><p><code>input</code> in a Marko component is the input data that is passed to the component when\nit is being rendered. Let&#39;s modify our <code>index</code> route to demonstrate how a\nparent component can use our <code>color-picker</code>:</p>\n<p><strong>src/pages/index.marko</strong></p>\n<code-block lang=\"marko\" lines=\"\"><html>\n  <head>\n    <title>Welcome | Marko Demo</title>\n  </head>\n  <body>\n    <h1>Welcome to Marko!</h1>\n    <color-picker colors=[\n      '#333745',\n      '#E63462',\n      '#FE5F55',\n      '#C7EFCF',\n      '#EEF5DB',\n      '#00B4A6',\n      '#007DB6',\n      '#FFE972',\n      '#9C7671',\n      '#0C192B'\n    ]/>\n  </body>\n</html></code-block><p>Our dev server will indicate that the changes are being compiled and our browser will refresh for us once the process completes.\nThe page should now display an unordered list with list items for each of the colors that we passed as <code>input</code> to our component.</p>\n<!-- <color-list colors=['#333745','#E63462','#FE5F55','#C7EFCF','#EEF5DB','#00B4A6','#007DB6','#FFE972','#9C7671','#0C192B']/>() -->\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/3771924/26837085-83315144-4aaa-11e7-8a08-2863a6448134.png\">\n</p>\n<!-- </> -->\n\n<h3 id=\"child-components\"><a name=\"child-components\" class=\"anchor\" href=\"#child-components\"><span class=\"header-link\"></span></a>Child Components</h3><p>We&#39;ve created our first component! This component will eventually have nested\ncomponents. When creating components, it&#39;s\nstrongly recommended to consider how components can be broken down into\nmultiple components. Each component can then be independently developed and tested.</p>\n<p>Let&#39;s split our component into the following components:</p>\n<ul>\n<li><code>&lt;color-picker-header&gt;</code>: The header will have the selected background color\nfrom the color picker and show the selected color&#39;s hex value</li>\n</ul>\n<!-- <color-picker-header color='#333745'/>() -->\n<p align=\"center\">\n  <img src=\"https://image.ibb.co/kybsT5/color_picker_header.png\">\n</p>\n<!-- </> -->\n\n<ul>\n<li><code>&lt;color-picker-footer&gt;</code>: The footer will contain a palette of colors and an\ninput field for changing the hex value of the header</li>\n</ul>\n<!-- <color-picker-footer colors=['#333745','#E63462','#FE5F55','#C7EFCF','#EEF5DB','#00B4A6','#007DB6','#FFE972','#9C7671','#0C192B']/>() -->\n<p align=\"center\">\n  <img src=\"https://image.ibb.co/kjiT1Q/color_picker_footer.png\">\n</p>\n<!-- </> -->\n\n<p><code>&lt;color-picker-selection&gt;</code>: The selection component is responsible for\ndisplaying an individual color box and handling the associated click events</p>\n<!-- <color-picker-selection color='#333745'/>() -->\n<p align=\"center\">\n  <img src=\"https://image.ibb.co/nRvxvk/color_picker_selection.png\">\n</p>\n<!-- </> -->\n\n<p>Marko automatically registers all components in nested <code>components/</code>\ndirectories. Our new directory structure should look like this:</p>\n<code-block lang=\"\" lines=\"\">components/\n  color-picker/\n    index.marko\n  color-picker-footer/\n    index.marko\n  color-picker-header/\n    index.marko\n  color-picker-selection/\n    index.marko</code-block><p>Let&#39;s start with with the <code>&lt;color-picker-header&gt;</code> component. We&#39;ve already\ndetermined that the header should have a specific background color and display\nthe value of that background color in text. The color to display should be passed in as part of the input.</p>\n<p><strong>src/components/color-picker-header/index.marko</strong></p>\n<code-block lang=\"marko\" lines=\"\">// Inline styles!\nstyle {\n  .color-picker-header {\n    width: 200px;\n    height: 100px;\n    border-radius: 20px 20px 0 0;\n    font: 30px Arial;\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n    color: white;\n  }\n  .color-picker-header > p {\n    padding-top: 1.15em;\n    margin: 0;\n  }\n}\n\n// In Marko, we immediately start writing a single JavaScript statement by using\n// `&#36;`. For multiple JavaScript statements, use `&#36; { /* JavaScript here */ }\n&#36; const color = input.color;\n\n<!-- Our markup! -->\n<div.color-picker-header style={backgroundColor: color}>\n  <p>&#36;{color}</p>\n</div></code-block><p>That&#39;s it! Our <code>&lt;color-picker-header&gt;</code> is complete with styles and component\nlogic. This component is small enough to be contained in a single file, but\nas components grow larger, we should split out the markup, component logic, and\nstyling. We will see an example of this soon.</p>\n<p>Now let&#39;s look at what&#39;s going on. Marko has several\n<a href=\"/docs/class-components/#lifecycle-events\">lifecycle methods</a> including\n<code>onInput</code>, which contains a single parameter <code>input</code>. As we discussed before\n<code>input</code> is the data that is passed to a Marko component upon initialization.\nWe can use inline javascript easily with <code>&amp;#36;</code> (for a single statement) or <code>&amp;#36; { /* ... */ }</code> (for multiple statements),\nwhich is great for creating variables that can be accessed inside of your\ntemplate. Additionally, single file components support inline styles, so the\ncomponent can truly be contained as a single unit if it&#39;s small enough.</p>\n<p>Now we need to revisit our parent component and add the <code>&lt;color-picker-header&gt;</code>\ntag to it, so it will be rendered.</p>\n<p><strong>src/components/color-picker/index.marko</strong></p>\n<code-block lang=\"marko\" lines=\"\">class {\n  onInput(input) {\n    const colors = input.colors;\n\n    this.state = {\n      selectedColor: colors[0],\n      colors\n    };\n  }\n}\n\n<div>\n  <color-picker-header color=state.selectedColor/>\n</div></code-block><p>Marko will automatically watch the <code>state</code> object for changes using getters and setters, and if the state changes then the UI component will be re-rendered and the DOM will automatically be updated.</p>\n<p>We should now see see the rendered <code>&lt;color-picker-header&gt;</code> with a gray background like so:</p>\n<!-- <color-picker-header color='#333745'/>() -->\n<p align=\"center\">\n  <img src=\"https://image.ibb.co/kybsT5/color_picker_header.png\">\n</p>\n<!-- </> -->\n\n<p>Now let&#39;s create the <code>&lt;color-picker-selection&gt;</code> component, which will be used\ninside of the <code>&lt;color-picker-footer&gt;</code>:</p>\n<p><strong>src/components/color-picker-selection/index.marko</strong></p>\n<code-block lang=\"marko\" lines=\"\">class {\n  handleColorSelected() {\n    this.emit('color-selected');\n  }\n}\n\nstyle {\n  .color-picker-selection {\n    width: 25px;\n    height: 25px;\n    border-radius: 5px 5px 5px 5px;\n    display: flex;\n    flex-direction: column;\n    margin: 5px 0px 0px 5px;\n    float: left;\n  }\n}\n\n<div.color-picker-selection\n  on-click('handleColorSelected')\n  on-touchstart('handleColorSelected')\n  style={\n    backgroundColor: input.color\n  }/></code-block><p>In this component, we&#39;ve introduced <code>on-click</code> and <code>on-touchstart</code> listeners and a single event handler function.\n<a href=\"/docs/events/\">Marko components inherit from EventEmitter</a>.\nWhen this color is selected, it will emit a <code>click</code> event and get handled by the\n<code>handleColorSelected</code> function. The handler then emits a <code>color-selected</code> event to be handled by its parent. We will eventually write code to relay this information back to the <code>&lt;color-picker-header&gt;</code>, so its background\ncolor and text can be changed.</p>\n<p>We are ready to create our final component, <code>&lt;color-picker-footer&gt;</code>. This\ncomponent is going to contain a bit more logic than the other components, so\nlet&#39;s split it out into multiple files:</p>\n<code-block lang=\"\" lines=\"\">components/\n  color-picker/\n    components/\n      color-picker-footer/\n        component.js\n        index.marko\n        style.css\n      ...\n    ...</code-block><p><strong>src/components/color-picker-footer/index.marko</strong></p>\n<code-block lang=\"marko\" lines=\"\">&#36; const colors = input.colors;\n\n<div.color-picker-footer>\n  <div.color-picker-selection-container>\n    <for|color| of=colors>\n      <div>\n        <!--\n        Listen for the `color-selected` event emitted from the\n        <color-picker-selection> component and handle it in this\n        component's `handleColorSelected` method.\n        NOTE: We pass along the `color` to the event handler method\n        -->\n        <color-picker-selection\n          color=color\n          on-color-selected('handleColorSelected', color)/>\n      </div>\n      <input\n        key=\"hexInput\"\n        placeholder=\"Hex value\"\n        on-input('handleHexInput')/>\n    </for>\n  </div>\n</div></code-block><p>In the <code>&lt;color-picker-footer&gt;</code> component we need to iterate over each color that was passed as input in <code>colors</code>. For each color, we create a <code>&lt;color-picker-selection&gt;</code> component and pass the color using the <code>color</code> attribute. Additionally, we are listening for the <code>color-selected</code> event emitted from the <code>&lt;color-picker-selection&gt;</code> component and handling it in our own <code>handleColorSelected</code> method. We provide the <code>color</code> as the second argument so that it will be available to the event handler method. We also have added an <code>input</code> field and a <code>on-input</code> listener, which will trigger a change to the selected color when the user manually enters a hex color value.</p>\n<p><strong>src/components/color-picker-footer/component.js</strong></p>\n<code-block lang=\"javascript\" lines=\"\">module.exports = class {\n  handleColorSelected (color) {\n    this.emit('color-selected', color);\n  }\n  handleHexInput () {\n    let hexInput = this.getEl('hexInput').value;\n\n    if (!hexInput.startsWith('#')) {\n      hexInput = '#' + hexInput;\n    }\n\n    if (!isValidHexValue(hexInput)) {\n      hexInput = this.input.colors[0];\n    }\n\n    this.emit('colorSelected', hexInput);\n  }\n};\n\nfunction isValidHexValue (hexValue) {\n  return /^#[0-9A-F]{6}&#36;/i.test(hexValue);\n}</code-block><p>When the component logic is split out from the <code>index.marko</code> it needs to be\nexported like a standard JavaScript module. We have an <code>handleColorSelected</code>\nevent handler, which is going to emit the event back up to the parent <code>&lt;color-picker-header&gt;</code> component. We also have an <code>handleHexInput</code> event handler\nwith some basic validation logic. <code>handleHexInput</code> also emits <code>color-selected</code>, which\nwill be handled the same way as the <code>color-selected</code> event when it reaches\n<code>&lt;color-picker-header&gt;</code>.</p>\n<p><strong>src/components/color-picker-footer/style.css</strong></p>\n<code-block lang=\"css\" lines=\"\">.color-picker-footer {\n  width: 200px;\n  height: 100px;\n  border-radius: 0px 0px 20px 20px;\n  font: 30px Arial;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  color: white;\n  box-shadow: 0px 3px 5px #888888;\n}\n.color-picker-selection-container {\n  width: 75%;\n  margin: 5px 0px 0px 20px;\n}\n.color-picker-selection-container input {\n  margin-top: 8px;\n  border-radius: 0px 0px 0px 0px;\n  border-width: 0px 0px 1px 0px;\n  outline: none;\n  color: #A9A9A9;\n}</code-block><p>We can now finalize our component! Let&#39;s revisit the parent <code>&lt;color-picker&gt;</code>\ncomponent and add the <code>&lt;color-picker-footer&gt;</code>:</p>\n<p><strong>src/components/color-picker/index.marko</strong></p>\n<code-block lang=\"marko\" lines=\"\">class {\n  onInput(input) {\n    const colors = input.colors;\n\n    this.state = {\n      selectedColor: colors[0],\n      colors\n    };\n  }\n\n  handleColorSelected(color) {\n    this.state.selectedColor = color;\n  }\n}\n\n<div>\n  <color-picker-header color=state.selectedColor/>\n  <color-picker-footer colors=state.colors on-color-selected('handleColorSelected')/>\n</div></code-block><p>Finally, we&#39;ve added our <code>&lt;color-picker-footer&gt;</code>, passed the <code>state.colors</code>\nas <code>input</code> to it, added a <code>handleColorSelected</code> event handler for the <code>color-selected</code>\nevent emitted from <code>&lt;color-picker-footer&gt;</code>. When we handle this event, we\nupdate the <code>state</code> of the <code>&lt;color-picker&gt;</code> component, which is passed to\nthe <code>&lt;color-picker-header&gt;</code>.</p>\n<p>Congratulations! You have finished your first fully reactive Marko UI component!</p>\n<p>Our finished product:</p>\n<!-- <color-picker colors=['#333745','#E63462','#FE5F55','#C7EFCF','#EEF5DB','#00B4A6','#007DB6','#FFE972','#9C7671','#0C192B']/>() -->\n<p align=\"center\">\n  <img src=\"https://image.ibb.co/gcmLFk/color_picker_complete.png\">\n</p>\n<!-- </> -->\n\n<hr>\n<p>Now let&#39;s talk about some additional topics that will turn you into a Marko pro!</p>\n<h2 id=\"importing-modules\"><a name=\"importing-modules\" class=\"anchor\" href=\"#importing-modules\"><span class=\"header-link\"></span></a>Importing Modules</h2><p>Marko also supports importing modules. We can easily import a module using\nthe familiar ES2015 <code>import</code> syntax for single file components.</p>\n<p>Let&#39;s create a new helper module for generating the default colors:</p>\n<p><strong>src/util/getDefaultColors.js</strong></p>\n<code-block lang=\"js\" lines=\"\">module.exports = function getDefaultColors () {\n  return [\n    \"#1ABC9C\",\n    \"#2ECC71\",\n    \"#3498DB\",\n    \"#9B59B6\",\n    \"#34495E\",\n    \"#16A085\",\n    \"#27AE60\",\n    \"#2980B9\",\n    \"#8E44AD\",\n    \"#2C3E50\"\n  ];\n};</code-block><p>We can import our helper module into the <code>color-picker</code> and use the generated\ncolors as the default when none are passed as part of the <code>input</code>:</p>\n<p><strong>components/color-picker/index.marko</strong></p>\n<code-block lang=\"marko\" lines=\"\">import getDefaultColors from './util/getDefaultColors';\n\nclass {\n  onInput(input) {\n    const colors = input.colors || getDefaultColors();\n\n    this.state = {\n      selectedColor: colors[0],\n      colors\n    };\n  }\n\n  handleColorSelected(color) {\n    this.state.selectedColor = color;\n  }\n}\n\n<div>\n  <color-picker-header color=state.selectedColor/>\n  <color-picker-footer colors=state.colors on-color-selected('handleColorSelected')/>\n</div></code-block><p>If we do not pass <code>colors</code> to the <code>&lt;color-picker&gt;</code>, the colors will default\nto the colors obtained our <code>getDefaultColors</code> helper.</p>\n<p><a href=\"/try-online/?example=Color+Picker\">Try Online: marko-color-picker</a></p>\n<h2 id=\"testing\"><a name=\"testing\" class=\"anchor\" href=\"#testing\"><span class=\"header-link\"></span></a>Testing</h2><p>For testing Marko components we recommend using <a href=\"https://github.com/marko-js/testing-library\">Marko Testing Library</a></p>\n<h2 id=\"conclusion\"><a name=\"conclusion\" class=\"anchor\" href=\"#conclusion\"><span class=\"header-link\"></span></a>Conclusion</h2><p>Developing Marko UI components is fun and easy! As you&#39;re developing\ncomponents, you should consider how a component can be split into multiple\ncomponents. This makes developing, managing, and testing components\nsignificantly easier.</p>\n<p>Marko gives you the tools to easily develop awesome UI components. Get started\ntoday!</p>\n<h2 id=\"additional-resources\"><a name=\"additional-resources\" class=\"anchor\" href=\"#additional-resources\"><span class=\"header-link\"></span></a>Additional Resources</h2><ul>\n<li><a href=\"https://github.com/marko-js/examples/tree/master/examples/color-picker\">GitHub: marko-color-picker</a></li>\n<li><a href=\"/try-online/?example=Color+Picker\">Try Online: Color Picker</a></li>\n<li><a href=\"https://github.com/marko-js/cli\">marko-cli</a></li>\n<li><a href=\"https://github.com/marko-js/testing-library\">Marko Testing Library</a></li>\n</ul>\n<hr>\n<blockquote class=\"null\"><p>Special thanks to <a href=\"https://github.com/newyork-anthonyng\">Anthony Ng</a> for helping with this tutorial!</p>\n</blockquote>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/10-awesome-marko-features.md\", \"<ul class=\\\"toc toc-level1\\\"><li><ul class=\\\"toc toc-level2\\\"><li><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#1-shorthand-attributes\\\">1. Shorthand Attributes</a></li><li><a href=\\\"#2-all-attribute-values-are-just-javascript\\\">2. All attribute values are Just JavaScript™</a></li><li><a href=\\\"#3-isomorphic-ui-components-made-easy\\\">3. Isomorphic UI components made easy</a></li><li><a href=\\\"#4-concise-syntax\\\">4. Concise syntax</a></li><li><a href=\\\"#5-import-javascript-modules\\\">5. Import JavaScript modules</a></li><li><a href=\\\"#6-no-need-to-import-custom-tags-its-a-good-thing-trust-me\\\">6. No need to import custom tags ()</a></li><li><a href=\\\"#7-use-javascript-to-set-css-classes-and-styles\\\">7. Use JavaScript to set CSS classes and styles</a></li><li><a href=\\\"#8-inline-javascript-statements\\\">8. Inline JavaScript Statements</a></li><li><a href=\\\"#9-async-rendering-with-the-await-tag\\\">9. Async rendering with the &lt;await&gt; tag</a></li><li><a href=\\\"#10-server-side-rendering-is-easy\\\">10. Server side rendering is easy</a></li><li><a href=\\\"#bonus-friendly-compile-time-errors\\\">Bonus: Friendly compile-time errors</a></li></ul></li></ul></li></ul>\");\n-----\n<a href=\"#\">\n  <img src=\"https://cdn-images-1.medium.com/max/1000/1*Cmy6UutD5-ogL8dr1DySMQ.png\" alt=\"Marko logo\" width=\"100%\" />\n</a><br />\n\n<p>You can find the original <a href=\"https://medium.com/@austinkelleher/10-awesome-marko-features-afba9d094d42\">&quot;10 Awesome Marko Features&quot; article here</a>!</p>\n<h1 id=\"10-awesome-marko-features\"><a name=\"10-awesome-marko-features\" class=\"anchor\" href=\"#10-awesome-marko-features\"><span class=\"header-link\"></span></a>10 Awesome Marko Features</h1><p><a href=\"/\">Marko</a> is a friendly and super fast UI library that makes\nbuilding web apps<br> fun! In celebration of rapidly approaching <a href=\"https://github.com/marko-js/marko\">5,000 stars on\nGitHub</a> (the ultimate open source vanity\nmetric), here are 10 features that will make you more productive in no\nparticular order...</p>\n<h4 id=\"1-shorthand-attributes\"><a name=\"1-shorthand-attributes\" class=\"anchor\" href=\"#1-shorthand-attributes\"><span class=\"header-link\"></span></a>1. Shorthand Attributes</h4><p>Tired of constantly typing out <code>class</code> and <code>id</code> attributes? No need with Marko.\nSimply utilize the shorthand based on CSS selectors:</p>\n<code-block lang=\"marko\" lines=\"\">style {\n  .count {\n    color:#09c;\n  }\n}\n\n// Equivalent to <div class=\"count\"/>\n<div.count/>\n\n// Equivalent to <span id=\"my-id\"/>\n<span#my-id/>\n\n// Combined\n<button#submit.primary/></code-block><h4 id=\"2-all-attribute-values-are-just-javascript\"><a name=\"2-all-attribute-values-are-just-javascript\" class=\"anchor\" href=\"#2-all-attribute-values-are-just-javascript\"><span class=\"header-link\"></span></a>2. All attribute values are Just JavaScript™</h4><p>Unlike with HTML, you are not limited to string attribute values when using\nMarko. Attributes can have types, which makes it really easy to pass data to\ncustom tags and it works for standard HTML tags too:</p>\n<code-block lang=\"marko\" lines=\"\"><div class=input.myClassName/>\n<input type=\"checkbox\" checked=input.isChecked/>\n<awesome-component myString=\"Hello\"/>\n<awesome-component myNumber=1/>\n<awesome-component myTemplateString=`Hello &#36;{name}`/>\n<awesome-component myBoolean=true/>\n<awesome-component myArray=[1, 2, 3]/>\n<awesome-component myObject={hello: 'world'}/>\n<awesome-component myVariable=name/>\n<awesome-component myFunctionCall=input.foo()/></code-block><h4 id=\"3-isomorphic-ui-components-made-easy\"><a name=\"3-isomorphic-ui-components-made-easy\" class=\"anchor\" href=\"#3-isomorphic-ui-components-made-easy\"><span class=\"header-link\"></span></a>3. Isomorphic UI components made easy</h4><p>Tired of boilerplate code and trouble managing component input and state? Marko\nmakes it a breeze to develop self-contained and individually testable\ncomponents. Changing state is completely synchronous, so there won’t be any\nheadaches. You can also use inline styles making it very easy to develop small\ncomponents quickly.</p>\n<code-block lang=\"marko\" lines=\"\">class {\n  onInput(input) {\n    this.state = {\n      count: input.count || 0\n    };\n  }\n  increment() {\n    this.state.count++;\n  }\n}\n\nstyle {\n  .count {\n    color:#09c;\n  }\n}\n\n<div.count>&#36;{state.count}</div>\n<button on-click('increment')>\n  Click me!\n</button></code-block><p>Do you see references to “Marko” in the snippet above? Yeah, me neither.</p>\n<p>Is your component becoming too large? Do you prefer separating your CSS,\nJavaScript, and markup code? No problem. You can easily <a href=\"/docs/class-components/#multi-file-components\">rip out your code into\nmultiple files</a>:</p>\n<code-block lang=\"\" lines=\"\">components/\n  click-counter/\n    component.js\n    index.marko\n    style.css</code-block><h4 id=\"4-concise-syntax\"><a name=\"4-concise-syntax\" class=\"anchor\" href=\"#4-concise-syntax\"><span class=\"header-link\"></span></a>4. Concise syntax</h4><p>The DOM is just a tree structure. Indentation is a great way to describe a DOM\ntree without having to worry about matching up beginning and ending tags. Marko\nlets you choose between a concise, indentation-based syntax, and a familiar HTML\nsyntax:</p>\n<code-block lang=\"marko\" lines=\"\"><!-- Count our clicks! -->\n<div.count>\n  <p>Count: &#36;{state.count}</p>\n</div>\n<button.example-button on-click('increment')>\n  Click me!\n</button></code-block><p>Here’s the same thing with the concise syntax:</p>\n<code-block lang=\"marko\" lines=\"\">// Count our clicks!\ndiv.count\n  p -- Count: &#36;{state.count}\nbutton.example-button on-click('increment') — Click me!</code-block><p>Can’t make up your mind or just want to paste in that code snippet from\nStackOverflow? HTML syntax can be used within in the concise syntax. You’ll come\nback and make it consistent…<em>one day</em>.</p>\n<h4 id=\"5-import-javascript-modules\"><a name=\"5-import-javascript-modules\" class=\"anchor\" href=\"#5-import-javascript-modules\"><span class=\"header-link\"></span></a>5. Import JavaScript modules</h4><p>Do you have some helper JavaScript functions that you need to use in your views?\nMarko let’s you import any JavaScript module into your template using the same\nsyntax as the JavaScript <code>import</code> statement without using Babel or any other\nbuild tool. No need for problematic globals (you could do that too, but please\ndon’t or your coworkers will hate you).</p>\n<code-block lang=\"marko\" lines=\"\">import sum from './utils/sum';\n\n<div>The sum of 2 + 3 is &#36;{sum(2, 3)}</div></code-block><h4 id=\"6-no-need-to-import-custom-tags-its-a-good-thing-trust-me\"><a name=\"6-no-need-to-import-custom-tags-its-a-good-thing-trust-me\" class=\"anchor\" href=\"#6-no-need-to-import-custom-tags-its-a-good-thing-trust-me\"><span class=\"header-link\"></span></a>6. No need to import custom tags (it’s a good thing, trust me)</h4><p>Marko uses your directory structure as a method for automatically registering\ncustom tags. This means that Marko can implicitly import tags based on where the\ntemplate is located on disk. Marko will search up the directory looking for\ncustom tags in <code>components/</code>directories similar to how Node.js discovers modules\nin <code>node_modules/</code> directories.</p>\n<p>Given the following directory structure:</p>\n<code-block lang=\"\" lines=\"\">components/\n  fancy-button/\n    index.marko\n  fancy-container/\n    index.marko</code-block><p>If <code>fancy-button</code> is used inside of <code>fancy-container</code>, it will be implicitly<br>\nimported:</p>\n<code-block lang=\"marko\" lines=\"\"><!-- No need to use `require` or `import` because it will implicitly import custom tags -->\n<div>\n  <fancy-button color=input.buttonColor/>\n</div></code-block><h4 id=\"7-use-javascript-to-set-css-classes-and-styles\"><a name=\"7-use-javascript-to-set-css-classes-and-styles\" class=\"anchor\" href=\"#7-use-javascript-to-set-css-classes-and-styles\"><span class=\"header-link\"></span></a>7. Use JavaScript to set CSS classes and styles</h4><p>Setting CSS classes and styles is made easy using JavaScript! Marko will happily\naccept simple strings, JavaScript objects and arrays (<em>falsy values will be\nignored).</em></p>\n<code-block lang=\"marko\" lines=\"\">&#36; const fontColor = input.color || 'blue';\n&#36; const isActive = input.active === true;\n\n<div class=['person', isActive &amp;&amp; 'active']\n  style={color: fontColor} /></code-block><h4 id=\"8-inline-javascript-statements\"><a name=\"8-inline-javascript-statements\" class=\"anchor\" href=\"#8-inline-javascript-statements\"><span class=\"header-link\"></span></a>8. Inline JavaScript Statements</h4><p>Marko takes HTML and makes it more like JavaScript. You can exit out of HTML\nmode to embed a JavaScript statement by starting the line with a <code>&amp;#36;</code>. You can\nuse this feature to embed JavaScript variables, functions, etc. where they are\nneeded (take that, “separation of concerns”).</p>\n<code-block lang=\"marko\" lines=\"\">&#36; const randomNumber = Math.random();\n&#36; const person = {\n  name: 'Frank',\n  age: 32\n};\n\n<div>Random number: &#36;{randomNumber}</div>\n<div>&#36;{person.name} is &#36;{person.age} years old</div></code-block><p>If you want to combine multiple JavaScript statements you can do that too:</p>\n<code-block lang=\"marko\" lines=\"\">&#36; {\n  const randomNumber = Math.random();\n  const person = {\n    name: 'Frank',\n    age: 32\n  };\n}\n\n<div>Random number: &#36;{randomNumber}</div>\n<div>&#36;{person.name} is &#36;{person.age} years old</div></code-block><h4 id=\"9-async-rendering-with-the-await-tag\"><a name=\"9-async-rendering-with-the-await-tag\" class=\"anchor\" href=\"#9-async-rendering-with-the-await-tag\"><span class=\"header-link\"></span></a>9. Async rendering with the <code>&lt;await&gt;</code> tag</h4><p>Node.js is asynchronous. Browsers are asynchronous. Why should rendering be\nsynchronous? Pass your promise along to your template and Marko will\nasynchronously render parts of your view. Turns out, <a href=\"http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/\">this is good for\nperformance</a>.</p>\n<code-block lang=\"marko\" lines=\"\">&#36; const searchResultsPromise = searchService.performSearch(keywords);\n\n<await(searchResultsPromise)>\n  <@then|person|>\n    Hello &#36;{person.name}!\n  </@then>\n  <@catch|err|>\n    The error was: &#36;{err.message}.\n  </@catch>\n</await></code-block><h4 id=\"10-server-side-rendering-is-easy\"><a name=\"10-server-side-rendering-is-easy\" class=\"anchor\" href=\"#10-server-side-rendering-is-easy\"><span class=\"header-link\"></span></a>10. Server side rendering is easy</h4><p>Can’t decide if you want to do server-side rendering or client-side rendering?\nWhy are we even talking about this in 2017? It doesn’t matter. Seriously, just\ndo both. Marko makes this a no-brainer since you can render a Marko template\ndirectly to a stream (oh, and Marko will <a href=\"/docs/server-side-rendering/\">automatically mount UI\ncomponents</a> rendered on the\nserver when the page loads in the browser):</p>\n<code-block lang=\"js\" lines=\"\">require(\"marko/node-require\").install(); // require .marko files!\n\nconst http = require(\"http\");\nconst template = require(\"./template\");\n\nhttp\n  .createServer()\n  .on(\"request\", (req, res) => {\n    template.render(\n      {\n        name: \"Frank\",\n        count: 30,\n        colors: [\"red\", \"green\", \"blue\"]\n      },\n      res\n    );\n  })\n  .listen(8080);</code-block><h4 id=\"bonus-friendly-compile-time-errors\"><a name=\"bonus-friendly-compile-time-errors\" class=\"anchor\" href=\"#bonus-friendly-compile-time-errors\"><span class=\"header-link\"></span></a>Bonus: Friendly compile-time errors</h4><p>We all make mistakes <em>every now and then</em>. Typo in your custom tag? Forgot an\nending tag? No worries! Marko will give you a friendly error message and point\nyou right to the problematic code.</p>\n<code-block lang=\"marko\" lines=\"\"><!-- Ahhhh typo! This should be <fancy-button/> -->\n<fancy-buttn/></code-block><p>You may have missed it, but it was obvious to Marko:</p>\n<code-block lang=\"\" lines=\"\">Unrecognized tag: fancy-buttn — More details: https://github.com/marko-js/marko/wiki/Error:-Unrecognized-Tag at line 2 col 1</code-block><p>Coming soon: auto correction and autonomous coding</p>\n<hr>\n<p>_Cover image credit:\n_<a href=\"https://commons.wikimedia.org/wiki/File:Amanhecer_no_Hercules_--.jpg\">Wikipedia</a></p>\n\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/body-content.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#rendering-body-content\\\">Rendering body content</a></li><li><a href=\\\"#passing-attributes-to-body-content\\\">Passing attributes to body content</a></li><li><a href=\\\"#named-body-content\\\">Named body content</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#repeated-attribute-tags\\\">Repeated attribute tags</a></li><li><a href=\\\"#attributes-on-attribute-tags\\\">Attributes on attribute tags</a></li><li><a href=\\\"#nested-attribute-tags\\\">Nested attribute tags</a></li><li><a href=\\\"#dynamic-attribute-tags\\\">Dynamic attribute tags</a></li></ul></li></ul>\");\n-----\n<h1 id=\"body-content\"><a name=\"body-content\" class=\"anchor\" href=\"#body-content\"><span class=\"header-link\"></span></a>Body content</h1><p>We&#39;re used to passing body content to HTML tags. When you do this, the tag has control over where and when this content is rendered. A good example of this is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details\">HTML <code>&lt;details&gt;</code> element</a>:</p>\n<code-block lang=\"html\" lines=\"\"><details>\n  <summary>Hello <strong>World</strong></summary> This is some\n  <em>content</em> that can be toggled.\n</details></code-block><p>This is what it renders (try clicking it):</p>\n<hr>\n<details>\n    <summary>Hello <strong>World</strong></summary>\n    This is some <em>content</em> that can be toggled.\n</details>\n\n<hr>\n<p>Custom tags can also receive content in the same way. This allows a component to give its user full control over <em>how</em> some section of the content is rendered, but control <em>where</em>, <em>when</em>, and with <em>what</em> data it is rendered. This feature is necessary to build composable components like overlays, layouts, dropdowns, etc. Imagine a <code>&lt;table&gt;</code> that didn&#39;t give you control over how its cells were rendered. That would be pretty limited!</p>\n<h2 id=\"rendering-body-content\"><a name=\"rendering-body-content\" class=\"anchor\" href=\"#rendering-body-content\"><span class=\"header-link\"></span></a>Rendering body content</h2><p>When a custom tag is passed body content, it is received as a special <code>renderBody</code> property on the component&#39;s <code>input</code>. You can include this content anywhere in your component by using the <a href=\"/docs/syntax/#dynamic-tagname\"><code>&lt;&amp;#36;{dynamic}&gt;</code> syntax</a>.</p>\n<p><em>components/fancy-container.marko:</em></p>\n<code-block lang=\"marko\" lines=\"\"><div class=\"container fancy\">\n    <&#36;{input.renderBody}/>\n</div></code-block><p>If we were to use this tag like this:</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><fancy-container>\n    <p>Content goes here...</p>\n</fancy-container></code-block><p>The rendered output would be:</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><div class=\"container fancy\"><p>Content goes here...</p></div></code-block><p>This is a pretty basic example, but you can imagine how this could be incorporated into a more advanced component to render passed content where/when needed.</p>\n<blockquote class=\"protip\"><p><strong>ProTip:</strong>\nBody content can be rendered multiple times. Or not at all.</p>\n</blockquote><h2 id=\"passing-attributes-to-body-content\"><a name=\"passing-attributes-to-body-content\" class=\"anchor\" href=\"#passing-attributes-to-body-content\"><span class=\"header-link\"></span></a>Passing attributes to body content</h2><p>When rendering body content with <code>&lt;&amp;#36;{dynamic}&gt;</code>, attributes may also be passed:</p>\n<p><em>components/random-value.marko:</em></p>\n<code-block lang=\"marko\" lines=\"\"><!-- heh, it's not actually random -->\n<&#36;{input.renderBody} number=1337 /></code-block><p>These attribute values can be received as a <a href=\"/docs/syntax/#parameters\">tag parameter</a>:</p>\n<code-block lang=\"marko\" lines=\"\"><random-value|{ number }|>\n    The number is &#36;{number}\n</random-value></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong>\nSome tags (like the above tag) may not render anything except their body content with some data. This can be quite useful, just look at the <code>&lt;for&gt;</code> and <code>&lt;await&gt;</code> tags!</p>\n</blockquote><h2 id=\"named-body-content\"><a name=\"named-body-content\" class=\"anchor\" href=\"#named-body-content\"><span class=\"header-link\"></span></a>Named body content</h2><p>You can also pass named content sections to a tag using <a href=\"/docs/syntax/#attribute-tag\">attribute tags</a> which are denoted by the <code>@</code> prefix.</p>\n<code-block lang=\"marko\" lines=\"\"><layout>\n    <@heading>\n        <h1>Hello Marko</h1>\n    </@heading>\n    <@content>\n        <p>...</p>\n    </@content>\n</layout></code-block><p>Like attributes, these attribute tags are received as <code>input.heading</code> and <code>input.content</code>, but they each have a <code>renderBody</code> property which we can now use:</p>\n<p><em>components/layout.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><!doctype html>\n<html>\n    <body>\n        <&#36;{input.heading.renderBody}/>\n        <hr/>\n        <&#36;{input.content.renderBody}/>\n    </body>\n</html></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> The <code>renderBody</code> property can be omitted. You could use <code>&lt;&amp;#36;{input.heading}/&gt;</code>, for example.</p>\n</blockquote><h3 id=\"repeated-attribute-tags\"><a name=\"repeated-attribute-tags\" class=\"anchor\" href=\"#repeated-attribute-tags\"><span class=\"header-link\"></span></a>Repeated attribute tags</h3><p>It is sometimes useful to allow multiple of the same attribute tag to be passed. This would allow us to, for example, build a custom table component which would allow its user to specify any number of columns, while still giving ther user control over how each column is rendered:</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><fancy-table data=people>\n    <@column|person|>\n        Name: &#36;{person.name}\n    </@column>\n    <@column|person|>\n        Age: &#36;{person.age}\n    </@column>\n</fancy-table></code-block><p>In order to receive multiple of the same attribute tag, you need to specify that the attribute tag can be repeated in a <a href=\"/docs/marko-json/#single-component-definition\"><code>marko-tag.json</code></a> file.</p>\n<p><em>components/fancy-table/marko-tag.json:</em></p>\n<code-block lang=\"js\" lines=\"\">{\n    \"@data\": \"array\",\n    \"<column>\": {\n        \"is-repeated\": true\n    }\n}</code-block><p>We can then use the <code>&lt;for&gt;</code> tag to render the body content into table, passing the row data to each column&#39;s body.</p>\n<p><em>components/fancy-table/index.marko:</em></p>\n<code-block lang=\"marko\" lines=\"4-8\"><table class=\"fancy\">\n    <for|row| of=input.data>\n        <tr>\n            <for|column| of=input.column>\n                <td>\n                    <&#36;{column.renderBody} ...row/>\n                </td>\n            </for>\n        </tr>\n    </for>\n</table></code-block><p>We now have a working <code>&lt;fancy-table&gt;</code>. Let&#39;s see what it renders:</p>\n<p><em>Example Data:</em></p>\n<code-block lang=\"js\" lines=\"\">[\n  {\n    name: \"Patrick\",\n    age: 63\n  },\n  {\n    name: \"Austin\",\n    age: 12\n  }\n];</code-block><p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><table class=\"fancy\">\n  <tr>\n    <td>Name: Patrick</td>\n    <td>Age: 63</td>\n  </tr>\n  <tr>\n    <td>Name: Austin</td>\n    <td>Age: 12</td>\n  </tr>\n</table></code-block><h3 id=\"attributes-on-attribute-tags\"><a name=\"attributes-on-attribute-tags\" class=\"anchor\" href=\"#attributes-on-attribute-tags\"><span class=\"header-link\"></span></a>Attributes on attribute tags</h3><p>If you look at our previous example, we had to prefix each cell with the column label. It would be better if we could give a name to each column instead and only render that once.</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><fancy-table>\n    <@column|person| heading=\"Name\">\n        &#36;{person.name}\n    </@column>\n    <@column|person| heading=\"Age\">\n        &#36;{person.age}\n    </@column>\n</fancy-table></code-block><p>Now, each object in the <code>input.column</code> array will contain a <code>heading</code> property in addition to its <code>renderBody</code>. We can use another <code>&lt;for&gt;</code> and render the headings in <code>&lt;th&gt;</code> tags:</p>\n<p><em>components/fancy-table/index.marko:</em></p>\n<code-block lang=\"marko\" lines=\"3-5\"><table class=\"fancy\">\n    <tr>\n        <for|column| of=input.column>\n            <th>&#36;{column.heading}</th>\n        </for>\n    </tr>\n    <for|row| of=input.data>\n        <tr>\n            <for|column| of=input.column>\n                <td>\n                    <&#36;{column.renderBody} ...row/>\n                </td>\n            </for>\n        </tr>\n    </for>\n</table></code-block><p>We&#39;ll now get a row of headings when we render our <code>&lt;fancy-table&gt;</code></p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><table class=\"fancy\">\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Patrick</td>\n    <td>63</td>\n  </tr>\n  <tr>\n    <td>Austin</td>\n    <td>12</td>\n  </tr>\n</table></code-block><h3 id=\"nested-attribute-tags\"><a name=\"nested-attribute-tags\" class=\"anchor\" href=\"#nested-attribute-tags\"><span class=\"header-link\"></span></a>Nested attribute tags</h3><p>Continuing to build on our example, what if we want to add some custom content or even components into the column headings? In this case, we can extend our <code>&lt;fancy-table&gt;</code> to use nested attribute tags. We&#39;ll now have <code>&lt;@heading&gt;</code> and <code>&lt;@cell&gt;</code> tags nested under <code>&lt;@column&gt;</code>. This gives users of our tag full control over how to render both column headings and the cells within the column!</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"3-8\"><fancy-table>\n    <@column>\n        <@heading>\n            <app-icon type=\"profile\"/> Name\n        </@heading>\n        <@cell|person|>\n            &#36;{person.name}\n        </@cell>\n    </@column>\n    <@column>\n        <@heading>\n            <app-icon type=\"calendar\"/> Age\n        </@heading>\n        <@cell|person|>\n            &#36;{person.age}\n        </@cell>\n    </@column>\n</fancy-table></code-block><p>Now instead of rendering the heading as text, we&#39;ll render the heading&#39;s body content.</p>\n<p><em>components/fancy-table/index.marko:</em></p>\n<code-block lang=\"marko\" lines=\"5\"><table class=\"fancy\">\n    <tr>\n        <for|column| of=input.column>\n            <th>\n                <&#36;{column.heading.renderBody}/>\n            </th>\n        </for>\n    </tr>\n    <for|row| of=input.data>\n        <tr>\n            <for|column| of=input.column>\n                <td>\n                    <&#36;{column.cell.renderBody} ...row/>\n                </td>\n            </for>\n        </tr>\n    </for>\n</table></code-block><p>Our headings can now include icons (and anything else)!</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><table class=\"fancy\">\n  <tr>\n    <th><img class=\"icon\" src=\"profile.svg\" /> Name</th>\n    <th><img class=\"icon\" src=\"calendar.svg\" /> Age</th>\n  </tr>\n  <tr>\n    <td>Patrick</td>\n    <td>63</td>\n  </tr>\n  <tr>\n    <td>Austin</td>\n    <td>12</td>\n  </tr>\n</table></code-block><h3 id=\"dynamic-attribute-tags\"><a name=\"dynamic-attribute-tags\" class=\"anchor\" href=\"#dynamic-attribute-tags\"><span class=\"header-link\"></span></a>Dynamic attribute tags</h3><p>The flexibility of the <code>&lt;fancy-table&gt;</code> is great if you want to render columns differently or have columns that display the data in a special way (such as displaying an age derived from a date of birth). However, if all columns are basically the same, the user might feel they&#39;re repeating themselves. As you might expect, you can use <code>&lt;for&gt;</code> (and <code>&lt;if&gt;</code>) to dynamically render attribute tags.</p>\n<code-block lang=\"marko\" lines=\"\">&#36; const columns = [{\n    property: \"name\",\n    title: \"Name\",\n    icon: \"profile\"\n}, {\n    property: \"age\",\n    title: \"Age\",\n    icon: \"calendar\"\n}]\n\n<fancy-table>\n    <for|{ property, title, icon }|>\n        <@column>\n            <@heading>\n                <app-icon type=icon/> &#36;{title}\n            </@heading>\n            <@cell|person|>\n                &#36;{person[property]}\n            </@cell>\n        </@column>\n    </for>\n</fancy-table></code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/class-components.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#ui-component-diagram\\\">UI component diagram</a></li><li><a href=\\\"#component-structure\\\">Component structure</a></li><li><a href=\\\"#server-side-rendering\\\">Server-side rendering</a></li><li><a href=\\\"#single-file-components\\\">Single-file components</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#styles\\\">Styles</a></li></ul></li><li><a href=\\\"#multi-file-components\\\">Multi-file components</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#supporting-files\\\">Supporting files</a></li><li><a href=\\\"#components-with-plain-objects\\\">Components with plain objects</a></li></ul></li><li><a href=\\\"#split-components\\\">Split components</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#usage\\\">Usage</a></li><li><a href=\\\"#example\\\">Example</a></li></ul></li><li><a href=\\\"#event-handling\\\">Event handling</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#attaching-dom-event-listeners\\\">Attaching DOM event listeners</a></li><li><a href=\\\"#attaching-custom-event-listeners\\\">Attaching custom event listeners</a></li></ul></li><li><a href=\\\"#attributes\\\">Attributes</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#on-eventmethodnamefunction-args\\\">on-[event]()</a></li><li><a href=\\\"#once-eventmethodnamefunction-args\\\">once-[event]()</a></li><li><a href=\\\"#key\\\">key</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#referencing-nested-html-elements-and-components\\\">Referencing nested HTML elements and components</a></li><li><a href=\\\"#keyed-matching\\\">Keyed matching</a></li><li><a href=\\\"#scoped\\\">*:scoped</a></li></ul></li><li><a href=\\\"#no-update\\\">no-update</a></li><li><a href=\\\"#no-update-if\\\">no-update-if</a></li><li><a href=\\\"#no-update-body\\\">no-update-body</a></li><li><a href=\\\"#no-update-body-if\\\">no-update-body-if</a></li><li><a href=\\\"#no-update_1\\\">:no-update</a></li></ul></li><li><a href=\\\"#properties\\\">Properties</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#thisel\\\">this.el</a></li><li><a href=\\\"#thisels\\\">this.els</a></li><li><a href=\\\"#thisid\\\">this.id</a></li><li><a href=\\\"#thisstate\\\">this.state</a></li><li><a href=\\\"#thisinput\\\">this.input</a></li></ul></li><li><a href=\\\"#variables\\\">Variables</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#component\\\">component</a></li><li><a href=\\\"#input\\\">input</a></li><li><a href=\\\"#state\\\">state</a></li></ul></li><li><a href=\\\"#methods\\\">Methods</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#destroyoptions\\\">destroy()</a></li><li><a href=\\\"#forceupdate\\\">forceUpdate()</a></li><li><a href=\\\"#getelkey-index\\\">getEl()</a></li><li><a href=\\\"#getelskey\\\">getEls()</a></li><li><a href=\\\"#getelidkey-index\\\">getElId()</a></li><li><a href=\\\"#getcomponentkey-index\\\">getComponent()</a></li><li><a href=\\\"#getcomponentskey-index\\\">getComponents()</a></li><li><a href=\\\"#isdestroyed\\\">isDestroyed()</a></li><li><a href=\\\"#isdirty\\\">isDirty()</a></li><li><a href=\\\"#replacestatenewstate\\\">replaceState()</a></li><li><a href=\\\"#rerenderinput\\\">rerender()</a></li><li><a href=\\\"#setstatename-value\\\">setState()</a></li><li><a href=\\\"#setstatenewstate\\\">setState()</a></li><li><a href=\\\"#setstatedirtyname-value\\\">setStateDirty()</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#more-details\\\">More details</a></li></ul></li><li><a href=\\\"#subscribetoemitter\\\">subscribeTo()</a></li><li><a href=\\\"#update\\\">update()</a></li></ul></li><li><a href=\\\"#event-methods\\\">Event methods</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#emiteventname-args\\\">emit()</a></li><li><a href=\\\"#oneventname-handler\\\">on()</a></li><li><a href=\\\"#onceeventname-handler\\\">once()</a></li></ul></li><li><a href=\\\"#lifecycle-events\\\">Lifecycle events</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#lifecycle-event-methods\\\">Lifecycle event methods</a></li><li><a href=\\\"#oncreateinput-out\\\">onCreate()</a></li><li><a href=\\\"#oninputinput-out\\\">onInput()</a></li><li><a href=\\\"#onrenderout\\\">onRender()</a></li><li><a href=\\\"#onmount\\\">onMount()</a></li><li><a href=\\\"#onupdate\\\">onUpdate()</a></li><li><a href=\\\"#ondestroy\\\">onDestroy()</a></li></ul></li><li><a href=\\\"#dom-manipulation-methods\\\">DOM manipulation methods</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#appendtotargetel\\\">appendTo()</a></li><li><a href=\\\"#insertaftertargetel\\\">insertAfter()</a></li><li><a href=\\\"#insertbeforetargetel\\\">insertBefore()</a></li><li><a href=\\\"#prependtotargetel\\\">prependTo()</a></li><li><a href=\\\"#replacetargetel\\\">replace()</a></li><li><a href=\\\"#replacechildrenoftargetel\\\">replaceChildrenOf()</a></li></ul></li></ul>\");\n-----\n<h1 id=\"class-components\"><a name=\"class-components\" class=\"anchor\" href=\"#class-components\"><span class=\"header-link\"></span></a>Class Components</h1><p>Marko makes it easy to create user interface components to use as building blocks for web pages and applications of any complexity.</p>\n<p>Marko promotes self-contained components that:</p>\n<ul>\n<li>Are independently testable</li>\n<li>Encapsulate the view, client-side behavior (like event handling) and styling</li>\n<li>Can easily be combined to create composite UI components.</li>\n</ul>\n<p>Marko components compile into small, efficient JavaScript modules that hide implementation details from consumers. Components can be published to <a href=\"https://www.npmjs.com\">npm</a> for reuse across applications.</p>\n<h2 id=\"ui-component-diagram\"><a name=\"ui-component-diagram\" class=\"anchor\" href=\"#ui-component-diagram\"><span class=\"header-link\"></span></a>UI component diagram</h2><p><img src=\"./component-diagram.svg\" alt=\"Component diagram\" /></p>\n<p>In Marko, the DOM output of a UI component is based on <em>input properties</em> and optional <em>internal state</em> used to control the view.</p>\n<p>If Marko detects changes to <code>input</code> or the internal <code>state</code>, then the view (that is, the DOM) will automatically update to reflect the new input and state. Internally, Marko uses virtual DOM diffing/patching to update the view, but that’s an implementation detail that could change at any time.</p>\n<h2 id=\"component-structure\"><a name=\"component-structure\" class=\"anchor\" href=\"#component-structure\"><span class=\"header-link\"></span></a>Component structure</h2><p>Marko makes it easy to keep your component’s class and styles next to the HTML view that they correspond to. The following are the key parts of any UI component:</p>\n<ul>\n<li><strong>View</strong> - The HTML template for your UI component. Receives input properties and states, and renders to either server-side HTML or browser-side virtual DOM nodes.</li>\n<li><strong>Client-side behavior</strong> - A JavaScript <code>class</code> with methods and properties for initialization, event handling (including DOM events, custom events and lifecycle events), and state management.</li>\n<li><strong>Styles</strong> - Cascading StyleSheets, including support for CSS preprocessors like <a href=\"http://lesscss.org/\">Less</a> or <a href=\"https://sass-lang.com/\">Sass</a>.</li>\n</ul>\n<h2 id=\"server-side-rendering\"><a name=\"server-side-rendering\" class=\"anchor\" href=\"#server-side-rendering\"><span class=\"header-link\"></span></a>Server-side rendering</h2><p>A UI component can be rendered on the server or in the browser, but stateful component instances will be automatically mounted to the DOM in the browser for both. If a UI component tree is rendered on the server, then Marko will recreate the UI component tree in the browser with no extra code required. For more details, please see <a href=\"/docs/server-side-rendering/\">Server-side rendering</a>.</p>\n<h2 id=\"single-file-components\"><a name=\"single-file-components\" class=\"anchor\" href=\"#single-file-components\"><span class=\"header-link\"></span></a>Single-file components</h2><p>Marko lets you define a <code>class</code> for a component right in the <code>.marko</code> file, and call that class’s methods with <code>on-*</code> attributes:</p>\n<code-block lang=\"marko\" lines=\"\">class {\n    onCreate() {\n        this.state = {\n            count: 0\n        };\n    }\n    increment() {\n        this.state.count++;\n    }\n}\n\n<label>The current count is <output>&#36;{state.count}</output></label>\n<p><button on-click('increment')>+1</button></p></code-block><h3 id=\"styles\"><a name=\"styles\" class=\"anchor\" href=\"#styles\"><span class=\"header-link\"></span></a>Styles</h3><p>Adding styles in your view is also made easy:</p>\n<code-block lang=\"marko\" lines=\"\">style {\n    .primary {\n        background: #09c;\n    }\n}\n\n<label>The current count is <output>&#36;{state.count}</output></label>\n<p><button.primary on-click('increment')>+1</button></p></code-block><p>These styles aren’t output in a <code>&lt;style&gt;</code> tag as inline styles usually are, but are externalized to deduplicate them across multiple component instances on a page.</p>\n<p>If you use a CSS preprocessor, you can add its file extension on <code>style</code>:</p>\n<code-block lang=\"marko\" lines=\"\">style.less {\n    .primary {\n        background: @primaryColor;\n    }\n}</code-block><blockquote class=\"note\"><p><strong>Note:</strong> The code in the <code>style</code> section is processed in a context separate from the rest of the template, so you can’t use JavaScript variables inside it. If you need variables in your CSS, use a CSS preprocessor that supports them.</p>\n</blockquote><h2 id=\"multi-file-components\"><a name=\"multi-file-components\" class=\"anchor\" href=\"#multi-file-components\"><span class=\"header-link\"></span></a>Multi-file components</h2><p>You might prefer to keep your component’s class and styles in separate files from the view — the classical separation of HTML, CSS, and JavaScript. Marko makes this possible with a filename-based convention.</p>\n<blockquote class=\"protip\"><p><strong>ProTip:</strong> If your’re moving the component’s class and styles to separate files is because the code is getting too large, consider splitting the component into smaller, more manageable components.</p>\n</blockquote><h3 id=\"supporting-files\"><a name=\"supporting-files\" class=\"anchor\" href=\"#supporting-files\"><span class=\"header-link\"></span></a>Supporting files</h3><p>Marko discovers supporting files in the same directory as a Marko view. For example, if you have a view named <code>counter.marko</code>, Marko will automatically look for <code>counter.component.js</code> and <code>counter.style.css</code>.</p>\n<code-block lang=\"\" lines=\"\">counter.marko\ncounter.component.js\ncounter.style.css</code-block><p>Marko also handles views named <code>index.marko</code> specially. It will look for <code>component.js</code> and <code>style.css</code> in addition to <code>index.component.js</code> and <code>index.style.css</code>. This allows easily grouping component files into a directory:</p>\n<code-block lang=\"\" lines=\"\">counter/\n    index.marko\n    component.js\n    style.css</code-block><p>In your <code>component.js</code> file, export the component’s class:</p>\n<code-block lang=\"js\" lines=\"\">module.exports = class {\n  onCreate() {\n    this.state = {\n      count: 0\n    };\n  }\n  increment() {\n    this.state.count++;\n  }\n};</code-block><p>In your <code>index.marko</code> file, you can reference methods from that class with <code>on-*</code> attributes:</p>\n<code-block lang=\"marko\" lines=\"\"><label>The current count is <output>&#36;{state.count}</output></label>\n<p><button.primary on-click('increment')>+1</button></p></code-block><p>And in your <code>style.css</code>, define the styles:</p>\n<code-block lang=\"css\" lines=\"\">.primary {\n  background: #09c;\n}</code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> Marko actually looks any filenames with the pattern <code>[name].style.*</code>, so it will pick up any CSS preprocessor file extensions you use: <code>.less</code>, <code>.stylus</code>, <code>.scss</code>, etc.</p>\n</blockquote><h3 id=\"components-with-plain-objects\"><a name=\"components-with-plain-objects\" class=\"anchor\" href=\"#components-with-plain-objects\"><span class=\"header-link\"></span></a>Components with plain objects</h3><p>If you target browsers that does not support classes, a plain object of methods can be exported:</p>\n<code-block lang=\"js\" lines=\"\">module.exports = {\n  onCreate: function() {\n    this.state = {\n      count: 0\n    };\n  },\n  increment: function() {\n    this.state.count++;\n  }\n};</code-block><h2 id=\"split-components\"><a name=\"split-components\" class=\"anchor\" href=\"#split-components\"><span class=\"header-link\"></span></a>Split components</h2><p>Split components optimize for when a component renders on the server, and doesn’t need to dynamically rerender in the browser. As a result, its template and logic aren’t sent to the browser, reducing load time and download size.</p>\n<blockquote class=\"note\"><p><strong>Note:</strong> If a split component is the child of a stateful component, its full rendering logic will still be sent because the parent may pass new input to the split component and rerender it.</p>\n</blockquote><p>Additionally, if <em>all</em> components rendered on a page are split components, Marko’s VDOM and rendering runtime is unnecessary, and therefore not sent to the browser.</p>\n<blockquote class=\"protip\"><p><strong>ProTip:</strong> Don’t over-optimize. If your component really doesn’t need rerendering, go ahead and split, but don’t forgo stateful rerendering when it would make your code more maintainable.</p>\n</blockquote><h3 id=\"usage\"><a name=\"usage\" class=\"anchor\" href=\"#usage\"><span class=\"header-link\"></span></a>Usage</h3><p>Marko discovers split components similarly to how it discovers an external component class. For example, if you have a view named <code>button.marko</code>, it will automatically look for <code>button.component-browser.js</code>. If your view is named <code>index.marko</code>, it will look for <code>component-browser.js</code> in addition to <code>index.component-browser.js</code>.</p>\n<code-block lang=\"\" lines=\"\">counter/\n    index.marko\n    component-browser.js</code-block><p>A split component might need to do some setup as part of its initial render. In this case, the component may define a second component class to use the <code>onCreate</code>, <code>onInput</code>, and <code>onRender</code> <a href=\"#lifecycle-events\">lifecycle methods</a>.</p>\n<p>This class can be exported from <code>component.js</code>, or defined right in the template as a single-file components. In this case, your component folder may contain a <code>component.js</code> file, and must contain a <code>component-browser.js</code>. The following <a href=\"#lifecycle-events\">lifecycle methods</a> can go inside the <code>component.js</code> file:</p>\n<code-block lang=\"\" lines=\"\">class {\n  onCreate(input, out) { }\n  onInput(input, out) { }\n  onRender(out) { }\n  onDestroy() { }\n}</code-block><p>And the following <a href=\"#lifecycle-events\">lifecycle methods</a> can go inside the <code>component-browser.js</code> file:</p>\n<code-block lang=\"\" lines=\"\">class {\n  onMount() { }\n  onUpdate() { }\n}</code-block><p>Any JavaScript code related to the DOM or browser should also be inside <code>component-browser.js</code>.</p>\n<h3 id=\"example\"><a name=\"example\" class=\"anchor\" href=\"#example\"><span class=\"header-link\"></span></a>Example</h3><p><code>index.marko</code></p>\n<code-block lang=\"marko\" lines=\"\">class {\n    onCreate() {\n        this.number = 123;\n    }\n}\n\n<button on-click('shout')>What’s my favorite number?</button></code-block><p><code>component-browser.js</code></p>\n<code-block lang=\"js\" lines=\"\">module.exports = {\n  shout() {\n    alert(`My favorite number is &#36;{this.number}!`);\n  }\n};</code-block><h2 id=\"event-handling\"><a name=\"event-handling\" class=\"anchor\" href=\"#event-handling\"><span class=\"header-link\"></span></a>Event handling</h2><p>The <code>on-[event](methodName|function, ...args)</code> attributes allow event listeners to be attached for either:</p>\n<ul>\n<li>A native DOM event, when used on a native DOM element such as a <code>&lt;button&gt;</code></li>\n<li>Or a UI component event, when used on a custom tag for a UI component such as <code>&lt;my-component&gt;</code></li>\n</ul>\n<p>The <code>on-*</code> attributes are used to associate event handler methods with an event name. Event handlers may be specified by <code>&#39;methodName&#39;</code> — a string that matches a method on the component instance, or they may be a <code>function</code>. Attaching listeners for native DOM events and UI component custom events is explained in more detail in the sections below.</p>\n<p>You may also use the <code>once-[event](methodName|function, ...args)</code> syntax, which will listen for only the first event, and then remove the listener.</p>\n<h3 id=\"attaching-dom-event-listeners\"><a name=\"attaching-dom-event-listeners\" class=\"anchor\" href=\"#attaching-dom-event-listeners\"><span class=\"header-link\"></span></a>Attaching DOM event listeners</h3><p>The code below illustrates how to attach an event listener for native DOM events:</p>\n<code-block lang=\"marko\" lines=\"\">class {\n  onButtonClick(name, event, el) {\n    alert(`Hello &#36;{name}!`);\n  }\n}\n\nstatic function fadeIn(event, el) {\n  el.hidden = false;\n  el.style.opacity = 0;\n  el.style.transition = 'opacity 1s';\n  setTimeout(() => el.style.opacity = 1);\n}\n\n<button on-click('onButtonClick', 'Frank')>\n  Say Hello to Frank\n</button>\n\n<button on-click('onButtonClick', 'John')>\n  Say Hello to John\n</button>\n\n<img src='foo.jpg' once-load(fadeIn) hidden /></code-block><p>The following arguments are passed to the event handler when the event occurs:</p>\n<ol>\n<li><code>...args</code> - Any extra bound arguments are <em>prepended</em> to the arguments passed to the component’s handler method.\nFor example: <code>on-click(&#39;onButtonClick&#39;, arg1, arg2)</code> → <code>onButtonClick(arg1, arg2, event, el)</code></li>\n<li><code>event</code> - The native DOM event object.</li>\n<li><code>el</code> - The DOM element that the event listener was attached to.</li>\n</ol>\n<p>When using the <code>on-*</code> or <code>once-*</code> attributes to attach event listeners, Marko uses event delegation that is more efficient than direct attachment of <code>el.addEventListener()</code>. Please see <a href=\"/docs/why-is-marko-fast/#event-delegation\">Why is Marko Fast? § Event delegation</a> for more details.</p>\n<p><a id=\"declarative-custom-events\"></a></p>\n<h3 id=\"attaching-custom-event-listeners\"><a name=\"attaching-custom-event-listeners\" class=\"anchor\" href=\"#attaching-custom-event-listeners\"><span class=\"header-link\"></span></a>Attaching custom event listeners</h3><p>The code below illustrates how to attach an event listener for a UI component’s custom event:</p>\n<code-block lang=\"marko\" lines=\"\">class {\n  onCounterChange(newValue, el) {\n    alert(`New value: &#36;{newValue}!`);\n  }\n  onCounterMax(max) {\n    alert(`It reached the max: &#36;{max}!`);\n  }\n}\n\n<counter on-change('onCounterChange') once-max('onCounterMax') /></code-block><p>The following arguments are passed to the event handler when the event occurs:</p>\n<ol>\n<li><code>...args</code> - Any extra bound arguments are <em>prepended</em> to the arguments passed to the component’s handler method.</li>\n<li><code>...eventArgs</code> - The arguments passed to <code>this.emit()</code> by the target UI component.</li>\n<li><code>component</code> - The component instance that the event listener was attached to.</li>\n</ol>\n<p>The following code illustrates how the UI component for <code>&lt;counter&gt;</code> might emit its <code>change</code> event:</p>\n<p><code>counter/index.marko</code></p>\n<code-block lang=\"marko\" lines=\"\">class {\n  onCreate() {\n    this.max = 50;\n    this.state = { count: 0 };\n  }\n  increment() {\n    if (this.state.count < this.max) {\n        this.emit('change', ++this.state.count);\n    }\n    if (this.state.count === this.max) {\n        this.emit('max', this.state.count);\n    }\n  }\n}\n\n\n<button.example-button on-click('increment')>\n  Increment\n</button></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> Unlike native DOM events, UI component custom events may be emitted with multiple arguments. For example:</p>\n<code-block lang=\"js\" lines=\"\">this.emit(\"foo\", \"bar\", \"baz\");</code-block></blockquote><h2 id=\"attributes\"><a name=\"attributes\" class=\"anchor\" href=\"#attributes\"><span class=\"header-link\"></span></a>Attributes</h2><h3 id=\"on-eventmethodnamefunction-args\"><a name=\"on-eventmethodnamefunction-args\" class=\"anchor\" href=\"#on-eventmethodnamefunction-args\"><span class=\"header-link\"></span></a><code>on-[event](methodName|function, ...args)</code></h3><p>The <code>on-*</code> attribute syntax attaches an event listener to either a native DOM event or a UI component event. The <code>on-*</code> attribute associates an event handler method with an event name. Please see the <a href=\"#event-handling\">Event handling</a> section above for details.</p>\n<h3 id=\"once-eventmethodnamefunction-args\"><a name=\"once-eventmethodnamefunction-args\" class=\"anchor\" href=\"#once-eventmethodnamefunction-args\"><span class=\"header-link\"></span></a><code>once-[event](methodName|function, ...args)</code></h3><p>The same as the <code>on-*</code> attribut,e except that its listener is only invoked for the first event, and then removed from memory. Please see the <a href=\"#event-handling\">Event handling</a> section above for more details.</p>\n<h3 id=\"key\"><a name=\"key\" class=\"anchor\" href=\"#key\"><span class=\"header-link\"></span></a><code>key</code></h3><p>The <code>key</code> property does 2 things in Marko:</p>\n<ul>\n<li>Obtains references to nested HTML elements and nested UI components.</li>\n<li>Matches corresponding elements together when DOM diffing/patching after a rerender. When updating the DOM, keyed elements/components are matched up and reused rather than discarded and recreated.</li>\n</ul>\n<p>Internally, Marko assigns a unique key to all HTML elements and UI components in a <code>.marko</code> file, based on the order they appear in the file. If you have repeated elements or elements that move between locations in the DOM, then you likely want to assign a custom <code>key</code> by adding a <code>key</code> attribute. The <code>key</code> attribute can be applied to both HTML elements and custom tags.</p>\n<h4 id=\"referencing-nested-html-elements-and-components\"><a name=\"referencing-nested-html-elements-and-components\" class=\"anchor\" href=\"#referencing-nested-html-elements-and-components\"><span class=\"header-link\"></span></a>Referencing nested HTML elements and components</h4><code-block lang=\"marko\" lines=\"\">class {\n  onMount() {\n    const headerElement = this.getEl('header');\n    const colorListItems = this.getEls('colors');\n    const myFancyButton = this.getComponent('myFancyButton');\n  }\n}\n\n<h1 key=\"header\">Hello</h1>\n\n<ul>\n  <for|color| of=['red', 'green', 'blue']>\n      <li key=\"colors[]\">&#36;{color}</li>\n  </for>\n</ul>\n\n<fancy-button key=\"myFancyButton\"/></code-block><blockquote class=\"note\"><p><strong>Note:</strong> The <code>[]</code> suffix (e.g. <code>key=&quot;colors[]&quot;</code>) lets Marko know that the element will be repeated multiple times with the same key.</p>\n</blockquote><h4 id=\"keyed-matching\"><a name=\"keyed-matching\" class=\"anchor\" href=\"#keyed-matching\"><span class=\"header-link\"></span></a>Keyed matching</h4><p>The <code>key</code> attribute can pair an HTML element or UI component that moves to a new location in the DOM. For example:</p>\n<code-block lang=\"marko\" lines=\"\">class {\n  onCreate() {\n    this.state = {\n      swapped: false\n    }\n  }\n}\n\n<if(state.swapped)>\n  <p key=\"b\">B</p>\n  <p key=\"a\">A</p>\n</if>\n<else>\n  <p key=\"a\">A</p>\n  <p key=\"b\">B</p>\n</else></code-block><p>The <code>key</code> attribute can be used to pair HTML elements or UI components that are repeated:</p>\n<code-block lang=\"marko\" lines=\"\"><ul>\n  <for|user| of=input.users>\n      <li key=user.id>&#36;{user.name}</li>\n  </for>\n</ul></code-block><p>This way, if the order of <code>input.users</code> changes, the DOM will be rerendered more efficiently.</p>\n<h4 id=\"scoped\"><a name=\"scoped\" class=\"anchor\" href=\"#scoped\"><span class=\"header-link\"></span></a><code>*:scoped</code></h4><p>The <code>:scoped</code> attribute modifier results in the attribute value getting prefixed with a unique ID associated with the current UI component. <code>:scoped</code> attribute modifiers can be used to assign a globally unique attribute value from a value that only needs to be unique to the current UI component.</p>\n<p>Here’s a use-case: certain HTML attributes reference the <code>id</code> of other elements on the page. For example, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\">HTML <code>&lt;label&gt;</code></a> <code>for</code> attribute takes an <code>id</code> as its value. Many <code>ARIA</code> attributes like <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute\"><code>aria-describedby</code></a> also take an <code>id</code> as their value.</p>\n<p>The <code>:scoped</code> modifier on an attribute allows you to reference another element without fear of duplicate <code>id</code>s, as shown in the following examples:</p>\n<p><strong><code>for:scoped</code></strong></p>\n<code-block lang=\"marko\" lines=\"\"><label for:scoped=\"name\">Name</label>\n<input id:scoped=\"name\" value=\"Frank\"/></code-block><p>The above code will output HTML similar to the following:</p>\n<code-block lang=\"html\" lines=\"\"><label for=\"c0-name\">Name</label> <input id=\"c0-name\" value=\"Frank\" /></code-block><p><strong><code>aria-describedby:scoped</code></strong></p>\n<code-block lang=\"marko\" lines=\"\"><button\n   aria-describedby:scoped=\"closeDisclaimer\"\n   on-click('closeDialog')>Close</button>\n\n<p id:scoped=\"closeDisclaimer\">\n   Closing this window will discard any entered information and return you to the main page.\n</p></code-block><code-block lang=\"html\" lines=\"\"><button aria-describedby=\"c0-closeDisclaimer\">Close</button>\n\n<p id=\"c0-closeDisclaimer\">\n  Closing this window will discard any entered information and return you to the\n  main page.\n</p></code-block><p><strong><code>href:scoped</code></strong></p>\n<code-block lang=\"marko\" lines=\"\"><a href:scoped=\"#anchor\">Jump to section</a>\n<section id:scoped=\"anchor\"></section></code-block><code-block lang=\"html\" lines=\"\"><a href=\"#c0-anchor\">Jump to section</a>\n<section id=\"c0-anchor\"></section></code-block><h3 id=\"no-update\"><a name=\"no-update\" class=\"anchor\" href=\"#no-update\"><span class=\"header-link\"></span></a><code>no-update</code></h3><p>Preserves the DOM subtree associated with the element or component, so it won’t be modified when rerendering.</p>\n<code-block lang=\"marko\" lines=\"\"><!-- Never rerender this table -->\n<table no-update>\n  …\n</table></code-block><code-block lang=\"marko\" lines=\"\"><!-- N ever rerender this UI component -->\n<app-map no-update/></code-block><p>This is most useful when other JavaScript modifies the DOM tree of an element, like for embeds.</p>\n<h3 id=\"no-update-if\"><a name=\"no-update-if\" class=\"anchor\" href=\"#no-update-if\"><span class=\"header-link\"></span></a><code>no-update-if</code></h3><p>Similar to <a href=\"#no-update\">no-update</a>, except that the DOM subtree is <em>conditionally</em> preserved:</p>\n<code-block lang=\"marko\" lines=\"\"><!-- Don’t re-render this table without table data -->\n<table no-update-if(input.tableData == null)>\n  …\n</table></code-block><h3 id=\"no-update-body\"><a name=\"no-update-body\" class=\"anchor\" href=\"#no-update-body\"><span class=\"header-link\"></span></a><code>no-update-body</code></h3><p>Similar to <a href=\"#no-update\">no-update</a>, except that only the descendant DOM nodes are preserved:</p>\n<code-block lang=\"marko\" lines=\"\"><!-- Never rerender any nested DOM elements -->\n<div no-update-body>\n  …\n</div></code-block><h3 id=\"no-update-body-if\"><a name=\"no-update-body-if\" class=\"anchor\" href=\"#no-update-body-if\"><span class=\"header-link\"></span></a><code>no-update-body-if</code></h3><p>Similar to <a href=\"#no-update-body\">no-update-body</a>, except that its descendant DOM nodes are <em>conditionally</em> preserved:</p>\n<code-block lang=\"marko\" lines=\"\"><!-- Never rerender any nested DOM elements without table data -->\n<table no-update-body-if(input.tableData == null)>\n  …\n</table></code-block><h3 id=\"no-update_1\"><a name=\"no-update_1\" class=\"anchor\" href=\"#no-update_1\"><span class=\"header-link\"></span></a><code>:no-update</code></h3><p>Prevents certain attributes from being modified during a rerender. The attribute(s) that should not be modified should have a <code>:no-update</code> modifier:</p>\n<code-block lang=\"marko\" lines=\"\"><!-- Never modify the `class` attribute -->\n<div class:no-update=input.className>\n  …\n</div></code-block><h2 id=\"properties\"><a name=\"properties\" class=\"anchor\" href=\"#properties\"><span class=\"header-link\"></span></a>Properties</h2><h3 id=\"thisel\"><a name=\"thisel\" class=\"anchor\" href=\"#thisel\"><span class=\"header-link\"></span></a><code>this.el</code></h3><p>The root <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element\"><code>HTMLElement</code> object</a> that the component is bound to. If there are multiple roots, this is the first.</p>\n<h3 id=\"thisels\"><a name=\"thisels\" class=\"anchor\" href=\"#thisels\"><span class=\"header-link\"></span></a><code>this.els</code></h3><p>An array of the root <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element\"><code>HTMLElement</code> objects</a> that the component is bound to.</p>\n<blockquote class=\"null\"><p>⚠️ <code>this.el</code> and <code>this.els</code> are deprecated. Please use <a href=\"#getelkey-index\">the <code>this.getEl()</code> or <code>this.getEls()</code> methods</a>.</p>\n</blockquote><h3 id=\"thisid\"><a name=\"thisid\" class=\"anchor\" href=\"#thisid\"><span class=\"header-link\"></span></a><code>this.id</code></h3><p>A string identifier for the root HTML element that the component is bound to. (Not the <code>id</code> attribute.)</p>\n<h3 id=\"thisstate\"><a name=\"thisstate\" class=\"anchor\" href=\"#thisstate\"><span class=\"header-link\"></span></a><code>this.state</code></h3><p>The current state for the component. Changing <code>this.state</code> or its direct properties will cause the component to rerender.</p>\n<p>Only properties that exist when <code>this.state</code> is first defined will be watched for changes. If you don’t need a property initially, you can set its value to <code>null</code>:</p>\n<code-block lang=\"marko\" lines=\"\">class {\n    onCreate() {\n        this.state = {\n            data: null,\n            error: null\n        }\n    }\n    getData() {\n        fetch('/endpoint')\n            .then(data => this.state.data = data)\n            .catch(error => this.state.error = error);\n    }\n}</code-block><p>Beware: setting a <code>state</code> property only <em>nominates</em> the component for a possible rerender, and properties are only watched one level deep. Thus, the component is only rerendered if at least one of the component state properties changed (<code>oldValue !== newValue</code>).</p>\n<p>If none of the properties changed (because the new value is identical, or no difference is detected by a shallow comparison), the assignment is considered a no-operation (great for performance).</p>\n<p>We recommend using <a href=\"https://wecodetheweb.com/2016/02/12/immutable-javascript-using-es6-and-beyond/\">immutable data structures</a>, but if you want to mutate a state property (perhaps push a new item into an array), you can mark it as dirty with <code>setStateDirty</code>:</p>\n<code-block lang=\"js\" lines=\"\">this.state.numbers.push(num);\n\n// Mark numbers as dirty, because a `push`\n// won’t be automatically detected by Marko\nthis.setStateDirty(\"numbers\");</code-block><h3 id=\"thisinput\"><a name=\"thisinput\" class=\"anchor\" href=\"#thisinput\"><span class=\"header-link\"></span></a><code>this.input</code></h3><p>The current input for the component. Setting <code>this.input</code> will rerender the component. If a <code>&amp;#36;global</code> property is set, <code>out.global</code> will also be updated during the rerender, otherwise the existing <code>&amp;#36;global</code> is used.</p>\n<h2 id=\"variables\"><a name=\"variables\" class=\"anchor\" href=\"#variables\"><span class=\"header-link\"></span></a>Variables</h2><p>When a Marko component is compiled, some additional variables are available to the rendering function. These variables are described below.</p>\n<h3 id=\"component\"><a name=\"component\" class=\"anchor\" href=\"#component\"><span class=\"header-link\"></span></a><code>component</code></h3><p>The <code>component</code> variable refers to the instance of the currently rendering UI component. This variable can be used to call methods on the UI component instance:</p>\n<code-block lang=\"marko\" lines=\"\">class {\n    getFullName() {\n        const { person } = this.input;\n        return `&#36;{person.firstName} &#36;{person.lastName}`;\n    }\n}\n\n<h1>Hello, &#36;{component.getFullName()}</h1></code-block><h3 id=\"input\"><a name=\"input\" class=\"anchor\" href=\"#input\"><span class=\"header-link\"></span></a><code>input</code></h3><p>The <code>input</code> variable refers to the <code>input</code> object, and is equivalent to <code>component.input</code>|<code>this.input</code>.</p>\n<code-block lang=\"marko\" lines=\"\"><h1>Hello, &#36;{input.name}</h1></code-block><h3 id=\"state\"><a name=\"state\" class=\"anchor\" href=\"#state\"><span class=\"header-link\"></span></a><code>state</code></h3><p>The <code>state</code> variable refers to the UI component’s <code>state</code> object, and is the <em>unwatched</em> equivalent of <code>component.state</code>|<code>this.state</code>.</p>\n<code-block lang=\"marko\" lines=\"\"><h1>Hello &#36;{state.name}</h1></code-block><h2 id=\"methods\"><a name=\"methods\" class=\"anchor\" href=\"#methods\"><span class=\"header-link\"></span></a>Methods</h2><h3 id=\"destroyoptions\"><a name=\"destroyoptions\" class=\"anchor\" href=\"#destroyoptions\"><span class=\"header-link\"></span></a><code>destroy([options])</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Option</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>removeNode</code></td>\n<td><code>Boolean</code></td>\n<td><code>true</code></td>\n<td><code>false</code> will keep the component in the DOM while unsubscribing all events from it</td>\n</tr>\n<tr>\n<td><code>recursive</code></td>\n<td><code>Boolean</code></td>\n<td><code>true</code></td>\n<td><code>false</code> will prevent child components from being destroyed</td>\n</tr>\n</tbody></table><p>Destroys the component by unsubscribing from all listeners made using the <code>subscribeTo</code> method, and then detaching the component’s root element from the DOM. All nested components (discovered by querying the DOM) are also destroyed.</p>\n<code-block lang=\"js\" lines=\"\">component.destroy({\n  removeNode: false, // true by default\n  recursive: false // true by default\n});</code-block><h3 id=\"forceupdate\"><a name=\"forceupdate\" class=\"anchor\" href=\"#forceupdate\"><span class=\"header-link\"></span></a><code>forceUpdate()</code></h3><p>Queue the component to re-render and skip all checks to see if it actually needs it.</p>\n<blockquote class=\"null\"><p>When using <code>forceUpdate()</code> the updating of the DOM will be queued up. If you want to immediately update the DOM\nthen call <code>this.update()</code> after calling <code>this.forceUpdate()</code>.</p>\n</blockquote><h3 id=\"getelkey-index\"><a name=\"getelkey-index\" class=\"anchor\" href=\"#getelkey-index\"><span class=\"header-link\"></span></a><code>getEl([key, index])</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>key</code></td>\n<td><code>String</code></td>\n<td><em>optional</em> — the scoped identifier for the element</td>\n</tr>\n<tr>\n<td><code>index</code></td>\n<td><code>Number</code></td>\n<td><em>optional</em> — the index of the component, if <code>key</code> references a repeated component</td>\n</tr>\n<tr>\n<td>return value</td>\n<td><code>HTMLElement</code></td>\n<td>The element matching the key, or <code>this.el</code> if no key is provided</td>\n</tr>\n</tbody></table><p>Returns a nested DOM element by prefixing the provided <code>key</code> with the component’s ID. For Marko, nested DOM elements should be assigned an ID with the <code>key</code> attribute.</p>\n<h3 id=\"getelskey\"><a name=\"getelskey\" class=\"anchor\" href=\"#getelskey\"><span class=\"header-link\"></span></a><code>getEls(key)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>key</code></td>\n<td><code>String</code></td>\n<td>The scoped identifier for the element</td>\n</tr>\n<tr>\n<td>return value</td>\n<td><code>Array&lt;HTMLElement&gt;</code></td>\n<td>An array of <em>repeated</em> DOM elements for the given key</td>\n</tr>\n</tbody></table><p>Repeated DOM elements must have a value for the <code>key</code> attribute that ends with <code>[]</code>. For example, <code>key=&quot;items[]&quot;</code>.</p>\n<h3 id=\"getelidkey-index\"><a name=\"getelidkey-index\" class=\"anchor\" href=\"#getelidkey-index\"><span class=\"header-link\"></span></a><code>getElId([key, index])</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>key</code></td>\n<td><code>String</code></td>\n<td><em>optional</em> — The scoped identifier for the element</td>\n</tr>\n<tr>\n<td><code>index</code></td>\n<td><code>Number</code></td>\n<td><em>optional</em> — The index of the component, if <code>key</code> references a repeated component</td>\n</tr>\n<tr>\n<td>return value</td>\n<td><code>String</code></td>\n<td>The element ID matching the key, or <code>this.el.id</code> if <code>key</code> is undefined</td>\n</tr>\n</tbody></table><p>Similar to <code>getEl</code>, but only returns the String ID of the nested DOM element instead of the actual DOM element.</p>\n<h3 id=\"getcomponentkey-index\"><a name=\"getcomponentkey-index\" class=\"anchor\" href=\"#getcomponentkey-index\"><span class=\"header-link\"></span></a><code>getComponent(key[, index])</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>key</code></td>\n<td><code>String</code></td>\n<td>The scoped identifier for the element</td>\n</tr>\n<tr>\n<td><code>index</code></td>\n<td><code>Number</code></td>\n<td><em>optional</em> — The index of the component, if <code>key</code> references a repeated component</td>\n</tr>\n<tr>\n<td>return value</td>\n<td><code>Component</code></td>\n<td>A reference to a nested <code>Component</code> for the given key. If an <code>index</code> is provided and the target component is a repeated component (i.e. <code>key=&quot;items[]&quot;</code>), then the component at the given index will be returned.</td>\n</tr>\n</tbody></table><p>For example, given the following component,</p>\n<code-block lang=\"marko\" lines=\"\"><app-main>\n  <app-child key=\"child\"/>\n</app-main></code-block><p>The following code can be used to get the <code>&lt;app-child/&gt;</code> component:</p>\n<code-block lang=\"js\" lines=\"\">const childComponent = this.getComponent(\"child\");</code-block><h3 id=\"getcomponentskey-index\"><a name=\"getcomponentskey-index\" class=\"anchor\" href=\"#getcomponentskey-index\"><span class=\"header-link\"></span></a><code>getComponents(key, [, index])</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>key</code></td>\n<td><code>String</code></td>\n<td>The scoped identifier for the element</td>\n</tr>\n<tr>\n<td><code>index</code></td>\n<td><code>Number</code></td>\n<td><em>optional</em> — The index of the component, if <code>key</code> references a repeated component</td>\n</tr>\n<tr>\n<td>return value</td>\n<td><code>Array&lt;Component&gt;</code></td>\n<td>An array of <em>repeated</em> <code>Component</code> instances for the given key</td>\n</tr>\n</tbody></table><p>Repeated components must have a value for the <code>key</code> attribute that ends with <code>[]</code>, like <code>key=&quot;items[]&quot;</code>.</p>\n<h3 id=\"isdestroyed\"><a name=\"isdestroyed\" class=\"anchor\" href=\"#isdestroyed\"><span class=\"header-link\"></span></a><code>isDestroyed()</code></h3><p>Returns <code>true</code> if a component has been destroyed using <a href=\"#ondestroy\"><code>component.destroy()</code></a>, otherwise <code>false</code>.</p>\n<h3 id=\"isdirty\"><a name=\"isdirty\" class=\"anchor\" href=\"#isdirty\"><span class=\"header-link\"></span></a><code>isDirty()</code></h3><p>Returns <code>true</code> if the component needs a bath.</p>\n<h3 id=\"replacestatenewstate\"><a name=\"replacestatenewstate\" class=\"anchor\" href=\"#replacestatenewstate\"><span class=\"header-link\"></span></a><code>replaceState(newState)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>newState</code></td>\n<td><code>Object</code></td>\n<td>A new state object to replace the previous state</td>\n</tr>\n</tbody></table><p>Replaces the state with an entirely new state. Equivalent to <code>this.state = newState</code>.</p>\n<blockquote class=\"note\"><p><strong>Note:</strong> While <code>setState()</code> is additive and will not remove properties that are in the old state but not in the new state, <code>replaceState()</code> <em>will</em> add the new state and remove the old state properties that are not found in the new state. Thus, if <code>replaceState()</code> is used, consider possible side effects if the new state contains less or other properties than the replaced state.</p>\n</blockquote><h3 id=\"rerenderinput\"><a name=\"rerenderinput\" class=\"anchor\" href=\"#rerenderinput\"><span class=\"header-link\"></span></a><code>rerender([input])</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>input</code></td>\n<td><code>Object</code></td>\n<td><em>optional</em> — New input data to use when rerendering</td>\n</tr>\n</tbody></table><p>Rerenders the component using its <code>renderer</code>, and either supplied <code>input</code> or internal <code>input</code> and <code>state</code>.</p>\n<h3 id=\"setstatename-value\"><a name=\"setstatename-value\" class=\"anchor\" href=\"#setstatename-value\"><span class=\"header-link\"></span></a><code>setState(name, value)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>name</code></td>\n<td><code>String</code></td>\n<td>The name of the <code>state</code> property to update</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td><code>Any</code></td>\n<td>The new value for the <code>state</code> property</td>\n</tr>\n</tbody></table><p>Changes the value of a single <code>state</code> property. Equivalent to <code>this.state[name] = value</code>, except it will also work for adding new properties to the component state.</p>\n<code-block lang=\"js\" lines=\"\">this.setState(\"disabled\", true);</code-block><h3 id=\"setstatenewstate\"><a name=\"setstatenewstate\" class=\"anchor\" href=\"#setstatenewstate\"><span class=\"header-link\"></span></a><code>setState(newState)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>newState</code></td>\n<td><code>Object</code></td>\n<td>A new state object to merge into the previous state</td>\n</tr>\n</tbody></table><p>Changes the value of multiple state properties:</p>\n<code-block lang=\"js\" lines=\"\">this.setState({\n  disabled: true,\n  size: \"large\"\n});</code-block><h3 id=\"setstatedirtyname-value\"><a name=\"setstatedirtyname-value\" class=\"anchor\" href=\"#setstatedirtyname-value\"><span class=\"header-link\"></span></a><code>setStateDirty(name[, value])</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>name</code></td>\n<td><code>String</code></td>\n<td>The name of the <code>state</code> property to mark as dirty</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td><code>Any</code></td>\n<td><em>optional</em> — A new value for the <code>state</code> property</td>\n</tr>\n</tbody></table><p>Forces a state property change, even if the value is equal to the old value. This is helpful in cases where a change occurs to a complex object that would not be detected by a shallow compare. Invoking this function completely circumvents all property equality checks (shallow compares) and always rerenders the component.</p>\n<h4 id=\"more-details\"><a name=\"more-details\" class=\"anchor\" href=\"#more-details\"><span class=\"header-link\"></span></a>More details</h4><p>The first parameter, <code>name</code>, is used to allow update handlers (e.g. <code>update_foo(newValue)</code>) to handle the state transition for the specific state property that was marked dirty.</p>\n<p>The second parameter, <code>value</code>, is used as the new value that is given to update handlers. Because <code>setStateDirty()</code> always bypasses all property equality checks, this parameter is optional. If not given or equal to the old value, the old value will be used for the update handler.</p>\n<p>Important: the given parameters do not affect how or if <code>setStateDirty()</code> rerenders a component; they are only considered as additional information to update handlers.</p>\n<code-block lang=\"js\" lines=\"\">// Because this does not create a new array, the change\n// would not be detected by a shallow property comparison\nthis.state.colors.push(\"red\");\n\n// Force that particular state property to be considered dirty so\n// that it will trigger the component's view to be updated\nthis.setStateDirty(\"colors\");</code-block><h3 id=\"subscribetoemitter\"><a name=\"subscribetoemitter\" class=\"anchor\" href=\"#subscribetoemitter\"><span class=\"header-link\"></span></a><code>subscribeTo(emitter)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>emitter</code></td>\n<td>A <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">Node.js <code>EventEmitter</code></a> or DOM object that emits events (<code>window</code>, <code>document</code>, etc.)</td>\n</tr>\n<tr>\n<td>return value</td>\n<td>A tracked subscription</td>\n</tr>\n</tbody></table><p>When a component is destroyed, it is necessary to remove any listeners that were attached by the component to prevent memory leaks. By using <code>subscribeTo</code>, Marko will automatically track and remove any listeners you attach when the component is destroyed.</p>\n<p>Marko uses <a href=\"https://github.com/patrick-steele-idem/listener-tracker\"><code>listener-tracker</code></a> to provide this feature.</p>\n<code-block lang=\"js\" lines=\"\">this.subscribeTo(window).on(\"scroll\", () =>\n  console.log(\"The user scrolled the window!\")\n);</code-block><h3 id=\"update\"><a name=\"update\" class=\"anchor\" href=\"#update\"><span class=\"header-link\"></span></a><code>update()</code></h3><p>Immediately executes any pending updates to the DOM, rather than following the normal queued update mechanism for rendering.</p>\n<code-block lang=\"js\" lines=\"\">this.setState(\"foo\", \"bar\");\nthis.update(); // Force the DOM to update\nthis.setState(\"hello\", \"world\");\nthis.update(); // Force the DOM to update</code-block><h2 id=\"event-methods\"><a name=\"event-methods\" class=\"anchor\" href=\"#event-methods\"><span class=\"header-link\"></span></a>Event methods</h2><p>Marko components inherit from <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\"><code>EventEmitter</code></a>. Below are a few commonly used methods — view the Node.js docs for the full list.</p>\n<h3 id=\"emiteventname-args\"><a name=\"emiteventname-args\" class=\"anchor\" href=\"#emiteventname-args\"><span class=\"header-link\"></span></a><code>emit(eventName, ...args)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>eventName</code></td>\n<td><code>String</code></td>\n<td>Name of the event</td>\n</tr>\n<tr>\n<td><code>...args</code></td>\n<td><code>Any</code></td>\n<td>All subsequent parameters are passed to the listeners</td>\n</tr>\n</tbody></table><p>Emits a UI component custom event. If a UI component attached a listener with the matching <code>eventName</code>, then the corresponding event listener method will be invoked. Event listeners can be attached using either the <a href=\"#declarative-custom-events\"><code>on-[event](methodName|function, ...args)</code></a> attribute syntax, or <code>targetComponent.on()</code>.</p>\n<h3 id=\"oneventname-handler\"><a name=\"oneventname-handler\" class=\"anchor\" href=\"#oneventname-handler\"><span class=\"header-link\"></span></a><code>on(eventName, handler)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>eventName</code></td>\n<td><code>String</code></td>\n<td>Name of the event to listen for</td>\n</tr>\n<tr>\n<td><code>handler</code></td>\n<td><code>Function</code></td>\n<td>The function to call when the event fires</td>\n</tr>\n</tbody></table><p>Adds the listener function to the end of the listeners array for the <code>eventName</code> event. Does not check to see if the listener has already been added. Multiple calls passing the same combination of <code>eventName</code> and <code>handler</code> will result in the listener being added and called multiple times.</p>\n<h3 id=\"onceeventname-handler\"><a name=\"onceeventname-handler\" class=\"anchor\" href=\"#onceeventname-handler\"><span class=\"header-link\"></span></a><code>once(eventName, handler)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>eventName</code></td>\n<td><code>String</code></td>\n<td>Name of the event to listen for</td>\n</tr>\n<tr>\n<td><code>handler</code></td>\n<td><code>Function</code></td>\n<td>Tthe function to call when the event fires</td>\n</tr>\n</tbody></table><p>Adds a one-time listener function for the <code>eventName</code> event. The next time <code>eventName</code> triggers, this listener is removed and then invoked.</p>\n<h2 id=\"lifecycle-events\"><a name=\"lifecycle-events\" class=\"anchor\" href=\"#lifecycle-events\"><span class=\"header-link\"></span></a>Lifecycle events</h2><p>Marko defines six lifecycle events:</p>\n<ul>\n<li><code>create</code></li>\n<li><code>input</code></li>\n<li><code>render</code></li>\n<li><code>mount</code></li>\n<li><code>update</code></li>\n<li><code>destroy</code></li>\n</ul>\n<p>These events are emitted at specific points over the lifecycle of a component, as shown below:</p>\n<p><strong>First render</strong></p>\n<code-block lang=\"js\" lines=\"\">emit('create') → emit('input') → emit('render') → emit('mount')</code-block><p><strong>New input</strong></p>\n<code-block lang=\"js\" lines=\"\">emit('input') → emit('render') → emit('update')</code-block><p><strong>Internal state change</strong></p>\n<code-block lang=\"js\" lines=\"\">emit('render') → emit('update')</code-block><p><strong>Destroy</strong></p>\n<code-block lang=\"js\" lines=\"\">emit(\"destroy\");</code-block><h3 id=\"lifecycle-event-methods\"><a name=\"lifecycle-event-methods\" class=\"anchor\" href=\"#lifecycle-event-methods\"><span class=\"header-link\"></span></a>Lifecycle event methods</h3><p>Each lifecycle event has a corresponding component lifecycle method that can listen for the event:</p>\n<code-block lang=\"js\" lines=\"\">class {\n  onCreate(input, out) { }\n  onInput(input, out) { }\n  onRender(out) { }\n  onMount() { }\n  onUpdate() { }\n  onDestroy() { }\n}</code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> When a lifecycle event occurs in the browser, the corresponding event is emitted on the component instance. A parent component, or other code that has access to the component instance, can listen for these events. For example:</p>\n<code-block lang=\"js\" lines=\"\">component.on(\"input\", function(input, out) {\n  // The component received an input\n});</code-block></blockquote><h3 id=\"oncreateinput-out\"><a name=\"oncreateinput-out\" class=\"anchor\" href=\"#oncreateinput-out\"><span class=\"header-link\"></span></a><code>onCreate(input, out)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>input</code></td>\n<td>The input data used to render the component for the first time</td>\n</tr>\n<tr>\n<td><code>out</code></td>\n<td>The async <code>out</code> used to render the component for the first time</td>\n</tr>\n</tbody></table><p>The <code>create</code> event is emitted (and <code>onCreate</code> is called) when the component is first created.</p>\n<p><code>onCreate</code> is typically used to set the initial state for stateful components:</p>\n<code-block lang=\"marko\" lines=\"\">class {\n    onCreate(input) {\n        this.state = { count: input.initialCount };\n    }\n}</code-block><h3 id=\"oninputinput-out\"><a name=\"oninputinput-out\" class=\"anchor\" href=\"#oninputinput-out\"><span class=\"header-link\"></span></a><code>onInput(input, out)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>input</code></td>\n<td>The new input data</td>\n</tr>\n</tbody></table><p>The <code>input</code> event is emitted (and <code>onInput</code> is called) when the component receives input: both the initial input, and for any subsequent updates to its input.</p>\n<h3 id=\"onrenderout\"><a name=\"onrenderout\" class=\"anchor\" href=\"#onrenderout\"><span class=\"header-link\"></span></a><code>onRender(out)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>Signature</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>out</code></td>\n<td>The async <code>out</code> for the current render</td>\n</tr>\n</tbody></table><p>The <code>render</code> event is emitted (and <code>onRender</code> is called) when the component is about to render or rerender.</p>\n<h3 id=\"onmount\"><a name=\"onmount\" class=\"anchor\" href=\"#onmount\"><span class=\"header-link\"></span></a><code>onMount()</code></h3><p>The <code>mount</code> event is emitted (and <code>onMount</code> is called) when the component is first mounted to the DOM. For server-rendered components, this is the first event that is emitted only in the browser.</p>\n<p>This is the first point at which <code>this.el</code> and <code>this.els</code> are defined. <code>onMount</code> is commonly used to attach third-party JavaScript to the newly-mounted DOM.</p>\n<p>For example, attaching a library that monitors if the component is in the viewport:</p>\n<code-block lang=\"marko\" lines=\"\">import scrollmonitor from 'scrollmonitor';\n\nclass {\n    onMount() {\n        this.watcher = scrollmonitor.create(this.el);\n        this.watcher.enterViewport(() => console.log('I have entered the viewport'));\n        this.watcher.exitViewport(() => console.log('I have left the viewport'));\n    }\n}</code-block><h3 id=\"onupdate\"><a name=\"onupdate\" class=\"anchor\" href=\"#onupdate\"><span class=\"header-link\"></span></a><code>onUpdate()</code></h3><p>The <code>update</code> event is emitted (and <code>onUpdate</code> is called) when the component is called after a component rerenders and the DOM has been updated. If a rerender does not update the DOM (nothing changed), this event will not fire.</p>\n<h3 id=\"ondestroy\"><a name=\"ondestroy\" class=\"anchor\" href=\"#ondestroy\"><span class=\"header-link\"></span></a><code>onDestroy()</code></h3><p>The <code>destroy</code> event is emitted (and <code>onDestroy</code> is called) when the component is about to unmount from the DOM and cleaned up. <code>onDestroy</code> should be used to do any additional cleanup beyond what Marko handles itself.</p>\n<p>For example, cleaning up from our <code>scrollmonitor</code> example in <a href=\"#onmount\"><code>onMount</code></a>:</p>\n<code-block lang=\"marko\" lines=\"\">import scrollmonitor from 'scrollmonitor';\n\nclass {\n    onMount() {\n        this.watcher = scrollmonitor.create(this.el);\n        this.watcher.enterViewport(() => console.log('Entered the viewport'));\n        this.watcher.exitViewport(() => console.log('Left the viewport'));\n    }\n    onDestroy() {\n        this.watcher.destroy();\n    }\n}</code-block><h2 id=\"dom-manipulation-methods\"><a name=\"dom-manipulation-methods\" class=\"anchor\" href=\"#dom-manipulation-methods\"><span class=\"header-link\"></span></a>DOM manipulation methods</h2><p>The following methods move the component’s root DOM node(s) from the current parent element to a new parent element (or out of the DOM in the case of <code>detach</code>).</p>\n<h3 id=\"appendtotargetel\"><a name=\"appendtotargetel\" class=\"anchor\" href=\"#appendtotargetel\"><span class=\"header-link\"></span></a><code>appendTo(targetEl)</code></h3><p>Moves the UI component’s DOM elements into the position after the target element’s last child.</p>\n<code-block lang=\"js\" lines=\"\">this.appendTo(document.body);</code-block><h3 id=\"insertaftertargetel\"><a name=\"insertaftertargetel\" class=\"anchor\" href=\"#insertaftertargetel\"><span class=\"header-link\"></span></a><code>insertAfter(targetEl)</code></h3><p>Moves the UI component’s DOM elements into the position after the target DOM element.</p>\n<h3 id=\"insertbeforetargetel\"><a name=\"insertbeforetargetel\" class=\"anchor\" href=\"#insertbeforetargetel\"><span class=\"header-link\"></span></a><code>insertBefore(targetEl)</code></h3><p>Moves the UI component’s DOM elements into the position before the target DOM element.</p>\n<h3 id=\"prependtotargetel\"><a name=\"prependtotargetel\" class=\"anchor\" href=\"#prependtotargetel\"><span class=\"header-link\"></span></a><code>prependTo(targetEl)</code></h3><p>Moves the UI component’s DOM elements into the position before the target element’s first child.</p>\n<h3 id=\"replacetargetel\"><a name=\"replacetargetel\" class=\"anchor\" href=\"#replacetargetel\"><span class=\"header-link\"></span></a><code>replace(targetEl)</code></h3><p>Replaces the target element with the UI component’s DOM elements.</p>\n<h3 id=\"replacechildrenoftargetel\"><a name=\"replacechildrenoftargetel\" class=\"anchor\" href=\"#replacechildrenoftargetel\"><span class=\"header-link\"></span></a><code>replaceChildrenOf(targetEl)</code></h3><p>Replaces the target element’s children with the UI component’s DOM elements.</p>\n\n-----\n","export default \"/assets/b53b13f2.svg\";","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/concise.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#shorthand-attributes\\\">Shorthand attributes</a></li><li><a href=\\\"#text\\\">Text</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#root-level-text\\\">Root level text</a></li></ul></li></ul>\");\n-----\n<h1 id=\"concise-syntax\"><a name=\"concise-syntax\" class=\"anchor\" href=\"#concise-syntax\"><span class=\"header-link\"></span></a>Concise syntax</h1><p>Marko&#39;s concise syntax is very similar to the HTML syntax, except it&#39;s more... concise. Essentially, you take an HTML tag, remove the angle brackets (<code>&lt;&gt;</code>) and use indentation rather than a closing tag:</p>\n<p><em>input.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">div class=\"thumbnail\"\n    img src=\"https://example.com/thumb.png\"</code-block><p><em>output.html</em></p>\n<code-block lang=\"html\" lines=\"\"><div class=\"thumbnail\"><img src=\"https://example.com/thumb.png\" /></div></code-block><h2 id=\"shorthand-attributes\"><a name=\"shorthand-attributes\" class=\"anchor\" href=\"#shorthand-attributes\"><span class=\"header-link\"></span></a>Shorthand attributes</h2><p>Marko provides a shorthand for declaring classes and ids on an element:</p>\n<p><em>input.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">div.my-class\nspan#my-id\nbutton#submit.primary.large</code-block><p>Yields this HTML:</p>\n<p><em>output.html</em></p>\n<code-block lang=\"html\" lines=\"\"><div class=\"my-class\"></div>\n<span id=\"my-id\"></span> <button id=\"submit\" class=\"primary large\"></button></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> These shorthand attributes are available within the HTML syntax as well</p>\n</blockquote><h2 id=\"text\"><a name=\"text\" class=\"anchor\" href=\"#text\"><span class=\"header-link\"></span></a>Text</h2><p>Text in concise mode is denoted by two or more dashes (<code>--</code>).</p>\n<p>If there is text on the same line following <code>--</code>, it is single-line text:</p>\n<p><em>single-line-text.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">-- Hello world</code-block><p>The dashes can also follow an element to give it a single text node as a child</p>\n<p><em>single-line-text.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">div -- Hello world</code-block><p>If there is a line break immediately following <code>--</code>, everything following the <code>--</code> at the current indentation is parsed as multi-line line text.</p>\n<p><em>multi-line-text.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">div\n    --\n    Hello world\n    this text\n    is multi-line\n\ndiv\n    --\n    this is more\n    text</code-block><p>A multi-line text block can be ended by the same number of dashes that opened it. This allows it to have siblings:</p>\n<p><em>multi-line-text.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">div\n    img src=\"https://example.com/photo.png\"\n    --\n    Hello world\n    this text\n    is multi-line\n    --\n    span -- text after</code-block><h3 id=\"root-level-text\"><a name=\"root-level-text\" class=\"anchor\" href=\"#root-level-text\"><span class=\"header-link\"></span></a>Root level text</h3><p>There is one &quot;gotcha&quot; that you need to be aware of. The Marko parser starts out in the concise mode. Therefore, given the following template:</p>\n<p><em>input.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">Hello World\nWelcome to Marko</code-block><p>The output would be the following:</p>\n<p><em>output.html</em></p>\n<code-block lang=\"html\" lines=\"\"><Hello World></Hello> <Welcome to Marko></Welcome></code-block><p>Instead, prefix the lines with <code>--</code> so they are parsed as text:</p>\n<p><em>input.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">-- Hello World\n-- Welcome to Marko</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/conditionals-and-lists.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#conditionals\\\">Conditionals</a></li><li><a href=\\\"#lists\\\">Lists</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#always-set-a-key\\\">Always set a key</a></li></ul></li></ul>\");\n-----\n<h1 id=\"conditionals-and-lists\"><a name=\"conditionals-and-lists\" class=\"anchor\" href=\"#conditionals-and-lists\"><span class=\"header-link\"></span></a>Conditionals and Lists</h1><p>While HTML itself does not support conditionally displaying elements or repeating elements, it is a critical part of building any web application. In Marko, this functionality is provided by the <code>&lt;if&gt;</code> and <code>&lt;for&gt;</code> tags.</p>\n<h2 id=\"conditionals\"><a name=\"conditionals\" class=\"anchor\" href=\"#conditionals\"><span class=\"header-link\"></span></a>Conditionals</h2><p>The <code>&lt;if&gt;</code> tag recieves an <a href=\"/docs/syntax/#arguments\">argument</a> which is used to determine if its body content should be present.</p>\n<code-block lang=\"marko\" lines=\"\"><if(user.loggedOut)>\n    <a href=\"/login\">Log in</a>\n</if></code-block><p>As you might expect, there are also <code>&lt;else&gt;</code> and <code>&lt;else-if&gt;</code> tags as well:</p>\n<code-block lang=\"marko\" lines=\"\"><if(user.loggedOut)>\n    <a href=\"/login\">Log in</a>\n</if>\n<else-if(!user.trappedForever)>\n    <a href=\"/logout\">Log out</a>\n</else-if>\n<else>\n    Hey &#36;{user.name}!\n</else></code-block><h2 id=\"lists\"><a name=\"lists\" class=\"anchor\" href=\"#lists\"><span class=\"header-link\"></span></a>Lists</h2><p>If you have a list of data and need to represent it in the UI, the <code>&lt;for&gt;</code> tag is probably what you&#39;re looking for. The <code>&lt;for&gt;</code> tag passes each item and its index to its body as <a href=\"/docs/syntax/#parameters\">parameters</a>.</p>\n<code-block lang=\"marko\" lines=\"\"><ul>\n    <for|color, index| of=colors>\n        <li>&#36;{index}: &#36;{color}</li>\n    </for>\n</ul></code-block><p>The <code>&lt;for&gt;</code> tag actually support 3 different flavors:</p>\n<ul>\n<li><a href=\"/docs/core-tags/#iterating-over-a-list\"><code>&lt;for|item, index, array| of=array&gt;</code></a> renders its body for each item of an array. It&#39;s similar to the JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loop.</li>\n<li><a href=\"/docs/core-tags/#iterating-over-an-objects-properties\"><code>&lt;for|key, value| in=object&gt;</code></a> renders its body for each property in an object. It&#39;s similar to the JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"><code>for...in</code></a> loop.</li>\n<li><a href=\"/docs/core-tags/#iterating-between-a-range-of-numbers\"><code>&lt;for|value| from=first to=last step=increment&gt;</code></a> renders its body for each value in between and including <code>from</code> and <code>to</code>.</li>\n</ul>\n<h3 id=\"always-set-a-key\"><a name=\"always-set-a-key\" class=\"anchor\" href=\"#always-set-a-key\"><span class=\"header-link\"></span></a>Always set a <code>key</code></h3><p>Marko automatically keeps your UI in sync with the state behind it, but one place where it needs a little extra help is repeated content. Specifying keys gives Marko a way to identify items in a list and keep track of which items have been changed, added, or removed.</p>\n<p>A key should be a string or number that uniquely identifies an item in the list and differentiates it from its siblings. The same key value should never be used twice! Often, you will use something like an <code>id</code> property.</p>\n<code-block lang=\"marko\" lines=\"\"><for|user| of=users>\n    <user-card key=user.id data=user/>\n</for></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> If you have multiple tags underneath <code>&lt;for&gt;</code>, you can key only the first tag and that is enough to properly identify its sibilings as well</p>\n<code-block lang=\"marko\" lines=\"\"><dl>\n    <for|entry| of=entries>\n        <!-- only the first tag needs a key -->\n        <dt key=entry.id>&#36;{entry.word}</dt>\n        <!-- This key can be omitted -->\n        <dd>&#36;{entry.definition}</dd>\n    </for>\n</dl></code-block></blockquote><blockquote class=\"note\"><p><strong>Note:</strong> If a key is not set, Marko will use the index of an item as its key. However this only works perfectly if items are only ever added or removed at the end of a list. Here&#39;s an example where things break down: if we have a list of <code>[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</code> and reverse the order, index keys would cause &quot;A&quot; to be transformed into &quot;C&quot; (and &quot;C&quot; into &quot;A&quot;), rather than just swapping them. Additionally if these components contained state, the new &quot;C&quot; would contain the state from the old &quot;A&quot; (and vice-versa). Be aware, stateful components include tags like the native <code>&lt;input&gt;</code> element. For this reason <strong>it is always recommended to set a <code>key</code> on tags in a <code>&lt;for&gt;</code>.</strong></p>\n</blockquote>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/core-tags.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#if-else-if-else\\\">&lt;if&gt;, &lt;else-if&gt;, &lt;else&gt;</a></li><li><a href=\\\"#for\\\">&lt;for&gt;</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#iterating-over-a-list\\\">Iterating over a list</a></li><li><a href=\\\"#iterating-over-an-objects-properties\\\">Iterating over an object’s properties</a></li><li><a href=\\\"#iterating-between-a-range-of-numbers\\\">Iterating between a range of numbers</a></li></ul></li><li><a href=\\\"#while\\\">&lt;while&gt;</a></li><li><a href=\\\"#macro\\\">&lt;macro&gt;</a></li><li><a href=\\\"#await\\\">&lt;await&gt;</a></li><li><a href=\\\"#include-text\\\">&lt;include-text&gt;</a></li><li><a href=\\\"#include-html\\\">&lt;include-html&gt;</a></li><li><a href=\\\"#html-comment\\\">&lt;html-comment&gt;</a></li><li><a href=\\\"#deprecated\\\">Deprecated</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#marko-preserve-whitespace\\\">marko-preserve-whitespace</a></li><li><a href=\\\"#marko-body\\\">marko-body</a></li></ul></li></ul>\");\n-----\n<h1 id=\"core-tags-and-attributes\"><a name=\"core-tags-and-attributes\" class=\"anchor\" href=\"#core-tags-and-attributes\"><span class=\"header-link\"></span></a>Core tags and attributes</h1><p>Much like <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">HTML has its own native tags</a>, Marko includes <strong>core tags</strong> and <strong>global attributes</strong> for declaratively building modern applications.</p>\n<h2 id=\"if-else-if-else\"><a name=\"if-else-if-else\" class=\"anchor\" href=\"#if-else-if-else\"><span class=\"header-link\"></span></a><code>&lt;if&gt;</code>, <code>&lt;else-if&gt;</code>, <code>&lt;else&gt;</code></h2><p>Like the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">equivalent JavaScript statements</a>, these tags render <a href=\"/docs/conditionals-and-lists/#conditionals\">conditional content</a>:</p>\n<code-block lang=\"marko\" lines=\"\"><if(arriving)>\n  Hey there\n</if>\n<else-if(leaving)>\n  Bye now\n</else-if>\n<else>\n  What’s up?\n</else></code-block><p>They support any JavaScript expression in their <a href=\"/docs/syntax/#arguments\">tag arguments</a>:</p>\n<code-block lang=\"marko\" lines=\"\"><if(Math.random() > 0.5)>\n  <p>50% chance to see this</p>\n</if></code-block><blockquote class=\"note\"><p><strong>Note:</strong> The <a href=\"https://github.com/marko-js/marko/wiki/Deprecation:-control-flow-attributes\">alternate conditional attribute syntax is deprecated</a>:</p>\n<code-block lang=\"marko\" lines=\"\"><p if(arriving)>Hey there</p>\n<p else-if(leaving)>Bye now</p>\n<p else>What’s up?</p></code-block></blockquote><h2 id=\"for\"><a name=\"for\" class=\"anchor\" href=\"#for\"><span class=\"header-link\"></span></a><code>&lt;for&gt;</code></h2><p>The <code>&lt;for&gt;</code> tag iterates over <a href=\"#iterating-over-a-list\">arrays/array-likes</a>, <a href=\"#iterating-over-an-objects-properties\">object properties</a>, and <a href=\"#iterating-between-a-range-of-numbers\">ranges of numbers</a>.</p>\n<blockquote class=\"note\"><p><strong>Note:</strong> You may see <code>for()</code> as a tag or attribute. This <a href=\"https://github.com/marko-js/marko/issues/577\">kinda-like-JS-but-not-really</a> syntax <a href=\"https://github.com/marko-js/marko/pull/1238\">is deprecated</a>:</p>\n<code-block lang=\"marko\" lines=\"\"><li for(color in colors)>&#36;{color}</li></code-block></blockquote><h3 id=\"iterating-over-a-list\"><a name=\"iterating-over-a-list\" class=\"anchor\" href=\"#iterating-over-a-list\"><span class=\"header-link\"></span></a>Iterating over a list</h3><p>Like the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">JavaScript <code>for...of</code> loop statement</a>, giving <code>&lt;for&gt;</code>’s <code>of</code> attribute a value will loop over that value as an array or iterable.</p>\n<p>The current <strong>item</strong>, <strong>index</strong>, and the <strong>iterating list</strong> are provided as <a href=\"/docs/syntax/#parameters\">tag parameters</a>:</p>\n<code-block lang=\"marko\" lines=\"\">&#36; const colors = [\"red\", \"green\", \"blue\"];\n<ol>\n  <for|color, index, colorList| of=colors>\n    <li value=index>&#36;{color}</li>\n  </for>\n</ol></code-block><p>The output HTML would be:</p>\n<code-block lang=\"html\" lines=\"\"><ol>\n  <li value=\"0\">red</li>\n  <li value=\"1\">green</li>\n  <li value=\"2\">blue</li>\n</ol></code-block><blockquote class=\"null\"><p><strong>Pro Tip</strong>: <code>&lt;for&gt;</code>’s <code>of</code> attribute can loop over any iterable, just like JavaScript’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a>. This includes strings, <code>NodeList</code>s, <code>Set</code>s… any object with zero-indexed numeric properties and a <code>.length</code>, basically.</p>\n</blockquote><h3 id=\"iterating-over-an-objects-properties\"><a name=\"iterating-over-an-objects-properties\" class=\"anchor\" href=\"#iterating-over-an-objects-properties\"><span class=\"header-link\"></span></a>Iterating over an object’s properties</h3><p>Like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">JavaScript’s <code>for...in</code> loop statement</a>, giving <code>&lt;for&gt;</code> an object as its <code>in</code> attribute will loop over that object’s properties.</p>\n<p>The current <strong>property name</strong> and <strong>property value</strong> are provided as <a href=\"/docs/syntax/#parameters\">tag parameters</a>:</p>\n<code-block lang=\"marko\" lines=\"\">&#36; const settings = {\n  \"Dark Mode\": false,\n  \"Fullscreen\": true\n};\n\n<dl>\n  <for|name, enabled| in=settings>\n    <dt>&#36;{name}:</dt>\n    <dd>&#36;{enabled ? \"on\" : \"off\"}</dd>\n  </for>\n</dl></code-block><p>The output HTML would be:</p>\n<code-block lang=\"html\" lines=\"\"><dl>\n  <dt>Dark Mode:</dt>\n  <dd>off</dd>\n  <dt>Fullscreen:</dt>\n  <dd>on</dd>\n</dl></code-block><h3 id=\"iterating-between-a-range-of-numbers\"><a name=\"iterating-between-a-range-of-numbers\" class=\"anchor\" href=\"#iterating-between-a-range-of-numbers\"><span class=\"header-link\"></span></a>Iterating between a range of numbers</h3><p>The final <code>&lt;for&gt;</code> variant loops between two numbers, by providing <code>from</code> and <code>to</code> attributes. The current number in the range will be provided as a <a href=\"/docs/syntax/#parameters\">tag parameter</a>:</p>\n<code-block lang=\"marko\" lines=\"\"><ol type=\"I\">\n  <for|i| from=0 to=10>\n    <li value=i>&#36;{i}</li>\n  </for>\n</ol></code-block><p>You can also pass an optional <code>step</code> attribute, which defaults to 1 otherwise. <code>step</code> lets you increment by a specific amount:</p>\n<code-block lang=\"marko\" lines=\"\"><ol type=\"I\">\n  <for|i| from=0 to=10 step=2>\n    <li value=i>&#36;{i}</li>\n  </for>\n</ol></code-block><p>…becomes:</p>\n<code-block lang=\"marko\" lines=\"\"><ol type=\"I\">\n  <li value=\"0\">0</li>\n  <li value=\"2\">2</li>\n  <li value=\"4\">4</li>\n  <li value=\"6\">6</li>\n  <li value=\"8\">8</li>\n  <li value=\"10\">10</li>\n</ol></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> This syntax is for generating numbers from nothing. Don’t use it to iterate over an object, like so:</p>\n<code-block lang=\"marko\" lines=\"\"><!-- Inefficient code, do not copy -->\n<ul>\n  <for|i| from=0 to=(myArray.length - 1)>\n    <li>&#36;{myArray[i]}</li>\n  </for>\n</ul></code-block><p>Use <a href=\"#iterating-over-a-list\"><code>&lt;for of&gt;</code></a> instead.</p>\n</blockquote><h2 id=\"while\"><a name=\"while\" class=\"anchor\" href=\"#while\"><span class=\"header-link\"></span></a><code>&lt;while&gt;</code></h2><blockquote class=\"warning\"><p><strong>Warning:</strong> Using <code>&lt;while&gt;</code> is not recommended. Instead, replicate it with <a href=\"#iterating-over-a-list\">an iterable and <code>&lt;for&gt;</code></a>.</p>\n<p>In the future, Marko may restrict value mutation during rendering, for runtime optimizations.</p>\n</blockquote><p>You can repeat a chunk of markup <em>until a condition is met</em> with the <code>while</code> tag:</p>\n<code-block lang=\"marko\" lines=\"\">&#36; let n = 0;\n\n<while(n < 4)>\n  <p>&#36;{n++}</p>\n</while></code-block><p>…becomes:</p>\n<code-block lang=\"html\" lines=\"\"><p>0</p>\n<p>1</p>\n<p>2</p>\n<p>3</p></code-block><blockquote class=\"note\"><p><strong>Note:</strong> <a href=\"https://github.com/marko-js/marko/wiki/Deprecation:-control-flow-attributes\"><code>while</code> as an attribute is deprecated</a>:</p>\n<code-block lang=\"marko\" lines=\"\">&#36; let n = 0;\n\n<p while(n < 4)>&#36;{n++}</p></code-block></blockquote><h2 id=\"macro\"><a name=\"macro\" class=\"anchor\" href=\"#macro\"><span class=\"header-link\"></span></a><code>&lt;macro&gt;</code></h2><p>Macros create reusable markup fragments for later use in the same template they were defined in.</p>\n<p>The <code>&lt;macro&gt;</code> tag defines a macro as a tag via the <code>name</code> attribute. For example, the following macro is registered as the <code>&lt;greeting&gt;</code> tag:</p>\n<code-block lang=\"marko\" lines=\"\"><macro name=\"greeting\">\n  <p>Welcome!</p>\n</macro>\n\n<greeting/>\n<greeting/></code-block><p>…the output HTML would be:</p>\n<code-block lang=\"html\" lines=\"\"><p>Welcome!</p>\n<p>Welcome!</p></code-block><p>Macros become more useful with <a href=\"/docs/syntax/#parameters\">tag parameters</a>, allowing complex templates. In this next example, <code>&lt;greeting&gt;</code> can now receive <code>firstName</code> and <code>count</code> parameters from its parent:</p>\n<code-block lang=\"marko\" lines=\"\"><macro|{ firstName, count }| name=\"greeting\">\n  <p>Hello &#36;{firstName}!\n    <output>You have &#36;{count} new messages.</output>\n  </p>\n</macro>\n\n<greeting firstName=\"Frank\" count=20/></code-block><p>…the output HTML would be:</p>\n<code-block lang=\"html\" lines=\"\"><p>\n  Hello Frank!\n  <output>You have 20 new messages.</output>\n</p></code-block><p>Macros receive input like components do, including <a href=\"/docs/body-content/\">a <code>renderBody</code> for provided body content</a>:</p>\n<code-block lang=\"marko\" lines=\"\"><macro|{ renderBody }| name=\"special-heading\">\n  <h1>\n    <&#36;{renderBody}/>!\n  </h1>\n</macro>\n\n<special-heading>\n  Hello\n</special-heading></code-block><p>…the output HTML would be:</p>\n<code-block lang=\"html\" lines=\"\"><h1>Hello!</h1></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> You can use a macro inside itself for recursive layouts, like displaying directory contents.</p>\n</blockquote><h2 id=\"await\"><a name=\"await\" class=\"anchor\" href=\"#await\"><span class=\"header-link\"></span></a><code>&lt;await&gt;</code></h2><p>The <code>&lt;await&gt;</code> tag <strong>renders markup asynchronously using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></strong>.</p>\n<ul>\n<li>Its <code>&lt;@then&gt;</code> <a href=\"/docs/syntax/#attribute-tag\">attribute tag</a> displays when the Promise <em>resolves</em>, optionally receiving the resolved value as a <a href=\"/docs/syntax/#parameters\">tag parameter</a>.</li>\n<li>Its <code>&lt;@catch&gt;</code> attribute tag displays when the Promise <em>rejects</em>, optionally receiving the rejected value as a tag parameter.</li>\n<li>Its optional <code>&lt;@placeholder&gt;</code> attribute tag displays while the Promise is pending.</li>\n</ul>\n<code-block lang=\"marko\" lines=\"\">&#36; const personRequest = new Promise((resolve, reject) => {\n  setTimeout(() => resolve({ name: 'Frank' }), 1000);\n});\n\n<await(personPromise)>\n  <@placeholder>\n    <!-- Displays while promise is pending -->\n    <label>Loading…\n      <progress></progress>\n    </label>\n  </@placeholder>\n\n  <@then|person|>\n    <!-- Displays if promise resolves -->\n    <p>Hello &#36;{person.name}!</p>\n  </@then>\n\n  <@catch|err|>\n    <!-- Displays if promise rejects -->\n    &#36;{err.name} error: &#36;{err.message}\n  </@catch>\n</await></code-block><p>Optional attributes for <code>&lt;await&gt;</code>:</p>\n<table class=\"markdown-table\"><thead><tr>\n<th align=\"right\">Attribute</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead><tbody><tr>\n<td align=\"right\"><code>timeout</code></td>\n<td>integer</td>\n<td>An optional timeout. If reached, rejects the promise with a <code>TimeoutError</code>.</td>\n</tr>\n<tr>\n<td align=\"right\"><code>name</code></td>\n<td>string</td>\n<td>Improves debugging and ensures ordering with the <code>show-after</code> attribute.</td>\n</tr>\n<tr>\n<td align=\"right\"><code>show-after</code></td>\n<td>string</td>\n<td>Another <code>&lt;await&gt;</code> tag’s <code>name</code>. With <code>client-reorder</code>, ensures that the current <code>&lt;await&gt;</code> block will always show after the named <code>&lt;await&gt;</code>.</td>\n</tr>\n<tr>\n<td align=\"right\"><code>client-reorder</code></td>\n<td>boolean</td>\n<td>If true, anything after this <code>&lt;await&gt;</code> will be server-rendered before the Promise completes, then the fulfilled Promise’s result will be updated with client-side JavaScript.</td>\n</tr>\n</tbody></table><blockquote class=\"null\"><p><strong>Pro Tip</strong>: When using <code>timeout</code>, you can distinguish between <code>TimeoutError</code>s and promise rejections by checking the error’s <code>name</code>:</p>\n<code-block lang=\"marko\" lines=\"\"><await(slowPromise) timeout=5000>\n  <@then>Done</@then>\n  <@catch|err|>\n    <if(err.name === \"TimeoutError\")>\n      Took too long to fetch the data!\n    </if>\n    <else>\n      Promise failed with &#36;{err.message}.\n    </else>\n  </@catch>\n</await></code-block></blockquote><h2 id=\"include-text\"><a name=\"include-text\" class=\"anchor\" href=\"#include-text\"><span class=\"header-link\"></span></a><code>&lt;include-text&gt;</code></h2><p><code>&lt;include-text&gt;</code> inlines text files into a template, escaping HTML syntax characters (<code>&lt;</code>, <code>&quot;</code>, etc.).</p>\n<code-block lang=\"marko\" lines=\"\"><include-text('./foo.txt')/></code-block><p>If you do not want escaping, use <a href=\"#include-html\"><code>&lt;include-html&gt;</code></a> instead.</p>\n<h2 id=\"include-html\"><a name=\"include-html\" class=\"anchor\" href=\"#include-html\"><span class=\"header-link\"></span></a><code>&lt;include-html&gt;</code></h2><p>Like <code>&lt;include-text&gt;</code>, <code>&lt;include-html&gt;</code> inlines the contents of a file. However, this tag <strong>does <em>not</em> escape</strong> special HTML characters.</p>\n<code-block lang=\"marko\" lines=\"\"><include-html('./foo.html')/></code-block><h2 id=\"html-comment\"><a name=\"html-comment\" class=\"anchor\" href=\"#html-comment\"><span class=\"header-link\"></span></a><code>&lt;html-comment&gt;</code></h2><p>Marko removes HTML comment tags from its output. But if you need comments in the output, that’s what <code>&lt;html-comment&gt;</code> is for:</p>\n<code-block lang=\"marko\" lines=\"\"><html-comment>[if IE]><script src=\"html-shiv.js\"></script><![endif]</html-comment></code-block><p>…becomes:</p>\n<code-block lang=\"html\" lines=\"\"><!--[if IE]><script src=\"html-shiv.js\"></script><![endif]--></code-block><blockquote class=\"note\"><p><strong>Note:</strong> You might see the <strong>deprecated</strong> <code>&lt;marko-compiler-options&gt;</code> tag used to configure comments for the template:</p>\n<code-block lang=\"marko\" lines=\"\"><marko-compiler-options preserve-comments/></code-block></blockquote><h2 id=\"deprecated\"><a name=\"deprecated\" class=\"anchor\" href=\"#deprecated\"><span class=\"header-link\"></span></a>Deprecated</h2><p>The following tags and attributes are deprecated, but you might see them in older code.</p>\n<h3 id=\"marko-preserve-whitespace\"><a name=\"marko-preserve-whitespace\" class=\"anchor\" href=\"#marko-preserve-whitespace\"><span class=\"header-link\"></span></a><code>marko-preserve-whitespace</code></h3><p>Instead, preserve whitespace with the <code>preserve-whitespace</code> attribute:</p>\n<code-block lang=\"marko\" lines=\"\">style {\n  .lang-python {\n    white-space: pre-wrap;\n  }\n}\n\n<p>You’ll get an error with that line of Python,\n  as it has one too many spaces as indentation:\n  <code.lang-python marko-preserve-whitespace>    <mark> </mark>frobulate()</code>\n</p></code-block><h3 id=\"marko-body\"><a name=\"marko-body\" class=\"anchor\" href=\"#marko-body\"><span class=\"header-link\"></span></a><code>marko-body</code></h3><p>The <code>marko-body</code> attribute controls how a tag’s body content is parsed, with the following possible values:</p>\n<ul>\n<li><code>html</code> (default) — Body content is parsed as HTML.</li>\n<li><code>static-text</code> — Body content is parsed as static text, ignoring HTML tags and <a href=\"/docs/syntax//#dynamic-text\">dynamic text <code>&amp;#36;{placeholders}</code></a>.</li>\n<li><code>parsed-text</code> — Body content is parsed as text, ignoring HTML tags. Does not ignore <code>&amp;#36;{placeholders}</code>.</li>\n</ul>\n<code-block lang=\"marko\" lines=\"\"><p marko-body=\"static-text\">\n  This is just one\n  <b malformed-attribute=\">\n    Hello &#36;{THIS IS NOT VALID}!\n  </b>\n  big text block\n</p></code-block><p>…becomes:</p>\n<code-block lang=\"html\" lines=\"\"><p>\n  This is just one &amp;lt;b malformed-attribute=\"&amp;gt; Hello &#36;{THIS IS NOT VALID}!\n  &amp;lt;/b&amp;gt; big text block\n</p></code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/custom-tags.md\", \"<ul class=\\\"toc toc-level0\\\"><li><a href=\\\"#custom-tags\\\">Custom tags</a><ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#your-first-custom-tag\\\">Your first custom tag</a></li><li><a href=\\\"#how-tags-are-discovered\\\">How tags are discovered</a></li><li><a href=\\\"#tag-directories\\\">Tag directories</a></li><li><a href=\\\"#using-tags-from-npm\\\">Using tags from npm</a></li><li><a href=\\\"#publishing-tags-to-npm\\\">Publishing tags to npm</a></li></ul></li><li><a href=\\\"#macros\\\">Macros</a></li></ul>\");\n-----\n<h1 id=\"custom-tags\"><a name=\"custom-tags\" class=\"anchor\" href=\"#custom-tags\"><span class=\"header-link\"></span></a>Custom tags</h1><p>Custom tags allow you to break up your application UI into encapsulated, reusable components.</p>\n<h2 id=\"your-first-custom-tag\"><a name=\"your-first-custom-tag\" class=\"anchor\" href=\"#your-first-custom-tag\"><span class=\"header-link\"></span></a>Your first custom tag</h2><p>Let&#39;s say we have a page with the following content:</p>\n<p><em>page.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><!doctype html>\n<html>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html></code-block><p>However, this page is getting pretty complex and unmaintainable. Let&#39;s split out the content into a separate component. To do this, we&#39;ll create a <code>components/</code> folder and inside it a <code>hello.marko</code> file:</p>\n<p><em>components/hello.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><h1>Hello World!</h1></code-block><p>Marko <a href=\"#how-tags-are-discovered\">automatically discovers</a> <code>.marko</code> files under a <code>components/</code> directory, so we can now use the <code>&lt;hello&gt;</code> tag in our page:</p>\n<p><em>page.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><!doctype html>\n<html>\n<body>\n    <hello/>\n</body>\n</html></code-block><p>Now this <code>&lt;hello&gt;</code> tag can be used multiple times, and even on multiple pages. But what if we don&#39;t only want to say hello to the world? Let&#39;s pass some attributes.</p>\n<p><em>page.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><!doctype html>\n<html>\n<body>\n    <hello name=\"World\"/>\n</body>\n</html></code-block><p>The component will receive these attributes as <code>input</code>:</p>\n<p><em>components/hello.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><h1>Hello &#36;{input.name}!</h1></code-block><p>Nice.</p>\n<h2 id=\"how-tags-are-discovered\"><a name=\"how-tags-are-discovered\" class=\"anchor\" href=\"#how-tags-are-discovered\"><span class=\"header-link\"></span></a>How tags are discovered</h2><p>Marko discovers components relative to the <code>.marko</code> file where a custom tag is used. From this file, Marko walks up directories until it finds a <code>components/</code> folder which contains a component matching the name of the custom tag. If it reaches the project root without finding anything, it will then check installed packages for the component.</p>\n<p>Let&#39;s take a look at an example directory structure to better understand this:</p>\n<code-block lang=\"dir\" lines=\"\">components/\n    app-header.marko\n    app-footer.marko\npages/\n    about/\n        components/\n            team-members.marko\n        page.marko\n    home/\n        components/\n            home-banner.marko\n        page.marko</code-block><p>The file <code>pages/home/page.marko</code> can use the following tags:</p>\n<ul>\n<li><code>&lt;app-header&gt;</code></li>\n<li><code>&lt;app-footer&gt;</code></li>\n<li><code>&lt;home-banner&gt;</code></li>\n</ul>\n<p>And the file <code>pages/about/page.marko</code> can use the following tags:</p>\n<ul>\n<li><code>&lt;app-header&gt;</code></li>\n<li><code>&lt;app-footer&gt;</code></li>\n<li><code>&lt;team-members&gt;</code></li>\n</ul>\n<p>The home page can&#39;t see <code>&lt;team-members&gt;</code> and the about page can&#39;t see <code>&lt;home-banner&gt;</code>. By using nested <code>component/</code> directories, we&#39;ve scoped our page-specific components to their respective pages.</p>\n<h2 id=\"tag-directories\"><a name=\"tag-directories\" class=\"anchor\" href=\"#tag-directories\"><span class=\"header-link\"></span></a>Tag directories</h2><p>In addition to a Marko template, the children of <code>components/</code> can be a directory with an <code>index.marko</code> template:</p>\n<code-block lang=\"dir\" lines=\"\">components/\n    app-header/\n        index.marko\n        logo.png\n        style.css\n    app-footer/\n        index.marko</code-block><p>Or a directory with a template whose name matches its parent directory:</p>\n<code-block lang=\"dir\" lines=\"\">components/\n    app-header/\n        app-header.marko\n        app-header.style.css\n        logo.png\n    app-footer/\n        app-footer.marko</code-block><p>This allows you to create components that have other files associated with them and keep those files together in the directory structure.</p>\n<blockquote class=\"protip\"><p><strong>ProTip:</strong>\nYou can take advantage of nested <code>components/</code> directories to create &quot;subcomponents&quot; that are only available to the component that contains them.</p>\n<code-block lang=\"dir\" lines=\"\">components/\n    app-header/\n        components/\n            navigation.marko\n            user-info.marko\n        app-header.marko\n    app-footer/\n        app-footer.marko</code-block></blockquote><h2 id=\"using-tags-from-npm\"><a name=\"using-tags-from-npm\" class=\"anchor\" href=\"#using-tags-from-npm\"><span class=\"header-link\"></span></a>Using tags from npm</h2><p>To use <a href=\"https://www.npmjs.com/search?q=keywords%3Amarko%20components\">tags from npm</a>, ensure that the package is installed and listed in your <code>package.json</code> dependencies:</p>\n<code-block lang=\"\" lines=\"\">npm install --save @marko/match-media</code-block><p>Marko discover tags from packages defined in your <code>package.json</code>, so you can start using them right away:</p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    <match-media|{ mobile }| mobile=\"max-width:30em\">\n        <!-- nice -->\n    </match-media>\n</div></code-block><h2 id=\"publishing-tags-to-npm\"><a name=\"publishing-tags-to-npm\" class=\"anchor\" href=\"#publishing-tags-to-npm\"><span class=\"header-link\"></span></a>Publishing tags to npm</h2><p>We saw above that tags from npm are automatically discovered. In order to make this work, your package must include a <a href=\"/docs/marko-json/\"><code>marko.json</code></a> at the root.</p>\n<p><em>marko.json</em></p>\n<code-block lang=\"json\" lines=\"\">{\n  \"tags-dir\": \"./dist/components\"\n}</code-block><p>This example file tells Marko to expose all components directly under the <code>dist/components/</code> directory to the application using your package.</p>\n<p>We recommend adding the <code>marko</code> and <code>components</code> keywords to your <code>package.json</code> so others can find your components. Then <code>npm publish</code>!</p>\n<h1 id=\"macros\"><a name=\"macros\" class=\"anchor\" href=\"#macros\"><span class=\"header-link\"></span></a>Macros</h1><p>The <a href=\"/docs/core-tags/#macro\"><code>&lt;macro&gt;</code></a> tag allows you to create custom tags in the same file that they are used in.</p>\n<code-block lang=\"marko\" lines=\"\"><macro|{ name }| name=\"welcome-message\">\n    <h1>Hello &#36;{name}!</h1>\n</macro>\n\n<welcome-message name=\"Patrick\"/>\n<welcome-message name=\"Austin\"/></code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/editor-plugins.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#visual-studio-code\\\">Visual Studio Code</a></li><li><a href=\\\"#atom\\\">Atom</a></li><li><a href=\\\"#sublime\\\">Sublime</a></li><li><a href=\\\"#webstorm\\\">WebStorm</a></li><li><a href=\\\"#textmate\\\">TextMate</a></li><li><a href=\\\"#codemirror\\\">CodeMirror</a></li></ul>\");\n-----\n<h1 id=\"editor-plugins\"><a name=\"editor-plugins\" class=\"anchor\" href=\"#editor-plugins\"><span class=\"header-link\"></span></a>Editor Plugins</h1><h2 id=\"visual-studio-code\"><a name=\"visual-studio-code\" class=\"anchor\" href=\"#visual-studio-code\"><span class=\"header-link\"></span></a>Visual Studio Code</h2><p><a href=\"https://marketplace.visualstudio.com/items?itemName=Marko-JS.marko-vscode\">Documentation</a></p>\n<ul>\n<li>Syntax highlighting</li>\n<li>Tag matching</li>\n<li>Tag, attribute and css autocompletion</li>\n<li>Hyperclick (clickable tags and attributes)</li>\n<li>Surfaces errors within the templates.</li>\n<li>Prettyprinting (<a href=\"https://github.com/marko-js/marko-prettyprint\">marko-prettyprint</a> is used internally)</li>\n</ul>\n<h2 id=\"atom\"><a name=\"atom\" class=\"anchor\" href=\"#atom\"><span class=\"header-link\"></span></a>Atom</h2><p><a href=\"https://atom.io/packages/language-marko\">Documentation</a></p>\n<ul>\n<li>Syntax highlighting</li>\n<li>Tag matching</li>\n<li>Tag and attribute autocompletion</li>\n<li>Code snippets</li>\n<li>Hyperclick (clickable tags and attributes)</li>\n<li>Prettyprinting (<a href=\"https://github.com/marko-js/marko-prettyprint\">marko-prettyprint</a> is used internally)</li>\n</ul>\n<h2 id=\"sublime\"><a name=\"sublime\" class=\"anchor\" href=\"#sublime\"><span class=\"header-link\"></span></a>Sublime</h2><p><a href=\"https://github.com/merwan7/sublime-marko\">Documentation</a></p>\n<ul>\n<li>Syntax highlighting</li>\n</ul>\n<h2 id=\"webstorm\"><a name=\"webstorm\" class=\"anchor\" href=\"#webstorm\"><span class=\"header-link\"></span></a>WebStorm</h2><p><a href=\"https://github.com/marko-js/marko-tmbundle\">Documentation</a></p>\n<ul>\n<li>Syntax highlighting</li>\n</ul>\n<h2 id=\"textmate\"><a name=\"textmate\" class=\"anchor\" href=\"#textmate\"><span class=\"header-link\"></span></a>TextMate</h2><p><a href=\"https://github.com/marko-js/marko-tmbundle\">Documentation</a></p>\n<ul>\n<li>Syntax highlighting</li>\n</ul>\n<h2 id=\"codemirror\"><a name=\"codemirror\" class=\"anchor\" href=\"#codemirror\"><span class=\"header-link\"></span></a>CodeMirror</h2><p><a href=\"https://github.com/patrick-steele-idem/codemirror-atom-modes\">codemirror-atom-modes</a> + <a href=\"https://github.com/marko-js/atom-language-marko\">atom-language-marko</a></p>\n\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/events.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#listening-to-events\\\">Listening to events</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#function-handler\\\">Function handler</a></li><li><a href=\\\"#method-handler\\\">Method handler</a></li><li><a href=\\\"#binding-additional-arguments\\\">Binding additional arguments</a></li></ul></li><li><a href=\\\"#emitting-custom-events\\\">Emitting custom events</a></li></ul>\");\n-----\n<h1 id=\"events\"><a name=\"events\" class=\"anchor\" href=\"#events\"><span class=\"header-link\"></span></a>Events</h1><p>Marko’s event API supports:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events\">Browser events</a> on native tags</li>\n<li>Custom events from <a href=\"/docs/custom-tags/\">custom tags</a></li>\n</ul>\n<p>Note that <strong>you can’t mix event targets and event types</strong>: custom tags can only listen for custom events, and native tags can only listen for native events.</p>\n<h2 id=\"listening-to-events\"><a name=\"listening-to-events\" class=\"anchor\" href=\"#listening-to-events\"><span class=\"header-link\"></span></a>Listening to events</h2><p>Both kinds of events are received with an <code>on-*</code> attribute and the <a href=\"/docs/syntax/#arguments\">attribute arguments syntax</a>:</p>\n<code-block lang=\"marko\" lines=\"\"><input type=\"checkbox\"\n  on-change=(event => console.info(`Checked? &#36;{event.target.checked}`))\n/></code-block><p>The <a href=\"#function-handler\">first argument for the attribute can be a function</a>, or <a href=\"#method-handler\">a string matching a method name</a> on the <a href=\"/docs/class-components/\">component’s <code>class</code> declaration</a>.</p>\n<h3 id=\"function-handler\"><a name=\"function-handler\" class=\"anchor\" href=\"#function-handler\"><span class=\"header-link\"></span></a>Function handler</h3><p>If you provide a function as the first argument of the <code>on-*</code> attribute, the function is called whenever the event fires, like standard event listeners.</p>\n<p>Below we use the <a href=\"/docs/syntax/#static-javascript\"><code>static</code> prefix</a> to define a function, then use it as a <code>click</code> handler:</p>\n<code-block lang=\"marko\" lines=\"\">static function handleClick(event) {\n  event.preventDefault();\n  console.log(\"Clicked!\");\n}\n\n<button on-click(handleClick)>\n  Log click\n</button></code-block><p>In the above example, any time the <code>&lt;button&gt;</code> is clicked the <code>handleClick</code> function is called.</p>\n<p>You can also use an inline arrow function:</p>\n<code-block lang=\"marko\" lines=\"\"><button on-click(() => alert(\"Clicked! 🎉\"))>\n  Celebrate click\n</button></code-block><p>…or anything that evaluates to a function:</p>\n<code-block lang=\"marko\" lines=\"\">&#36; const handler = (\n  input.dontBreakMyApp ?\n    () => console.error(\"Clicked!\") :\n    () => { throw Error(\"Clicked!\") }\n);\n\n<button on-click(handler)>\n  Do not click\n</button></code-block><h3 id=\"method-handler\"><a name=\"method-handler\" class=\"anchor\" href=\"#method-handler\"><span class=\"header-link\"></span></a>Method handler</h3><p>When a string is the first argument, Marko calls a matching method on the component&#39;s <code>class</code>.</p>\n<code-block lang=\"marko\" lines=\"\">class {\n  logChange(newTab) {\n    console.log(`changed to: &#36;{newTab}`);\n  }\n}\n\n<my-tabs on-switch-tab(\"logChange\")>\n  …\n</my-tabs></code-block><p>When <code>&lt;my-tabs&gt;</code> emits the <code>switch-tab</code> event, it will call its <code>logChange</code> method.</p>\n<p>Within the handler you can access the current component instance, read data, emit events, update state, etc.</p>\n<h3 id=\"binding-additional-arguments\"><a name=\"binding-additional-arguments\" class=\"anchor\" href=\"#binding-additional-arguments\"><span class=\"header-link\"></span></a>Binding additional arguments</h3><p>Arguments after the handler are prepended when the handler is called:</p>\n<code-block lang=\"marko\" lines=\"\">static function removeFriend(friendId, event) {\n  event.preventDefault();\n  window.myAPI.unfriend(friendId);\n}\n\n<for|friend| of=input.friends>\n  <button on-click(removeFriend, friend.id)>\n    Unfriend &#36;{friend.name}\n  </button>\n</for></code-block><p>Here we share the logic for <code>removeFriend()</code> with each <code>friend</code> in the <code>friends</code> array. When the <code>&lt;button&gt;</code> is clicked, the <code>id</code> of the removed <code>friend</code> is passed to the <code>removeFriend()</code>, handler followed by the DOM <code>click</code> event.</p>\n<h2 id=\"emitting-custom-events\"><a name=\"emitting-custom-events\" class=\"anchor\" href=\"#emitting-custom-events\"><span class=\"header-link\"></span></a>Emitting custom events</h2><p>The recommended way for a <a href=\"/docs/custom-tags/\">custom tag</a> to communicate with its parent is through <strong>custom events</strong>.</p>\n<p>All components implement a <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">Node.js-style event emitter</a> to send events to parent components.</p>\n<p><em>email-input.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">class {\n  handleChange(event) {\n    if (event.target.validity.valid) {\n      // Only emit email-changes if they are valid.\n      this.emit(\"email-change\", { email: event.target.value });\n    }\n  }\n}\n\n<input type=\"email\" name=input.name on-change(\"handleChange\")/></code-block><p>The above code listens to native <code>change</code> events from the <code>&lt;input&gt;</code> element, and then emits its own <code>email-change</code> event if the change was valid.</p>\n<code-block lang=\"marko\" lines=\"\"><form>\n  <email-input name=\"email\" on-email-change(...)/>\n</form></code-block><blockquote class=\"note\"><p><strong>Note:</strong> Events are not received as <code>input</code>; you cannot access <code>input.onEmailChange</code>. Instead, they set up subscriptions.</p>\n</blockquote>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/express.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#installation\\\">Installation</a></li><li><a href=\\\"#skip-the-view-engine\\\">Skip the view engine</a></li><li><a href=\\\"#usage\\\">Usage</a></li></ul>\");\n-----\n<h1 id=\"express-marko\"><a name=\"express-marko\" class=\"anchor\" href=\"#express-marko\"><span class=\"header-link\"></span></a>Express + Marko</h1><p>See the <a href=\"https://github.com/marko-js/examples/tree/master/examples/lasso-express\">marko-express</a> sample\nproject for a working example.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"anchor\" href=\"#installation\"><span class=\"header-link\"></span></a>Installation</h2><code-block lang=\"\" lines=\"\">npm install express --save\nnpm install marko --save</code-block><h2 id=\"skip-the-view-engine\"><a name=\"skip-the-view-engine\" class=\"anchor\" href=\"#skip-the-view-engine\"><span class=\"header-link\"></span></a>Skip the view engine</h2><p>The built in view engine for express may be asynchronous, but it doesn&#39;t support streaming (check out <a href=\"http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/\">Rediscovering Progressive HTML Rendering</a> to see why this is so important). So instead we&#39;ll <a href=\"https://strongloop.com/strongblog/bypassing-express-view-rendering-for-speed-and-modularity/\">bypass the view engine</a>.</p>\n<h2 id=\"usage\"><a name=\"usage\" class=\"anchor\" href=\"#usage\"><span class=\"header-link\"></span></a>Usage</h2><p>Marko provides a submodule (<code>marko/express</code>) to add a <code>res.marko</code> method to the express response object. This function works much like <code>res.render</code>, but doesn&#39;t impose the restrictions of the express view engine and allows you to take full advantage of Marko&#39;s streaming and modular approach to templates.</p>\n<p>By using <code>res.marko</code> you&#39;ll automatically have access to <code>req</code>, <code>res</code>, <code>app</code>, <code>app.locals</code>, and <code>res.locals</code> from within your Marko template and custom tags. These values are added to <code>out.global</code>.</p>\n<code-block lang=\"javascript\" lines=\"\">require(\"marko/node-require\"); // Allow Node.js to require and load `.marko` files\n\nvar express = require(\"express\");\nvar markoExpress = require(\"marko/express\");\nvar template = require(\"./template\");\n\nvar app = express();\n\napp.use(markoExpress()); //enable res.marko(template, data)\n\napp.get(\"/\", function(req, res) {\n  res.marko(template, {\n    name: \"Frank\",\n    count: 30,\n    colors: [\"red\", \"green\", \"blue\"]\n  });\n});\n\napp.listen(8080);</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/fastify.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#installation\\\">Installation</a></li><li><a href=\\\"#usage\\\">Usage</a></li></ul>\");\n-----\n<h1 id=\"fastify-marko\"><a name=\"fastify-marko\" class=\"anchor\" href=\"#fastify-marko\"><span class=\"header-link\"></span></a>Fastify + Marko</h1><p>See the <a href=\"https://github.com/marko-js/examples/tree/master/examples/fastify\">marko-fastify</a> sample\nproject for a fully-working example.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"anchor\" href=\"#installation\"><span class=\"header-link\"></span></a>Installation</h2><code-block lang=\"bash\" lines=\"\">npm install fastify --save\nnpm install point-of-view --save\nnpm install marko --save</code-block><h2 id=\"usage\"><a name=\"usage\" class=\"anchor\" href=\"#usage\"><span class=\"header-link\"></span></a>Usage</h2><code-block lang=\"js\" lines=\"\">const fastify = require(\"fastify\")();\n\nfastify.register(require(\"point-of-view\"), {\n  engine: {\n    marko: require(\"marko\")\n  }\n});\n\nfastify.get(\"/\", (req, reply) => {\n  reply.view(\"/index.marko\", {\n    name: \"Frank\",\n    count: 30,\n    colors: [\"red\", \"green\", \"blue\"]\n  });\n});\n\nfastify.listen(8080, err => {\n  if (err) throw err;\n  console.log(`Server listening on &#36;{fastify.server.address().port}`);\n});</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/getting-started.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#hello-world\\\">Hello world</a></li><li><a href=\\\"#a-simple-component\\\">A simple component</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#adding-state\\\">Adding state</a></li></ul></li></ul>\");\n-----\n<h1 id=\"getting-started\"><a name=\"getting-started\" class=\"anchor\" href=\"#getting-started\"><span class=\"header-link\"></span></a>Getting started</h1><p>The easiest way to get started with Marko is to use the <a href=\"/try-online\">Try Online</a> feature. You can just open it in another tab and follow along. If you&#39;d rather develop locally, check out the <a href=\"/docs/installing/\">Installation</a> page.</p>\n<h2 id=\"hello-world\"><a name=\"hello-world\" class=\"anchor\" href=\"#hello-world\"><span class=\"header-link\"></span></a>Hello world</h2><p>Marko makes it easy to represent your UI using a <a href=\"/docs/syntax/\">syntax</a> that is like HTML:</p>\n<p><em>hello.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><h1>Hello World</h1></code-block><p>In fact, Marko is so much like HTML, that you can use it as a replacement for a templating language like handlebars, mustache, or pug:</p>\n<p><em>template.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><!doctype html>\n<html>\n<head>\n    <title>Hello World</title>\n</head>\n<body>\n    <h1>Hello World</h1>\n</body>\n</html></code-block><p>However, Marko is much more than a templating language. It&#39;s a language that allows you to declaratively build an application by describing how the application view changes over time and in response to user actions.</p>\n<p>In the browser, when the data representing your UI changes, Marko will automatically and efficiently update the DOM to reflect the changes.</p>\n<h2 id=\"a-simple-component\"><a name=\"a-simple-component\" class=\"anchor\" href=\"#a-simple-component\"><span class=\"header-link\"></span></a>A simple component</h2><p>Let&#39;s say we want to perform an action once a <code>&lt;button&gt;</code> is clicked:</p>\n<p><em>button.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><button>Click me!</button></code-block><p>Marko makes this really easy, allowing you to define a <code>class</code> for a component right in the <code>.marko</code> view and call methods of that class with <code>on-</code> attributes:</p>\n<p><em>button.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">class {\n    sayHi() {\n        alert(\"Hi!\");\n    }\n}\n\n<button on-click(\"sayHi\")>Click me!</button></code-block><h3 id=\"adding-state\"><a name=\"adding-state\" class=\"anchor\" href=\"#adding-state\"><span class=\"header-link\"></span></a>Adding state</h3><p>Alerting when a button is clicked is great, but what about updating your UI in response to an action? Marko&#39;s stateful components make this easy. All you need to do is set <code>this.state</code> from inside your component&#39;s class. This makes a new <code>state</code> variable available to your view. When a value in <code>this.state</code> is changed, the view will automatically re-render and only update the part of the DOM that changed.</p>\n<p><em>counter.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">class {\n    onCreate() {\n        this.state = {\n            count: 0\n        };\n    }\n    increment() {\n        this.state.count++;\n    }\n}\n\n<div>The current count is &#36;{state.count}</div>\n<button on-click(\"increment\")>Click me!</button></code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/hapi.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#installation\\\">Installation</a></li><li><a href=\\\"#usage\\\">Usage</a></li></ul>\");\n-----\n<h1 id=\"hapi-marko\"><a name=\"hapi-marko\" class=\"anchor\" href=\"#hapi-marko\"><span class=\"header-link\"></span></a>Hapi + Marko</h1><p>See the <a href=\"https://github.com/marko-js/examples/tree/master/examples/hapi\">marko-hapi</a> sample\nproject for a working example.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"anchor\" href=\"#installation\"><span class=\"header-link\"></span></a>Installation</h2><code-block lang=\"bash\" lines=\"\">npm install hapi --save\nnpm install marko --save</code-block><h2 id=\"usage\"><a name=\"usage\" class=\"anchor\" href=\"#usage\"><span class=\"header-link\"></span></a>Usage</h2><code-block lang=\"javascript\" lines=\"\">\"use strict\";\n\nrequire(\"marko/node-require\");\n\nconst Hapi = require(\"hapi\");\n\nconst indexTemplate = require(\"./index\");\n\nconst server = new Hapi.Server();\nconst port = 8080;\n\nserver.connection({ port });\n\nserver.route({\n  method: \"GET\",\n  path: \"/\",\n  handler(request, reply) {\n    return reply(\n      indexTemplate.stream({\n        name: \"Frank\",\n        count: 30,\n        colors: [\"red\", \"green\", \"blue\"]\n      })\n    ).type(\"text/html\");\n  }\n});\n\nserver.start(err => {\n  if (err) {\n    throw err;\n  }\n\n  console.log(`Server running on port: &#36;{port}`);\n});</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/http.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#installation\\\">Installation</a></li><li><a href=\\\"#usage\\\">Usage</a></li></ul>\");\n-----\n<h1 id=\"marko-http-server\"><a name=\"marko-http-server\" class=\"anchor\" href=\"#marko-http-server\"><span class=\"header-link\"></span></a>Marko + HTTP Server</h1><p>See the <a href=\"https://github.com/marko-js/examples/tree/master/examples/http\">marko-http</a> sample\nproject for a working example.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"anchor\" href=\"#installation\"><span class=\"header-link\"></span></a>Installation</h2><code-block lang=\"bash\" lines=\"\">npm install marko --save</code-block><h2 id=\"usage\"><a name=\"usage\" class=\"anchor\" href=\"#usage\"><span class=\"header-link\"></span></a>Usage</h2><code-block lang=\"js\" lines=\"\">require(\"marko/node-require\").install();\n\nconst http = require(\"http\");\nconst server = http.createServer();\n\nconst port = 8080;\nconst indexTemplate = require(\"./index.marko\");\n\nserver.on(\"request\", (req, res) => {\n  indexTemplate.render(\n    {\n      name: \"Frank\",\n      count: 30,\n      colors: [\"red\", \"green\", \"blue\"]\n    },\n    res\n  );\n});\n\nserver.listen(port, () => {\n  console.log(`Successfully started server on port &#36;{port}`);\n});</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/huncwot.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#installation\\\">Installation</a></li><li><a href=\\\"#usage\\\">Usage</a></li></ul>\");\n-----\n<h1 id=\"huncwot-marko\"><a name=\"huncwot-marko\" class=\"anchor\" href=\"#huncwot-marko\"><span class=\"header-link\"></span></a>Huncwot + Marko</h1><p>See the <a href=\"https://github.com/zaiste/marko-huncwot\">marko-huncwot</a> sample\nproject for a working example.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"anchor\" href=\"#installation\"><span class=\"header-link\"></span></a>Installation</h2><code-block lang=\"undefined\" lines=\"\">yarn add huncwot marko</code-block><h2 id=\"usage\"><a name=\"usage\" class=\"anchor\" href=\"#usage\"><span class=\"header-link\"></span></a>Usage</h2><code-block lang=\"javascript\" lines=\"\">require(\"marko/node-require\");\n\nconst Huncwot = require(\"huncwot\");\n\nconst app = new Huncwot();\nconst template = require(\"./index.marko\");\n\napp.get(\"/\", request => template.stream({ name: \"Frank\" }));\n\napp.listen(3000);</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/installing.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#trying-out-marko\\\">Trying out Marko</a></li><li><a href=\\\"#creating-new-apps\\\">Creating new apps</a></li><li><a href=\\\"#direct-usage\\\">Direct usage</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#installing\\\">Installing</a></li><li><a href=\\\"#in-the-browser\\\">In the browser</a></li><li><a href=\\\"#on-the-server\\\">On the server</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#require-marko-views\\\">Require Marko views</a></li><li><a href=\\\"#serving-a-simple-page\\\">Serving a simple page</a></li><li><a href=\\\"#initializing-server-rendered-components\\\">Initializing server-rendered components</a></li></ul></li></ul></li></ul>\");\n-----\n<h1 id=\"installation\"><a name=\"installation\" class=\"anchor\" href=\"#installation\"><span class=\"header-link\"></span></a>Installation</h1><h2 id=\"trying-out-marko\"><a name=\"trying-out-marko\" class=\"anchor\" href=\"#trying-out-marko\"><span class=\"header-link\"></span></a>Trying out Marko</h2><p>If you just want to play around with Marko in the browser, head on over to our <a href=\"/try-online\">Try Online</a> feature. You&#39;ll be able to develop a Marko application right in your browser.</p>\n<h2 id=\"creating-new-apps\"><a name=\"creating-new-apps\" class=\"anchor\" href=\"#creating-new-apps\"><span class=\"header-link\"></span></a>Creating new apps</h2><p>If you&#39;re starting from scratch, you can use Marko&#39;s <a href=\"https://github.com/marko-js/cli\">cli</a> commands to quickly create a starter app:</p>\n<code-block lang=\"bash\" lines=\"\">npx @marko/create</code-block><h2 id=\"direct-usage\"><a name=\"direct-usage\" class=\"anchor\" href=\"#direct-usage\"><span class=\"header-link\"></span></a>Direct usage</h2><h3 id=\"installing\"><a name=\"installing\" class=\"anchor\" href=\"#installing\"><span class=\"header-link\"></span></a>Installing</h3><p>The Marko compiler runs on <a href=\"https://nodejs.org/\">Node.js</a> and can be installed using <a href=\"https://www.npmjs.com/package/marko\">npm</a>:</p>\n<code-block lang=\"\" lines=\"\">npm install marko</code-block><p>or using <a href=\"https://yarnpkg.com\">yarn</a>:</p>\n<code-block lang=\"\" lines=\"\">yarn add marko</code-block><h3 id=\"in-the-browser\"><a name=\"in-the-browser\" class=\"anchor\" href=\"#in-the-browser\"><span class=\"header-link\"></span></a>In the browser</h3><p>Let&#39;s say we have a simple view that we want to render in the browser: <code>hello.marko</code></p>\n<p><em>hello.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><h1>Hello &#36;{input.name}</h1></code-block><p>First, let&#39;s create a <code>client.js</code> that requires the view and renders it to the body:</p>\n<p><em>client.js</em></p>\n<code-block lang=\"js\" lines=\"\">var helloComponent = require(\"./hello\");\n\nhelloComponent.renderSync({ name: \"Marko\" }).appendTo(document.body);</code-block><p>We will also create a barebones HTML page to host our application:</p>\n<p><em>index.html</em></p>\n<code-block lang=\"\" lines=\"\"><!doctype html>\n<html>\n<head>\n    <title>Marko Example</title>\n</head>\n<body>\n\n</body>\n</html></code-block><p>Now, we need to bundle these files for use in the browser. We can use a tool called <a href=\"https://github.com/lasso-js/lasso\"><code>lasso</code></a> to do that for us, so let&#39;s get it (and the marko plugin) installed:</p>\n<code-block lang=\"\" lines=\"\">npm install --global lasso-cli\nnpm install --save lasso lasso-marko</code-block><p>Now we can build our bundle for the browser:</p>\n<code-block lang=\"\" lines=\"\">lasso --main client.js --plugins lasso-marko --inject-into index.html</code-block><p>This builds a <code>client.js</code> file to the newly created <code>static/</code> directory and injects the required <code>&lt;script&gt;</code> tags into our HTML page to load our application in the browser. If we had css in the view then <code>&lt;link&gt;</code> tags would have also been added.</p>\n<p>Load up that page in your browser and you should see <code>Hello Marko</code> staring back at you.</p>\n<h3 id=\"on-the-server\"><a name=\"on-the-server\" class=\"anchor\" href=\"#on-the-server\"><span class=\"header-link\"></span></a>On the server</h3><h4 id=\"require-marko-views\"><a name=\"require-marko-views\" class=\"anchor\" href=\"#require-marko-views\"><span class=\"header-link\"></span></a>Require Marko views</h4><p>Marko provides a custom Node.js require extension that allows you to <code>require</code> Marko views exactly like a standard JavaScript module. Take the following example <code>server.js</code>:</p>\n<p><em>hello.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    Hello &#36;{input.name}!\n</div></code-block><p><em>server.js</em></p>\n<code-block lang=\"js\" lines=\"\">// The following line installs the Node.js require extension\n// for `.marko` files.  This should be called once near the start\n// of your application before requiring any `*.marko` files.\nrequire(\"marko/node-require\");\n\nvar fs = require(\"fs\");\n\n// Load a Marko view by requiring a .marko file:\nvar hello = require(\"./hello\");\nvar out = fs.createWriteStream(\"hello.html\", { encoding: \"utf8\" });\nhello.render({ name: \"Frank\" }, out);</code-block><p>Using the Node.js require extension is completely optional. If you prefer to not use the Node.js require extension then you will need to precompile all of the marko templates using <a href=\"https://github.com/marko-js/cli\">Marko CLI</a>:</p>\n<code-block lang=\"bash\" lines=\"\">marko compile hello.marko</code-block><p>This will produce a <code>hello.marko.js</code> file next to the original template. The generated <code>.js</code> file will be what gets loaded by the Node.js runtime. It is important to leave off the <code>.marko</code> extension when requiring a Marko template so that the <code>.js</code> will be resolved correctly.</p>\n<p>If you wish to only use the require extension in development, you can conditionally require it.</p>\n<code-block lang=\"js\" lines=\"\">if (!process.env.NODE_ENV) {\n  require(\"marko/node-require\");\n}</code-block><h4 id=\"serving-a-simple-page\"><a name=\"serving-a-simple-page\" class=\"anchor\" href=\"#serving-a-simple-page\"><span class=\"header-link\"></span></a>Serving a simple page</h4><p>Let&#39;s update <code>server.js</code> to serve the view from an http server:</p>\n<p><em>server.js</em></p>\n<code-block lang=\"js\" lines=\"\">// Allow requiring `.marko` files\nrequire(\"marko/node-require\");\n\nvar http = require(\"http\");\nvar hello = require(\"./hello\");\nvar port = 8080;\n\nhttp\n  .createServer((req, res) => {\n    // let the browser know html is coming\n    res.setHeader(\"content-type\", \"text/html\");\n\n    // render the output to the `res` output stream\n    hello.render({ name: \"Marko\" }, res);\n  })\n  .listen(port);</code-block><p>And give <code>hello.marko</code> some content:</p>\n<p><em>hello.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><h1>Hello &#36;{input.name}</h1></code-block><p>Start the server (<code>node server.js</code>) and open your browser to <a href=\"http://localhost:8080\">http://localhost:8080</a> where you should see the heading <code>Hello Marko</code>.</p>\n<h4 id=\"initializing-server-rendered-components\"><a name=\"initializing-server-rendered-components\" class=\"anchor\" href=\"#initializing-server-rendered-components\"><span class=\"header-link\"></span></a>Initializing server-rendered components</h4><p>Marko automatically injects a list of components that need to be mounted in the browser, right before the closing <code>&lt;/body&gt;</code> tag (as such, it required that you include a <code>&lt;body&gt;</code> in your rendered output).</p>\n<p>However, you still need to bundle the CSS &amp; JavaScript for your page and include the proper <code>link</code>, <code>style</code>, and <code>script</code> tags. Luckily, the <code>lasso</code> taglib will do all the heavy lifting for you.</p>\n<p>First install <code>lasso</code> and <code>lasso-marko</code>:</p>\n<code-block lang=\"\" lines=\"\">npm install --save lasso lasso-marko @lasso/marko-taglib</code-block><p>Next, register and config the lasso:</p>\n<p><em>server.js</em></p>\n<code-block lang=\"js\" lines=\"\">var isProduction = process.env.NODE_ENV === \"production\";\n\n// Configure lasso to control how JS/CSS/etc. is delivered to the browser\nrequire(\"lasso\").configure({\n  plugins: [\n    \"lasso-marko\" // Allow Marko templates to be compiled and transported to the browser\n  ],\n  outputDir: __dirname + \"/static\", // Place all generated JS/CSS/etc. files into the \"static\" dir\n  bundlingEnabled: isProduction, // Only enable bundling in production\n  minify: isProduction, // Only minify JS and CSS code in production\n  fingerprintsEnabled: isProduction // Only add fingerprints to URLs in production\n});</code-block><p>Next, in your page or layout view, add the <code>lasso-head</code> and <code>lasso-body</code> tags:</p>\n<p><em>layout.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><!doctype>\n<html>\n<head>\n    <title>Hello world</title>\n    <lasso-head/>\n</head>\n<body>\n    <&#36;{input.body}/>\n    <lasso-body/>\n</body>\n</html></code-block><p>Finally, configure your server to serve the static files that <code>lasso</code> generates:</p>\n<p>If you&#39;re using <code>express</code>, just do:</p>\n<p><em>server.js</em></p>\n<code-block lang=\"js\" lines=\"\">app.use(require(\"lasso/middleware\").serveStatic());</code-block><p>And if <code>koa</code>, do:</p>\n<p><em>server.js</em></p>\n<code-block lang=\"js\" lines=\"\">const mount = require(\"koa-mount\");\nconst serve = require(\"koa-static\");\n\napp.use(mount(\"/static\", serve(__dirname + \"/static\")));</code-block><p>For the full application code for the Koa and assets bundling, please see the sample: <a href=\"https://github.com/marko-js/examples/tree/master/examples/koa\">Marko + Koa</a>.</p>\n\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/koa.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#installation\\\">Installation</a></li><li><a href=\\\"#usage\\\">Usage</a></li></ul>\");\n-----\n<h1 id=\"koa-marko\"><a name=\"koa-marko\" class=\"anchor\" href=\"#koa-marko\"><span class=\"header-link\"></span></a>Koa + Marko</h1><p>See the <a href=\"https://github.com/marko-js/examples/tree/master/examples/koa\">marko-koa</a> sample\nproject for a fully-working example.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"anchor\" href=\"#installation\"><span class=\"header-link\"></span></a>Installation</h2><code-block lang=\"undefined\" lines=\"\">npm install koa --save\nnpm install marko --save</code-block><h2 id=\"usage\"><a name=\"usage\" class=\"anchor\" href=\"#usage\"><span class=\"header-link\"></span></a>Usage</h2><code-block lang=\"javascript\" lines=\"\">require(\"marko/node-require\");\n\nconst Koa = require(\"koa\");\nconst app = new Koa();\n\nconst template = require(\"./index.marko\");\n\napp.use((ctx, next) => {\n  ctx.type = \"html\";\n  ctx.body = template.stream({\n    name: \"Frank\",\n    count: 30,\n    colors: [\"red\", \"green\", \"blue\"]\n  });\n});\n\napp.listen(8080);</code-block><p>You may also easily add <code>gzip</code> streaming support without additional dependencies:</p>\n<code-block lang=\"javascript\" lines=\"\">require(\"marko/node-require\");\nconst { createGzip } = require(\"zlib\");\n\nconst Koa = require(\"koa\");\nconst app = new Koa();\n\nconst template = require(\"./index.marko\");\n\napp.use((ctx, next) => {\n  ctx.type = \"html\";\n  ctx.body = template.stream({\n    name: \"Frank\",\n    count: 30,\n    colors: [\"red\", \"green\", \"blue\"]\n  });\n\n  ctx.vary(\"Accept-Encoding\");\n  if (ctx.acceptsEncodings(\"gzip\")) {\n    ctx.set(\"Content-Encoding\", \"gzip\");\n    ctx.body = ctx.body.pipe(createGzip());\n  }\n});\n\napp.listen(8080);</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/lasso.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#installation\\\">Installation</a></li><li><a href=\\\"#registering-the-plugin\\\">Registering the plugin</a></li><li><a href=\\\"#lasso-custom-tags\\\">Lasso custom tags</a></li><li><a href=\\\"#client-side-rendering\\\">Client-side rendering</a></li><li><a href=\\\"#server-side-rendering\\\">Server-side rendering</a></li><li><a href=\\\"#browser-refresh\\\">Browser refresh</a></li><li><a href=\\\"#lasso-package-types-commonly-used-with-marko\\\">Lasso package types commonly used with Marko</a><ul class=\\\"toc toc-level2\\\"><li><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#marko-dependencies-provided-by-lasso-marko\\\">marko-dependencies <em>()</em></a></li><li><a href=\\\"#marko-hydrate-provided-by-lasso-marko\\\">marko-hydrate <em>()</em></a></li><li><a href=\\\"#package\\\">package</a></li><li><a href=\\\"#require\\\">require</a></li><li><a href=\\\"#require-and-run\\\">require and run</a></li></ul></li></ul></li></ul>\");\n-----\n<h1 id=\"marko-lasso\"><a name=\"marko-lasso\" class=\"anchor\" href=\"#marko-lasso\"><span class=\"header-link\"></span></a>Marko + Lasso</h1><p>The <a href=\"https://github.com/lasso-js/lasso-marko\">lasso-marko</a> plugin for <a href=\"https://github.com/lasso-js/lasso\">Lasso.js</a> will automatically compile all imported Marko templates during bundling. In addition, the <code>lasso-marko</code> plugin will automatically bundle any template dependencies (including required CSS).</p>\n<p>Lasso.js provides Marko custom tags for injecting JavaScript and CSS bundles, images and other resources.</p>\n<p>The sample <a href=\"https://github.com/marko-js/examples/tree/master/examples/lasso-express\">lasso-express</a> app demonstrates how to build a production-ready web application using Marko and Lasso. Run <code>npx @marko/create --template lasso-express</code> to use this sample as a starting point for a new app.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"anchor\" href=\"#installation\"><span class=\"header-link\"></span></a>Installation</h2><code-block lang=\"\" lines=\"\">npm install lasso-marko --save</code-block><h2 id=\"registering-the-plugin\"><a name=\"registering-the-plugin\" class=\"anchor\" href=\"#registering-the-plugin\"><span class=\"header-link\"></span></a>Registering the plugin</h2><code-block lang=\"js\" lines=\"\">require('lasso').configure({\n    \"plugins\": [\n        ...\n        \"lasso-marko\"\n    ]\n    ...\n});</code-block><h2 id=\"lasso-custom-tags\"><a name=\"lasso-custom-tags\" class=\"anchor\" href=\"#lasso-custom-tags\"><span class=\"header-link\"></span></a>Lasso custom tags</h2><p>To inject the required JavaScript and CSS into the page you will want to use the <code>&lt;lasso-page&gt;</code>, <code>&lt;lasso-head&gt;</code> and <code>&lt;lasso-body&gt;</code> tags.</p>\n<p>If you are using lasso@^3 (latest), make sure to install the <a href=\"https://github.com/lasso-js/lasso-marko-taglib\">lasso-marko-taglib</a>, so that you can use the lasso custom tags.</p>\n<code-block lang=\"\" lines=\"\">npm install lasso-marko\nnpm install @lasso/marko-taglib</code-block><p>After installing, the lasso custom tags can be used in your templates:</p>\n<code-block lang=\"html\" lines=\"\"><!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Marko + Lasso</title>\n    <lasso-head />\n  </head>\n  <body>\n    <lasso-body />\n  </body>\n</html></code-block><p>Lasso.js will automatically bundle up transitive dependencies by building and walking a dependency graph.</p>\n<h2 id=\"client-side-rendering\"><a name=\"client-side-rendering\" class=\"anchor\" href=\"#client-side-rendering\"><span class=\"header-link\"></span></a>Client-side rendering</h2><p>Marko templates can be imported and rendered by any JavaScript module. The code below shows how to render a top-level UI component and have it be mounted to the DOM as a child <code>document.body</code>:</p>\n<p><em>client.js</em></p>\n<code-block lang=\"js\" lines=\"\">require(\"./components/app/index.marko\")\n  .renderSync({})\n  .appendTo(document.body);</code-block><p>When Lasso.js bundles up the code above it will automatically bundle up the required <code>./components/app/index.marko</code> file.</p>\n<h2 id=\"server-side-rendering\"><a name=\"server-side-rendering\" class=\"anchor\" href=\"#server-side-rendering\"><span class=\"header-link\"></span></a>Server-side rendering</h2><p>If you are rendering the initial UI on the server then it is necessary to make sure that all UI components are bundled and sent to the browser so that UI components can be mounted in the browser. For example:</p>\n<p><em>about-me/index.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Marko + Lasso</title>\n\n        <!-- CSS will be inserted here -->\n        <lasso-head/>\n    </head>\n    <body>\n        <!-- Top-level UI component: -->\n        <app/>\n\n        <!-- JS will be inserted here -->\n        <lasso-body/>\n    </body>\n</html></code-block><h2 id=\"browser-refresh\"><a name=\"browser-refresh\" class=\"anchor\" href=\"#browser-refresh\"><span class=\"header-link\"></span></a>Browser refresh</h2><p><a href=\"https://github.com/patrick-steele-idem/browser-refresh\">browser-refresh</a> is recommended in development for instant page refreshes and hot reloading of Marko templates, styles and other resources. <code>browser-refresh</code> works well with Lasso and Marko and is very easy to use as a drop-in replacement for <code>node</code>:</p>\n<code-block lang=\"bash\" lines=\"\">browser-refresh server.js</code-block><h2 id=\"lasso-package-types-commonly-used-with-marko\"><a name=\"lasso-package-types-commonly-used-with-marko\" class=\"anchor\" href=\"#lasso-package-types-commonly-used-with-marko\"><span class=\"header-link\"></span></a>Lasso package types commonly used with Marko</h2><p>For many use cases, the combination of <code>lasso-marko</code> and <code>@lasso/marko-taglib</code> is sufficient to render and bundle components without the need for explicit <code>browser.json</code> files. For more advanced use cases, the following bundle types may be defined in a <code>browser.json</code> for Lasso.</p>\n<h4 id=\"marko-dependencies-provided-by-lasso-marko\"><a name=\"marko-dependencies-provided-by-lasso-marko\" class=\"anchor\" href=\"#marko-dependencies-provided-by-lasso-marko\"><span class=\"header-link\"></span></a><code>marko-dependencies</code> <em>(provided by <code>lasso-marko</code>)</em></h4><p>Includes all the dependencies needed by template and the code to register all components that would be rendered by the template. It does not automatically initialize the component, so is most useful if you need to initialize components manually.</p>\n<code-block lang=\"json\" lines=\"\">{\n  \"type\": \"marko-dependencies\",\n  \"path\": \"src/ui-modules/outdated-browser-banner/index.marko\"\n}</code-block><p><strong>Note:</strong> To initialize the server rendered components, there are 2 steps:</p>\n<p><strong>Step 1:</strong> Manually <em>retrieve</em> server rendered components, shipped via <code>marko-dependencies</code>.</p>\n<p>To retrieve the list of server rendered components, do:</p>\n<code-block lang=\"javascript\" lines=\"\">template.render(data, (err, output) => {\n  const renderedComponentsList = require(\"marko/components\").getRenderedComponents(\n    output.out\n  );\n  const html = output.getOutput();\n});\nres.json({\n  renderedComponentsList,\n  html\n});</code-block><p><strong>Step 2:</strong> Manually <em>initialize</em> server rendered components, shipped via <code>marko-dependencies</code>.</p>\n<p>To initialize the list of server rendered components, do:</p>\n<code-block lang=\"javascript\" lines=\"\">// from the response received, retrieve as\nrequire(\"marko/components\").init(response.renderedComponentsList);</code-block><p><strong>Note:</strong> Ensure Step 2 is inside a DOM-ready wrapper, for the legacy widgets layer to load (if there are widgets built out of Marko 3, that is being used inside a Marko 4 component.)</p>\n<h4 id=\"marko-hydrate-provided-by-lasso-marko\"><a name=\"marko-hydrate-provided-by-lasso-marko\" class=\"anchor\" href=\"#marko-hydrate-provided-by-lasso-marko\"><span class=\"header-link\"></span></a><code>marko-hydrate</code> <em>(provided by <code>lasso-marko</code>)</em></h4><p>Includes all the dependencies needed by template and the code to register all components that would be rendered by the template. This also includes the code to initialize the rendered components. Including this bundle on the page will automatically hydrate server rendered components.</p>\n<code-block lang=\"json\" lines=\"\">{\n  \"type\": \"marko-hydrate\",\n  \"path\": \"src/ui-modules/outdated-browser-banner/index.marko\"\n}</code-block><p><strong>Note:</strong> <code>marko-hydrate</code> will initialize the component if its defined on the global <code>window.&amp;#36;components</code> which is inserted by <code>Marko</code> when it sees a <code>&lt;body&gt;</code> tag. Else, if you are just rendering out and lasso-ing the a portion of a page with a set of components, include <code>&lt;init-components/&gt;</code> at the end of the associated <code>template.marko</code> file that builds out the page fragment.</p>\n<h4 id=\"package\"><a name=\"package\" class=\"anchor\" href=\"#package\"><span class=\"header-link\"></span></a><code>package</code></h4><p>A collection of dependencies. <code>browser.json</code> is the most common package type.\nIt could be used to point to another <code>browser.json</code> from within one component&#39;s <code>browser.json</code>.\nTypically also used when the dependencies of the referred <code>browser.json</code> have to be packaged inline.</p>\n<code-block lang=\"json\" lines=\"\">{\n  \"type\": \"package\",\n  \"path\": \"src/ui-modules/show-diag/browser.json\"\n}</code-block><h4 id=\"require\"><a name=\"require\" class=\"anchor\" href=\"#require\"><span class=\"header-link\"></span></a><code>require</code></h4><p>If a javascript file has to be wrapped over for its common JS syntax, to a browser understandable format.</p>\n<code-block lang=\"json\" lines=\"\">{\n  \"type\": \"require\",\n  \"path\": \"src/ui-modules/dynamic-module-loader/dynamic-init-client.js\"\n}</code-block><h4 id=\"require-and-run\"><a name=\"require-and-run\" class=\"anchor\" href=\"#require-and-run\"><span class=\"header-link\"></span></a><code>require</code> and <code>run</code></h4><p>If a javascript file has to be wrapped over for its common JS syntax, to a browser understandable format and be executed immediately.</p>\n<code-block lang=\"json\" lines=\"\">{\n  \"run\": true,\n  \"type\": \"require\",\n  \"path\": \"src/ui-modules/my-module/init.js\"\n}</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/marko-4-upgrade.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#step-0-ensure-youre-in-a-working-state\\\">Step 0 - Ensure you&#39;re in a working state</a></li><li><a href=\\\"#step-1-upgrade-to-latest-3x\\\">Step 1 - Upgrade to latest 3.x</a></li><li><a href=\\\"#step-2-deal-with-deprecations\\\">Step 2 - Deal with deprecations</a></li><li><a href=\\\"#step-3-upgrade-dependencies\\\">Step 3 - Upgrade dependencies</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#step-31-dependencies-with-widgets\\\">Step 3.1 - Dependencies with widgets</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#yarn-resolutions\\\">yarn resolutions</a></li></ul></li></ul></li><li><a href=\\\"#step-4-upgrade-marko\\\">Step 4 - Upgrade marko</a></li><li><a href=\\\"#step-5-deal-with-marko-4-deprecations\\\">Step 5 - Deal with Marko 4 deprecations</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#61-layouts\\\">6.1 - Layouts</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#layout-use-layout-components-with-tags-or-import\\\">&lt;layout-use&gt; → Layout components with &lt;@tags&gt; ()</a></li><li><a href=\\\"#layout-placeholder-36dynamic\\\">&lt;layout-placeholder&gt; → &lt;&amp;#36;{dynamic}&gt;</a><ul class=\\\"toc toc-level4\\\"><li><a href=\\\"#without-fallback-content\\\">Without fallback content</a></li></ul></li></ul></li><li><a href=\\\"#62-variables-scripts\\\">6.2 - Variables &amp; Scripts</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#script-marko-init-importstatic\\\">&lt;script marko-init&gt; → import/static</a></li><li><a href=\\\"#varassigninvoke-36\\\">&lt;var&gt;/&lt;assign&gt;/&lt;invoke&gt; → &amp;#36;</a></li></ul></li><li><a href=\\\"#63-w-atrributes\\\">6.3 - w-* Atrributes</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#w-id-key\\\">w-id → key</a></li><li><a href=\\\"#w-for-forscoped\\\">w-for → for:scoped</a></li><li><a href=\\\"#widgetelid-scoped\\\">widget.elId → :scoped</a></li><li><a href=\\\"#w-preserve-no-update\\\">w-preserve → no-update</a></li><li><a href=\\\"#w-preserve-attrs-no-update\\\">w-preserve-attrs → :no-update</a></li><li><a href=\\\"#w-on-on-\\\">w-on-* → on-*()</a></li></ul></li><li><a href=\\\"#64-widgets-components\\\">6.4 Widgets → Components</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#remove-w-bind\\\">Remove w-bind</a></li><li><a href=\\\"#rename-widget-methods\\\">Rename widget methods</a></li><li><a href=\\\"#component-filename-structure\\\">Component filename structure</a><ul class=\\\"toc toc-level4\\\"><li><a href=\\\"#traditional-widget\\\">Traditional widget</a></li><li><a href=\\\"#split-rendererwidget\\\">Split renderer/widget</a></li></ul></li><li><a href=\\\"#remove-all-references-to-marko-widgets\\\">Remove all references to marko-widgets</a></li><li><a href=\\\"#data-inputstate\\\">data → input/state</a><ul class=\\\"toc toc-level4\\\"><li><a href=\\\"#data-massaging\\\">Data massaging</a></li></ul></li><li><a href=\\\"#initializing-state\\\">Initializing state</a></li><li><a href=\\\"#browser-initialization\\\">Browser initialization</a></li><li><a href=\\\"#widget-body\\\">Widget body</a></li><li><a href=\\\"#getinitialpropsinput-out\\\">getInitialProps()</a></li><li><a href=\\\"#lifecycle-methods\\\">Lifecycle methods</a><ul class=\\\"toc toc-level4\\\"><li><a href=\\\"#onrender\\\">onRender</a></li><li><a href=\\\"#onbeforeupdate-and-onupdate\\\">onBeforeUpdate and onUpdate</a></li><li><a href=\\\"#onbeforedestroy-and-ondestroy\\\">onBeforeDestroy and onDestroy</a></li></ul></li><li><a href=\\\"#fin\\\">Fin.</a></li></ul></li></ul></li></ul>\");\n-----\n<h1 id=\"upgrading-to-marko-4\"><a name=\"upgrading-to-marko-4\" class=\"anchor\" href=\"#upgrading-to-marko-4\"><span class=\"header-link\"></span></a>Upgrading to Marko 4</h1><p>The following guide will help you get through the upgrade process quickly and smoothly. After any given step you should have a working application.</p>\n<p>This means you should complete a step and get it merged back into master fairly quickly. You shouldn&#39;t need to have a <code>marko-4-upgrade</code> branch for your project that lives in limbo for a couple of weeks falling behind the other changes that are being merged into master.</p>\n<p>If you do decide to pause and later jump in where you left off, be sure to repeat Step 0 first 😉.</p>\n<h2 id=\"step-0-ensure-youre-in-a-working-state\"><a name=\"step-0-ensure-youre-in-a-working-state\" class=\"anchor\" href=\"#step-0-ensure-youre-in-a-working-state\"><span class=\"header-link\"></span></a>Step 0 - Ensure you&#39;re in a working state</h2><p>Run your application and tests to ensure your project is in a working state. There&#39;s little worse than finding an issue after you&#39;ve started the upgrade process only to figure out the issue existed beforehand.</p>\n<h2 id=\"step-1-upgrade-to-latest-3x\"><a name=\"step-1-upgrade-to-latest-3x\" class=\"anchor\" href=\"#step-1-upgrade-to-latest-3x\"><span class=\"header-link\"></span></a>Step 1 - Upgrade to latest 3.x</h2><p>Before we start, you&#39;ll want to make sure that you are already on the latest <code>3.x</code> release of <code>marko</code> and the latest <code>6.x</code> release of <code>marko-widgets</code>. Later versions of <code>marko@3</code> and <code>marko-widgets@6</code> ship with deprecation warnings should be handled (the next step) before upgrading to Marko 4. This will make your life <em>so</em> much easier.</p>\n<code-block lang=\"\" lines=\"\">npm install marko@^3 marko-widgets@^6</code-block><p>or</p>\n<code-block lang=\"\" lines=\"\">yarn upgrade marko@^3 marko-widgets@^6</code-block><blockquote class=\"null\"><p>Note: Do NOT run <code>npm install marko</code> (without the <code>@^3</code>). This will put you on Marko 4 and we&#39;re not quite there yet.</p>\n</blockquote><h2 id=\"step-2-deal-with-deprecations\"><a name=\"step-2-deal-with-deprecations\" class=\"anchor\" href=\"#step-2-deal-with-deprecations\"><span class=\"header-link\"></span></a>Step 2 - Deal with deprecations</h2><p>Run your application and tests and ensure that there are no deprecation warnings logged to the console. If there are, you should follow the instructions in the deprecation messages to avoid the deprecated pattern and migrate to the recommended pattern. In particular:</p>\n<ul>\n<li><p>Using <code>w-extend</code> is not supported by the compatibility layer in Marko 4, compose components instead (you&#39;ll need an extra wrapper node in Marko 3, but it can be removed once you upgrade).</p>\n<code-block lang=\"marko\" lines=\"\">// UNSUPPORTED\n<fancy-button w-extend/>\n\n// SUPPORTED\n<span w-bind>\n   <fancy-button/>\n</span></code-block></li>\n<li><p>Using <code>&lt;widget-types/&gt;</code> to conditionally bind to two or more different widgets is not supported by the compatibility layer in Marko 4 (using <code>&lt;widget-types&gt;</code> to disable binding is still supported).</p>\n<code-block lang=\"marko\" lines=\"\">// UNSUPPORTED\n<widget-types default=\"./widget\" mobile=\"./widget-mobile\"/>\n<div w-bind=(data.isMobile ? 'default' : 'mobile')>\n   ...\n</div>\n\n// SUPPORTED\n<widget-types default=\"./\"/>\n<div w-bind=(data.includeWidget ? 'default' : null)>\n   ...\n</div></code-block></li>\n<li><p>Using <code>data-widget</code> and <code>data-w-*</code> attributes in your application code and tests. These attributes existed so Marko could keep track of DOM nodes and they don&#39;t exist in Marko 4.</p>\n</li>\n<li><p>If you&#39;re accessing the DOM to get an Element, prefer <code>next/prevElementSibling</code>, <code>first/lastElementChild</code> and <code>children</code> instead of <del><code>next/prevSibling</code></del>, <del><code>first/lastChild</code></del> and <del><code>childNodes</code></del>. There are differences in the DOM structure generated by Marko 3 vs 4 and you might not get the same node after upgrading with the non-element version of these properties.</p>\n</li>\n<li><p>In Marko 3, the rendering API was different between templates (which returned strings) and widgets (which returned a RenderResult). In Marko 4, all render methods return RenderResults, so if you need a string, use <code>renderToString</code> which will still return a string after upgrading.</p>\n<ul>\n<li><code>template.render(data)</code> without a callback → <code>template.renderToString(data)</code></li>\n<li><code>template.render(data, callback)</code> with a callback → <code>template.renderToString(data, callback)</code></li>\n<li><code>template.renderSync(data)</code> → <code>template.renderToString(data)</code></li>\n<li><code>widget.render(data)</code> without a callback → <code>widget.renderSync</code></li>\n</ul>\n</li>\n</ul>\n<p>Please note that you will need to deal with deprecations in any dependent modules as well before continuing with the upgrade process (usually this means updating dependencies).</p>\n<h2 id=\"step-3-upgrade-dependencies\"><a name=\"step-3-upgrade-dependencies\" class=\"anchor\" href=\"#step-3-upgrade-dependencies\"><span class=\"header-link\"></span></a>Step 3 - Upgrade dependencies</h2><p>Before upgrading to Marko 4, it is recommended to make sure that your Marko-related dependencies are up-to-date. Many packages have versions that support both Marko 3 and Marko 4. If one of your dependencies doesn&#39;t have a version that supports both, you&#39;ll need to wait to upgrade it until you&#39;re upgrading Marko.</p>\n<p>After upgrading, run your application and tests to ensure that everything is still working as intended. If there are any issues, please refer to the changelogs of the modules you just upgraded to see if you need to make any changes within your app to accommodate the new versions.</p>\n<h3 id=\"step-31-dependencies-with-widgets\"><a name=\"step-31-dependencies-with-widgets\" class=\"anchor\" href=\"#step-31-dependencies-with-widgets\"><span class=\"header-link\"></span></a>Step 3.1 - Dependencies with widgets</h3><p>If you have any Marko components installed from npm, chances are at least one of them has a direct dependency on <code>marko@^3</code> or <code>marko-widgets@^6</code>. <strong>This is bad.</strong></p>\n<p>Marko 4 for has legacy support for Marko 3 widgets, but if a dependency directly depends on an old version of <code>marko</code> or <code>marko-widgets</code>, it will try to use that old version and after your app is on Marko 4 this will cause all sorts of errors.</p>\n<p>You can run <code>npm ls marko marko-widgets</code> (or <code>yarn list marko marko-widgets</code>) to view any dependencies that have a direct dependency on either of these. Any packages that provide components will need to move these into <code>peerDependencies</code>.</p>\n<blockquote class=\"null\"><p>NOTE: Some modules that have direct dependencies on Marko do not need to be updated, but as a general rule, they do.</p>\n</blockquote><p>Let&#39;s take a look at what a <code>package.json</code> for a dependency <em>should</em> look like (minus the comments, because that&#39;s not valid JSON 😉).</p>\n<code-block lang=\"js\" lines=\"\">{\n   // marko and marko-widgets are NOT here\n   \"dependencies\":{}\n\n   // use marko@3 and marko-widgets@6 for testing\n   \"devDependencies\":{\n      \"marko\": \"^3\",\n      \"marko-widgets\": \"^6\"\n   },\n\n   // use the app's version of marko/marko-widgets, but\n   // give a warning if it doesn't match the versions this\n   // package is compatible with (both Marko 3 and 4)\n   \"peerDependencies\": {\n      \"marko\": \"^3 || ^4\",\n      \"marko-widgets\": \"^6 || ^7\"\n   }\n}</code-block><h4 id=\"yarn-resolutions\"><a name=\"yarn-resolutions\" class=\"anchor\" href=\"#yarn-resolutions\"><span class=\"header-link\"></span></a><code>yarn</code> resolutions</h4><p>If you don&#39;t maintain the package that needs to move <code>marko</code> and/or <code>marko-widgets</code> to <code>peerDependencies</code>, you can make use of <a href=\"https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">yarn&#39;s selective dependency resolutions</a>. Add the following to your <code>package.json</code> and it will force your dependencies to use the latest version of Marko:</p>\n<code-block lang=\"js\" lines=\"5-8\">{\n   \"name\": \"appname\",\n   \"version\": \"0.0.0\",\n   /* ... */\n   \"resolutions\": {\n      \"**/marko\": \"^4\",\n      \"**/marko-widgets\": \"^7\"\n   }\n}</code-block><h2 id=\"step-4-upgrade-marko\"><a name=\"step-4-upgrade-marko\" class=\"anchor\" href=\"#step-4-upgrade-marko\"><span class=\"header-link\"></span></a>Step 4 - Upgrade marko</h2><p>Phew! With all the prep out of the way we&#39;re finally ready to upgrade <code>marko</code>!</p>\n<code-block lang=\"\" lines=\"\">npm install marko@^4 marko-widgets@^7</code-block><p>or</p>\n<code-block lang=\"\" lines=\"\">yarn upgrade marko@^4 marko-widgets@^7</code-block><p>If at this point you&#39;re thinking, &quot;Wait... I thought Marko 4 didn&#39;t need <code>marko-widgets</code> any more...&quot;, you&#39;d be correct. <code>marko-widgets@7</code> is just there to help with the migration. We&#39;ll remove it soon, but for now, there&#39;s still a bunch of calls to <code>require(&#39;marko-widgets&#39;).defineComponent</code> all over your app&#39;s code and we don&#39;t want that to throw saying it can&#39;t find the module.</p>\n<p>Now run your application and its tests. Marko 4 contains a legacy compatibility layer, so everything should still work! Congratulations, you&#39;ve upgraded to Marko 4!</p>\n<p>You will however have noticed a swarm of deprecations in your console. We&#39;ll get to those.</p>\n<blockquote class=\"null\"><p>NOTE: <code>marko-widgets@7</code> isn&#39;t tagged as latest, therefore <code>npm install marko-widgets</code> and <code>npm install marko-widgets@latest</code> will NOT get you to <code>7.x</code>.</p>\n</blockquote><h2 id=\"step-5-deal-with-marko-4-deprecations\"><a name=\"step-5-deal-with-marko-4-deprecations\" class=\"anchor\" href=\"#step-5-deal-with-marko-4-deprecations\"><span class=\"header-link\"></span></a>Step 5 - Deal with Marko 4 deprecations</h2><p>Despite having a lot of deprecation warnings, the beauty is that you can deal with them on a template by template, component by component basis and keep a working app in between migrating each template/component.</p>\n<p>Additionally, any deprecation warnings that start with <code>MIGRATION</code> are automatically migratable by <a href=\"https://github/docs/.com/marko-js/cli/blob/master/packages/migrate/README/\"><code>marko migrate</code></a>. Most migrations are 100% safe and will run automatically. However, there are a few migrations which are considered unsafe: they may only get you 90% of the way there. These migrations will prompt and ask if you want to run the migration. It is highly recommended to run these only on a single component at a time and then finish the migration manually using the guide below so that your app is always in a working state</p>\n<h3 id=\"61-layouts\"><a name=\"61-layouts\" class=\"anchor\" href=\"#61-layouts\"><span class=\"header-link\"></span></a>6.1 - Layouts</h3><h4 id=\"layout-use-layout-components-with-tags-or-import\"><a name=\"layout-use-layout-components-with-tags-or-import\" class=\"anchor\" href=\"#layout-use-layout-components-with-tags-or-import\"><span class=\"header-link\"></span></a><code>&lt;layout-use&gt;</code> → Layout components with <code>&lt;@tags&gt;</code> (or <code>import</code>)</h4><p>The layout taglib is no longer necessary in Marko 4 because components have the ability to easily recieve multiple blocks of content and can render those blocks whereever they like.</p>\n<p>You can also directly <code>import</code> a template by it&#39;s path much like <code>&lt;layout-use&gt;</code> and render it using the <code>&lt;&amp;#36;{dynamic}/&gt;</code> syntax, but the recommended way to reference it is by creating components. You should move the layout into your <code>components/</code> directory and use it as any other component.</p>\n<p><strong>Old:</strong></p>\n<code-block lang=\"\" lines=\"\">src/\n   components/\n   layouts/\n       site-layout.marko\n   pages/\n      home/\n         template.marko</code-block><code-block lang=\"marko\" lines=\"\"><layout-use('../../layouts/site-layout.marko')>\n    <layout-put into=\"body\">\n        Hello World\n    </layout-put>\n</layout-use></code-block><p><strong>New (<em>automatically migratable</em>):</strong></p>\n<code-block lang=\"marko\" lines=\"\">import SiteLayout from '../../layouts/site-layout.marko';\n\n<&#36;{SiteLayout}>\n    <@body>\n        Hello World\n    </@body>\n</></code-block><blockquote class=\"null\"><p>NOTE: If you&#39;re using a layout from an npm package that requires you to reference it by its path, you can <code>import</code> it. However we recommend checking to see if there is a newer version of the package that exposes the layout as a component or updating the package to expose the layout as a component.</p>\n</blockquote><p><strong>New (Recommended):</strong></p>\n<code-block lang=\"\" lines=\"\">src/\n   components/\n       site-layout.marko\n   pages/\n      home/\n         template.marko</code-block><code-block lang=\"marko\" lines=\"\"><site-layout>\n    <@body>\n        Hello World\n    </@body>\n</site-layout></code-block><p>Related Docs: <a href=\"/docs/custom-tags/\">Custom Tags</a></p>\n<h4 id=\"layout-placeholder-36dynamic\"><a name=\"layout-placeholder-36dynamic\" class=\"anchor\" href=\"#layout-placeholder-36dynamic\"><span class=\"header-link\"></span></a><code>&lt;layout-placeholder&gt;</code> → <code>&lt;&amp;#36;{dynamic}&gt;</code></h4><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><!doctype>\n<html>\n<body>\n    <layout-placeholder name=\"body\">\n        Default body content\n    </layout-placeholder>\n</body>\n</html></code-block><p><strong>New (<em>automatically migratable</em>):</strong></p>\n<code-block lang=\"marko\" lines=\"\"><!doctype>\n<html>\n<body>\n    <if(input.body)>\n        <&#36;{input.body}/>\n    </if>\n    <else>\n        Default body content\n    </else>\n</body>\n</html></code-block><h5 id=\"without-fallback-content\"><a name=\"without-fallback-content\" class=\"anchor\" href=\"#without-fallback-content\"><span class=\"header-link\"></span></a>Without fallback content</h5><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><!doctype>\n<html>\n<body>\n    <layout-placeholder name=\"body\"/>\n</body>\n</html></code-block><p><strong>New (<em>automatically migratable</em>):</strong></p>\n<code-block lang=\"marko\" lines=\"\"><!doctype>\n<html>\n<body>\n    <&#36;{input.body}/>\n</body>\n</html></code-block><p>Related Docs: <a href=\"/docs/body-content/\">Body content</a></p>\n<h3 id=\"62-variables-scripts\"><a name=\"62-variables-scripts\" class=\"anchor\" href=\"#62-variables-scripts\"><span class=\"header-link\"></span></a>6.2 - Variables &amp; Scripts</h3><h4 id=\"script-marko-init-importstatic\"><a name=\"script-marko-init-importstatic\" class=\"anchor\" href=\"#script-marko-init-importstatic\"><span class=\"header-link\"></span></a><code>&lt;script marko-init&gt;</code> → <code>import</code>/<code>static</code></h4><p>The <code>&lt;script marko-init&gt;</code> attribute is deprecated, but in its place you get ES Module <code>import</code> syntax and the <code>static</code> keyword. Anything after the <code>static</code> keyword is executed as JavaScript <em>when the template is loaded</em>.</p>\n<p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><script marko-init>\n   var capitalize = require('./util/caps');\n   var NAME = capitalize('Frank');\n</script>\n\n<div>&#36;{NAME}</div></code-block><p><strong>New (<em>automatically migratable</em>):</strong></p>\n<code-block lang=\"marko\" lines=\"\">import capitalize from './util/caps';\nstatic var NAME = capitalize('Frank');\n\n<div>&#36;{NAME}</div></code-block><p>Related Docs:</p>\n<ul>\n<li><a href=\"/docs/syntax/#static-javascript\">Static JavaScript</a></li>\n<li><a href=\"/docs/syntax/#importing-external-files\">Importing external files</a></li>\n</ul>\n<h4 id=\"varassigninvoke-36\"><a name=\"varassigninvoke-36\" class=\"anchor\" href=\"#varassigninvoke-36\"><span class=\"header-link\"></span></a><code>&lt;var&gt;</code>/<code>&lt;assign&gt;</code>/<code>&lt;invoke&gt;</code> → <code>&amp;#36;</code></h4><p>The <code>&lt;var&gt;</code> tag is deprecated, but in its place you get <code>&amp;#36;</code>. Similar to <code>static</code>, a line that begins with <code>&amp;#36;</code> will execute the JavaScript that follows <em>as a part of each render</em>.</p>\n<p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><var name=\"Frank\"/>\n<assign name=\"John\"/>\n<invoke console.log(name)/>\n<div>&#36;{name}</div></code-block><p><strong>New (<em>automatically migratable</em>):</strong></p>\n<code-block lang=\"marko\" lines=\"\">&#36; var name = \"Frank\";\n&#36; name = \"John\";\n&#36; console.log(name);\n<div>&#36;{name}</div></code-block><p>Related Docs: <a href=\"/docs/syntax/#inline-javascript\">Inline JavaScript</a></p>\n<h3 id=\"63-w-atrributes\"><a name=\"63-w-atrributes\" class=\"anchor\" href=\"#63-w-atrributes\"><span class=\"header-link\"></span></a>6.3 - <code>w-*</code> Atrributes</h3><h4 id=\"w-id-key\"><a name=\"w-id-key\" class=\"anchor\" href=\"#w-id-key\"><span class=\"header-link\"></span></a><code>w-id</code> → <code>key</code></h4><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div w-id=\"foo\"/></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div key=\"foo\"/></code-block><p>Related Docs: <a href=\"/docs/class-components/#key\">The <code>key</code> attribute</a></p>\n<h4 id=\"w-for-forscoped\"><a name=\"w-for-forscoped\" class=\"anchor\" href=\"#w-for-forscoped\"><span class=\"header-link\"></span></a><code>w-for</code> → <code>for:scoped</code></h4><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><label w-for=\"name\">Name</label>\n<input type=\"text\" w-id=\"name\"/></code-block><p><strong>New (<em>automatically migratable</em>):</strong></p>\n<code-block lang=\"marko\" lines=\"\"><label for:scoped=\"name\">Name</label>\n<input type=\"text\" id:scoped=\"name\"/></code-block><p>Related Docs: <a href=\"/docs/class-components/#scoped\">The <code>:scoped</code> attribute modifier</a></p>\n<h4 id=\"widgetelid-scoped\"><a name=\"widgetelid-scoped\" class=\"anchor\" href=\"#widgetelid-scoped\"><span class=\"header-link\"></span></a><code>widget.elId</code> → <code>:scoped</code></h4><p>You can use <code>:scoped</code> on any attribute to reference a scoped value. This value will be unique to this component instance and is useful for other attributes that take an <code>id</code> to reference, so you can use a scoped <code>id</code> instead.</p>\n<p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><button aria-describedby=widget.elId(\"tooltip\")>...</button>\n<div w-id=\"tooltip\" role=\"tooltip\">...</div></code-block><p><strong>New (<em>automatically migratable</em>):</strong></p>\n<code-block lang=\"marko\" lines=\"\"><button aria-describedby:scoped=\"tooltip\">...</button>\n<div id:scoped=\"tooltip\" role=\"tooltip\">...</div></code-block><p>Related Docs: <a href=\"/docs/class-components/#scoped\">The <code>:scoped</code> attribute modifier</a></p>\n<h4 id=\"w-preserve-no-update\"><a name=\"w-preserve-no-update\" class=\"anchor\" href=\"#w-preserve-no-update\"><span class=\"header-link\"></span></a><code>w-preserve</code> → <code>no-update</code></h4><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div w-preserve>\n   ...\n</div></code-block><p><strong>New (<em>automatically migratable</em>):</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div no-update>\n   ...\n</div></code-block><h4 id=\"w-preserve-attrs-no-update\"><a name=\"w-preserve-attrs-no-update\" class=\"anchor\" href=\"#w-preserve-attrs-no-update\"><span class=\"header-link\"></span></a><code>w-preserve-attrs</code> → <code>:no-update</code></h4><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div class=\"foo\" w-preserve-attrs=\"class\">\n   ...\n</div></code-block><p><strong>New (<em>automatically migratable</em>):</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div class:no-update=\"foo\">\n   ...\n</div></code-block><h4 id=\"w-on-on-\"><a name=\"w-on-on-\" class=\"anchor\" href=\"#w-on-on-\"><span class=\"header-link\"></span></a><code>w-on-*</code> → <code>on-*()</code></h4><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><button w-on-click=\"handleClick\">click me</button></code-block><p>or</p>\n<code-block lang=\"marko\" lines=\"\"><button w-onClick=\"handleClick\">click me</button></code-block><p><strong>New (<em>automatically migratable</em>):</strong></p>\n<code-block lang=\"marko\" lines=\"\"><button on-click('handleClick')>click me</button></code-block><p>The new syntax support binding additional arguments.</p>\n<p>Related Docs: <a href=\"/docs/events/#listening-to-events\">Listening to events</a></p>\n<h3 id=\"64-widgets-components\"><a name=\"64-widgets-components\" class=\"anchor\" href=\"#64-widgets-components\"><span class=\"header-link\"></span></a>6.4 Widgets → Components</h3><p>It&#39;s time to migrate your first legacy (Marko 3 style) widget to a Marko 4 component. Before you continue, please note that you&#39;ll need to go through all these steps for a given component. Partially migrated components will break your app. This is the section for which there are unsafe migrations provided by <code>marko migrate</code>. Again, these migrations should be run on a single component, and then follow the steps below to ensure the component is fully migrated.</p>\n<h4 id=\"remove-w-bind\"><a name=\"remove-w-bind\" class=\"anchor\" href=\"#remove-w-bind\"><span class=\"header-link\"></span></a>Remove <code>w-bind</code></h4><p><code>w-bind</code> is the indicator used by Marko to determine whether a component should operate in legacy mode. Marko 4 automatically binds the top level elements in a component, so <code>w-bind</code> is not necessary. Let&#39;s remove it. There&#39;s no turning back now...</p>\n<h4 id=\"rename-widget-methods\"><a name=\"rename-widget-methods\" class=\"anchor\" href=\"#rename-widget-methods\"><span class=\"header-link\"></span></a>Rename widget methods</h4><ul>\n<li><code>this.getWidget</code> → <code>this.getComponent</code></li>\n<li><code>this.getWidgets</code> → <code>this.getComponents</code></li>\n</ul>\n<p>Related Docs:</p>\n<ul>\n<li><a href=\"/docs/class-components/#getcomponentkey-index\"><code>getComponent()</code></a></li>\n<li><a href=\"/docs/class-components/#getcomponentskey-index\"><code>getComponents()</code></a></li>\n</ul>\n<h4 id=\"component-filename-structure\"><a name=\"component-filename-structure\" class=\"anchor\" href=\"#component-filename-structure\"><span class=\"header-link\"></span></a>Component filename structure</h4><h5 id=\"traditional-widget\"><a name=\"traditional-widget\" class=\"anchor\" href=\"#traditional-widget\"><span class=\"header-link\"></span></a>Traditional widget</h5><p><strong>Old:</strong></p>\n<p>Marko 3 widgets were traditionally structured as follows:</p>\n<code-block lang=\"\" lines=\"\">  components/\n    my-cool-component/\n      index.js       → Widget Definition\n      template.marko → Widget Marko Template</code-block><p>Your <code>index.js</code> acts as the entry point for the component, contains a call to <code>require(&#39;marko-widgets&#39;).defineComponent</code> and requires <code>template.marko</code>.</p>\n<p><strong>New:</strong></p>\n<p>Marko 4 changes the filename structure and makes the template the entry point for the component:</p>\n<ul>\n<li><code>template.marko</code> → <code>index.marko</code> (the template)</li>\n<li><code>index.js</code> → <code>component.js</code> (component behavior for server/client)</li>\n</ul>\n<p>Thus a full split file based component in Marko 4 would be structured as follows:</p>\n<code-block lang=\"\" lines=\"\">  components/\n    my-cool-component/\n      component.js → Component Definition\n      index.marko  → Component Marko Template</code-block><p>Marko 4 also introduces <a href=\"/docs/class-components/#single-file-components\">single file components</a> within <code>index.marko</code>.</p>\n<h5 id=\"split-rendererwidget\"><a name=\"split-rendererwidget\" class=\"anchor\" href=\"#split-rendererwidget\"><span class=\"header-link\"></span></a>Split renderer/widget</h5><p><strong>Old:</strong></p>\n<p>Marko 3 Split renderer/widgets were structured as follows:</p>\n<code-block lang=\"\" lines=\"\">  components/\n    my-cool-component/\n      renderer.js    → Renderer Definition\n      template.marko → Widget Marko Template\n      widget.js      → Widget Definition</code-block><p>Your <code>renderer.js</code> acts as the entry point for the component, contains a call to <code>require(&#39;marko-widgets&#39;).defineRenderer</code> and requires <code>template.marko</code>.</p>\n<p>Your <code>widget.js</code> should contain a call to <code>require(&#39;marko-widgets&#39;).defineWidget</code>.</p>\n<p><strong>New:</strong></p>\n<p>Marko 4 changes the filename structure and makes the template the entry point for the component:</p>\n<ul>\n<li><code>template.marko</code> → <code>index.marko</code> (the template)</li>\n<li><code>renderer.js</code> → <code>component.js</code> (component behavior for server/client)</li>\n<li><code>widget.js</code> → <code>component-browser.js</code> (component behavior for client only &amp; causes <code>component.js</code> to be server only).</li>\n</ul>\n<p>Thus a full component in Marko 4 would be structured as follows:</p>\n<code-block lang=\"\" lines=\"\">  components/\n    my-cool-component/\n      component.js → Component Definition (Server)\n      component-browser.js → Component Definition (Browser)\n      index.marko  → Component Marko Template</code-block><h4 id=\"remove-all-references-to-marko-widgets\"><a name=\"remove-all-references-to-marko-widgets\" class=\"anchor\" href=\"#remove-all-references-to-marko-widgets\"><span class=\"header-link\"></span></a>Remove all references to <code>marko-widgets</code></h4><p><strong>Old:</strong></p>\n<p>As noted in file structure section above, Marko 3 used <code>marko-widgets</code> to define a component within each <code>index.js</code>. This was the entry point for the component and it required <code>template.marko</code> so it knew how to render itself.</p>\n<p><em>index.js</em></p>\n<code-block lang=\"js\" lines=\"\">module.exports = require(\"marko-widgets\").defineComponent({\n  template: require(\"./template.marko\")\n  // ...\n});</code-block><p><strong>New:</strong></p>\n<p>In Marko 4, <code>marko-widgets</code> is no longer necessary and <code>index.marko</code> becomes the component entry point so referencing the template from the <code>component.js</code> file is not necessary (and might cause circular dependency issues).</p>\n<p><em>component.js</em></p>\n<code-block lang=\"js\" lines=\"\">module.exports = {\n  // ...\n};</code-block><blockquote class=\"null\"><p>NOTE: Once this step has been completed for all components in a project, you can remove <code>marko-widgets</code> as a dependency!</p>\n</blockquote><h4 id=\"data-inputstate\"><a name=\"data-inputstate\" class=\"anchor\" href=\"#data-inputstate\"><span class=\"header-link\"></span></a><code>data</code> → <code>input</code>/<code>state</code></h4><p><strong>Old:</strong></p>\n<p>In Marko 3, a template received a single <code>data</code> variable that contained the input data. In the case of a widget, the <code>getTemplateData</code> method could be used to combine the widget state with the widget input data into a single <code>data</code> object to be passed to the template.</p>\n<p><em>index.js</em></p>\n<code-block lang=\"js\" lines=\"\">// ...\ngetTemplateData(state, input) {\n   return {\n      foo: state.foo,\n      bar: input.bar\n   }\n}\n// ...</code-block><p><em>template.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><ul>\n   <li>Foo: &#36;{data.foo}</li>\n   <li>Bar: &#36;{data.bar}</li>\n</ul></code-block><p><strong>New:</strong></p>\n<p>In Marko 4, components are passed the input data as <code>input</code> and a separate <code>state</code> variable contains component state. This removes the need for <code>getTemplateData</code>! (And it is no longer called)</p>\n<p><em>index.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><ul>\n   <li>Foo: &#36;{state.foo}</li>\n   <li>Bar: &#36;{input.bar}</li>\n</ul></code-block><p><em>component.js</em></p>\n<code-block lang=\"js\" lines=\"\">// getTemplateData is removed</code-block><blockquote class=\"null\"><p>NOTE: <code>input</code> is aliased as <code>data</code>, so accessing <code>data</code> will still work, but it is recommended to use <code>input</code>. Accessing <code>data</code> will be officially deprecated at a later date.</p>\n</blockquote><h5 id=\"data-massaging\"><a name=\"data-massaging\" class=\"anchor\" href=\"#data-massaging\"><span class=\"header-link\"></span></a>Data massaging</h5><p>If your <code>getTemplateData</code> has a lot of logic in it to transform the <code>state</code> or <code>input</code>, you&#39;ll probably want to retain that logic, but still remove the <code>getTemplateData</code> method.</p>\n<p><strong>Old:</strong></p>\n<p><em>index.js</em></p>\n<code-block lang=\"\" lines=\"\">// ...\ngetTemplateData: function(state, input) {\n     var value = state.value;\n     var sign;\n\n     if (value < 0) {\n         sign = 'negative';\n     } else if (value > 0) {\n         sign = 'positive';\n     }\n\n     return {\n         value: value,\n         sign: sign\n     };\n }\n// ...</code-block><p><em>template.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><div class=data.sign>\n   &#36;{data.value}\n</div></code-block><p><strong>New:</strong></p>\n<p>Instead of manipulating <code>input</code>/<code>state</code> before it makes it to the template, move the manipulation logic from <code>getTemplateData</code> into a helper function that can be imported into your template. This has the added benefit that it is now easy to write unit tests for any helper functions you might have.</p>\n<p><em>helpers.js</em></p>\n<code-block lang=\"\" lines=\"\">exports.getSign = function(value) {\n     var sign;\n\n     if (value < 0) {\n         sign = 'negative';\n     } else if (value > 0) {\n         sign = 'positive';\n     }\n\n     return sign;\n}</code-block><p><em>index.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">import { getSign } from './helpers';\n\n<div class=getSign(state.value)>\n   &#36;{state.value}\n</div></code-block><h4 id=\"initializing-state\"><a name=\"initializing-state\" class=\"anchor\" href=\"#initializing-state\"><span class=\"header-link\"></span></a>Initializing state</h4><p><strong>Old:</strong></p>\n<p>In Marko 3, <code>input</code> was transient: it was only there for the first render (or when <em>new</em> input was passed into a component). This meant that when your component re-rendered, if there was data that was in the <code>input</code> that was necessary for a re-render, you had to put it in <code>state</code> to make sure it got kept around.</p>\n<p><em>index.js</em></p>\n<code-block lang=\"js\" lines=\"\">// ...\ngetInitialState(input) {\n   return {\n      count: input.initialCount || 0,\n      color: input.color\n   }\n}\n// ...</code-block><p><em>template.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><div style={ color:data.color }>\n   &#36;{data.count}\n</div></code-block><p><strong>New:</strong></p>\n<p>In Marko 4, <code>getInitialState</code> is no longer called. You can set initial state in <code>onCreate</code>. If you have some state that is derived from <code>input</code> and should be reset when the <code>input</code> changes, you can set it in <code>onInput</code>, but this should be a rare occurrence.</p>\n<p>Marko 4 keeps the original <code>input</code> around for subsequent renders, so you don&#39;t need to add <code>input</code> properties into the <code>state</code>. Only values that are controlled by the component should be put in <code>state</code>.</p>\n<p><em>component.js</em></p>\n<code-block lang=\"js\" lines=\"\">// ...\nonCreate(input) {\n   this.state = {\n      count: input.initialCount || 0\n   };\n}\n// ...</code-block><p><em>index.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><div style={ color:input.color }>\n   &#36;{state.count}\n</div></code-block><blockquote class=\"null\"><p>NOTE: From within the component you can access <code>this.state</code> as well as <code>this.input</code></p>\n</blockquote><p>Related Docs:</p>\n<ul>\n<li><a href=\"/docs/class-components/#oncreateinput-out\"><code>onCreate</code></a></li>\n<li><a href=\"/docs/class-components/#oninputinput-out\"><code>onInput</code></a></li>\n<li><a href=\"/docs/class-components/#thisstate\"><code>this.state</code></a></li>\n<li><a href=\"/docs/class-components/#thisinput\"><code>this.input</code></a></li>\n</ul>\n<h4 id=\"browser-initialization\"><a name=\"browser-initialization\" class=\"anchor\" href=\"#browser-initialization\"><span class=\"header-link\"></span></a>Browser initialization</h4><p><strong>Old:</strong></p>\n<p>In Marko 3, the <code>init</code> method was used to set things up in the browser and was the first time the DOM for the component was ready since <code>init</code> was called immediately after <em>mounting</em> the component to the DOM.</p>\n<p>The <code>getWidgetConfig</code> method was used to create a <code>config</code> object that would be serialized and sent to the browser to be used in the <code>init</code> method. This was necessary because <code>input</code> was not available in <code>init</code>.</p>\n<p><em>index.js</em></p>\n<code-block lang=\"js\" lines=\"\">// ...\ninit(config) {\n   &#36;(this.el).dataTable(config);\n}\ngetWidgetConfig(input) {\n   return {\n      paginate: input.paginate,\n      scrollY: input.scrollY\n   };\n}\n// ...</code-block><p><strong>New:</strong></p>\n<p><code>init</code> has been renamed to the more appropriate <code>onMount</code> which better describes where in a component&#39;s lifecycle it is called. <code>getWidgetConfig</code> is no longer necessary (or called) because we can access <code>this.input</code>.</p>\n<p><em>component.js</em></p>\n<code-block lang=\"js\" lines=\"\">// ...\nonMount() {\n   &#36;(this.el).dataTable({\n      paginate: this.input.paginate,\n      scrollY: this.input.scrollY\n   });\n}\n// ...</code-block><blockquote class=\"null\"><p>NOTE: If you need values from <code>out</code>, you can grab them in <code>onCreate</code>, attach them to the component instance and access them in <code>onMount</code>:</p>\n<code-block lang=\"js\" lines=\"\">//...\nonCreate(input, out) {\n   this.value = out.global.value;\n}\nonMount() {\n   console.log(this.value)\n}\n// ...</code-block></blockquote><p>Related Docs: <a href=\"/docs/class-components/#onmount\"><code>onMount</code></a></p>\n<h4 id=\"widget-body\"><a name=\"widget-body\" class=\"anchor\" href=\"#widget-body\"><span class=\"header-link\"></span></a>Widget body</h4><p><strong>Old:</strong></p>\n<code-block lang=\"js\" lines=\"\">// ...\ngetInitialBody(input, out) {\n   return input.renderBody || input.label\n}\n//</code-block><code-block lang=\"marko\" lines=\"\"><button>\n   <w-body/>\n</button></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><button>\n   <if(input.renderBody)>\n      <&#36;{input.renderBody}/>\n   </if>\n   <else>\n      &#36;{input.label}\n   </else>\n</button></code-block><h4 id=\"getinitialpropsinput-out\"><a name=\"getinitialpropsinput-out\" class=\"anchor\" href=\"#getinitialpropsinput-out\"><span class=\"header-link\"></span></a><code>getInitialProps(input, out)</code></h4><p><strong>Old:</strong></p>\n<p>This method existed because <code>input</code> was passed to <code>getInitialState</code>, <code>getInitialBody</code>, <code>getWidgetConfig</code> and <code>getTemplateData</code>. If the input needed to be transformed, <code>getInitialProps</code> allowed you to do it in a single place.</p>\n<p><strong>New:</strong></p>\n<p><code>getInitialProps</code> is no longer called. If you need to transform your input, move that logic into helper methods or another appropriate location.</p>\n<h4 id=\"lifecycle-methods\"><a name=\"lifecycle-methods\" class=\"anchor\" href=\"#lifecycle-methods\"><span class=\"header-link\"></span></a>Lifecycle methods</h4><p>A few of these have already been covered:</p>\n<ul>\n<li><code>init</code> ➔ <code>onMount</code></li>\n<li><code>getWidgetConfig</code> ➔ <code>onMount</code>/<code>onCreate</code></li>\n<li><code>getInitialState</code> ➔ <code>onCreate</code></li>\n<li><code>getTemplateData</code> ➔ (no longer needed)</li>\n<li><code>getInitialProps</code> ➔ (no longer needed)</li>\n<li><code>getInitialBody</code> ➔ (no longer needed)</li>\n</ul>\n<h5 id=\"onrender\"><a name=\"onrender\" class=\"anchor\" href=\"#onrender\"><span class=\"header-link\"></span></a><code>onRender</code></h5><p>The legacy <code>onRender</code> method was called with <code>firstRender === true</code> <a href=\"https://github.com/marko-js/marko-widgets/blob/5b226b9ede8227bb68e16fa8316ef3058daf3d06/lib/init-widgets-browser.js#L205-L209\">immediately after mounting the widget in the DOM</a>.</p>\n<p>Subsequent calls <code>onRender</code> occurred <a href=\"https://github.com/marko-js/marko-widgets/blob/5b226b9ede8227bb68e16fa8316ef3058daf3d06/lib/init-widgets-browser.js#L195-L196\">immediately after calls to <code>onUpdate</code></a>.</p>\n<p>This behavior did not align with where the actual render takes place (it actually occurs before mounting and before updating the DOM). So we&#39;ve changed its behavior in Marko 4. If you were using <code>onRender</code> in Marko 3, use <code>onMount</code> or <code>onUpdate</code> instead.</p>\n<ul>\n<li><code>onRender</code> (first render) ➔ <code>onMount</code></li>\n<li><code>onRender</code> (subsequent renders) ➔ <code>onUpdate</code></li>\n</ul>\n<h5 id=\"onbeforeupdate-and-onupdate\"><a name=\"onbeforeupdate-and-onupdate\" class=\"anchor\" href=\"#onbeforeupdate-and-onupdate\"><span class=\"header-link\"></span></a><code>onBeforeUpdate</code> and <code>onUpdate</code></h5><ul>\n<li><code>onBeforeUpdate</code> ➔ <code>onUpdate</code>/<code>onRender</code></li>\n<li><code>onUpdate</code> ➔ <code>onUpdate</code></li>\n</ul>\n<p>The <code>onUpdate</code> is called after DOM updates have been made. The <code>onRender</code> method is now called before rendering, so it can replace some use-cases of <code>onBeforeUpdate</code>.</p>\n<h5 id=\"onbeforedestroy-and-ondestroy\"><a name=\"onbeforedestroy-and-ondestroy\" class=\"anchor\" href=\"#onbeforedestroy-and-ondestroy\"><span class=\"header-link\"></span></a><code>onBeforeDestroy</code> and <code>onDestroy</code></h5><ul>\n<li><code>onBeforeDestroy</code> ➔ <code>onDestroy</code></li>\n<li><code>onDestroy</code> ➔ <code>onDestroy</code></li>\n</ul>\n<p>The <code>onDestroy</code> is now called immediately before destroying the DOM associated with a component.</p>\n<p>See how the <a href=\"https://github.com/marko-js/marko/blob/373a7ceb52b60454a9661fc94a3c9935e5a7dbfa/src/components/legacy/defineWidget-legacy-browser.js#L72-L102\">legacy adaptor remaps these methods</a>.</p>\n<p>Related Docs: <a href=\"/docs/class-components/#lifecycle-events\">Lifecycle events</a></p>\n<h4 id=\"fin\"><a name=\"fin\" class=\"anchor\" href=\"#fin\"><span class=\"header-link\"></span></a>Fin.</h4><p>👍🎉 You&#39;ve fully migrated your first component! 🎉👍</p>\n<p>Repeat this process for each component in your app. As you get familiar with &quot;Thinking in Marko 4&quot; each one will be easier. And remember, you should have a working application after converting each individual component, so you don&#39;t have to do it all at once.</p>\n\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/marko-json.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#single-component-definition\\\">Single component definition</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#options\\\">Options</a></li><li><a href=\\\"#attributes\\\">Attributes</a></li><li><a href=\\\"#paths\\\">Paths</a></li></ul></li><li><a href=\\\"#tag-library-definition\\\">Tag library definition</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#options_1\\\">Options</a></li></ul></li><li><a href=\\\"#shorthands\\\">Shorthands</a></li></ul>\");\n-----\n<h1 id=\"markojson-marko-tagjson\"><a name=\"markojson-marko-tagjson\" class=\"anchor\" href=\"#markojson-marko-tagjson\"><span class=\"header-link\"></span></a><code>marko.json</code> &amp; <code>marko-tag.json</code></h1><p>Marko supports configuration files for validation, enabling experimental features, and custom paths for component files.</p>\n<p>These configuration files are automatically found with <a href=\"/docs/custom-tags/#how-tags-are-discovered\">the same discovery mechanism as custom tags</a>.</p>\n<p>There are 2 types of configuration files:</p>\n<ol>\n<li><code>marko.json</code> describes an entire suite of components.</li>\n<li><code>marko-tag.json</code> describes a single component.</li>\n</ol>\n<h2 id=\"single-component-definition\"><a name=\"single-component-definition\" class=\"anchor\" href=\"#single-component-definition\"><span class=\"header-link\"></span></a>Single component definition</h2><p><code>marko-tag.json</code> configures a single component. It’s automatically discovered if placed inside a <a href=\"/docs/custom-tags/#tag-directories\">tag directory</a>.</p>\n<h3 id=\"options\"><a name=\"options\" class=\"anchor\" href=\"#options\"><span class=\"header-link\"></span></a>Options</h3><code-block lang=\"js\" lines=\"\">{\n  \"html\": true, // Treat as a native HTML tag, not a custom tag.\n  \"htmlType\": \"svg\", // Optimizes for specific types of native tags (currently only `svg` and `html`).\n  \"open-tag-only\": true, // Forbids passing body content to this tag.\n  \"featureFlags\": [ \"feature-a\" ], // Enable beta features by passing feature flags.\n  \"nested-tags\": { // This section configures attribute tags.\n    \"tab\": {\n      \"target-property\": \"tabs\", // Puts `<@tab>` tags into `input.tabs`.\n      \"is-repeated\": true,  // Allow more than one nested `<@tab>`.\n      \"attributes\": {\n        // Same as the “Attributes” section below.\n      }\n    }\n  }\n}</code-block><h3 id=\"attributes\"><a name=\"attributes\" class=\"anchor\" href=\"#attributes\"><span class=\"header-link\"></span></a>Attributes</h3><p>One commonly-used feature of this config file is compile-time checks for attributes.</p>\n<code-block lang=\"js\" lines=\"\">{\n  \"attributes\": {\n    \"heading\": \"string\"\n  }\n}</code-block><p>The above code ensures that the <code>heading</code> attribute is the <em>only</em> attribute supplied to this tag.</p>\n<p>The <code>string</code> value is used as documentation for the custom tag. It may be picked up by tooling, like Marko’s editor plugins, to provide hints to the user.</p>\n<p>The recommended list of attribute types are as follows:</p>\n<ul>\n<li><code>expression</code> (any JavaScript expression)</li>\n<li><code>string</code></li>\n<li><code>number</code></li>\n<li><code>boolean</code></li>\n<li><code>regexp</code></li>\n<li><code>date</code></li>\n<li><code>object</code></li>\n<li><code>array</code></li>\n<li><code>function</code></li>\n</ul>\n<p>You can also provide an object for an attribute definition’s value for additional options:</p>\n<code-block lang=\"js\" lines=\"\">{\n  \"attributes\": {\n    \"heading\": {\n      \"type\": \"string\", // Same as setting \"string\" above.\n      \"default-value\": 0, // The attribute will default to this value.\n      \"required\": true, // Error during compilation if this attribute is undefined. (Mutually exclusive with \"default-value\"\n      \"preserve-name\": true, // By default component attributes are camelCased; this disables that feature.\n      \"remove-dashes\": true, // By default native tag attributes are dash-cased; this disables that feature.\n\n      // The following attributes do nothing, but are picked up by tooling.\n      \"deprecated\": true,\n      \"description\": \"The component’s heading text\" // Describes the attribute’s purpose.\n    }\n  }\n}</code-block><p>We can also describe a <em>pattern</em> of attributes to match a definition:</p>\n<code-block lang=\"js\" lines=\"\">{\n    \"attributes\": {\n        \"data-*\": \"string\"\n    }\n}</code-block><p>In the above, all attributes prefixed with <code>data-</code> are configured to be a <code>string</code>.</p>\n<blockquote class=\"note\"><p><strong>Note:</strong> Future Marko versions will describe these definitions/types in the component itself, reducing the need for this configuration file.</p>\n</blockquote><h3 id=\"paths\"><a name=\"paths\" class=\"anchor\" href=\"#paths\"><span class=\"header-link\"></span></a>Paths</h3><p>There are several options that override the default discovery of component files, such as the template.</p>\n<p>Typically, you should let Marko find these files automatically, but here is a reference in case you encounter these settings in the wild.</p>\n<code-block lang=\"javascript\" lines=\"\">{\n  \"template\": \"./template.marko\", // Custom path to the `.marko` template.\n  \"renderer\": \"./renderer.js\", // Custom path to the `renderer.js` file.\n\n  // Compiler file hooks\n  \"migrator\": \"./migrator.js\", // Hooks into the migration stage for migrating deprecated features.\n  \"node-factory\": \"./node-factory.js\", // Hooks into the parsing stage; should return a valid Marko AST.\n  \"transformer\": \"./transformer.js\", // Used to modify the AST before generating it.\n  \"code-generator\": \"./code-generator.js\" // Used to generate custom JS.\n}</code-block><blockquote class=\"null\"><p><strong>⚠️ Note:</strong> Compiler hooks are currently undocumented: avoid using them. The compiler API is overhauled in Marko 5, and will be documented once that transition is complete.</p>\n</blockquote><h2 id=\"tag-library-definition\"><a name=\"tag-library-definition\" class=\"anchor\" href=\"#tag-library-definition\"><span class=\"header-link\"></span></a>Tag library definition</h2><p>Along with configuring a single component, you can use a <code>marko.json</code> file to configure an <em>entire library of components</em>.</p>\n<p>Similar to <a href=\"#single-component-definition\"><code>marko-tag.json</code></a>, this file is discovered if placed within a <a href=\"/docs/custom-tags/#tag-directories\">tag directory</a>. It will also be discovered at the root directory of a project, or <a href=\"/docs/custom-tags/#publishing-tags-to-npm\">in a <code>node_module</code> package</a>.</p>\n<h3 id=\"options_1\"><a name=\"options_1\" class=\"anchor\" href=\"#options_1\"><span class=\"header-link\"></span></a>Options</h3><code-block lang=\"js\" lines=\"\">{\n  \"taglib-id\": \"my-custom-tag-library\", // Names the component library, for better errors.\n  \"tags-dir\": \"./ui-modules\", // What directory to crawl to autodiscover components. Default:`./components/`\n  \"taglib-imports\": [\"./some-folder/marko.json\", \"./other-folder/marko.json\"], // Creates a _combined_ tag library by referencing others.\n\n  \"tags\": { // Definitions for individial tags.\n    \"my-tag\": {\n      // Same options as “marko-tag.json”.\n    }\n  },\n\n  \"attributes\": {\n    // Defines attributes on all tags.\n    // Options are the same as the “attributes” section in “marko-tag.json”.\n  },\n\n  // Compiler file hooks (run on all templates)\n  \"migrator\": \"./migrator.js\", // Hooks into the migration stage for migrating deprecated features.\n  \"transformer\": \"./transformer.js\", // Used to modify the AST before generating it.\n  \"text-transformer\": \"./text-transformer.js\", // Used to transform all static text in the template.\n}</code-block><blockquote class=\"null\"><p><strong>⚠️ Note:</strong> Compiler hooks are currently undocumented: avoid using them. The compiler API is overhauled in Marko 5, and will be documented once that transition is complete.</p>\n</blockquote><h2 id=\"shorthands\"><a name=\"shorthands\" class=\"anchor\" href=\"#shorthands\"><span class=\"header-link\"></span></a>Shorthands</h2><p>Both configuration files support <em>shorthands</em> for defining <code>tags</code> and <code>attributes</code>. For example, take this <code>marko.json</code> file:</p>\n<p><em>marko.json</em></p>\n<code-block lang=\"js\" lines=\"\">{\n  \"taglib-id\": \"my-custom-tag-library\",\n  \"tags\": {\n    \"my-layout\": {\n      \"attributes\": {\n        \"name\": \"string\",\n        \"age\": \"number\"\n      },\n      \"nested-tags\": {\n        \"heading\": {\n          \"attributes\": {\n            \"color\": \"string\"\n          }\n        },\n        \"body\": {\n          \"attributes\": {\n            \"color\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}</code-block><p>As a shorthand, anywhere <code>tags</code> or <code>nested-tags</code> is used, you can remove the outer object and wrap the individual tags in <code>&lt;angle-brackets&gt;</code>.</p>\n<p>For <code>attributes</code>, you can remove the outer object and prefix the attributes with an <code>@</code>.</p>\n<p>The above example using the shorthand syntax would become:</p>\n<p><em>marko.json</em></p>\n<code-block lang=\"js\" lines=\"\">{\n  \"taglib-id\": \"my-custom-tag-library\",\n  \"<my-layout>\": {\n    \"@name\": \"string\",\n    \"@age\": \"number\",\n    \"<heading>\": {\n      \"@color\": \"string\"\n    },\n    \"<body>\": {\n      \"@color\": \"string\"\n    }\n  }\n}</code-block><p>For <code>nested-tags</code>, there is also a shorthand for <code>is-repeated</code> (a postfix of <code>[]</code>) and <code>target-property</code> (a prefix of <code>@newName</code>):</p>\n<p><em>marko.json</em></p>\n<code-block lang=\"javascript\" lines=\"\">{\n  \"<my-layout>\": {\n    \"@sections <section>[]\": {\n      \"@color\": \"string\"\n    }\n  }\n}</code-block><p>Is equivalent to:</p>\n<p><em>marko.json</em></p>\n<code-block lang=\"javascript\" lines=\"\">{\n  \"tags\": {\n    \"my-layout\": {\n      \"nested-tags\": {\n        \"section\": {\n          \"target-property\": \"sections\",\n          \"is-repeated\": true,\n          \"attributes\": {\n            \"color\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/marko-v4.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#notable-changes-and-improvements\\\">Notable Changes and Improvements</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#single-file-components-399\\\">Single file components ()</a></li><li><a href=\\\"#virtual-dom-support-366\\\">Virtual DOM support ()</a></li><li><a href=\\\"#merge-in-marko-widgets-390\\\">Merge in Marko Widgets ()</a></li><li><a href=\\\"#improved-component-lifecycle-methods-396\\\">Improved component lifecycle methods ()</a></li><li><a href=\\\"#automatically-watch-component-state-object-for-changes-406\\\">Automatically watch component state object for changes ()</a></li><li><a href=\\\"#consistent-rendering-api-415\\\">Consistent rendering API ()</a></li><li><a href=\\\"#less-boilerplate\\\">Less Boilerplate</a></li><li><a href=\\\"#embedded-javascript-blocks\\\">Embedded JavaScript blocks</a></li><li><a href=\\\"#template-variables\\\">Template variables</a></li></ul></li><li><a href=\\\"#other-improvements\\\">Other Improvements</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#only-diff-attributes-that-are-rendered-by-marko-417\\\">Only diff attributes that are rendered by Marko ()</a></li><li><a href=\\\"#allow-multiple-top-level-dom-elements-to-be-bound-393\\\">Allow multiple top-level DOM elements to be bound ()</a></li><li><a href=\\\"#template-as-entry-point-for-ui-components-416\\\">Template as entry point for UI components ()</a></li><li><a href=\\\"#allow-event-handler-attribute-to-bind-additional-arguments-401\\\">Allow event handler attribute to bind additional arguments ()</a></li><li><a href=\\\"#introduce-the-import-tag-404\\\">Introduce the &lt;import&gt; tag ()</a></li><li><a href=\\\"#allow-dynamic-custom-tagscomponents-to-be-used-with-include-139\\\">Allow dynamic custom tags/components to be used with &lt;include&gt; ()</a></li><li><a href=\\\"#single-file-components-outside-of-a-directory-are-not-automatically-discovered\\\">Single file components outside of a directory are not automatically discovered</a></li><li><a href=\\\"#supporting-files-for-ui-components\\\">Supporting files for UI components</a></li><li><a href=\\\"#split-component\\\">Split component</a></li><li><a href=\\\"#introduce-state-as-a-local-variable-400\\\">Introduce state as a local variable ()</a></li><li><a href=\\\"#make-output-of-render-promise-compatible-251\\\">Make output of render Promise-compatible ()</a></li><li><a href=\\\"#make-await-reorderer-optional-410\\\">Make &lt;await-reorderer/&gt; optional ()</a></li><li><a href=\\\"#allow-multiple-extensions-when-installing-the-nodejs-require-hook-407\\\">Allow multiple extensions when installing the Node.js require hook ()</a></li><li><a href=\\\"#auto-hot-reload-for-any-extensions-provided-when-installing-the-nodejs-require-hook-363\\\">Auto hot reload for any extensions provided when installing the Node.js require hook ()</a></li><li><a href=\\\"#allow-spaces-around-attributes-403\\\">Allow spaces around attributes ()</a></li><li><a href=\\\"#allow-compile-time-transformers-to-be-registered-at-the-template-level-408\\\">Allow compile-time transformers to be registered at the template level ()</a></li><li><a href=\\\"#allow-regular-expression-for-an-html-attribute-value-386\\\">Allow regular expression for an HTML attribute value ()</a></li></ul></li><li><a href=\\\"#deprecations\\\">Deprecations</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#deprecate-script-marko-init-and-replace-with-static-section-397\\\">Deprecate &lt;script marko-init&gt; and replace with static section ()</a></li><li><a href=\\\"#deprecate-var-assign-and-invoke\\\">Deprecate &lt;var&gt;, &lt;assign&gt; and &lt;invoke&gt;</a></li><li><a href=\\\"#deprecate-w-bind-394-395\\\">Deprecate w-bind ()</a></li><li><a href=\\\"#deprecate-widget-types-514\\\">Deprecate widget-types ()</a></li><li><a href=\\\"#deprecate-w-id-and-w-for-in-favor-of-key-and-for-key-394\\\">Deprecate w-id and w-for in favor of key and for-key ()</a></li><li><a href=\\\"#deprecate-w-on-in-favor-of-on-420\\\">Deprecate w-on* in favor of on*() ()</a></li><li><a href=\\\"#deprecate-init-widgets-409\\\">Deprecate &lt;init-widgets/&gt; ()</a></li><li><a href=\\\"#deprecate-w-body-and-replace-with-include-418\\\">Deprecate w-body and replace with include ()</a></li><li><a href=\\\"#deprecate-w-preserve-and-replace-with-no-update-419\\\">Deprecate w-preserve* and replace with no-update* ()</a></li><li><a href=\\\"#deprecate-w-preserve-attrs-and-replace-with-no-update-422\\\">Deprecate w-preserve-attrs and replace with :no-update ()</a></li><li><a href=\\\"#deprecate-w-extend-and-allow-multiple-components-to-be-bound-to-the-same-html-element-392\\\">Deprecate w-extend and allow multiple components to be bound to the same HTML element ()</a></li></ul></li><li><a href=\\\"#breaking-changes\\\">Breaking Changes</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#consistent-rendering-api-389\\\">Consistent rendering API ()</a></li><li><a href=\\\"#remove-support-for-deprecated-emptynotempty-helpers-357\\\">Remove support for deprecated empty/notEmpty helpers ()</a></li><li><a href=\\\"#remove-hyphenated-properties-from-input-model-356\\\">Remove hyphenated properties from input model ()</a></li><li><a href=\\\"#remove-support-for-deprecated-async-fragment-and-related-tags-312\\\">Remove support for deprecated &lt;async-fragment&gt; and related tags ()</a></li><li><a href=\\\"#remove-support-for-emitting-deprecated-async-fragment-events-426\\\">Remove support for emitting deprecated async-fragment events ()</a></li></ul></li></ul>\");\n-----\n<h1 id=\"whats-new-in-marko-v4\"><a name=\"whats-new-in-marko-v4\" class=\"anchor\" href=\"#whats-new-in-marko-v4\"><span class=\"header-link\"></span></a>What&#39;s New in Marko v4</h1><p>A lot of exciting improvements were made as part of the Mark v4 release.</p>\n<h2 id=\"notable-changes-and-improvements\"><a name=\"notable-changes-and-improvements\" class=\"anchor\" href=\"#notable-changes-and-improvements\"><span class=\"header-link\"></span></a>Notable Changes and Improvements</h2><h3 id=\"single-file-components-399\"><a name=\"single-file-components-399\" class=\"anchor\" href=\"#single-file-components-399\"><span class=\"header-link\"></span></a>Single file components (<a href=\"https://github.com/marko-js/marko/issues/399\">#399</a>)</h3><p>Marko now supports combining HTML, rendering logic, client-side behavior and styling into a single file component.</p>\n<p><em>src/components/click-count/index.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">class {\n    onCreate() {\n        this.state = {\n            count: 0\n        }\n    }\n\n    onInput(input) {\n        this.state.count = input.value || 0;\n    }\n\n    increment() {\n        this.state.count++;\n    }\n}\n\nstyle.less {\n    .count {\n        color: #09c;\n    }\n    .button {\n        background: #fff;\n    }\n}\n\n<div>\n    <span class=\"count\">&#36;{state.count}</span>\n    <button class=\"button\" on-click('increment')>\n        increment count\n    </button>\n</div></code-block><p>You can easily <code>require</code>/<code>import</code> a single file component and interact with it using the exported JavaScript API:</p>\n<code-block lang=\"js\" lines=\"\">var clickCount = require(\"./src/components/click-count\");\n\nvar component = clickCount\n  .renderSync({\n    value: 10\n  })\n  .appendTo(document.body)\n  .getComponent();\n\ncomponent.increment();</code-block><p>Of course, a single file component can also be embedded in another template as a custom tag:</p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    <click-count value=10 />\n</div></code-block><h3 id=\"virtual-dom-support-366\"><a name=\"virtual-dom-support-366\" class=\"anchor\" href=\"#virtual-dom-support-366\"><span class=\"header-link\"></span></a>Virtual DOM support (<a href=\"https://github.com/marko-js/marko/issues/366\">#366</a>)</h3><p>Because Marko renders raw HTML strings to a stream on the server, Marko has always been faster than other libraries by an <a href=\"https://github.com/patrick-steele-idem/marko-vs-react\">order of magnitude</a> when rendering on the server. However although Marko has been <em>pretty</em> fast in the browser, it was a little behind some of our competitors. This was mainly because the output HTML string needed to be parsed into a DOM in order to do DOM diffing/patching.</p>\n<p>That&#39;s changed. Marko now supports multiple compilation outputs. Templates compiled for the server will continue to render to an HTML stream/string and templates compiled for the browser will now render to a fast and lightweight virtual DOM tree. The code samples below show how the two different compilation outputs compare:</p>\n<p><em>Compiled for HTML output (server-side):</em></p>\n<code-block lang=\"javascript\" lines=\"\">function render(data, out) {\n  var colors = data.colors;\n\n  if (colors &amp;&amp; colors.length) {\n    out.w(\"<ul>\");\n\n    marko_forEach(colors, function(color) {\n      out.w('<li class=\"color\">' + marko_escapeXml(color) + \"</li>\");\n    });\n\n    out.w(\"</ul>\");\n  } else {\n    out.w(\"<div>No colors!</div>\");\n  }\n}</code-block><p><em>Compiled for VDOM output (browser-side):</em></p>\n<code-block lang=\"javascript\" lines=\"\">var marko_attrs0 = {\n    class: \"color\"\n  },\n  marko_node0 = marko_createElement(\"DIV\", null, 1, marko_const_nextId()).t(\n    \"No colors!\"\n  );\n\nfunction render(data, out) {\n  var colors = data.colors;\n\n  if (colors &amp;&amp; colors.length) {\n    out.be(\"UL\");\n\n    marko_forEach(colors, function(color) {\n      out.e(\"LI\", marko_attrs0, 1).t(marko_str(color));\n    });\n\n    out.ee();\n  } else {\n    out.n(marko_node0);\n  }\n}</code-block><p>The VDOM output allows optimizations that were previously not possible:</p>\n<ul>\n<li>Static subtrees are pulled into variables that are only initialized once and reused for every render</li>\n<li>Static attributes that are on dynamic elements are pulled out to static variables</li>\n<li>Diffing is skipped when comparing static subtrees</li>\n<li>Diffing is skipped when comparing static attributes</li>\n</ul>\n<p>Our benchmarks show a significant improvement in rendering time and we are consistently outperforming React/Preact/Inferno, Vue and other UI libraries.</p>\n<h3 id=\"merge-in-marko-widgets-390\"><a name=\"merge-in-marko-widgets-390\" class=\"anchor\" href=\"#merge-in-marko-widgets-390\"><span class=\"header-link\"></span></a>Merge in Marko Widgets (<a href=\"https://github.com/marko-js/marko/issues/390\">#390</a>)</h3><p>A big part of this release is a shift in focus from Marko being merely a templating language to a complete UI library. As such, we are providing first-class support for components.</p>\n<p>You will no longer need to install <code>marko-widgets</code> as an external library, and there is more cohesion between the templates and components/components.</p>\n<h3 id=\"improved-component-lifecycle-methods-396\"><a name=\"improved-component-lifecycle-methods-396\" class=\"anchor\" href=\"#improved-component-lifecycle-methods-396\"><span class=\"header-link\"></span></a>Improved component lifecycle methods (<a href=\"https://github.com/marko-js/marko/issues/396\">#396</a>)</h3><ul>\n<li><code>getInitialState()</code> ➔ <code>onInput(input)</code></li>\n<li><code>getComponentConfig()</code> ➔ <code>onInput(input)</code></li>\n<li><code>init(config)</code> ➔ <code>onMount()</code></li>\n<li><code>getTemplateData(input, state)</code> ➔ (no longer needed)</li>\n<li><code>getInitialProps(input)</code> ➔ (no longer needed)</li>\n</ul>\n<code-block lang=\"js\" lines=\"\">class {\n    onCreate(input) {\n        this.state = {\n            count: 0\n        }\n        this.initialCount = 0;\n    }\n\n    onInput(input) {\n        if (input.count) {\n            // if the parent component passes a value\n            // for count, we'll reset our state to that\n            // value\n            this.state.count = input.count;\n            this.initialCount = input.count;\n        }\n    }\n\n    onRender(out) {\n        // Called for every render. This component\n        // may or may not be mounted.\n        // During render we have access to the `out`.\n        console.log('The template is about to be rendered!');\n    }\n\n    onMount() {\n        console.log('The component has mounted!');\n\n        console.log('Count: ' + this.state.count);\n        console.log('Initial count: ' + this.initialCount);\n    }\n\n    onUpdate() {\n        console.log('The DOM has been updated!');\n    }\n\n    onDestroy() {\n        console.log('The component is about to be destroyed :(')\n    }\n\n    // Helper methods:\n\n    reset() {\n        this.state.count = this.initialCount;\n    }\n\n    increment() {\n        this.state.count++;\n    }\n\n    decrement() {\n        this.state.count--;\n    }\n}</code-block><h3 id=\"automatically-watch-component-state-object-for-changes-406\"><a name=\"automatically-watch-component-state-object-for-changes-406\" class=\"anchor\" href=\"#automatically-watch-component-state-object-for-changes-406\"><span class=\"header-link\"></span></a>Automatically watch component state object for changes (<a href=\"https://github.com/marko-js/marko/issues/406\">#406</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"js\" lines=\"\">{\n    getInitialState(input) {\n        return {\n            count: input.count || 0\n        };\n    }\n    increment() {\n        this.setState('count', this.state.count+1);\n    }\n}</code-block><p><strong>New:</strong></p>\n<code-block lang=\"js\" lines=\"\">{\n    onInput(input) {\n        this.state = {\n            count: input.count || 0\n        };\n    }\n    increment() {\n        this.state.count++;\n    }\n}</code-block><p>In addition, the default state can now be declared:</p>\n<code-block lang=\"js\" lines=\"\">{\n    onCreate() {\n        this.state = {\n            count: 0\n        };\n    }\n\n    onInput(input) {\n        this.state = {\n            count: input.count\n        };\n    }\n\n    increment() {\n        this.state.count++;\n    }\n}</code-block><h3 id=\"consistent-rendering-api-415\"><a name=\"consistent-rendering-api-415\" class=\"anchor\" href=\"#consistent-rendering-api-415\"><span class=\"header-link\"></span></a>Consistent rendering API (<a href=\"https://github.com/marko-js/marko/issues/415\">#415</a>)</h3><p>In Marko v3, UI components exported an API that included DOM insertion methods while simple templates only exported an API for rendering to a string/stream. With Marko v4, simple templates and UI components now export the exact same rendering API.</p>\n<code-block lang=\"js\" lines=\"\">// Append to an existing DOM node:\nrequire(\"./template.marko\")\n  .renderSync({ name: \"Frank \" })\n  .appendTo(document.body);\n\n// Replace an existing DOM node:\nrequire(\"./template.marko\")\n  .renderSync({ name: \"Frank \" })\n  .replace(document.getElementById(\"foo\"));</code-block><h3 id=\"less-boilerplate\"><a name=\"less-boilerplate\" class=\"anchor\" href=\"#less-boilerplate\"><span class=\"header-link\"></span></a>Less Boilerplate</h3><ul>\n<li>Removed: <code>w-bind</code></li>\n<li>Removed: <code>w-extend</code></li>\n<li>Removed: <code>require(&#39;marko-widgets&#39;).defineComponent(...)</code></li>\n<li>Removed: <code>require(&#39;marko-widgets&#39;).defineWidget(...)</code></li>\n<li>Removed: <code>require(&#39;marko-widgets&#39;).defineRenderer(...)</code></li>\n<li>Removed: <code>w-body</code> (use <code>&lt;include()&gt;</code> instead)</li>\n<li><code>w-on*=&quot;handleSomeEvent&quot;</code> --&gt; <code>on*(&#39;handleSomeEvent&#39;)</code></li>\n<li><code>w-id</code> --&gt; <code>key</code></li>\n<li><code>w-for</code> --&gt; <code>for-key</code></li>\n<li><code>w-preserve</code> --&gt; <code>no-update</code></li>\n<li><code>class=&quot;foo&quot; w-preserve-attrs=&quot;class&quot;</code> --&gt; <code>class:no-update=&quot;foo&quot;</code></li>\n</ul>\n<p>Some of these things are described in more detail later in this document.</p>\n<h3 id=\"embedded-javascript-blocks\"><a name=\"embedded-javascript-blocks\" class=\"anchor\" href=\"#embedded-javascript-blocks\"><span class=\"header-link\"></span></a>Embedded JavaScript blocks</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><var name=\"Frank\"/>\n<assign name=\"John\"/>\n<invoke console.log(name)/></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\">&#36; var name='Frank';\n&#36; name='John';\n&#36; console.log(name);</code-block><p>Alternatively:</p>\n<code-block lang=\"marko\" lines=\"\">&#36; {\n    var name='Frank';\n    name='John';\n    console.log(name);\n}</code-block><p>JavaScript blocks can be embedded anywhere by putting <code>&amp;#36;</code> at the start of the line (ignoring whitespace) and it works the same for both the concise syntax and the non-concise syntax:</p>\n<code-block lang=\"marko\" lines=\"\"><div.hello>\n    <for(name in names)>\n        &#36; name = name.toUpperCase();\n        Hello &#36;{name}!\n    </for>\n</div></code-block><p>Static JavaScript blocks (for JavaScript that should only be executed once when the template is first loaded) are also supported:</p>\n<p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><script marko-init>\n    function formatName(person) {\n        return person.firstName + ' ' + person.lastName;\n    }\n    function isTeenager(person) {\n        return person.age > 12 &amp;&amp; person.age < 20;\n    }\n</script>\n<div>\n    Hello &#36;{formatName(input.person)}!\n    Teenager?: &#36;{isTeenager(input.person) ? 'Yes' : 'No'}\n</div></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\">static function formatName(person) {\n    return person.firstName + ' ' + person.lastName;\n}\n\nstatic function isTeenager(person) {\n    return person.age > 12 &amp;&amp; person.age < 20;\n}\n<div>\n    Hello &#36;{formatName(input.person)}!\n    Teenager?: &#36;{isTeenager(input.person) ? 'Yes' : 'No'}\n</div></code-block><p>Alternatively:</p>\n<code-block lang=\"marko\" lines=\"\">static {\n    function formatName(person) {\n        return person.firstName + ' ' + person.lastName;\n    }\n\n    function isTeenager(person) {\n        return person.age > 12 &amp;&amp; person.age < 20;\n    }\n}\n<div>\n    Hello &#36;{formatName(input.person)}!\n    Teenager?: &#36;{isTeenager(input.person) ? 'Yes' : 'No'}\n</div></code-block><h3 id=\"template-variables\"><a name=\"template-variables\" class=\"anchor\" href=\"#template-variables\"><span class=\"header-link\"></span></a>Template variables</h3><ul>\n<li><code>data</code> --&gt; <code>input</code> - References the input object (should be treated as immutable)</li>\n<li>Introduced <code>state</code> - References the components raw state object (for components only)</li>\n<li>Introduced <code>component</code> - References the component instance (for components only)</li>\n</ul>\n<h2 id=\"other-improvements\"><a name=\"other-improvements\" class=\"anchor\" href=\"#other-improvements\"><span class=\"header-link\"></span></a>Other Improvements</h2><h3 id=\"only-diff-attributes-that-are-rendered-by-marko-417\"><a name=\"only-diff-attributes-that-are-rendered-by-marko-417\" class=\"anchor\" href=\"#only-diff-attributes-that-are-rendered-by-marko-417\"><span class=\"header-link\"></span></a>Only diff attributes that are rendered by Marko (<a href=\"https://github.com/marko-js/marko/issues/417\">#417</a>)</h3><p>Previously, when diffing the DOM, all of the attributes on a real HTML element node were diffed with all of the attributes on a newly rendered HTML element node. This posed a problem when using Marko with third party libraries, such as animation libraries, that added HTML attributes that should have been left alone. The proposed workaround was to add the <code>w-preserve-attrs</code> attribute wherever needed.</p>\n<p>In Marko v4, only the attributes rendered by Marko are ever modified by Marko. Any attributes added by third-party libraries are simply ignored.</p>\n<h3 id=\"allow-multiple-top-level-dom-elements-to-be-bound-393\"><a name=\"allow-multiple-top-level-dom-elements-to-be-bound-393\" class=\"anchor\" href=\"#allow-multiple-top-level-dom-elements-to-be-bound-393\"><span class=\"header-link\"></span></a>Allow multiple top-level DOM elements to be bound (<a href=\"https://github.com/marko-js/marko/issues/393\">#393</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div w-bind>\n    <h1>The current count is &#36;{data.count}</h1>\n    <button onClick('incrementCount')>Increment Count</button>\n</div></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><h1>The current count is &#36;{input.count}</h1>\n<button onClick('incrementCount')>Increment Count</button></code-block><h3 id=\"template-as-entry-point-for-ui-components-416\"><a name=\"template-as-entry-point-for-ui-components-416\" class=\"anchor\" href=\"#template-as-entry-point-for-ui-components-416\"><span class=\"header-link\"></span></a>Template as entry point for UI components (<a href=\"https://github.com/marko-js/marko/issues/416\">#416</a>)</h3><p><strong>Old:</strong></p>\n<p><code>index.js</code></p>\n<code-block lang=\"js\" lines=\"\">module.exports = require('marko-widgets').defineComponent({\n    template: require('./template.marko'),\n    ...\n});</code-block><p><code>template.marko</code></p>\n<code-block lang=\"marko\" lines=\"\"><div w-bind>\n    ...\n</div></code-block><p><strong>New:</strong></p>\n<p><code>component.js</code></p>\n<code-block lang=\"js\" lines=\"\">module.exports = {\n    ...\n};</code-block><p><code>index.marko</code></p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    ...\n</div></code-block><blockquote class=\"null\"><p>The compiled template now exports the component</p>\n</blockquote><h3 id=\"allow-event-handler-attribute-to-bind-additional-arguments-401\"><a name=\"allow-event-handler-attribute-to-bind-additional-arguments-401\" class=\"anchor\" href=\"#allow-event-handler-attribute-to-bind-additional-arguments-401\"><span class=\"header-link\"></span></a>Allow event handler attribute to bind additional arguments (<a href=\"https://github.com/marko-js/marko/issues/401\">#401</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><ul for(color in colors)>\n    <li w-onClick=\"handleColorClick\" data-color=color>&#36;{color}</li>\n</ul></code-block><code-block lang=\"js\" lines=\"\">handleColorClick(event, el) {\n    console.log(el.getAttribute('data-color'), 'was clicked');\n}</code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\">class {\n    handleColorClick(color, event, el) {\n        console.log(color, 'was clicked');\n    }\n}\n\n<ul for(color in colors)>\n    <li onClick('handleColorClick', color)>&#36;{color}</li>\n</ul></code-block><p>NOTE: <code>w-on*</code> has been deprecated. See: <a href=\"#deprecate-w-on\">Deprecate <code>w-on*</code> in favor of <code>on*()</code></a></p>\n<h3 id=\"introduce-the-import-tag-404\"><a name=\"introduce-the-import-tag-404\" class=\"anchor\" href=\"#introduce-the-import-tag-404\"><span class=\"header-link\"></span></a>Introduce the <code>&lt;import&gt;</code> tag (<a href=\"https://github.com/marko-js/marko/issues/404\">#404</a>)</h3><p>Marko v4 introduces ES6 style imports for importing other JavaScript modules:</p>\n<p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><script marko-init>\n    var helpers = require('./helpers');\n</script>\n<div>Total: &#36;{helpers.formatCurrency(data.total)}</div></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\">import helpers from \"./helpers\"\n<div>Total: &#36;{helpers.formatCurrency(data.total)}</div></code-block><p>The full ES6 import syntax is supported:</p>\n<code-block lang=\"marko\" lines=\"\">import { formatCurrency } from \"./helpers\"\n<div>Total: &#36;{formatCurrency(data.total)}</div></code-block><h3 id=\"allow-dynamic-custom-tagscomponents-to-be-used-with-include-139\"><a name=\"allow-dynamic-custom-tagscomponents-to-be-used-with-include-139\" class=\"anchor\" href=\"#allow-dynamic-custom-tagscomponents-to-be-used-with-include-139\"><span class=\"header-link\"></span></a>Allow dynamic custom tags/components to be used with <code>&lt;include&gt;</code> (<a href=\"https://github.com/marko-js/marko/issues/139\">#139</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><invoke data.myComponent.renderer({name: 'Frank'}, out)/></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><include(input.myComponent) name='Frank' /></code-block><p>or</p>\n<code-block lang=\"marko\" lines=\"\"><include(input.myComponent, {name: 'Frank'}) /></code-block><h3 id=\"single-file-components-outside-of-a-directory-are-not-automatically-discovered\"><a name=\"single-file-components-outside-of-a-directory-are-not-automatically-discovered\" class=\"anchor\" href=\"#single-file-components-outside-of-a-directory-are-not-automatically-discovered\"><span class=\"header-link\"></span></a>Single file components outside of a directory are not automatically discovered</h3><p>The following are equivalent:</p>\n<p>Component directory:</p>\n<code-block lang=\"\" lines=\"\">components/hello/index.marko</code-block><p>Component file:</p>\n<code-block lang=\"\" lines=\"\">components/hello.marko</code-block><h3 id=\"supporting-files-for-ui-components\"><a name=\"supporting-files-for-ui-components\" class=\"anchor\" href=\"#supporting-files-for-ui-components\"><span class=\"header-link\"></span></a>Supporting files for UI components</h3><p>The following are equivalent:</p>\n<p>Component directory:</p>\n<code-block lang=\"\" lines=\"\">components/hello/\n    compnent.js\n    index.marko\n    style.less</code-block><p>Component file:</p>\n<code-block lang=\"bash\" lines=\"\">components/\n    hello.component.js\n    hello.marko\n    hello.style.less</code-block><h3 id=\"split-component\"><a name=\"split-component\" class=\"anchor\" href=\"#split-component\"><span class=\"header-link\"></span></a>Split component</h3><p>Marko v4 improves how split components are supported. Split component allow only the client-side logic to be sent to the browser if the rendering logic (and view template) are not needed in the browser:</p>\n<code-block lang=\"\" lines=\"\">components/hello/\n    component.js         # Required to render\n    component-browser.js # Required to handle events, etc.\n    index.marko          # Required to render</code-block><h3 id=\"introduce-state-as-a-local-variable-400\"><a name=\"introduce-state-as-a-local-variable-400\" class=\"anchor\" href=\"#introduce-state-as-a-local-variable-400\"><span class=\"header-link\"></span></a>Introduce <code>state</code> as a local variable (<a href=\"https://github.com/marko-js/marko/issues/400\">#400</a>)</h3><p><strong>Old:</strong></p>\n<p><code>component.js</code></p>\n<code-block lang=\"js\" lines=\"\">{\n    getInitialState(input) {\n        return {\n            name: input.name,\n            birthday: input.birthday\n        }\n    },\n    getTemplateData(state, input) {\n        return {\n            name: state.name,\n            age: calculateAge(state.birthday)\n        }\n    },\n    ...\n}</code-block><p><code>template.marko</code></p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    Hello &#36;{data.name}! You are &#36;{data.age} year(s) old.\n</div></code-block><p><strong>New:</strong></p>\n<p><code>component.js</code></p>\n<code-block lang=\"js\" lines=\"\">{\n    onInput(input) {\n        // `this.state` will be available as the `state` variable\n        // in the template.\n        this.state = {\n            name: input.name,\n            birthday: input.birthday\n        };\n    }\n    ...\n}</code-block><p><code>template.marko</code></p>\n<code-block lang=\"marko\" lines=\"\">&#36; var age = calculateAge(state.birthday);\n<div>\n    Hello &#36;{state.name}! You are &#36;{age} year(s) old.\n</div></code-block><h3 id=\"make-output-of-render-promise-compatible-251\"><a name=\"make-output-of-render-promise-compatible-251\" class=\"anchor\" href=\"#make-output-of-render-promise-compatible-251\"><span class=\"header-link\"></span></a>Make output of render <code>Promise</code>-compatible (<a href=\"https://github.com/marko-js/marko/issues/251\">#251</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"js\" lines=\"\">template.render({}, function(err, html, out) {});</code-block><p><strong>New:</strong></p>\n<code-block lang=\"js\" lines=\"\">template\n  .render({})\n  .then(function(result) {})\n  .catch(function(err) {});\n\n// render() can now be used with async/await\nvar out = await template.render({});\nout.appendTo(document.body);</code-block><p>NOTE: callback/events still work as well</p>\n<h3 id=\"make-await-reorderer-optional-410\"><a name=\"make-await-reorderer-optional-410\" class=\"anchor\" href=\"#make-await-reorderer-optional-410\"><span class=\"header-link\"></span></a>Make <code>&lt;await-reorderer/&gt;</code> optional (<a href=\"https://github.com/marko-js/marko/issues/410\">#410</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><html>\n    ...\n    <body>\n        ...\n        <await-reorderer/>\n    </body>\n</html></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><html>\n    ...\n    <body>\n        ...\n    </body>\n</html></code-block><p><em>Automatically inserted before <code>&lt;/body&gt;</code></em></p>\n<h3 id=\"allow-multiple-extensions-when-installing-the-nodejs-require-hook-407\"><a name=\"allow-multiple-extensions-when-installing-the-nodejs-require-hook-407\" class=\"anchor\" href=\"#allow-multiple-extensions-when-installing-the-nodejs-require-hook-407\"><span class=\"header-link\"></span></a>Allow multiple extensions when installing the Node.js require hook (<a href=\"https://github.com/marko-js/marko/issues/407\">#407</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"js\" lines=\"\">require(\"marko/node-require\").install({\n  extension: \".marko\"\n});</code-block><p><strong>New:</strong></p>\n<code-block lang=\"js\" lines=\"\">require(\"marko/node-require\").install({\n  extensions: [\".marko\", \".marko.xml\", \".html\"]\n});</code-block><h3 id=\"auto-hot-reload-for-any-extensions-provided-when-installing-the-nodejs-require-hook-363\"><a name=\"auto-hot-reload-for-any-extensions-provided-when-installing-the-nodejs-require-hook-363\" class=\"anchor\" href=\"#auto-hot-reload-for-any-extensions-provided-when-installing-the-nodejs-require-hook-363\"><span class=\"header-link\"></span></a>Auto hot reload for any extensions provided when installing the Node.js require hook (<a href=\"https://github.com/marko-js/marko/issues/363\">#363</a>)</h3><p>Hot reload any extensions that were registered via <code>require(&#39;marko/node-require&#39;).install()</code>.</p>\n<h3 id=\"allow-spaces-around-attributes-403\"><a name=\"allow-spaces-around-attributes-403\" class=\"anchor\" href=\"#allow-spaces-around-attributes-403\"><span class=\"header-link\"></span></a>Allow spaces around attributes (<a href=\"https://github.com/marko-js/marko/issues/403\">#403</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\">var className=\"foo\"\n<div class=className/></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\">&#36; var className = \"foo\"\n<div class = className/></code-block><blockquote class=\"null\"><p>NOTE: spaces are <strong>allowed</strong>, not required</p>\n</blockquote><h3 id=\"allow-compile-time-transformers-to-be-registered-at-the-template-level-408\"><a name=\"allow-compile-time-transformers-to-be-registered-at-the-template-level-408\" class=\"anchor\" href=\"#allow-compile-time-transformers-to-be-registered-at-the-template-level-408\"><span class=\"header-link\"></span></a>Allow compile-time transformers to be registered at the template level (<a href=\"https://github.com/marko-js/marko/issues/408\">#408</a>)</h3><p><code>marko.json</code></p>\n<code-block lang=\"json\" lines=\"\">{\n  \"transformer\": \"./my-transformer.js\"\n}</code-block><p><code>my-transformer.js</code></p>\n<code-block lang=\"js\" lines=\"\">module.exports = function transform(rootNode, context) {\n  // ...\n};</code-block><p><a href=\"https://github.com/marko-js/marko/commit/a35e6bdbc3fe6e7f4e92fb377c435e29ab3d6e33\">see commit</a></p>\n<h3 id=\"allow-regular-expression-for-an-html-attribute-value-386\"><a name=\"allow-regular-expression-for-an-html-attribute-value-386\" class=\"anchor\" href=\"#allow-regular-expression-for-an-html-attribute-value-386\"><span class=\"header-link\"></span></a>Allow regular expression for an HTML attribute value (<a href=\"https://github.com/marko-js/marko/issues/386\">#386</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><!-- escaped backslash (\\) since strings are parsed as JS values -->\n<input type=\"text\" pattern=\"\\\\w{2,20}\" /></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><!-- just use a regex -->\n<input type=\"text\" pattern=/\\w{2,20}/ /></code-block><h2 id=\"deprecations\"><a name=\"deprecations\" class=\"anchor\" href=\"#deprecations\"><span class=\"header-link\"></span></a>Deprecations</h2><p>A huge effort is being made to make this release as painless as possible and keep backwards compatibility wherever possible. It should be possible to continue to use custom tags that were developed against v3 with the v4 release as long as there are no dependencies on features deprecated in Marko v3 that have now been removed in Marko v4 (see <a href=\"#breaking-changes\">Breaking Changes</a> below).</p>\n<p>Additionally, <a href=\"https://github.com/marko-js/marko-migrate\"><code>marko-migrate</code></a> will be updated to handle many of the deprecations described below.</p>\n<h3 id=\"deprecate-script-marko-init-and-replace-with-static-section-397\"><a name=\"deprecate-script-marko-init-and-replace-with-static-section-397\" class=\"anchor\" href=\"#deprecate-script-marko-init-and-replace-with-static-section-397\"><span class=\"header-link\"></span></a>Deprecate <code>&lt;script marko-init&gt;</code> and replace with <code>static</code> section (<a href=\"https://github.com/marko-js/marko/issues/397\">#397</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><script marko-init>\n    var format = require('format');\n</script>\n<var name=\"World\"/>\n<div>Hello &#36;{format(name)}</div></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\">static var format=require('format')\n&#36; var name='World'\n<div>Hello &#36;{format(name)}</div></code-block><h3 id=\"deprecate-var-assign-and-invoke\"><a name=\"deprecate-var-assign-and-invoke\" class=\"anchor\" href=\"#deprecate-var-assign-and-invoke\"><span class=\"header-link\"></span></a>Deprecate <code>&lt;var&gt;</code>, <code>&lt;assign&gt;</code> and <code>&lt;invoke&gt;</code></h3><p>Use embedded JavaScript blocks instead</p>\n<h3 id=\"deprecate-w-bind-394-395\"><a name=\"deprecate-w-bind-394-395\" class=\"anchor\" href=\"#deprecate-w-bind-394-395\"><span class=\"header-link\"></span></a>Deprecate <code>w-bind</code> (<a href=\"https://github.com/marko-js/marko/issues/394\">#394</a>, <a href=\"https://github.com/marko-js/marko/issues/395\">#395</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div w-bind>\n    ...\n</div></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    ...\n</div></code-block><p>(Automatic binding to <code>./component.js</code>)</p>\n<h3 id=\"deprecate-widget-types-514\"><a name=\"deprecate-widget-types-514\" class=\"anchor\" href=\"#deprecate-widget-types-514\"><span class=\"header-link\"></span></a>Deprecate <code>widget-types</code> (<a href=\"https://github.com/marko-js/marko/issues/514\">#514</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><widget-types default=\"./component\" mobile=\"./component-mobile\"/>\n\n<div w-bind=(data.isMobile ? 'default' : 'mobile')>\n    ...\n</div></code-block><p><code>widget-types</code> should no longer be used. Instead, the JavaScript module bundler should handle the remapping if needed.</p>\n<h3 id=\"deprecate-w-id-and-w-for-in-favor-of-key-and-for-key-394\"><a name=\"deprecate-w-id-and-w-for-in-favor-of-key-and-for-key-394\" class=\"anchor\" href=\"#deprecate-w-id-and-w-for-in-favor-of-key-and-for-key-394\"><span class=\"header-link\"></span></a>Deprecate <code>w-id</code> and <code>w-for</code> in favor of <code>key</code> and <code>for-key</code> (<a href=\"https://github.com/marko-js/marko/issues/394\">#394</a>)</h3><p>The <code>w-id</code> attribute was used to obtain references using <code>this.getEl(refId)</code>. <code>w-id</code> has been replaced with the <code>key</code> attribute:</p>\n<p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><input type=\"text\" w-id=\"nameInput\" /></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><input type=\"text\" key=\"nameInput\" /></code-block><p>Similarly, <code>w-for</code> has been been replaced with <code>for-key</code>:</p>\n<p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><label w-for=\"nameInput\">Name</label>\n<input type=\"text\" w-id=\"nameInput\" /></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><label for-key=\"nameInput\">Name</label>\n<input type=\"text\" key=\"nameInput\" /></code-block><p><a name=\"deprecate-w-on\"></a></p>\n<h3 id=\"deprecate-w-on-in-favor-of-on-420\"><a name=\"deprecate-w-on-in-favor-of-on-420\" class=\"anchor\" href=\"#deprecate-w-on-in-favor-of-on-420\"><span class=\"header-link\"></span></a>Deprecate <code>w-on*</code> in favor of <code>on*()</code> (<a href=\"https://github.com/marko-js/marko/issues/420\">#420</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><button w-on-click=\"handleClick\">click me</button></code-block><p>or</p>\n<code-block lang=\"marko\" lines=\"\"><button w-onClick=\"handleClick\">click me</button></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><button on-click('handleClick')>click me</button></code-block><p>or</p>\n<code-block lang=\"marko\" lines=\"\"><button onClick('handleClick')>click me</button></code-block><h3 id=\"deprecate-init-widgets-409\"><a name=\"deprecate-init-widgets-409\" class=\"anchor\" href=\"#deprecate-init-widgets-409\"><span class=\"header-link\"></span></a>Deprecate <code>&lt;init-widgets/&gt;</code> (<a href=\"https://github.com/marko-js/marko/issues/409\">#409</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><html>\n    ...\n    <body>\n        ...\n        <init-widgets/>\n    </body>\n</html></code-block><p><strong>New:</strong></p>\n<p><strong>Automatic component initialization!</strong></p>\n<h3 id=\"deprecate-w-body-and-replace-with-include-418\"><a name=\"deprecate-w-body-and-replace-with-include-418\" class=\"anchor\" href=\"#deprecate-w-body-and-replace-with-include-418\"><span class=\"header-link\"></span></a>Deprecate <code>w-body</code> and replace with <code>include</code> (<a href=\"https://github.com/marko-js/marko/issues/418\">#418</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    <h1>My Awesome Component</h1>\n    <div class=\"body\" w-body/>\n</div></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    <h1>My Awesome Component</h1>\n    <div class=\"body\" include()/>\n</div></code-block><p>Or, as a tag:</p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    <h1>My Awesome Component</h1>\n    <div class=\"body\">\n        <include()/>\n    </div>\n</div></code-block><p>NOTE: The parens (i.e., <code>()</code>) are optional for both the include attribute and the include tag</p>\n<p>Or, with an argument value:</p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    <h1>My Awesome Component</h1>\n    <div class=\"body\">\n        <include(data.renderBody || data.label)/>\n    </div>\n</div></code-block><h3 id=\"deprecate-w-preserve-and-replace-with-no-update-419\"><a name=\"deprecate-w-preserve-and-replace-with-no-update-419\" class=\"anchor\" href=\"#deprecate-w-preserve-and-replace-with-no-update-419\"><span class=\"header-link\"></span></a>Deprecate <code>w-preserve*</code> and replace with <code>no-update*</code> (<a href=\"https://github.com/marko-js/marko/issues/419\">#419</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div w-preserve>\n    ...\n</div></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div no-update>\n    ...\n</div></code-block><h3 id=\"deprecate-w-preserve-attrs-and-replace-with-no-update-422\"><a name=\"deprecate-w-preserve-attrs-and-replace-with-no-update-422\" class=\"anchor\" href=\"#deprecate-w-preserve-attrs-and-replace-with-no-update-422\"><span class=\"header-link\"></span></a>Deprecate <code>w-preserve-attrs</code> and replace with <code>:no-update</code> (<a href=\"https://github.com/marko-js/marko/issues/422\">#422</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div style=\"color:#09c\" w-preserve-attrs=\"style\">\n    ...\n</div></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div style:no-update=\"color:#09c\">\n    ...\n</div></code-block><h3 id=\"deprecate-w-extend-and-allow-multiple-components-to-be-bound-to-the-same-html-element-392\"><a name=\"deprecate-w-extend-and-allow-multiple-components-to-be-bound-to-the-same-html-element-392\" class=\"anchor\" href=\"#deprecate-w-extend-and-allow-multiple-components-to-be-bound-to-the-same-html-element-392\"><span class=\"header-link\"></span></a>Deprecate <code>w-extend</code> and allow multiple components to be bound to the same HTML element (<a href=\"https://github.com/marko-js/marko/issues/392\">#392</a>)</h3><blockquote class=\"null\"><p><code>w-extend</code> is now deprecated</p>\n</blockquote><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><div w-bind>\n    <some-component w-onEvent=\"handleEvent\"/>\n</div></code-block><p>or</p>\n<code-block lang=\"marko\" lines=\"\"><some-component w-extend w-onEvent=\"handleEvent\"/></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><some-component onEvent('handleEvent')/></code-block><p>NOTE: The outer most component is what is returned when calling <code>getComponent()</code>/<code>getComponentForEl()</code>.</p>\n<p><a name=\"breaking-changes\"></a></p>\n<h2 id=\"breaking-changes\"><a name=\"breaking-changes\" class=\"anchor\" href=\"#breaking-changes\"><span class=\"header-link\"></span></a>Breaking Changes</h2><p>In order to move forward it was necessary to introduce a few (minor) breaking changes. We are also removing support for some features that were already logging deprecation messages in v3.</p>\n<h3 id=\"consistent-rendering-api-389\"><a name=\"consistent-rendering-api-389\" class=\"anchor\" href=\"#consistent-rendering-api-389\"><span class=\"header-link\"></span></a>Consistent rendering API (<a href=\"https://github.com/marko-js/marko/issues/389\">#389</a>)</h3><p><strong>Old:</strong></p>\n<code-block lang=\"js\" lines=\"\">var template = require(\"./template.marko\");\nvar component = require(\"./my-component\");\nvar data = {};\n\ntemplate.render(data); // returns `out`\ntemplate.render(data, (err, html, out) => {});\ntemplate.renderSync(data); // returns a String representing the HTML output\n\ncomponent.render(data); // returns a `RenderResult`\ncomponent.render(data, (err, renderResult) => {});\ncomponent.renderSync(data); // throws an error, not a method.</code-block><p><strong>New:</strong></p>\n<code-block lang=\"js\" lines=\"\">var template = require(\"./template.marko\");\nvar component = require(\"./my-component\");\nvar data = {};\n\ntemplate.render(data); // returns `out`\ntemplate.render(data, (err, out) => {});\ntemplate.renderSync(data); // returns `out`\n\ncomponent.render(data); // returns `out`\ncomponent.render(data, (err, out) => {});\ncomponent.renderSync(data); // returns `out`</code-block><p>Also, <code>out</code> has been updated to implement DOM manipulation methods like <code>appendTo</code> that were previously only available from the <code>RenderResult</code> returned from component renders.</p>\n<p>NOTE: We will implement <code>out.toString()</code> and <code>out.toJSON()</code> so in many cases the <code>out</code> can be used as a string.</p>\n<h3 id=\"remove-support-for-deprecated-emptynotempty-helpers-357\"><a name=\"remove-support-for-deprecated-emptynotempty-helpers-357\" class=\"anchor\" href=\"#remove-support-for-deprecated-emptynotempty-helpers-357\"><span class=\"header-link\"></span></a>Remove support for deprecated <code>empty</code>/<code>notEmpty</code> helpers (<a href=\"https://github.com/marko-js/marko/issues/357\">#357</a>)</h3><blockquote class=\"null\"><p>Already deprecated in v3</p>\n</blockquote><p>The <code>empty</code>/<code>notEmpty</code> helpers were automatically being added to every compiled\ntemplate. While they can be helpful, we feel it is better if the developer\nexplicitly imports only the exact helpers that your code depends on for\nimproved modularity.</p>\n<h3 id=\"remove-hyphenated-properties-from-input-model-356\"><a name=\"remove-hyphenated-properties-from-input-model-356\" class=\"anchor\" href=\"#remove-hyphenated-properties-from-input-model-356\"><span class=\"header-link\"></span></a>Remove hyphenated properties from input model (<a href=\"https://github.com/marko-js/marko/issues/356\">#356</a>)</h3><blockquote class=\"null\"><p>Already deprecated in v3</p>\n</blockquote><p>Given a template like this:</p>\n<code-block lang=\"marko\" lines=\"\"><include(\"./include-target.marko\") first-name='Frank'/></code-block><p><code>include-target.marko</code> looks like:</p>\n<p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\">-- Hello &#36;{data['first-name']}</code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\">-- Hello &#36;{input.firstName}</code-block><h3 id=\"remove-support-for-deprecated-async-fragment-and-related-tags-312\"><a name=\"remove-support-for-deprecated-async-fragment-and-related-tags-312\" class=\"anchor\" href=\"#remove-support-for-deprecated-async-fragment-and-related-tags-312\"><span class=\"header-link\"></span></a>Remove support for deprecated <code>&lt;async-fragment&gt;</code> and related tags (<a href=\"https://github.com/marko-js/marko/pull/312\">#312</a>)</h3><blockquote class=\"null\"><p>Already deprecated in v3</p>\n</blockquote><p><strong>Old:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><async-fragment var=\"foo\" data-provider=data.provider>\n    &#36;{foo}\n</async-fragment></code-block><p><strong>New:</strong></p>\n<code-block lang=\"marko\" lines=\"\"><await(data.provider)>\n    <@then|foo|>\n        &#36;{foo}\n    </@then>\n</await></code-block><h3 id=\"remove-support-for-emitting-deprecated-async-fragment-events-426\"><a name=\"remove-support-for-emitting-deprecated-async-fragment-events-426\" class=\"anchor\" href=\"#remove-support-for-emitting-deprecated-async-fragment-events-426\"><span class=\"header-link\"></span></a>Remove support for emitting deprecated <code>async-fragment</code> events (<a href=\"https://github.com/marko-js/marko/issues/426\">#426</a>)</h3><blockquote class=\"null\"><p>Already deprecated in v3</p>\n</blockquote><table class=\"markdown-table\"><thead><tr>\n<th>Old</th>\n<th>New</th>\n</tr>\n</thead><tbody><tr>\n<td><code>asyncFragmentFinish</code></td>\n<td><code>await:finish</code></td>\n</tr>\n<tr>\n<td><code>asyncFragmentBegin</code></td>\n<td><code>await:begin</code></td>\n</tr>\n<tr>\n<td><code>asyncFragmentBeforeRender</code></td>\n<td><code>await:beforeRender</code></td>\n</tr>\n<tr>\n<td><code>asyncFragmentClientReorder</code></td>\n<td><code>await:clientReorder</code></td>\n</tr>\n</tbody></table>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/marko-vs-react.md\", \"<ul class=\\\"toc toc-level1\\\"><li><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#example\\\">Example</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#react-jsx\\\">React JSX</a></li><li><a href=\\\"#marko\\\">Marko</a></li></ul></li><li><a href=\\\"#similarities\\\">Similarities</a></li><li><a href=\\\"#differences\\\">Differences</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#differences-in-rendering\\\">Differences in rendering</a></li><li><a href=\\\"#differences-in-syntax\\\">Differences in syntax</a></li><li><a href=\\\"#differences-in-compilation\\\">Differences in compilation</a></li><li><a href=\\\"#differences-in-ui-components\\\">Differences in UI components</a></li><li><a href=\\\"#differences-in-event-systems\\\">Differences in event systems</a></li><li><a href=\\\"#differences-in-compatibility\\\">Differences in compatibility</a></li></ul></li><li><a href=\\\"#syntax\\\">Syntax</a></li><li><a href=\\\"#syntax-attributes\\\">Syntax: attributes</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#react-jsx_1\\\">React JSX</a></li><li><a href=\\\"#marko_1\\\">Marko</a></li></ul></li><li><a href=\\\"#syntax-inline-javascript\\\">Syntax: inline JavaScript</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#react-jsx_2\\\">React JSX</a></li><li><a href=\\\"#marko_2\\\">Marko</a></li></ul></li><li><a href=\\\"#syntax-html-support\\\">Syntax: HTML support</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#react-jsx_3\\\">React JSX</a></li><li><a href=\\\"#marko_3\\\">Marko</a></li></ul></li><li><a href=\\\"#syntax-conditionals\\\">Syntax: conditionals</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#react-jsx_4\\\">React JSX</a></li><li><a href=\\\"#marko_4\\\">Marko</a></li></ul></li><li><a href=\\\"#syntax-looping\\\">Syntax: looping</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#react-jsx_5\\\">React JSX</a></li><li><a href=\\\"#marko_5\\\">Marko</a></li></ul></li><li><a href=\\\"#syntax-html-shorthand\\\">Syntax: HTML shorthand</a></li><li><a href=\\\"#syntax-concise\\\">Syntax: concise</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#marko-html-syntax\\\">Marko HTML syntax</a></li><li><a href=\\\"#marko-concise-syntax\\\">Marko concise syntax</a></li><li><a href=\\\"#marko-mixed-syntax\\\">Marko mixed syntax</a></li><li><a href=\\\"#react-jsx_6\\\">React JSX</a></li></ul></li><li><a href=\\\"#components\\\">Components</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#react-jsx_7\\\">React JSX</a></li><li><a href=\\\"#marko_6\\\">Marko</a></li></ul></li><li><a href=\\\"#api\\\">API</a></li><li><a href=\\\"#custom-tags\\\">Custom tags</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#react-jsx_8\\\">React JSX</a></li><li><a href=\\\"#marko_7\\\">Marko</a></li></ul></li><li><a href=\\\"#async\\\">Async</a></li><li><a href=\\\"#compiler\\\">Compiler</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#compiled-for-the-server\\\">Compiled for the server:</a></li><li><a href=\\\"#compiled-for-the-browser\\\">Compiled for the browser:</a></li></ul></li><li><a href=\\\"#compile-time-code-transforms\\\">Compile-time code transforms</a></li><li><a href=\\\"#tools\\\">Tools</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#ide-and-editor-support\\\">IDE and editor support</a></li></ul></li><li><a href=\\\"#why-marko\\\">Why Marko?</a></li></ul></li></ul>\");\n-----\n<h1 id=\"marko-vs-react-an-in-depth-look\"><a name=\"marko-vs-react-an-in-depth-look\" class=\"anchor\" href=\"#marko-vs-react-an-in-depth-look\"><span class=\"header-link\"></span></a>Marko vs React: An In-depth Look</h1><a href=\"https://hackernoon.com/marko-vs-react-an-in-depth-look-767de0a5f9a6\">\n  <img src=\"https://cdn-images-1.medium.com/max/2000/1*4BP6tPQtwImj6_QseeybwQ.png\" alt=\"Marko logo\" width=\"100%\" />\n</a><br />\n\n<p>You can find the original <a href=\"https://hackernoon.com/marko-vs-react-an-in-depth-look-767de0a5f9a6\">&quot;Marko vs React: An In-depth Look&quot; article here</a>!</p>\n<p>In this article we will take an in-depth look at the differences and\nsimilarities between <a href=\"/\">Marko</a> and React from the perspective\nof the maintainers of Marko.</p>\n<p>On the surface, Marko and React have a lot in common and both are trying to\nsolve very similar problems. Specifically, both Marko and React allow developers\nto build web applications based on UI components and both free developers from\nhaving to write code to manually update the DOM. While many of the features in\nMarko were inspired by React, Marko and React offer very different usability and\nperformance characteristics. Marko was designed to avoid almost all boilerplate\nand is more closely aligned with HTML. In almost all cases, a Marko UI component\nwill require less lines of code than its React JSX equivalent while maintaining\nreadability and allowing the same expressiveness as JSX. In addition, Marko is\nhighly optimized for use on the server and in the browser and has a much smaller\nweight:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*a9hL_pfNrRq1UU3Mxkf3Jg.png\" alt=\"Marko logo\" width=\"100%\" /><br /></p>\n<p>Because the Marko JavaScript library is much smaller than React, it will require\nless time to load and parse and this will drastically improve page load times on\nslow connections or on older devices. Based on <a href=\"/#benchmarks\">our\nbenchmarks</a>, Marko consistently outperforms\nReact by a significant margin on both the server and in the browser.</p>\n<h3 id=\"example\"><a name=\"example\" class=\"anchor\" href=\"#example\"><span class=\"header-link\"></span></a>Example</h3><p>The following code highlights some of the differences between Marko and React\nJSX using a somewhat contrived UI component as an example:</p>\n<h4 id=\"react-jsx\"><a name=\"react-jsx\" class=\"anchor\" href=\"#react-jsx\"><span class=\"header-link\"></span></a>React JSX</h4><code-block lang=\"jsx\" lines=\"\">class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { count: 0 };\n  }\n\n  increment(delta) {\n    this.setState({ count: this.state.count + delta });\n  }\n\n  render() {\n    const count = this.state.count;\n    let countClassName = \"count\";\n\n    if (count > 0) {\n      countClassName += \" positive\";\n    } else if (count < 0) {\n      countClassName += \" negative\";\n    }\n\n    return (\n      <div className=\"click-count\">\n        <div className={countClassName}>{count}</div>\n        <button\n          onClick={() => {\n            this.increment(-1);\n          }}\n        >\n          -1\n        </button>\n        <button\n          onClick={() => {\n            this.increment(1);\n          }}\n        >\n          +1\n        </button>\n      </div>\n    );\n  }\n}</code-block><p><span class=\"figcaption_hack\"><a href=\"http://codepen.io/mlrawlings/pen/wJXOWR?editors=0010\">▶ Try Online</a></span></p>\n<h4 id=\"marko\"><a name=\"marko\" class=\"anchor\" href=\"#marko\"><span class=\"header-link\"></span></a>Marko</h4><code-block lang=\"marko\" lines=\"\">class {\n  onCreate() {\n    this.state = { count: 0 };\n  }\n  increment(delta) {\n    this.state.count += delta;\n  }\n}\n\n&#36; var count = state.count;\n\n<div.click-count>\n  <div.count class={\n      positive: count > 0,\n      negative: count < 0\n    }>\n    &#36;{count}\n  </div>\n  <button on-click('increment', -1)>\n    -1\n  </button>\n  <button on-click('increment', 1)>\n    +1\n  </button>\n</div></code-block><p><span class=\"figcaption_hack\"><a href=\"/try-online/?gist=8fe46bc5866605aca0dfeec202604011\">▶ Try\nOnline</a></span></p>\n<h3 id=\"similarities\"><a name=\"similarities\" class=\"anchor\" href=\"#similarities\"><span class=\"header-link\"></span></a>Similarities</h3><p>Marko and React have the following in common:</p>\n<ul>\n<li>UI component-based</li>\n<li>JavaScript and HTML markup can be intertwined</li>\n<li>No restrictions on JavaScript (use ES5 or ES2015+, your choice)</li>\n<li>Virtual DOM rendering in the browser</li>\n<li>DOM diffing/patching is used to reconcile views</li>\n<li>Both support keyed element matching</li>\n<li>UI components can have input properties</li>\n<li>UI components can have internal state</li>\n<li>Changes to state trigger an asynchronous update to the DOM</li>\n<li>Updates to the DOM are batched</li>\n<li>Compatible with central application state stores such as Redux and MobX</li>\n<li>UI components can be embedded using custom tags</li>\n<li>Declarative event binding (no <code>domEl.addEventListener()</code> needed)</li>\n<li>Support for all DOM events</li>\n<li>Event delegation utilized internally for DOM events that bubble</li>\n<li>IE9+ support</li>\n<li>Similar lifecycle events for UI components</li>\n<li>JSX and Marko both compile to JavaScript</li>\n</ul>\n<h3 id=\"differences\"><a name=\"differences\" class=\"anchor\" href=\"#differences\"><span class=\"header-link\"></span></a>Differences</h3><p>At a high level here are some differences:</p>\n<h4 id=\"differences-in-rendering\"><a name=\"differences-in-rendering\" class=\"anchor\" href=\"#differences-in-rendering\"><span class=\"header-link\"></span></a>Differences in rendering</h4><ul>\n<li><strong>Improved performance:</strong> Marko renders to a virtual DOM in the browser and\ndirectly to an HTML stream on the server (Marko supports multiple compilation\ntargets).</li>\n<li><strong>Improved performance:</strong> Marko supports asynchronous rendering with <a href=\"http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/\">early\nflushing of\nHTML</a>\nfor improvements in actual and perceived page load times.</li>\n<li><strong>Improved performance:</strong> React requires an additional client-side re-render if\na page is initially rendered on the server while Marko does not.</li>\n<li><strong>Improved ease of use:</strong> Marko automatically serializes UI component state and\ninput down to the browser so that the browser can pick up right where the server\nleft off.</li>\n<li><strong>Improved ease of use:</strong> Marko is suitable for rendering an entire HTML page on\nthe server with support for tags such as <code>&lt;doctype&gt;</code> and <code>&lt;html&gt;</code></li>\n</ul>\n<h4 id=\"differences-in-syntax\"><a name=\"differences-in-syntax\" class=\"anchor\" href=\"#differences-in-syntax\"><span class=\"header-link\"></span></a>Differences in syntax</h4><ul>\n<li><strong>Improved ease of use:</strong> Marko uses the\n<a href=\"/docs/syntax/\">HTML-JS</a> syntax and the\n<a href=\"https://facebook.github.io/react/docs/jsx-in-depth.html\">JSX</a> syntax is offered\nfor React.</li>\n<li><strong>Improved ease of use:</strong> Marko supports both a concise syntax and a familiar\nHTML syntax.</li>\n<li><strong>Improved ease of use:</strong> JSX requires strict XML while Marko aligns with less\nstrict HTML that web developers are used to.</li>\n<li><strong>Improved ease of use:</strong> With Marko, <em>all</em> HTML attribute values are parsed as\nJavaScript expressions.</li>\n<li><strong>Improved ease of use:</strong> Marko supports simple directives for conditionals,\nlooping, etc.</li>\n<li><strong>JSX limitation:</strong> JSX is “just JavaScript” but requires expressions that\npreclude the usage of JavaScript statements such as in certain places.</li>\n</ul>\n<h4 id=\"differences-in-compilation\"><a name=\"differences-in-compilation\" class=\"anchor\" href=\"#differences-in-compilation\"><span class=\"header-link\"></span></a>Differences in compilation</h4><ul>\n<li><strong>Improved performance:</strong> Marko supports multiple compilation outputs (Marko\nVDOM and HTML streaming are currently supported).</li>\n<li><strong>Improved ease of use:</strong> Marko compiles UI components to JavaScript modules\nthat export a rendering API.</li>\n<li><strong>Expanded capabilities:</strong> Marko supports a robust API for controlling how\ncustom tags and custom attributes get compiled and it supports compile-time\ntransforms based on a friendly Abstract Syntax Tree (AST).</li>\n<li><strong>Improved performance:</strong> JSX is just syntactic sugar that translates elements\nto <code>createElement()</code> function calls while the Marko compiler has full control over how things are\ncompiled and optimized.</li>\n<li><strong>Improved ease of use:</strong> React requires all UI components to be explicitly\nimported before they can be used as custom tags while Marko supports both\nexplicit importing and implicit importing.</li>\n<li><strong>Improved performance:</strong> Marko has a modular runtime and the compiler generates\ncode that only imports the parts of the Marko runtime that are needed for much\nsmaller builds.</li>\n<li><strong>Improved ease of use:</strong> Marko supports optional compile-time checks to ensure\nthat only allowed attributes are passed to custom tags. (React <code>PropTypes</code> only provide\nvalidation at render-time)</li>\n<li><strong>Improved ease of use:</strong> Marko validates <em>all</em> tag names at compile-time.</li>\n<li><strong>Improved ease of use:</strong> Marko provides its own compiler that integrates with\nNode.js and JavaScript module bundlers while React JSX requires babel and custom\nbabel transforms.</li>\n</ul>\n<h4 id=\"differences-in-ui-components\"><a name=\"differences-in-ui-components\" class=\"anchor\" href=\"#differences-in-ui-components\"><span class=\"header-link\"></span></a>Differences in UI components</h4><ul>\n<li><strong>Reduced boilerplate:</strong> No explicit extending of JavaScript classes in Marko\n(in contrast to <code>class Counter extends React.Component</code> in React).</li>\n<li><strong>Improved ease of use:</strong> Modifications to UI component state are synchronous\nwith Marko while <a href=\"https://facebook.github.io/react/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous\">the rules for React are more\ncomplicated</a>.</li>\n<li><strong>Improved ease of use:</strong> Marko watches UI component state objects to allow\nstate to be modified directly (e.g., <code>this.state.count++</code>).</li>\n<li><strong>Improved ease of use:</strong> Marko supports single-file UI components combining\nJavaScript behavior, CSS styling (with support for CSS preprocessors) and HTML\nmarkup. (React requires using one of the many <a href=\"https://github.com/MicheleBertoli/css-in-js\">CSS in JS\nsolutions</a> if you want styles in\nthe same file as your component and there is no standard in the community)</li>\n<li><strong>Improved maintainability:</strong> Marko supports a seamless transition from a\nsingle-file UI component to a multi-file UI component.</li>\n<li><strong>Improved performance:</strong> Marko assumes UI components are pure by default and\nskips re-rendering when input properties and state are unchanged (React requires\nextending\n<a href=\"https://facebook.github.io/react/docs/react-api.html#react.purecomponent\">React.PureComponent</a>).</li>\n</ul>\n<h4 id=\"differences-in-event-systems\"><a name=\"differences-in-event-systems\" class=\"anchor\" href=\"#differences-in-event-systems\"><span class=\"header-link\"></span></a>Differences in event systems</h4><ul>\n<li><strong>Reduced complexity:</strong> React utilizes <a href=\"https://facebook.github.io/react/docs/events.html\">synthetic\nevents</a> while Marko utilizes\nreal DOM events.</li>\n<li><strong>Improved ease of use:</strong> Custom events are emitted using the <a href=\"https://nodejs.org/api/events.html\">EventEmitter\nAPI</a> in Marko (e.g., <code>this.emit(&#39;myCustomEvent&#39;, arg1, arg2)</code>).</li>\n<li><strong>Improved ease of use:</strong> Marko has a consistent approach for listening to both\nnative DOM events and custom events.</li>\n<li><strong>Improved ease of use:</strong> React requires passing around <code>Function</code> references for custom\nevents while Marko automatically delegates emitted custom events to event\nhandler methods on components.</li>\n<li><strong>Improved ease of use:</strong> Marko provides a simple mechanism for binding\nadditional arguments to event handler methods and <code>this</code> will be the component\ninstance.</li>\n</ul>\n<h4 id=\"differences-in-compatibility\"><a name=\"differences-in-compatibility\" class=\"anchor\" href=\"#differences-in-compatibility\"><span class=\"header-link\"></span></a>Differences in compatibility</h4><ul>\n<li><strong>Marko limitation:</strong> Marko has no support for native mobile similar to React\nNative (although with Marko VDOM rendering, this is possible).</li>\n<li><strong>Marko limitation:</strong> Marko requires a JavaScript module bundler (such as\n<a href=\"/docs/lasso/\">Lasso</a>,\n<a href=\"/docs/webpack/\">Webpack</a>,\n<a href=\"/docs/rollup/\">Rollup</a>\nsince Marko UI components compile down to JavaScript modules. (we consider using\na JavaScript module bundler a best practice)</li>\n</ul>\n<hr>\n<p>In the sections below we will take a closer look at some of the differences\nbetween Marko and React.</p>\n<h3 id=\"syntax\"><a name=\"syntax\" class=\"anchor\" href=\"#syntax\"><span class=\"header-link\"></span></a>Syntax</h3><p>Both Marko and React JSX allow HTML markup and JavaScript to be combined into a\nsingle file and both support building web applications based on UI components.\nMarko utilizes an <a href=\"/docs/syntax/\">HTML-JS syntax</a> while most\nReact apps use the JSX syntax.</p>\n<blockquote class=\"null\"><p>React JSX makes JavaScript more like HTML and Marko makes HTML more like\nJavaScript.</p>\n</blockquote><p>In the end, both Marko and React allow JavaScript and HTML to be intertwined.</p>\n<h3 id=\"syntax-attributes\"><a name=\"syntax-attributes\" class=\"anchor\" href=\"#syntax-attributes\"><span class=\"header-link\"></span></a>Syntax: attributes</h3><h4 id=\"react-jsx_1\"><a name=\"react-jsx_1\" class=\"anchor\" href=\"#react-jsx_1\"><span class=\"header-link\"></span></a>React JSX</h4><p>In React JSX, all attribute values are parsed as string values unless <code>{}</code> is used.</p>\n<code-block lang=\"jsx\" lines=\"\"><MyComponent\n  name=\"Frank\"\n  messageCount={30}\n  visible={true}\n  person={{ firstName: 'John', lastName: 'Doe' }}\n  colors={['red', 'green', 'blue']} />\n\n<div id=\"content\" className=\"foo\">Hello</div></code-block><h4 id=\"marko_1\"><a name=\"marko_1\" class=\"anchor\" href=\"#marko_1\"><span class=\"header-link\"></span></a>Marko</h4><p>With Marko, <em>all</em> attribute values are parsed as JavaScript expressions. The\nfollowing Marko code is equivalent to the React JSX code above:</p>\n<code-block lang=\"marko\" lines=\"\"><my-component\n  name=\"Frank\"\n  message-count=30\n  visible=true\n  person={ firstName: 'John', lastName: 'Doe' }\n  colors=['red', 'green', 'blue'] />\n\n<div id=\"content\" class=\"foo\">Hello</div></code-block><h3 id=\"syntax-inline-javascript\"><a name=\"syntax-inline-javascript\" class=\"anchor\" href=\"#syntax-inline-javascript\"><span class=\"header-link\"></span></a>Syntax: inline JavaScript</h3><h4 id=\"react-jsx_2\"><a name=\"react-jsx_2\" class=\"anchor\" href=\"#react-jsx_2\"><span class=\"header-link\"></span></a>React JSX</h4><p>React JSX starts with JavaScript and allows XML elements to be inlined as shown\nbelow:</p>\n<code-block lang=\"jsx\" lines=\"\">import { formatDate } from \"./util\";\n\nfunction formatName(person) {\n  return person.firstName + \" \" + person.lastName.charAt(0) + \".\";\n}\n\nexport default function HelloMessage(props) {\n  var person = props.person;\n\n  return (\n    <div>\n      Hello {formatName(person)}!\n      <span>You were born on {formatDate(person.birthday)}.</span>\n    </div>\n  );\n}</code-block><h4 id=\"marko_2\"><a name=\"marko_2\" class=\"anchor\" href=\"#marko_2\"><span class=\"header-link\"></span></a>Marko</h4><p>Marko starts out in HTML, but it allows JavaScript to be inlined in a clean and\nmaintainable way. Unlike other template languages, Marko aims to allow the full\npower of JavaScript. The following Marko code is equivalent to the React JSX\ncode above:</p>\n<code-block lang=\"marko\" lines=\"\">import { formatDate } from './util';\n\nstatic function formatName(person) {\n    return person.firstName + ' ' + person.lastName.charAt(0) + '.';\n}\n\n&#36; var person = input.person;\n\n<div>\n    Hello &#36;{formatName(person)}!\n    <span>\n      You were born on &#36;{formatDate(person.birthday)}.\n    </span>\n</div></code-block><p>Lines prefixed with <code>&amp;#36;</code> are directly added to the compiled JavaScript output inside\nthe compiled <code>render()</code> function (for JavaScript code that should run for every render).\nLines prefixed with <code>static</code> are directly added to the compiled JavaScript output\noutside the <code>render()</code> function (for code that should only run <em>once</em> when the template is\nloaded).</p>\n<h3 id=\"syntax-html-support\"><a name=\"syntax-html-support\" class=\"anchor\" href=\"#syntax-html-support\"><span class=\"header-link\"></span></a>Syntax: HTML support</h3><p>With Marko any valid HTML markup can be used inside a Marko template. This is\nnot the case with React. The following quote is from the <a href=\"https://facebook.github.io/react/docs/introducing-jsx.html#specifying-children-with-jsx\">React\ndocumentation</a>:</p>\n<blockquote class=\"caveat\"><p><strong>Caveat:</strong></p>\n</blockquote><blockquote class=\"null\"><p>Since JSX is closer to JavaScript than HTML, React DOM uses <code>camelCase</code> property naming\nconvention instead of HTML attribute names.</p>\n</blockquote><blockquote class=\"null\"><p>For example, <code>class</code> becomes <code>className</code> in JSX, and <code>tabindex</code> becomes <code>tabIndex</code>.</p>\n</blockquote><p>As a result of this caveat for React, <a href=\"http://magic.reactjs.net/htmltojsx.htm\">tools for converting HTML to JSX\nexist</a>.</p>\n<h4 id=\"react-jsx_3\"><a name=\"react-jsx_3\" class=\"anchor\" href=\"#react-jsx_3\"><span class=\"header-link\"></span></a>React JSX</h4><code-block lang=\"jsx\" lines=\"\"><div id=\"content\" className=\"my-component\">Hello</div>\n\n<input type=\"text\" name=\"firstName\" value=\"John\" /></code-block><h4 id=\"marko_3\"><a name=\"marko_3\" class=\"anchor\" href=\"#marko_3\"><span class=\"header-link\"></span></a>Marko</h4><code-block lang=\"marko\" lines=\"\"><div id=\"content\" class=\"my-component\">Hello</div>\n\n<input type=\"text\" name=\"firstName\" value=\"John\"></code-block><h3 id=\"syntax-conditionals\"><a name=\"syntax-conditionals\" class=\"anchor\" href=\"#syntax-conditionals\"><span class=\"header-link\"></span></a>Syntax: conditionals</h3><p>JSX is syntactic sugar on top of JavaScript, but it requires expressions, so\nsimple things like an <code>if/else/for</code> statement don’t work on their own within a JSX element. As\na result, you must either use a ternary expression, an immediately invoked\nfunction expression, function call expression, or the experimental <code>do {}</code> expression\n(stage 0 at the time of writing). This is not an issue for Marko, and tags\nsuch as <code>if()</code> and <code>for</code> can be used anywhere as shown below:</p>\n<h4 id=\"react-jsx_4\"><a name=\"react-jsx_4\" class=\"anchor\" href=\"#react-jsx_4\"><span class=\"header-link\"></span></a>React JSX</h4><code-block lang=\"jsx\" lines=\"\">function counterMessage(count) {\n  return (\n    <div className=\"counter-message\">\n      (function() {\n        if (count < 0) {\n          return <div>Count is negative</div>\n        } else if (count === 0) {\n          return <div>Count is zero</div>\n        } else {\n          return <div>Count is positive</div>\n        }\n      }())\n    </div>\n  )\n}</code-block><h4 id=\"marko_4\"><a name=\"marko_4\" class=\"anchor\" href=\"#marko_4\"><span class=\"header-link\"></span></a>Marko</h4><code-block lang=\"marko\" lines=\"\"><div.counter-message>\n  <if(count < 0)>\n    <div>Count is negative</div>\n  </if>\n  <else if(count === 0)>\n    <div>Count is zero</div>\n  </else>\n  <else>\n    <div>Count is positive</div>\n  </else>\n</div></code-block><p>Marko also allows directives to be used as attributes for a more condensed\ntemplate:</p>\n<code-block lang=\"marko\" lines=\"\"><div.counter-message>\n  <div if(count < 0)>Count is negative</div>\n  <div if(count === 0)>Count is zero</div>\n  <div else>Count is positive</div>\n</div></code-block><h3 id=\"syntax-looping\"><a name=\"syntax-looping\" class=\"anchor\" href=\"#syntax-looping\"><span class=\"header-link\"></span></a>Syntax: looping</h3><h4 id=\"react-jsx_5\"><a name=\"react-jsx_5\" class=\"anchor\" href=\"#react-jsx_5\"><span class=\"header-link\"></span></a>React JSX</h4><code-block lang=\"jsx\" lines=\"\">function renderColors(colors) {\n  return (\n    <ul>\n      {colors.map(color => (\n        <li\n          className=\"color\"\n          style={{\n            backgroundColor: color\n          }}\n        >\n          {color}\n        </li>\n      ))}\n    </ul>\n  );\n}</code-block><h4 id=\"marko_5\"><a name=\"marko_5\" class=\"anchor\" href=\"#marko_5\"><span class=\"header-link\"></span></a>Marko</h4><code-block lang=\"marko\" lines=\"\"><ul>\n  <for|color| of=colors>\n    <li.color style={ backgroundColor: color }>\n        &#36;{color}\n    </li>\n  </for>\n</ul></code-block><h3 id=\"syntax-html-shorthand\"><a name=\"syntax-html-shorthand\" class=\"anchor\" href=\"#syntax-html-shorthand\"><span class=\"header-link\"></span></a>Syntax: HTML shorthand</h3><code-block lang=\"marko\" lines=\"\"><div id=\"content\"/>\n<h1 class=\"subheader\"/>\n<h1 id=\"pageTitle\" class=\"foo bar\"/>\n\n<!-- Shorthand equivalent: -->\n<div#content/>\n<h1.subheader/>\n<h1#pageTitle.foo.bar/></code-block><p>Marko supports a shorthand based on CSS selectors for less code.</p>\n<p>React does not support these helpful shorthands.</p>\n<h3 id=\"syntax-concise\"><a name=\"syntax-concise\" class=\"anchor\" href=\"#syntax-concise\"><span class=\"header-link\"></span></a>Syntax: concise</h3><p>Marko supports a concise syntax that drops angled brackets and ending tags in\nfavor of indentation. Here’s how the Marko syntax options compare:</p>\n<h4 id=\"marko-html-syntax\"><a name=\"marko-html-syntax\" class=\"anchor\" href=\"#marko-html-syntax\"><span class=\"header-link\"></span></a>Marko HTML syntax</h4><code-block lang=\"marko\" lines=\"\"><ul>\n  <for|color| of=colors>\n    <li>&#36;{color}</li>\n  </for>\n</ul></code-block><h4 id=\"marko-concise-syntax\"><a name=\"marko-concise-syntax\" class=\"anchor\" href=\"#marko-concise-syntax\"><span class=\"header-link\"></span></a>Marko concise syntax</h4><code-block lang=\"marko\" lines=\"\">ul\n  for|color| of=colors\n    li -- &#36;{color}</code-block><h4 id=\"marko-mixed-syntax\"><a name=\"marko-mixed-syntax\" class=\"anchor\" href=\"#marko-mixed-syntax\"><span class=\"header-link\"></span></a>Marko mixed syntax</h4><code-block lang=\"marko\" lines=\"\">ul\n  for|color| of=colors\n    <li>&#36;{color}</li></code-block><p>The HTML syntax and the concise syntax can be used together:</p>\n<h4 id=\"react-jsx_6\"><a name=\"react-jsx_6\" class=\"anchor\" href=\"#react-jsx_6\"><span class=\"header-link\"></span></a>React JSX</h4><p>React does not offer a concise syntax.</p>\n<h3 id=\"components\"><a name=\"components\" class=\"anchor\" href=\"#components\"><span class=\"header-link\"></span></a>Components</h3><p>Marko starts with simple HTML and allows UI component logic to easily be layered\non top.</p>\n<h4 id=\"react-jsx_7\"><a name=\"react-jsx_7\" class=\"anchor\" href=\"#react-jsx_7\"><span class=\"header-link\"></span></a>React JSX</h4><p>A React UI component is typically implemented as a class that extends <code>ReactComponent</code>:</p>\n<code-block lang=\"jsx\" lines=\"\">class HelloMessage extends React.Component {\n  render() {\n    return <div>Hello {this.props.name.toUpperCase()}</div>;\n  }\n}</code-block><p>React also supports a more concise functional component:</p>\n<code-block lang=\"jsx\" lines=\"\">function HelloMessage(props) {\n  return <div>Hello {props.name.toUpperCase()}</div>;\n}</code-block><p>However, if state or lifecycle events are needed then a functional UI component\nmust be converted to a class component:</p>\n<code-block lang=\"jsx\" lines=\"\">class HelloMessage extends React.Component {\n  componentDidMount() {\n    // ...\n  }\n  render() {\n    return <div>Hello {this.props.name.toUpperCase()}</div>;\n  }\n}</code-block><h4 id=\"marko_6\"><a name=\"marko_6\" class=\"anchor\" href=\"#marko_6\"><span class=\"header-link\"></span></a>Marko</h4><p>Here is the same component in Marko:</p>\n<code-block lang=\"marko\" lines=\"\"><div>Hello &#36;{input.name.toUpperCase()}</div></code-block><p>Behavior can easily be added to any Marko UI component:</p>\n<code-block lang=\"marko\" lines=\"\">class {\n  onMount() {\n    // ...\n  }\n}\n\n<div>Hello &#36;{input.name.toUpperCase()}</div></code-block><p>Marko also allows JavaScript behavior, CSS styling and HTML markup to be\nembedded in the Marko template as a single file UI component:</p>\n<code-block lang=\"marko\" lines=\"\">class {\n  onMount() {\n    // ...\n  }\n}\n\nstyle.less {\n  .hello {\n    color: red;\n  }\n}\n\n<div.hello>\n  Hello &#36;{input.name.toUpperCase()}\n</div></code-block><h3 id=\"api\"><a name=\"api\" class=\"anchor\" href=\"#api\"><span class=\"header-link\"></span></a>API</h3><p>Marko compiles component to JavaScript modules that export an API for rendering\nthe component as shown below:</p>\n<code-block lang=\"js\" lines=\"\">require(\"./components/greeting\")\n  .renderSync({ name: \"Frank\" })\n  .appendTo(document.body);</code-block><p>The same UI component can be rendered to a stream such as a writable HTTP\nresponse stream:</p>\n<code-block lang=\"js\" lines=\"\">require(\"./components/hello\").render({ name: \"John\" }, res);</code-block><blockquote class=\"null\"><p>The user’s of a Marko UI component do not need to know that the component was\nimplemented using Marko.</p>\n</blockquote><p>Contrast this with React as an example:</p>\n<code-block lang=\"jsx\" lines=\"\">import ReactDOM from \"react-dom\";\n\nReactDOM.render(\n  <HelloMessage name=\"John\" />,\n  document.getElementById(\"container\")\n);</code-block><p>On top of that, React requires that a different module be imported to render the\nexact same UI component on the server:</p>\n<code-block lang=\"jsx\" lines=\"\">import ReactDOMServer from \"react-dom/server\";\n\nvar html = ReactDOMServer.renderToString(<HelloMessage name=\"John\" />);</code-block><h3 id=\"custom-tags\"><a name=\"custom-tags\" class=\"anchor\" href=\"#custom-tags\"><span class=\"header-link\"></span></a>Custom tags</h3><h4 id=\"react-jsx_8\"><a name=\"react-jsx_8\" class=\"anchor\" href=\"#react-jsx_8\"><span class=\"header-link\"></span></a>React JSX</h4><p>With React, all custom tags for UI components must be explicitly imported:</p>\n<code-block lang=\"jsx\" lines=\"\">import Hello from \"./components/Hello\";\nimport GoodBye from \"./components/GoodBye\";\n\nexport default function HelloGoodBye(props) {\n  return (\n    <div>\n      <Hello name={props.name} />\n      <GoodBye name={props.name} />\n    </div>\n  );\n}</code-block><h4 id=\"marko_7\"><a name=\"marko_7\" class=\"anchor\" href=\"#marko_7\"><span class=\"header-link\"></span></a>Marko</h4><p>Marko supports a mechanism for <a href=\"/docs/custom-tags/#discovering-tags\">automatically discovering custom\ntags</a> for UI components\nbased on the project directory structure. Marko walks up the directory tree to\ndiscover all directories and it will also automatically discover custom tags\nexported by installed packages. This approach negates the need for explicitly\nimporting a custom tag to reduce the amount of code needed in a Marko template.\nFor example given the following directory structure:</p>\n<code-block lang=\"\" lines=\"\">    .\n    ├── components/\n    │   ├── hello.marko\n    │   └── good-bye.marko\n    └── index.marko</code-block><p>The <code>&lt;hello&gt;</code> tag and the <code>&lt;good-bye&gt;</code> tag nested below the <code>components/</code>\ndirectory will automatically be made available to the <code>index.marko</code> at the root:</p>\n<code-block lang=\"marko\" lines=\"\"><div>\n  <hello name=input.name />\n  <good-bye name=input.name />\n</div></code-block><p>This approach also allows editors and IDEs to offer autocompletion for custom\ntags.</p>\n<h3 id=\"async\"><a name=\"async\" class=\"anchor\" href=\"#async\"><span class=\"header-link\"></span></a>Async</h3><p>Even after rendering has started, Marko allows parts of the view to be rendered\nasynchronously using the <a href=\"/docs/core-tags#await\"><code>&lt;await&gt;</code></a>\ntag as shown in the following Marko template:</p>\n<code-block lang=\"marko\" lines=\"\">import fsp from 'fs-promise';\n\n&#36; var filePath = __dirname + '/hello.txt';\n&#36; var readPromise = fsp.readFile(filePath, {encoding: 'utf8'});\n\n<await(readPromise)>\n  <@then|helloText|>\n    <p>&#36;{helloText}</p>\n  </@then>\n</await></code-block><h3 id=\"compiler\"><a name=\"compiler\" class=\"anchor\" href=\"#compiler\"><span class=\"header-link\"></span></a>Compiler</h3><p>Marko compiles a template differently based on whether or not it will be used on\nthe server or in the browser. For example, given the following template:</p>\n<code-block lang=\"marko\" lines=\"\"><div>Hello &#36;{input.name}!</div></code-block><h4 id=\"compiled-for-the-server\"><a name=\"compiled-for-the-server\" class=\"anchor\" href=\"#compiled-for-the-server\"><span class=\"header-link\"></span></a>Compiled for the server:</h4><code-block lang=\"marko\" lines=\"\">var marko_template = require(\"marko/html\").t(__filename),\n    marko_helpers = require(\"marko/runtime/html/helpers\"),\n    marko_escapeXml = marko_helpers.x;\n\nfunction render(input, out) {\n  out.w(\"<div>Hello \" +\n    marko_escapeXml(input.name) +\n    \"!</div>\");\n}</code-block><h4 id=\"compiled-for-the-browser\"><a name=\"compiled-for-the-browser\" class=\"anchor\" href=\"#compiled-for-the-browser\"><span class=\"header-link\"></span></a>Compiled for the browser:</h4><code-block lang=\"marko\" lines=\"\">var marko_template = require(\"marko/vdom\").t(__filename);\n\nfunction render(input, out) {\n  out.e(\"DIV\", null, 3)\n    .t(\"Hello \")\n    .t(input.name)\n    .t(\"!\");\n}</code-block><h3 id=\"compile-time-code-transforms\"><a name=\"compile-time-code-transforms\" class=\"anchor\" href=\"#compile-time-code-transforms\"><span class=\"header-link\"></span></a>Compile-time code transforms</h3><p>The Marko compiler was built to support compile-time code generators for custom\ntags and it also provides support for compile-time transforms. While Babel\nallows code transformations of JavaScript, the Marko compiler provides support\nfor resolving custom tags declaratively and the Marko AST provides for very\npowerful and simple transformations as shown in the following code for rendering\nMarkdown to HTML at <em>compile-time</em>:</p>\n<p><strong>components/markdown/code-generator.js:</strong></p>\n<code-block lang=\"js\" lines=\"\">import marked from \"marked\";\nimport { removeIndentation } from \"./util\";\n\nexport default function generateCode(el, codegen) {\n  var bodyText = removeIndentation(el.bodyText);\n  var html = marked(bodyText);\n  var builder = codegen.builder;\n  return builder.html(builder.literal(html));\n}</code-block><p>The <code>&lt;markdown&gt;</code> tag can then be used as shown below:</p>\n<code-block lang=\"marko\" lines=\"\"><markdown>\n\n> This section demonstrates Markdown in Marko\n\n# Marko is awesome!\n\n- High performance\n- Small\n- Intuitive\n\n</markdown></code-block><p>In this example, after the template is compiled, the\n<a href=\"https://github.com/chjj/marked\">marked</a> library is no longer needed at\nrender-time.</p>\n<h3 id=\"tools\"><a name=\"tools\" class=\"anchor\" href=\"#tools\"><span class=\"header-link\"></span></a>Tools</h3><p>Marko and React offer a variety of developer tools. The <a href=\"https://github.com/marko-js/marko-devtools\">Marko developer\ntools</a> are constantly evolving, but\nMarko currently provides tools for unit testing UI components, precompiling <code>.marko</code>\nfiles and generating configuration-less apps (similar to\n<a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a>).\nCurrently, there are no Marko developer tools that integrate with the browser,\nbut this is something we would like to see in the future. We will go into more\ndetail on the Marko developer tools in a future post.</p>\n<h4 id=\"ide-and-editor-support\"><a name=\"ide-and-editor-support\" class=\"anchor\" href=\"#ide-and-editor-support\"><span class=\"header-link\"></span></a>IDE and editor support</h4><p>Marko offers syntax highlighting across all major IDEs and editors, as well as\non GitHub. Marko provides first-class support for the Atom editor with syntax\nhighlighting,\n<a href=\"https://github.com/marko-js/atom-language-marko#autocomplete\">Autocomplete</a> for\nboth HTML and custom tags,\n<a href=\"https://github.com/marko-js/atom-language-marko#hyperclick\">Hyperclick</a> to\nquickly jump to referenced files and methods, and <a href=\"https://github.com/marko-js/atom-language-marko#prettyprint\">Pretty\nprinting</a> to keep\nyour code readable.</p>\n<hr>\n<h3 id=\"why-marko\"><a name=\"why-marko\" class=\"anchor\" href=\"#why-marko\"><span class=\"header-link\"></span></a>Why Marko?</h3><p>Here are just a few reasons you should consider using\n<a href=\"/\">Marko</a> over React:</p>\n<ul>\n<li>Marko requires much less boilerplate.</li>\n<li>Marko has much better performance based on our benchmarks.</li>\n<li>Marko offers a clean and powerful syntax that aligns with HTML while also\nallowing the full power of JavaScript.</li>\n<li>Marko has much less complexity and a very small runtime.</li>\n<li>Marko has a much lower page weight for faster page loads.</li>\n<li>Marko has strong integrations with Node.js.</li>\n<li>Marko allows for extremely powerful IDE and editor plugins (see the <a href=\"https://github.com/marko-js/atom-language-marko\">Marko\nplugin for Atom</a> as an\nexample).</li>\n<li>Marko has a powerful compiler that allows new features to be added without\nintroducing bloat.</li>\n<li>eBay relies heavily on Marko and it is being used to build ebay.com (including\nthe mobile web).</li>\n<li>Marko has a strong and growing community on\n<a href=\"https://github.com/marko-js/marko\">GitHub</a> and in\n<a href=\"https://discord.gg/RFGxYGs\">Discord</a>.</li>\n</ul>\n<p>Interested in learning more about Marko? If so, you can get additional\ninformation on the <a href=\"/\">Marko website</a>. Join the conversation\nand contribute on <a href=\"https://github.com/marko-js/marko\">GitHub</a> and follow us on\n<a href=\"https://twitter.com/MarkoDevTeam\">Twitter</a>.</p>\n\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/redux.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#installation\\\">Installation</a></li><li><a href=\\\"#usage\\\">Usage</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#countermarko\\\">counter.marko</a></li><li><a href=\\\"#reducerjs\\\">reducer.js</a></li><li><a href=\\\"#storejs\\\">store.js</a></li></ul></li></ul>\");\n-----\n<h1 id=\"redux-marko\"><a name=\"redux-marko\" class=\"anchor\" href=\"#redux-marko\"><span class=\"header-link\"></span></a>Redux + Marko</h1><p>See the <a href=\"https://github.com/marko-js/examples/tree/master/examples/redux\"><code>marko-redux</code> sample project</a> for a fully-working example.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"anchor\" href=\"#installation\"><span class=\"header-link\"></span></a>Installation</h2><p>First, save the <a href=\"https://www.npmjs.com/package/marko\"><code>marko</code></a> and <a href=\"https://www.npmjs.com/package/redux\"><code>redux</code></a> packages to your project’s dependencies:</p>\n<code-block lang=\"bash\" lines=\"\">npm i marko redux</code-block><h2 id=\"usage\"><a name=\"usage\" class=\"anchor\" href=\"#usage\"><span class=\"header-link\"></span></a>Usage</h2><p>The partial code below shows how a Marko UI component can connect to a Redux store, using Redux’s <code>store.subscribe()</code> method and Marko’s <code>forceUpdate()</code> method:</p>\n<h3 id=\"countermarko\"><a name=\"countermarko\" class=\"anchor\" href=\"#countermarko\"><span class=\"header-link\"></span></a><code>counter.marko</code></h3><code-block lang=\"marko\" lines=\"\">import store from './store';\n\nclass {\n  onMount () {\n    store.subscribe(() => {\n      // Force this UI component to rerender\n      this.forceUpdate();\n\n      // The UI component will rerender with the new\n      // state returned by `store.getState()`\n      //\n      // You could also force an update like this:\n      // this.input = store.getState();\n    });\n  }\n}\n\n<counter(store.getState()) /></code-block><h3 id=\"reducerjs\"><a name=\"reducerjs\" class=\"anchor\" href=\"#reducerjs\"><span class=\"header-link\"></span></a><code>reducer.js</code></h3><code-block lang=\"js\" lines=\"\">module.exports = function(state, action) {\n  state = state || { value: 0 };\n\n  // Additional reducer logic here…\n\n  return state;\n};</code-block><h3 id=\"storejs\"><a name=\"storejs\" class=\"anchor\" href=\"#storejs\"><span class=\"header-link\"></span></a><code>store.js</code></h3><p>In <code>counter.marko</code>, the imported store module exports a Redux store created with the following code:</p>\n<code-block lang=\"js\" lines=\"\">const redux = require(\"redux\");\nconst counter = require(\"./reducer\");\n\nmodule.exports = redux.createStore(counter);</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/rendering.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#rendering-methods\\\">Rendering methods</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#rendersyncinput\\\">renderSync()</a></li><li><a href=\\\"#renderinput\\\">render()</a></li><li><a href=\\\"#renderinput-callback\\\">render()</a></li><li><a href=\\\"#renderinput-stream\\\">render()</a></li><li><a href=\\\"#renderinput-out\\\">render()</a></li><li><a href=\\\"#rendertostringinput\\\">renderToString()</a></li><li><a href=\\\"#rendertostringinput-callback\\\">renderToString()</a></li><li><a href=\\\"#streaminput\\\">stream()</a></li></ul></li><li><a href=\\\"#renderresult\\\">RenderResult</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#getcomponent\\\">getComponent()</a></li><li><a href=\\\"#getcomponentsselector\\\">getComponents()</a></li><li><a href=\\\"#afterinsertdoc\\\">afterInsert()</a></li><li><a href=\\\"#getnodedoc\\\">getNode()</a></li><li><a href=\\\"#getoutput\\\">getOutput()</a></li><li><a href=\\\"#appendtotargetel\\\">appendTo()</a></li><li><a href=\\\"#insertaftertargetel\\\">insertAfter()</a></li><li><a href=\\\"#insertbeforetargetel\\\">insertBefore()</a></li><li><a href=\\\"#prependtotargetel\\\">prependTo()</a></li><li><a href=\\\"#replacetargetel\\\">replace()</a></li><li><a href=\\\"#replacechildrenoftargetel\\\">replaceChildrenOf()</a></li></ul></li><li><a href=\\\"#global-data\\\">Global data</a></li></ul>\");\n-----\n<h1 id=\"rendering\"><a name=\"rendering\" class=\"anchor\" href=\"#rendering\"><span class=\"header-link\"></span></a>Rendering</h1><p>To render a Marko view, you need to <code>require</code> it.</p>\n<p><em>example.js</em></p>\n<code-block lang=\"js\" lines=\"\">var fancyButton = require(\"./components/fancy-button\");</code-block><blockquote class=\"note\"><p><strong>Note:</strong> If you are targeting node.js, you will need to enable the <a href=\"/docs/installing/#require-marko-views\">require extension</a> in order to require <code>.marko</code> files or you will need to precompile all of your templates using <a href=\"https://github.com/marko-js/cli\">Marko CLI</a>. If you are targeting the browser, you will need to use a bundler like <a href=\"/docs/lasso/\"><code>lasso</code></a>, <a href=\"/docs/webpack/\"><code>webpack</code></a> or <a href=\"/docs/rollup/\"><code>rollup</code></a>.</p>\n</blockquote><p>Once you have a view, you can pass input data and render it:</p>\n<p><em>example.js</em></p>\n<code-block lang=\"js\" lines=\"\">var button = require(\"./components/fancy-button\");\nvar html = button.renderToString({ label: \"Click me!\" });\n\nconsole.log(html);</code-block><p>The input data becomes available as <code>input</code> within a view, so if <code>fancy-button.marko</code> looked like this:</p>\n<p><em>./components/fancy-button.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><button>&#36;{input.label}</button></code-block><p>The output HTML would be:</p>\n<code-block lang=\"html\" lines=\"\"><button>Click me!</button></code-block><h2 id=\"rendering-methods\"><a name=\"rendering-methods\" class=\"anchor\" href=\"#rendering-methods\"><span class=\"header-link\"></span></a>Rendering methods</h2><p>We used the <code>renderToString</code> method above to render the view, but there are a number of different method signatures that can be used to render.</p>\n<p>Many of these methods return a <a href=\"#renderresult\"><code>RenderResult</code></a> which is an object with helper methods for working with the rendered output.</p>\n<h3 id=\"rendersyncinput\"><a name=\"rendersyncinput\" class=\"anchor\" href=\"#rendersyncinput\"><span class=\"header-link\"></span></a><code>renderSync(input)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>params</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>input</code></td>\n<td><code>Object</code></td>\n<td>the input data used to render the view</td>\n</tr>\n<tr>\n<td>return value</td>\n<td><a href=\"#renderresult\"><code>RenderResult</code></a></td>\n<td>The result of the render</td>\n</tr>\n</tbody></table><p>Using <code>renderSync</code> forces the render to complete synchronously. If a tag attempts to run asynchronously, an error will be thrown.</p>\n<code-block lang=\"js\" lines=\"\">var view = require(\"./view\"); // Import `./view.marko`\nvar result = view.renderSync({});\n\nresult.appendTo(document.body);</code-block><h3 id=\"renderinput\"><a name=\"renderinput\" class=\"anchor\" href=\"#renderinput\"><span class=\"header-link\"></span></a><code>render(input)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>params</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>input</code></td>\n<td><code>Object</code></td>\n<td>the input data used to render the view</td>\n</tr>\n<tr>\n<td>return value</td>\n<td><code>AsyncStream</code>/<code>AsyncVDOMBuilder</code></td>\n<td>the async <code>out</code> render target</td>\n</tr>\n</tbody></table><p>The <code>render</code> method returns an async <code>out</code> which is used to generate HTML on the server or a virtual DOM in the browser. In either case, the async <code>out</code> has a <code>then</code> method that follows the Promises/A+ spec, so it can be used as if it were a Promise. This promise resolves to a <a href=\"#renderresult\"><code>RenderResult</code></a>.</p>\n<code-block lang=\"js\" lines=\"\">var view = require(\"./view\"); // Import `./view.marko`\nvar resultPromise = view.render({});\n\nresultPromise.then(result => {\n  result.appendTo(document.body);\n});</code-block><h3 id=\"renderinput-callback\"><a name=\"renderinput-callback\" class=\"anchor\" href=\"#renderinput-callback\"><span class=\"header-link\"></span></a><code>render(input, callback)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>params</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>input</code></td>\n<td><code>Object</code></td>\n<td>the input data used to render the view</td>\n</tr>\n<tr>\n<td><code>callback</code></td>\n<td><code>Function</code></td>\n<td>a function to call when the render is complete</td>\n</tr>\n<tr>\n<td>callback value</td>\n<td><a href=\"#renderresult\"><code>RenderResult</code></a></td>\n<td>The result of the render</td>\n</tr>\n<tr>\n<td>return value</td>\n<td><code>AsyncStream</code>/<code>AsyncVDOMBuilder</code></td>\n<td>the async <code>out</code> render target</td>\n</tr>\n</tbody></table><code-block lang=\"js\" lines=\"\">var view = require(\"./view\"); // Import `./view.marko`\n\nview.render({}, (err, result) => {\n  result.appendTo(document.body);\n});</code-block><h3 id=\"renderinput-stream\"><a name=\"renderinput-stream\" class=\"anchor\" href=\"#renderinput-stream\"><span class=\"header-link\"></span></a><code>render(input, stream)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>params</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>input</code></td>\n<td><code>Object</code></td>\n<td>the input data used to render the view</td>\n</tr>\n<tr>\n<td><code>stream</code></td>\n<td><code>WritableStream</code></td>\n<td>a writeable stream</td>\n</tr>\n<tr>\n<td>return value</td>\n<td><code>AsyncStream</code>/<code>AsyncVDOMBuilder</code></td>\n<td>the async <code>out</code> render target</td>\n</tr>\n</tbody></table><p>The HTML output is written to the passed <code>stream</code>.</p>\n<code-block lang=\"js\" lines=\"\">var http = require(\"http\");\nvar view = require(\"./view\"); // Import `./view.marko`\n\nhttp.createServer((req, res) => {\n  res.setHeader(\"content-type\", \"text/html\");\n  view.render({}, res);\n});</code-block><h3 id=\"renderinput-out\"><a name=\"renderinput-out\" class=\"anchor\" href=\"#renderinput-out\"><span class=\"header-link\"></span></a><code>render(input, out)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>params</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>input</code></td>\n<td><code>Object</code></td>\n<td>the input data used to render the view</td>\n</tr>\n<tr>\n<td><code>out</code></td>\n<td><code>AsyncStream</code>/<code>AsyncVDOMBuilder</code></td>\n<td>The async <code>out</code> to render to</td>\n</tr>\n<tr>\n<td>return value</td>\n<td><code>AsyncStream</code>/<code>AsyncVDOMBuilder</code></td>\n<td>The <code>out</code> that was passed</td>\n</tr>\n</tbody></table><p>The <code>render</code> method also allows passing an existing async <code>out</code>. If you do this, <code>render</code> will not automatically end the async <code>out</code> (this allows rendering a view in the middle of another view). If the async <code>out</code> won&#39;t be ended by other means, you are responsible for ending it.</p>\n<code-block lang=\"js\" lines=\"\">var view = require(\"./view\"); // Import `./view.marko`\nvar out = view.createOut();\n\nview.render({}, out);\n\nout.on(\"finish\", () => {\n  console.log(out.getOutput());\n});\n\nout.end();</code-block><h3 id=\"rendertostringinput\"><a name=\"rendertostringinput\" class=\"anchor\" href=\"#rendertostringinput\"><span class=\"header-link\"></span></a><code>renderToString(input)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>params</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>input</code></td>\n<td><code>Object</code></td>\n<td>the input data used to render the view</td>\n</tr>\n<tr>\n<td>return value</td>\n<td><code>String</code></td>\n<td>The HTML string produced by the render</td>\n</tr>\n</tbody></table><p>Returns an HTML string and forces the render to complete synchronously. If a tag attempts to run asynchronously, an error will be thrown.</p>\n<code-block lang=\"js\" lines=\"\">var view = require(\"./view\"); // Import `./view.marko`\nvar html = view.renderToString({});\n\ndocument.body.innerHTML = html;</code-block><h3 id=\"rendertostringinput-callback\"><a name=\"rendertostringinput-callback\" class=\"anchor\" href=\"#rendertostringinput-callback\"><span class=\"header-link\"></span></a><code>renderToString(input, callback)</code></h3><table class=\"markdown-table\"><thead><tr>\n<th>params</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead><tbody><tr>\n<td><code>input</code></td>\n<td><code>Object</code></td>\n<td>the input data used to render the view</td>\n</tr>\n<tr>\n<td>callback value</td>\n<td><code>String</code></td>\n<td>The HTML string produced by the render</td>\n</tr>\n<tr>\n<td>return value</td>\n<td><code>undefined</code></td>\n<td>N/A</td>\n</tr>\n</tbody></table><p>An HTML string is passed to the callback.</p>\n<code-block lang=\"js\" lines=\"\">var view = require(\"./view\"); // Import `./view.marko`\n\nview.renderToString({}, (err, html) => {\n  document.body.innerHTML = html;\n});</code-block><h3 id=\"streaminput\"><a name=\"streaminput\" class=\"anchor\" href=\"#streaminput\"><span class=\"header-link\"></span></a><code>stream(input)</code></h3><p>The <code>stream</code> method returns a node.js style stream of the output HTML. This method is available on the server, but is not available by default in the browser. If you need to use streams in the browser, you may <code>require(&#39;marko/stream&#39;)</code> as part of your client-side bundle.</p>\n<code-block lang=\"js\" lines=\"\">var fs = require(\"fs\");\nvar view = require(\"./view\"); // Import `./view.marko`\nvar writeStream = fs.createWriteStream(\"output.html\");\n\nview.stream({}).pipe(writeStream);</code-block><h2 id=\"renderresult\"><a name=\"renderresult\" class=\"anchor\" href=\"#renderresult\"><span class=\"header-link\"></span></a>RenderResult</h2><h3 id=\"getcomponent\"><a name=\"getcomponent\" class=\"anchor\" href=\"#getcomponent\"><span class=\"header-link\"></span></a><code>getComponent()</code></h3><h3 id=\"getcomponentsselector\"><a name=\"getcomponentsselector\" class=\"anchor\" href=\"#getcomponentsselector\"><span class=\"header-link\"></span></a><code>getComponents(selector)</code></h3><h3 id=\"afterinsertdoc\"><a name=\"afterinsertdoc\" class=\"anchor\" href=\"#afterinsertdoc\"><span class=\"header-link\"></span></a><code>afterInsert(doc)</code></h3><h3 id=\"getnodedoc\"><a name=\"getnodedoc\" class=\"anchor\" href=\"#getnodedoc\"><span class=\"header-link\"></span></a><code>getNode(doc)</code></h3><h3 id=\"getoutput\"><a name=\"getoutput\" class=\"anchor\" href=\"#getoutput\"><span class=\"header-link\"></span></a><code>getOutput()</code></h3><h3 id=\"appendtotargetel\"><a name=\"appendtotargetel\" class=\"anchor\" href=\"#appendtotargetel\"><span class=\"header-link\"></span></a><code>appendTo(targetEl)</code></h3><h3 id=\"insertaftertargetel\"><a name=\"insertaftertargetel\" class=\"anchor\" href=\"#insertaftertargetel\"><span class=\"header-link\"></span></a><code>insertAfter(targetEl)</code></h3><h3 id=\"insertbeforetargetel\"><a name=\"insertbeforetargetel\" class=\"anchor\" href=\"#insertbeforetargetel\"><span class=\"header-link\"></span></a><code>insertBefore(targetEl)</code></h3><h3 id=\"prependtotargetel\"><a name=\"prependtotargetel\" class=\"anchor\" href=\"#prependtotargetel\"><span class=\"header-link\"></span></a><code>prependTo(targetEl)</code></h3><h3 id=\"replacetargetel\"><a name=\"replacetargetel\" class=\"anchor\" href=\"#replacetargetel\"><span class=\"header-link\"></span></a><code>replace(targetEl)</code></h3><h3 id=\"replacechildrenoftargetel\"><a name=\"replacechildrenoftargetel\" class=\"anchor\" href=\"#replacechildrenoftargetel\"><span class=\"header-link\"></span></a><code>replaceChildrenOf(targetEl)</code></h3><h2 id=\"global-data\"><a name=\"global-data\" class=\"anchor\" href=\"#global-data\"><span class=\"header-link\"></span></a>Global data</h2><p>If you need to make data available globally to all views that are rendered as the result of a call to one of the above render methods, you can pass the data as a <code>&amp;#36;global</code> property on the input data object. This object will be removed from <code>input</code> and merged into the <code>out.global</code> property.</p>\n<code-block lang=\"js\" lines=\"\">view.render({\n  &#36;global: {\n    flags: [\"mobile\"]\n  }\n});</code-block><p>To prevent sensitive data to be accidentally shipped to the browser, by default <strong>none of the keys</strong> in <code>out.global</code> is going to be sent to the browser. If you want the data to be serialized and ship to the frontend you need to specify it in <code>serializedGlobals</code> inside the <code>&amp;#36;global</code> object and they persist across re-renderings.\nThe values need to be serializable.</p>\n<code-block lang=\"js\" lines=\"\">app.get(\"/\", (req, res) => {\n  const ua = req.get(\"User-Agent\");\n  const isIos = !!ua.match(/iPad|iPhone/);\n  const isAndroid = !!ua.match(/Android/);\n\n  require(\"./index.marko\").render(\n    {\n      &#36;global: {\n        isIos, // isPad is serialized and available on the server and the browser in out.global.isPad\n        isAndroid, // isAndroid is serialized and available on the server and the browser in out.global.isAndroid\n        req, // req is going to be available only server side and will not be serialized because in not present in serializedGlobals below\n\n        serializedGlobals: {\n          isIos: true, // Tell marko to serialize isIos above\n          isAndroid: true // Tell marko to serialize isAndroid above\n        }\n      }\n    },\n    res\n  );\n});</code-block><p>Use <code>&amp;#36;global</code> with judgement. It is global and visible in any component.</p>\n<p>Check <a href=\"https://github.com/marko-js/marko/pull/672\">this PR</a> for more details.</p>\n\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/rollup.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#manual-installation\\\">Manual Installation</a></li><li><a href=\\\"#configuration\\\">Configuration</a></li><li><a href=\\\"#usage\\\">Usage</a></li></ul>\");\n-----\n<h1 id=\"marko-rollup\"><a name=\"marko-rollup\" class=\"anchor\" href=\"#marko-rollup\"><span class=\"header-link\"></span></a>Marko + Rollup</h1><p>The <a href=\"https://github.com/marko-js/rollup\">@marko/rollup</a> transform can be used in conjunction with <a href=\"https://github.com/rollup/rollup\">rollup</a> to automatically compile Marko templates that are required by other modules. An official Rollup plugin will be coming soon.</p>\n<p>The <a href=\"https://github.com/marko-js/examples/tree/master/examples/rollup\">rollup</a> sample app demonstrates how to use Marko with Rollup. Run <code>npx @marko/create --template rollup</code> to use this sample as a starting point for a new app.</p>\n<h2 id=\"manual-installation\"><a name=\"manual-installation\" class=\"anchor\" href=\"#manual-installation\"><span class=\"header-link\"></span></a>Manual Installation</h2><code-block lang=\"bash\" lines=\"\">npm install rollup rollup-plugin-commonjs rollup-plugin-node-resolve @marko/rollup --save-dev</code-block><h2 id=\"configuration\"><a name=\"configuration\" class=\"anchor\" href=\"#configuration\"><span class=\"header-link\"></span></a>Configuration</h2><p>The following is the minimal recommend configuration to use Rollup with Marko:</p>\n<p><em>rollup.config.js</em></p>\n<code-block lang=\"js\" lines=\"\">import nodeResolve from \"@rollup/plugin-node-resolve\";\nimport commonjs from \"@rollup/plugin-commonjs\";\nimport marko from \"@marko/rollup\";\n\nexport default {\n  ...,\n  plugins: [\n    marko(),\n    nodeResolve({\n      browser: true,\n      extensions: [\".js\", \".marko\"]\n    }),\n    // NOTE: Marko 4 compiles to commonjs, this plugin is also required.\n    commonjs({\n      extensions: [\".js\", \".marko\"]\n    }),\n    // If using `style` blocks with Marko you must use an appropriate plugin.\n    postcss({\n      external: true\n    })\n  ]\n};</code-block><h2 id=\"usage\"><a name=\"usage\" class=\"anchor\" href=\"#usage\"><span class=\"header-link\"></span></a>Usage</h2><code-block lang=\"bash\" lines=\"\"># Development:\nrollup -c rollup.config.js\n\n# Production:\nNODE_ENV=production rollup -c rollup.config.js</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/server-side-rendering.md\", \"<ul class=\\\"toc toc-level0\\\"><li><a href=\\\"#server-side-rendering\\\">Server-side rendering</a><ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#ui-bootstrapping\\\">UI Bootstrapping</a></li><li><a href=\\\"#bootstrapping-components\\\">Bootstrapping Components</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#bootstrapping-lasso\\\">Bootstrapping: Lasso</a></li><li><a href=\\\"#bootstrapping-non-lasso\\\">Bootstrapping: Non-Lasso</a></li></ul></li></ul></li><li><a href=\\\"#serialization\\\">Serialization</a></li><li><a href=\\\"#caveats\\\">Caveats</a><ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#serializing-globals\\\">Serializing globals</a></li></ul></li></ul>\");\n-----\n<h1 id=\"server-side-rendering\"><a name=\"server-side-rendering\" class=\"anchor\" href=\"#server-side-rendering\"><span class=\"header-link\"></span></a>Server-side rendering</h1><p>Marko allows any Marko template/UI component to be rendered on the server or in the browser. A page can be rendered to a <code>Writable</code> stream such as an HTTP response stream as shown below:</p>\n<code-block lang=\"js\" lines=\"\">var template = require(\"./template\"); // Import ./template.marko\n\nmodule.exports = function(req, res) {\n  res.setHeader(\"Content-Type\", \"text/html; charset=utf-8\");\n  template.render({ name: \"Frank\" }, res);\n};</code-block><p>Marko can also provide you with a <code>Readable</code> stream.</p>\n<code-block lang=\"js\" lines=\"\">var template = require(\"./template\"); // Import ./template.marko\n\nmodule.exports = function(req) {\n  // Return a Readable stream for someone to do something with:\n  return template.stream({ name: \"Frank\" });\n};</code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> Marko also provides server-side framework integrations:</p>\n<ul>\n<li><a href=\"/docs/express/\">express</a></li>\n<li><a href=\"/docs/hapi/\">hapi</a></li>\n<li><a href=\"/docs/koa/\">koa</a></li>\n<li><a href=\"/docs/huncwot/\">huncwot</a></li>\n</ul>\n</blockquote><h2 id=\"ui-bootstrapping\"><a name=\"ui-bootstrapping\" class=\"anchor\" href=\"#ui-bootstrapping\"><span class=\"header-link\"></span></a>UI Bootstrapping</h2><p>When a page is rendered on the server, additional code is added to the output HTML to allow the UI to instantly boot in the browser. This additional code allows UI components rendered on the server to be mounted in the browser automatically. For each <em>top-level</em> UI component, Marko will serialize the component&#39;s data (including <code>input</code> and <code>state</code> and any properties added to the UI component instance) so that each top-level UI component can be re-rendered and mounted when the page loads in the browser. Only a &quot;partial&quot; re-render is done for each top-level UI component. That is, when doing the partial re-render in the browser, the DOM is not updated and no virtual DOM is actually produced.</p>\n<p>Marko encodes required information into attributes of rendered HTML elements and it also generates <code>&lt;script&gt;</code> tags that will cause UI components to be mounted. The code inside the <code>&lt;script&gt;</code> simply registers UI components and when the Marko runtime finally loads, all of the registered UI components will then be mounted. This allows the Marko runtime to be loaded at anytime without causing JavaScript errors.</p>\n<h2 id=\"bootstrapping-components\"><a name=\"bootstrapping-components\" class=\"anchor\" href=\"#bootstrapping-components\"><span class=\"header-link\"></span></a>Bootstrapping Components</h2><p>When a server-rendered page loads in the browser it&#39;s possible for marko to automatically detect UI components rendered on the server and create and mount them with the correct <code>state</code> and <code>input</code> in the browser.</p>\n<h3 id=\"bootstrapping-lasso\"><a name=\"bootstrapping-lasso\" class=\"anchor\" href=\"#bootstrapping-lasso\"><span class=\"header-link\"></span></a>Bootstrapping: Lasso</h3><p>If you are using <a href=\"https://github.com/lasso-js/lasso\">Lasso.js</a> then the bootstrapping will happen automatically as long as the JavaScript bundles for your page are included via the <code>&lt;lasso-body&gt;</code> tag. A typical HTML page structure will be the following:</p>\n<p><em>routes/index/template.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Marko + Lasso</title>\n\n        <!-- CSS includes -->\n        <lasso-head/>\n    </head>\n    <body>\n        <!-- Top-level UI component: -->\n        <app/>\n\n        <!-- JS includes -->\n        <lasso-body/>\n    </body>\n</html></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> We have provided some sample apps to help you get started with Marko + Lasso</p>\n<ul>\n<li><a href=\"https://github.com/marko-js/examples/tree/master/examples/lasso-express\">marko-lasso</a></li>\n<li><a href=\"https://github.com/marko-js/examples/tree/master/examples/ui-components-playground\">ui-components-playground</a></li>\n</ul>\n</blockquote><h3 id=\"bootstrapping-non-lasso\"><a name=\"bootstrapping-non-lasso\" class=\"anchor\" href=\"#bootstrapping-non-lasso\"><span class=\"header-link\"></span></a>Bootstrapping: Non-Lasso</h3><p>If a JavaScript module bundler other than Lasso is being used then you will need to add some client-side code to bootstrap your application in the browser by doing the following:</p>\n<ol>\n<li>Load/import/require all of the UI components that were rendered on the server (loading the top-level UI component is typically sufficient)</li>\n<li>Call <code>require(&#39;marko/components&#39;).init()</code></li>\n</ol>\n<p>For example, if <code>client.js</code> is the entry point for your client-side application:</p>\n<p><em>routes/index/client.js</em></p>\n<code-block lang=\"js\" lines=\"\">// Load the top-level UI component:\nrequire(\"./components/app/index\");\n\n// Now that all of the JavaScript modules for the UI component have been\n// loaded and registered we can tell marko to bootstrap/initialize the app\n\n// Initialize and mount all of the server-rendered UI components:\nrequire(\"marko/components\").init();</code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> We have provided some sample apps to help you get started:</p>\n<ul>\n<li><a href=\"https://github.com/marko-js/examples/tree/master/examples/webpack\">marko-webpack</a></li>\n<li><a href=\"https://github.com/marko-js/examples/tree/master/examples/rollup\">marko-rollup</a></li>\n</ul>\n</blockquote><h1 id=\"serialization\"><a name=\"serialization\" class=\"anchor\" href=\"#serialization\"><span class=\"header-link\"></span></a>Serialization</h1><p>For each <em>top-level</em> UI component, Marko will serialize the component&#39;s data (including <code>input</code> and <code>state</code> and any properties added to the UI component instance) down to the browser. You can control which data gets serialized by implementing <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>toJSON</code></a> or by reassigning <code>this.input</code> in the UI component&#39;s <code>onInput(input, out)</code> lifecycle method as shown below:</p>\n<code-block lang=\"javascript\" lines=\"\">class {\n    onInput() {\n        // Do not serialize any input:\n        this.input = null;\n\n        // Serialize a new object instead of the provided input:\n        this.input = {\n            foo: 'bar'\n        };\n    }\n}</code-block><blockquote class=\"null\"><p>NOTE: Marko does allow cycles in serialized objects and Duplicate objects will only be serialized once</p>\n</blockquote><h1 id=\"caveats\"><a name=\"caveats\" class=\"anchor\" href=\"#caveats\"><span class=\"header-link\"></span></a>Caveats</h1><p>There are some caveats associated with rendering a page on the server:</p>\n<ul>\n<li>The UI component data for top-level UI components must be serializable:<ul>\n<li>Only simple objects, numbers, strings, booleans, arrays and <code>Date</code> objects are serializable</li>\n<li>Functions are not serializable</li>\n</ul>\n</li>\n<li>Care should be taken to avoid having Marko serialize too much data</li>\n<li>None of the data in <code>out.global</code> is serialized by default, but this can be changed as shown below</li>\n</ul>\n<h2 id=\"serializing-globals\"><a name=\"serializing-globals\" class=\"anchor\" href=\"#serializing-globals\"><span class=\"header-link\"></span></a>Serializing globals</h2><p>If there are specific properties on the <code>out.global</code> object that need to be serialized then they must be whitelisted when the top-level page is rendered on the server. For example, to have the <code>out.global.apiKey</code> and the <code>out.global.locale</code> properties serialized you would do the following:</p>\n<code-block lang=\"js\" lines=\"\">template.render(\n  {\n    &#36;global: {\n      serializedGlobals: {\n        apiKey: true,\n        locale: true\n      }\n    }\n  },\n  res\n);</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/state.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#initializing-state\\\">Initializing state</a></li><li><a href=\\\"#updating-state\\\">Updating state</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#how-updates-work\\\">How updates work</a></li></ul></li><li><a href=\\\"#cross-component-state-management\\\">Cross component state management</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#globalsubtree\\\">Global/Subtree</a></li><li><a href=\\\"#when-to-use-a-redux-like-pattern\\\">When to use a Redux like pattern</a></li></ul></li></ul>\");\n-----\n<h1 id=\"state\"><a name=\"state\" class=\"anchor\" href=\"#state\"><span class=\"header-link\"></span></a>State</h1><p>The output of a component is based on input properties passed from its parent as attributes. However, a component may also maintain internal state that it uses to control its view. If Marko detects a change to either input or to the internal state, the view will automatically be updated.</p>\n<blockquote class=\"protip\"><p><strong>ProTip:</strong>\nOnly data that is owned and modified by the component should go into its <code>state</code>. State should be exclusively used for data that triggers rerenders. Parents control <code>input</code> the component controls its own <code>state</code>.</p>\n</blockquote><h2 id=\"initializing-state\"><a name=\"initializing-state\" class=\"anchor\" href=\"#initializing-state\"><span class=\"header-link\"></span></a>Initializing state</h2><p>To use <code>state</code> in Marko, you must first create a <a href=\"/docs/class-components/\">class component</a> and initialize the state within the <a href=\"/docs/class-components/#oncreateinput-out\"><code>onCreate</code></a> method. In class methods, <code>this.state</code> may be used and within the template section, a <code>state</code> variable is available.</p>\n<code-block lang=\"marko\" lines=\"\">class {\n    onCreate() {\n        this.state = { count: 0 };\n    }\n}\n\n<div>The count is &#36;{state.count}</div></code-block><blockquote class=\"note\"><p><strong>Note:</strong> Only properties that exist when <code>this.state</code> is first defined will be watched for changes. If you don&#39;t need a property initially, you can set it to <code>null</code>.</p>\n</blockquote><h2 id=\"updating-state\"><a name=\"updating-state\" class=\"anchor\" href=\"#updating-state\"><span class=\"header-link\"></span></a>Updating state</h2><p>You can update <code>state</code> in response to DOM events, browser events, ajax calls, etc. When a property on the state changes, the view will be updated to match.</p>\n<code-block lang=\"marko\" lines=\"\">class {\n    onCreate() {\n        this.state = { count: 0 };\n    }\n    increment() {\n        this.state.count++;\n    }\n}\n\n<div>The count is &#36;{state.count}</div>\n<button on-click('increment')>Increment</button></code-block><p>We&#39;ve extended our example above to add a button with an <a href=\"/docs/events/\">event handler</a>, so that, when clicked, the <code>state.count</code> value is incremented.</p>\n<blockquote class=\"note\"><p><strong>Note:</strong>\nWhen browsing existing code, you may see <code>this.setState(&#39;name&#39;, value)</code> being used. This is equivalent to <code>this.state.name = value</code>.</p>\n</blockquote><h3 id=\"how-updates-work\"><a name=\"how-updates-work\" class=\"anchor\" href=\"#how-updates-work\"><span class=\"header-link\"></span></a>How updates work</h3><p>When a property on <code>state</code> is set, the component will be scheduled for an update if the property has changed. All updates are batched together for performance. This means you can update multiple state properties at the same time without causing multiple updates.</p>\n<blockquote class=\"protip\"><p><strong>ProTip:</strong> If you need to know when the update has been applied, you can use <code>this.once(&#39;update&#39;, fn)</code> within a component method.</p>\n</blockquote><blockquote class=\"note\"><p><strong>Note:</strong> The state object only watches its properties one level deep. This means updates to nested properites on the state (e.g. <code>this.state.object.something = newValue</code>) will not be detected.</p>\n<p>Using <a href=\"https://wecodetheweb.com/2016/02/12/immutable-javascript-using-es6-and-beyond/\">immutable</a> data structures is recommended, but if you want to mutate a state property (perhaps push a new item into an array) you can let Marko know it changed using <code>setStateDirty</code>.</p>\n<code-block lang=\"js\" lines=\"\">this.state.numbers.push(num);\n\n// mark numbers as dirty, because a `push`\n// won't be automatically detected by Marko\nthis.setStateDirty(\"numbers\");</code-block></blockquote><h2 id=\"cross-component-state-management\"><a name=\"cross-component-state-management\" class=\"anchor\" href=\"#cross-component-state-management\"><span class=\"header-link\"></span></a>Cross component state management</h2><p>There are various tools available to manage state outside of a single component. Here are some basic guidelines.</p>\n<p>Typically we recommend using <code>attributes</code> to pass data in to a child component, and children can <a href=\"/docs/events/#emitting-custom-events\">emit events</a> to communicate back up to their parents. In some cases this can become cumbersome with deeply nested data dependencies or global state.</p>\n<h3 id=\"globalsubtree\"><a name=\"globalsubtree\" class=\"anchor\" href=\"#globalsubtree\"><span class=\"header-link\"></span></a>Global/Subtree</h3><p>For passing state throughout a component tree without explicit attribute setting throughout the entire app, you can leverage the <a href=\"https://github.com/marko-js/tags/tree/master/tags/context\"><code>&lt;context&gt;</code></a> tag. This tag can be <a href=\"/docs/custom-tags/#using-tags-from-npm\">installed from npm</a>.</p>\n<p>This tag allows you to pull state from any level above in the tree and can also be used to pass global state throughout your app.\nContext providers can register event handlers that any child in the tree can trigger similar to the <a href=\"/docs/events/\">events API</a>.</p>\n<p><em>fancy-form.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><context coupon=input.coupon on-buy(handleBuy)>\n    <!-- Somewhere nested in the container will be the buy button -->\n    <fancy-container/>\n</context></code-block><p><em>fancy-save-button.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><context|{ coupon }, emit| from=\"fancy-form\">\n    Coupon: &#36;{coupon}.\n    <button on-click(emit, \"buy\")>Buy</button>\n</context></code-block><blockquote class=\"note\"><p><strong>Note:</strong> Context <em>couples</em> tags together and can limit reuse of components.</p>\n</blockquote><h3 id=\"when-to-use-a-redux-like-pattern\"><a name=\"when-to-use-a-redux-like-pattern\" class=\"anchor\" href=\"#when-to-use-a-redux-like-pattern\"><span class=\"header-link\"></span></a>When to use a Redux like pattern</h3><p>Often the above two approaches are enough, and many people <a href=\"https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367\">jump to this part far too quickly</a>. Like <code>&lt;context&gt;</code>, often anything stored in redux is <code>global</code>. This means that it can (if abused) create components that are hard to reuse, reason about and test. However it is important to understand when a tool like <code>redux</code> is useful in any UI library.</p>\n<p>Redux provides indirection to updating any state that it controls. This is useful if you need the following:</p>\n<ul>\n<li>Single state update, multiple actions (eg: logging, computed data, etc).</li>\n<li>Time travel debugging and other <a href=\"https://redux.js.org/introduction/ecosystem\">redux-specific tooling</a>.</li>\n</ul>\n\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/styles.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#preprocessors\\\">Preprocessors</a></li></ul>\");\n-----\n<h1 id=\"styles\"><a name=\"styles\" class=\"anchor\" href=\"#styles\"><span class=\"header-link\"></span></a>Styles</h1><p>Both HTML and Marko provide support for <code>&lt;style&gt;</code> tags. However, Marko also provides a special syntax (called a style <em>block</em>) which adds support for CSS preprocessors and acts as a hint to bundlers to extract this static css from your templates into a common bundle.</p>\n<code-block lang=\"marko\" lines=\"\">style {\n    div {\n        color: green;\n    }\n}\n\n<div>Hello World</div></code-block><p>These blocks add global css to the page. The above example will not style just the <code>&lt;div&gt;</code> in the component, but all divs on the page. Because of this we recommend following a naming convention such as <a href=\"http://getbem.com/introduction/\">BEM</a>. Marko will likely provide a way to automatically scope these styles to the current component <a href=\"https://github.com/marko-js/marko/issues/666\">in the future</a>.</p>\n<blockquote class=\"note\"><p><strong>Note:</strong> Style blocks (unlike <code>&lt;style&gt;</code> tags) do not support <code>&amp;#36;{placeholders}</code> and must be static.</p>\n</blockquote><h2 id=\"preprocessors\"><a name=\"preprocessors\" class=\"anchor\" href=\"#preprocessors\"><span class=\"header-link\"></span></a>Preprocessors</h2><p>If you use a css preprocessor, you can add the extension right on <code>style</code>. This will cause your bundler of choice to run the contents of the style block through the appropriate processor.</p>\n<code-block lang=\"marko\" lines=\"\">style.less {\n    button.primary {\n        background-color: @primaryColor;\n    }\n}</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/syntax.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#tags\\\">Tags</a></li><li><a href=\\\"#dynamic-text\\\">Dynamic text</a></li><li><a href=\\\"#attributes\\\">Attributes</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#complex-expressions\\\">Complex expressions</a></li><li><a href=\\\"#boolean-attributes\\\">Boolean attributes</a></li><li><a href=\\\"#dynamic-attributes\\\">Dynamic attributes</a></li><li><a href=\\\"#style-attribute\\\">Style attribute</a></li><li><a href=\\\"#class-attribute\\\">Class attribute</a></li><li><a href=\\\"#shorthand-attributes\\\">Shorthand attributes</a></li></ul></li><li><a href=\\\"#parameters\\\">Parameters</a></li><li><a href=\\\"#arguments\\\">Arguments</a></li><li><a href=\\\"#dynamic-tagname\\\">Dynamic tagname</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#dynamic-components\\\">Dynamic components</a></li><li><a href=\\\"#dynamic-body-content\\\">Dynamic body content</a></li></ul></li><li><a href=\\\"#attribute-tag\\\">Attribute Tag</a></li><li><a href=\\\"#inline-javascript\\\">Inline JavaScript</a><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#static-javascript\\\">Static JavaScript</a></li><li><a href=\\\"#importing-external-files\\\">Importing external files</a></li></ul></li><li><a href=\\\"#comments\\\">Comments</a></li></ul>\");\n-----\n<h1 id=\"syntax\"><a name=\"syntax\" class=\"anchor\" href=\"#syntax\"><span class=\"header-link\"></span></a>Syntax</h1><p>Marko is HTML <em>re-imagined</em> as a language for building dynamic and reactive user interfaces.\nJust about any valid HTML is valid Marko, but Marko extends the HTML language to allow building modern applications in a declarative way.</p>\n<blockquote class=\"protip\"><p><strong>ProTip:</strong> Marko also supports a <a href=\"/docs/concise/\">beautiful concise syntax</a>. If you&#39;d prefer to see the documentation using this syntax, just click the <code>switch syntax</code> button in the corner of any Marko code sample.</p>\n</blockquote><blockquote class=\"note\"><p><strong>Note:</strong> Text at the root of a template (outside any tags) must be prefixed with the <a href=\"/docs/concise/#text\">concise syntax&#39;s <code>--</code></a> to denote it is text. The parser starts in concise mode and would otherwise try to parse what you meant to be text as a concise tag declaration.</p>\n<code-block lang=\"marko\" lines=\"\">-- Root level text</code-block></blockquote><h2 id=\"tags\"><a name=\"tags\" class=\"anchor\" href=\"#tags\"><span class=\"header-link\"></span></a>Tags</h2><p>As you might expect, Marko supports all native HTML/SVG/whatever tags and attributes. In addition to these, it also comes with a set of useful <a href=\"/docs/core-tags/\">core tags</a>. Beyond this, you can also build your own <a href=\"/docs/custom-tags/\">custom tags</a> and <a href=\"/docs/custom-tags/#using-tags-from-npm\">install third-party tags</a> from <code>npm</code>.</p>\n<p>All of these types of tags use the same syntax:</p>\n<code-block lang=\"marko\" lines=\"\"><my-tag-name/></code-block><p>You don&#39;t need to import tags. Marko discovers them based on the folder structure—similar to how you don&#39;t specify a full path when referencing a module in <code>node_modules/</code>. Marko looks in <a href=\"/docs/custom-tags/#how-tags-are-discovered\"><code>components/</code></a> by default and this directory can be configured in <a href=\"/docs/marko-json/\"><code>marko.json</code></a>.</p>\n<h2 id=\"dynamic-text\"><a name=\"dynamic-text\" class=\"anchor\" href=\"#dynamic-text\"><span class=\"header-link\"></span></a>Dynamic text</h2><p>You can use placeholders (<code>&amp;#36;{}</code>) to insert a value into the template:\nPlaceholders accept any JavaScript expression and the result of the expression will be inserted into the HTML output:</p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    Hello &#36;{\"world\".toUpperCase()}\n</div></code-block><p>These values are automatically escaped so you don&#39;t accidentally insert malicious code. If you do need to pass unescaped HTML, you can use <code>&amp;#36;!{}</code>:</p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    Hello &#36;!{\"<b>World</b>\"}\n</div></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> If necessary, you can escape <code>&amp;#36;</code> using a backslash to have it be treated as text instead of a placeholder token:</p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    Placeholder example: <code>\\&#36;{someValue}</code>\n</div></code-block></blockquote><h2 id=\"attributes\"><a name=\"attributes\" class=\"anchor\" href=\"#attributes\"><span class=\"header-link\"></span></a>Attributes</h2><p>In marko attributes are parsed as JavaScript expressions (instead of just strings).</p>\n<code-block lang=\"marko\" lines=\"\"><div class=myClassName/>\n<input type=\"checkbox\" checked=isChecked/>\n\n<custom-tag string=\"Hello\"/>\n<custom-tag number=1/>\n<custom-tag template-string=`Hello &#36;{name}`/>\n<custom-tag boolean=true/>\n<custom-tag array=[1, 2, 3]/>\n<custom-tag object={ hello: \"world\" }/>\n<custom-tag variable=name/>\n<custom-tag function-call=user.getName()/></code-block><p>Attributes that are passed to a custom tag are received as it&#39;s <a href=\"/docs/class-components/#input\"><code>input</code></a>.</p>\n<blockquote class=\"note\"><p><strong>Note:</strong> Although in most cases you won&#39;t see a difference, strings are parsed as JavaScript strings, not HTML strings. Where this comes up most often is using the <code>pattern</code> attribute with the <code>&lt;input&gt;</code> tag: you need to &quot;double escape&quot; your regex escape sequences much like you were passing a string to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code> constructor</a> (or you can use a literal <code>/regex/</code>).</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><input pattern=\"\\\\w+\" type=\"text\"/>\n<input pattern=/\\w+/ type=\"text\"/></code-block><p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><input pattern=\"\\w+\" type=\"text\" /></code-block></blockquote><h3 id=\"complex-expressions\"><a name=\"complex-expressions\" class=\"anchor\" href=\"#complex-expressions\"><span class=\"header-link\"></span></a>Complex expressions</h3><p>Any JavaScript expression is a valid attribute value, provided it meets the following criteria:</p>\n<p><em>It does not contain any spaces</em></p>\n<p><em>It does not contain any right angle brackets (<code>&gt;</code>)</em></p>\n<code-block lang=\"marko\" lines=\"\"><custom-tag sum=1+2 difference=3-4/></code-block><code-block lang=\"marko\" lines=\"\">custom-tag sum=1+2 difference=3-4</code-block><p><em>Spaces and <code>&gt;</code> are contained within matching <code>()</code>, <code>[]</code>, <code>{}</code>, strings and regexps</em></p>\n<code-block lang=\"marko\" lines=\"\"><custom-tag sum=(1 + 2) difference=(3 - 4) greater=(1 > 2)/></code-block><code-block lang=\"marko\" lines=\"\">custom-tag sum=(1 + 2) difference=(3 - 4) greater=(1 > 2)</code-block><h3 id=\"boolean-attributes\"><a name=\"boolean-attributes\" class=\"anchor\" href=\"#boolean-attributes\"><span class=\"header-link\"></span></a>Boolean attributes</h3><p>HTML defines the following rules for <a href=\"https://www.w3.org/TR/2008/WD-html5-20080610/semantics.html#boolean\">boolean attributes</a>:</p>\n<blockquote class=\"null\"><p>The presence of a boolean attribute on an element represents the true value, and the absence of the attribute represents the false value.</p>\n</blockquote><p>In Marko when an attribute value evaluates to <code>false</code>, <code>null</code>, or <code>undefined</code>, the attribute is not included in the output. If an attribute value is <code>true</code>, only the attribute name is included in the output.</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><input type=\"checkbox\" checked=true>\n<input type=\"checkbox\" checked=false></code-block><p>Renders the following HTML:</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><input type=\"checkbox\" checked /> <input type=\"checkbox\" /></code-block><p>Similarly, when only an attribute name is defined, it is equivalent to specifying the attribute with a value of <code>true</code>:</p>\n<code-block lang=\"marko\" lines=\"\"><!-- These are equivalent -->\n<custom-menu expanded/>\n<custom-menu expanded=true/></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong>\nYou can take advantage of the way Marko handles boolean attributes to conditionally render attributes:</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><div class=(active &amp;&amp; \"tab-active\")>Hello</div></code-block><p>With a value of <code>true</code> for <code>active</code>, the output would be the following:</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><div class=\"tab-active\">Hello</div></code-block><p>With a value of <code>false</code> for <code>active</code>, the output would be the following:</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><div>Hello</div></code-block></blockquote><h3 id=\"dynamic-attributes\"><a name=\"dynamic-attributes\" class=\"anchor\" href=\"#dynamic-attributes\"><span class=\"header-link\"></span></a>Dynamic attributes</h3><p>The spread syntax (<code>...</code>) can be used to merge in an object as attributes to a tag:</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><a ...attrs target=\"_blank\">eBay</a></code-block><p>With <code>attrs</code> as the following value:</p>\n<code-block lang=\"js\" lines=\"\">{\n    class: \"active\",\n    href: \"https://ebay.com/\"\n}</code-block><p>would output the following HTML:</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><a class=\"active\" href=\"https://ebay.com/\" target=\"_blank\">eBay</a></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong>\nWith spread attributes order matters.\nYou can take advantage of this to implement both default attributes, and enforced attributes.</p>\n<code-block lang=\"marko\" lines=\"\"><custom-tag ...defaults ...userSupplied class=\"overridden\"/></code-block></blockquote><blockquote class=\"protip\"><p><strong>ProTip:</strong>\nYou can provide <code>undefined</code> to a spread attribute which will output nothing.</p>\n</blockquote><h3 id=\"style-attribute\"><a name=\"style-attribute\" class=\"anchor\" href=\"#style-attribute\"><span class=\"header-link\"></span></a>Style attribute</h3><p>You can pass a string as the value of <code>style</code> just as you would in HTML, in addition Marko supports passing an object or array as the value of the <code>style</code> attribute:</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><!-- string: -->\n<div style=\"display:block;margin-right:16px\"/>\n\n<!-- object: -->\n<div style={ display: \"block\", color: false, marginRight: 16 }/>\n\n<!-- array: -->\n<div style=[\"display:block\", null, { marginRight: 16 }]/></code-block><p>In all cases, the output will be the same:</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><div style=\"display:block;margin-right:16px;\"></div></code-block><h3 id=\"class-attribute\"><a name=\"class-attribute\" class=\"anchor\" href=\"#class-attribute\"><span class=\"header-link\"></span></a>Class attribute</h3><p>The <code>class</code> attribute also supports receiving an object or array (in addition to a string) as shown below:</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><!-- string: -->\n<div class=\"a c\"/>\n\n<!-- object: -->\n<div class={ a:true, b:false, c:true }/>\n\n<!-- array: -->\n<div class=[\"a\", null, { c:true }]/></code-block><p>In all cases, the output will be the same:</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><div class=\"a c\"></div></code-block><h3 id=\"shorthand-attributes\"><a name=\"shorthand-attributes\" class=\"anchor\" href=\"#shorthand-attributes\"><span class=\"header-link\"></span></a>Shorthand attributes</h3><p>Marko provides a shorthand for declaring classes and ids on an element:</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><div.my-class/>\n<span#my-id/>\n<button#submit.primary.large/></code-block><p>Renders the following HTML:</p>\n<p><em>HTML Output:</em></p>\n<!-- prettier-ignore -->\n<code-block lang=\"html\" lines=\"\"><div class=\"my-class\"></div>\n<span id=\"my-id\"></span>\n<button id=\"submit\" class=\"primary large\"></button></code-block><h2 id=\"parameters\"><a name=\"parameters\" class=\"anchor\" href=\"#parameters\"><span class=\"header-link\"></span></a>Parameters</h2><p>When a tag renders its body content, it may provide data which can be received by defining parameters after the tagname. Parameters are available to the tag&#39;s body content.</p>\n<p>This is a powerful feature that allows components to provide functionality and data while giving you full control over what gets rendered.</p>\n<p>In the following example, <code>&lt;mouse&gt;</code> provides a parameter which we have named <code>position</code>:</p>\n<code-block lang=\"marko\" lines=\"\"><mouse|position|>\n   The mouse is at &#36;{position.x}, &#36;{position.y}!\n</mouse></code-block><blockquote class=\"null\"><p><code>&lt;mouse&gt;</code> would <a href=\"/docs/body-content/\">render its body</a> and provide the position similar to this: <code>&lt;&amp;#36;{input.renderBody} x=0 y=0/&gt;</code>.</p>\n</blockquote><blockquote class=\"protip\"><p><strong>ProTip:</strong> Tag <code>|parameters|</code> are treated as regular JavaScript function parameters. This means you can destructure, set default values, etc.</p>\n<code-block lang=\"marko\" lines=\"\"><mouse|{ x, y }|>\n  The mouse is at &#36;{x}, &#36;{y}!\n</mouse></code-block></blockquote><blockquote class=\"note\"><p><strong>Note:</strong> Parameters are not available to attributes, only to the tag body.</p>\n<code-block lang=\"marko\" lines=\"\"><mouse|position| something=position>\n  ReferenceError when setting the \"something\" attribute\n</mouse></code-block></blockquote><p>Parameters are used by some of Marko&#39;s <a href=\"/docs/core-tags/\">core tags</a> like the <a href=\"/docs/core-tags/#for\"><code>&lt;for&gt;</code></a> and <a href=\"/docs/core-tags/#await\"><code>&lt;await&gt;</code></a> tags.</p>\n<h2 id=\"arguments\"><a name=\"arguments\" class=\"anchor\" href=\"#arguments\"><span class=\"header-link\"></span></a>Arguments</h2><p>Some tags and attributes accept javascript style <code>arguments</code>. Arguments are denoted by parenthesis following the tag or attribute name. Arguments provide a way to pass unnamed data to a tag.</p>\n<code-block lang=\"marko\" lines=\"\"><if(true)>\n    <strong>Marko is awesome</strong>\n</if>\n\n<h1 body-only-if(skipHeading)>\n    Conditional display heading, but always show content!\n</h1></code-block><p>Arguments are used by some of Marko&#39;s <a href=\"/docs/core-tags/\">core tags</a> like the <a href=\"/docs/core-tags/#if-else-if-else\"><code>&lt;if&gt;</code></a> tag and <a href=\"/docs/core-tags/#body-only-if\"><code>body-only-if</code></a> attribute displayed above.</p>\n<p>Previously you could also use them in your own <a href=\"/docs/custom-tags/\">custom tags</a> however it is now recommended to use <a href=\"#dynamic-attributes\">dynamic attributes</a>.</p>\n<h2 id=\"dynamic-tagname\"><a name=\"dynamic-tagname\" class=\"anchor\" href=\"#dynamic-tagname\"><span class=\"header-link\"></span></a>Dynamic tagname</h2><p>The <code>&lt;&amp;#36;{dynamic}&gt;</code> syntax is used to render a tag or component that isn&#39;t determined until runtime. It can also be used within a <a href=\"/docs/custom-tags/\">custom tag</a> to render body content that was passed to that tag.</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><&#36;{href ? 'a' : 'button'} href=href>\n    Click me!\n</></code-block><p>With <code>href</code> as <code>https://ebay.com</code> would output the following HTML:</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><a href=\"https://ebay.com\">Click me!</a></code-block><p>And with <code>href</code> as <code>undefined</code> would output the following HTML:</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><button>Click me!</button></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong>\nIf you find that you have a wrapper element that is conditional, but whose body should always be rendered then you can use a null dynamic tag. For example, to only render a wrapping <code>&lt;a&gt;</code> tag if there is a valid URL then you could do the following:</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><&#36;{input.linkUrl ? \"a\" : null} href=input.linkUrl >\n   Some body content\n</></code-block><p>Given a value of <code>&quot;http://localhost/&quot;</code> for the <code>input.linkUrl</code> variable: , the output would be the following:</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><a href=\"http://localhost/\"> Some body content </a></code-block><p>Given a value of <code>undefined</code> for the <code>input.linkUrl</code> variable: , the output would be the following:</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\">Some body content</code-block></blockquote><h3 id=\"dynamic-components\"><a name=\"dynamic-components\" class=\"anchor\" href=\"#dynamic-components\"><span class=\"header-link\"></span></a>Dynamic components</h3><p>Instead of just strings, the dynamic tagname can also be a component:</p>\n<code-block lang=\"marko\" lines=\"\">import componentA from \"<component-a>\";\nimport componentB from \"<component-b>\";\n\n<&#36;{useA ? componentA : componentB}/></code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong>\nYou can also switch between a normal HTML tag and a component:</p>\n<code-block lang=\"marko\" lines=\"\">import FancyButton from \"<fancy-button>\";\n\n<&#36;{isFancy ? FancyButton : 'button'}>\n    Button text\n</></code-block></blockquote><blockquote class=\"note\"><p><strong>Note:</strong> You cannot reference a Marko custom tag using a name string:</p>\n<p><em>Marko Source:</em></p>\n<code-block lang=\"marko\" lines=\"\"><&#36;{isFancy ? 'fancy-button' : 'button'}>\n    Button text\n</></code-block><p>With <code>isFancy</code> as <code>true</code> would output the following HTML:</p>\n<p><em>HTML Output:</em></p>\n<code-block lang=\"html\" lines=\"\"><fancy-button>Button text</fancy-button></code-block></blockquote><h3 id=\"dynamic-body-content\"><a name=\"dynamic-body-content\" class=\"anchor\" href=\"#dynamic-body-content\"><span class=\"header-link\"></span></a>Dynamic body content</h3><p>When a custom tag receives <a href=\"/docs/body-content/\">body content</a>, it is passed as a <code>renderBody</code> property. To render this content you can pass the <code>renderBody</code> as the dynamic tagname.</p>\n<code-block lang=\"marko\" lines=\"\"><div class=\"container\">\n    <&#36;{input.renderBody}/>\n</div></code-block><h2 id=\"attribute-tag\"><a name=\"attribute-tag\" class=\"anchor\" href=\"#attribute-tag\"><span class=\"header-link\"></span></a>Attribute Tag</h2><p>As the name implies, <code>&lt;@attribute-tags&gt;</code> are special attributes that take the form of tags. They allow you to pass named body sections to a <a href=\"/docs/custom-tags/\">custom tag</a>.</p>\n<p>The core <code>&lt;await&gt;</code> tag allows you to pass multiple body sections that it will conditionally render based on the state of the promise.</p>\n<code-block lang=\"marko\" lines=\"\"><await(somePromise)>\n    <@then|result|>\n        The promise resolved: &#36;{result}\n    </@then>\n    <@catch|error|>\n        The promise rejected: &#36;{error.message}\n    </@catch>\n</await></code-block><p>These body sections are also commonly used to create layouts:</p>\n<code-block lang=\"marko\" lines=\"\"><page-layout>\n    <@heading>\n        <h1>Hello</h1>\n    </@heading>\n    <@body>\n        <p>Lorem ipsum....</p>\n    </@body>\n</page-layout></code-block><p>These tags are passed to the custom tag as objects with a <code>renderBody</code>, it can then <a href=\"/docs/body-content/\">render its body content</a>.</p>\n<blockquote class=\"note\"><p><strong>Note:</strong>\nAttribute tags can have their own parameters, but like attributes, they cannot access the parameters of their parent tag:</p>\n<code-block lang=\"marko\" lines=\"\"><list|item|>\n  &#36;{item.name}\n  <@separator>&#36;{item} (oops, ReferenceError)</@separator>\n</list></code-block></blockquote><h2 id=\"inline-javascript\"><a name=\"inline-javascript\" class=\"anchor\" href=\"#inline-javascript\"><span class=\"header-link\"></span></a>Inline JavaScript</h2><p>To execute JavaScript in your template you can insert a Javascript statement using the <code>&amp;#36; &lt;code&gt;</code> syntax.</p>\n<p>A line that starts with a <code>&amp;#36;</code> followed by a space will execute the code that follows.</p>\n<code-block lang=\"marko\" lines=\"\">&#36; const name = \"World\";\n\n<div>\n    Hello, &#36;{name}\n    &#36; console.log(\"The value rendered was\", name);\n</div></code-block><p>A statement may continue onto subsequent lines if new lines are bounded by <code>{}</code>, <code>[]</code>, <code>()</code>, <code>``</code>, or <code>/**/</code>:</p>\n<code-block lang=\"marko\" lines=\"\">&#36; const person = {\n    name: \"Frank\",\n    age: 32\n};</code-block><p>Multiple statements or an unbounded statement may be used by wrapping the statement(s) in a block:</p>\n<code-block lang=\"marko\" lines=\"\">&#36; {\n    const bgColor = getRandomColor();\n    const textColor = isLight(bgColor)\n        ? \"black\"\n        : \"white\";\n}</code-block><blockquote class=\"protip\"><p><strong>ProTip:</strong> Any JavaScript statement can be used here, even <code>debugger</code>:</p>\n<code-block lang=\"marko\" lines=\"\"><div>\n    &#36;{textColor}\n    &#36; debugger; // Quickly debug `textColor`\n</div></code-block></blockquote><blockquote class=\"protip\"><p><strong>ProTip:</strong> If necessary, you can escape <code>&amp;#36;</code> using a backslash to have it be treated as text instead of a placeholder token:</p>\n<code-block lang=\"marko\" lines=\"\"><p>You can run JS in a Marko template like this:</p>\n<code>\n    \\&#36; var num = 123;\n</code></code-block></blockquote><blockquote class=\"protip\"><p><strong>ProTip:</strong> If you find yourself writing a lot of inline JS, consider moving it out to an external file and then <a href=\"#importing-external-files\"><code>import</code></a> it.</p>\n</blockquote><h3 id=\"static-javascript\"><a name=\"static-javascript\" class=\"anchor\" href=\"#static-javascript\"><span class=\"header-link\"></span></a>Static JavaScript</h3><p>Inline JavaScript will run each time your template is rendered, but the JavaScript code that follows <code>static</code> will only run once when the template is loaded. It must be declared at the top level and does not have access to values passed in at render time.</p>\n<code-block lang=\"marko\" lines=\"\">static var count = 0;\nstatic var formatter = new Formatter();\n\nstatic function sum(a, b) {\n    return a + b;\n};\n\n<div>&#36;{formatter.format(sum(2, 3))}</div></code-block><p>Like inline Javascript, multiple statements or an unbounded statement may be used by wrapping the statement(s) in a block:</p>\n<code-block lang=\"marko\" lines=\"\">static {\n    var base = 2;\n    function sum(a, b) {\n        return base + a + b;\n    };\n}</code-block><h3 id=\"importing-external-files\"><a name=\"importing-external-files\" class=\"anchor\" href=\"#importing-external-files\"><span class=\"header-link\"></span></a>Importing external files</h3><p>The <code>import</code> statement is used to access data and functions from external files. It follows the same syntax as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">JavaScript <code>import</code> statement</a>.</p>\n<code-block lang=\"marko\" lines=\"\">import sum from './utils/sum';\n<div>The sum of 2 + 3 is &#36;{sum(2, 3)}</div></code-block><p>As a shorthand you can also import components by providing it&#39;s html tag name wrapped in angle brackets, eg:</p>\n<code-block lang=\"marko\" lines=\"\">import MyComponent from \"<my-component>\"</code-block><p>This is especially useful with the <a href=\"%22#dynamic-tagname%22\">dynamic tag name syntax</a> and uses the same <a href=\"/docs/custom-tags/#how-tags-are-discovered\">component discovery</a> as if the tag was used in the template.</p>\n<h2 id=\"comments\"><a name=\"comments\" class=\"anchor\" href=\"#comments\"><span class=\"header-link\"></span></a>Comments</h2><p>Standard HTML comments can be used and will be stripped out of the rendered output.\nAt the top level of the template JavaScript comments (<code>// comment</code> and <code>/** comment */</code>) can also be used.</p>\n<code-block lang=\"marko\" lines=\"\"><!-- This is a comment that will not be rendered -->\n\n<h1>Hello</h1></code-block><p>If you would like for your HTML comment to show up in the final output then you can use the <a href=\"/docs/core-tags/#html-comment\"><code>html-comment</code> core tag</a>.</p>\n\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/webpack.md\", \"<ul class=\\\"toc toc-level1\\\"><li><a href=\\\"#installation\\\">Installation</a></li><li><a href=\\\"#client-rendering\\\">Client rendering</a></li><li><a href=\\\"#using-css-pre-processors\\\">Using CSS pre-processors</a></li><li><a href=\\\"#extracting-css\\\">Extracting CSS</a></li></ul>\");\n-----\n<h1 id=\"marko-webpack\"><a name=\"marko-webpack\" class=\"anchor\" href=\"#marko-webpack\"><span class=\"header-link\"></span></a>Marko + Webpack</h1><p>The <a href=\"https://github.com/marko-js/webpack\">@marko/webpack/loader</a> loader for <a href=\"https://webpack.github.io/\">Webpack</a> will automatically compile all imported Marko templates during bundling. In addition, it will automatically bundle any template dependencies (including required CSS).</p>\n<blockquote class=\"null\"><p><strong>ProTip</strong>: Want to see it in action? Check out the <a href=\"https://github.com/marko-js/examples/tree/master/examples/webpack\"><code>marko-webpack</code></a> demo repository. Or run <code>npx @marko/create --template webpack</code> to use this sample as a starting point for a new app.</p>\n</blockquote><h2 id=\"installation\"><a name=\"installation\" class=\"anchor\" href=\"#installation\"><span class=\"header-link\"></span></a>Installation</h2><code-block lang=\"\" lines=\"\">npm install marko\nnpm install webpack @marko/webpack --save-dev</code-block><h2 id=\"client-rendering\"><a name=\"client-rendering\" class=\"anchor\" href=\"#client-rendering\"><span class=\"header-link\"></span></a>Client rendering</h2><p>Let&#39;s say we have a simple view that we want to render in the browser: <code>hello.marko</code></p>\n<p><em>hello.marko</em></p>\n<code-block lang=\"marko\" lines=\"\"><h1>Hello &#36;{input.name}</h1></code-block><p>First, let&#39;s create a <code>client.js</code> that requires the view and renders it to the body:</p>\n<p><em>client.js</em></p>\n<code-block lang=\"js\" lines=\"\">import MyTemplate from \"./hello.marko\";\n\nMyTemplate.renderSync({ name: \"Marko\" }).appendTo(document.body);</code-block><p>Now, let&#39;s configure <code>webpack</code> to compile the <code>client.js</code> file and use <code>@marko/webpack/loader</code> for any <code>*.marko</code> files:</p>\n<p><em>webpack.config.js</em></p>\n<code-block lang=\"js\" lines=\"\">module.exports = {\n  entry: \"./client.js\",\n  output: {\n    path: __dirname,\n    filename: \"static/bundle.js\"\n  },\n  resolve: {\n    extensions: [\".js\", \".marko\"]\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.marko&#36;/,\n        loader: \"@marko/webpack/loader\"\n      }\n    ]\n  }\n};</code-block><p>Run <code>webpack</code> from your terminal and you&#39;ll have a new <code>static/bundle.js</code> file created. Reference that from an html file and you&#39;re good to go.</p>\n<p><em>index.html</em></p>\n<code-block lang=\"html\" lines=\"\"><!DOCTYPE html>\n<html>\n  <body>\n    <script src=\"static/bundle.js\"></script>\n  </body>\n</html></code-block><p>Load up that page in your browser and you should see <code>Hello Marko</code> staring back at you.</p>\n<h2 id=\"using-css-pre-processors\"><a name=\"using-css-pre-processors\" class=\"anchor\" href=\"#using-css-pre-processors\"><span class=\"header-link\"></span></a>Using CSS pre-processors</h2><p>If you&#39;re using inline css with pre-processors, you must configure the appropriate loader.</p>\n<p><em>pretty.marko</em></p>\n<code-block lang=\"marko\" lines=\"\">style.less {\n    .pretty {\n        color:@pretty-color;\n    }\n}\n\n<div.pretty/></code-block><p><em>webpack.config.js</em></p>\n<code-block lang=\"js\" lines=\"\">//...\nmodule: {\n  rules: [\n    //...\n    {\n      test: /\\.less&#36;/, // matches style.less { ... } from our template\n      use: [\"style-loader\", \"css-loader\", \"less-loader\"]\n    }\n    //...\n  ];\n}\n//...</code-block><h2 id=\"extracting-css\"><a name=\"extracting-css\" class=\"anchor\" href=\"#extracting-css\"><span class=\"header-link\"></span></a>Extracting CSS</h2><p>It is recommended to configure the <a href=\"https://webpack.js.org/plugins/mini-css-extract-plugin\"><code>MiniCSSExtractPlugin</code></a> so that you get a separate css bundle rather than it being included in the JavaScript bundle.</p>\n<code-block lang=\"\" lines=\"\">npm install mini-css-extract-plugin --save-dev</code-block><p><em>webpack.config.js</em></p>\n<code-block lang=\"js\" lines=\"\">const CSSExtractPlugin = require(\"mini-css-extract-plugin\");\n\nmodule.exports = {\n  entry: \"./client.js\",\n  resolve: {\n    extensions: [\".js\", \".marko\"]\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.marko&#36;/,\n        loader: \"@marko/webpack/loader\"\n      },\n      {\n        test: /\\.(less|css)&#36;/,\n        use: [CSSExtractPlugin.loader, \"css-loader\", \"less-loader\"]\n      }\n    ]\n  },\n  plugins: [\n    // Write out CSS bundle to its own file:\n    new CSSExtractPlugin({\n      filename: \"[name].css\"\n    })\n  ]\n};</code-block>\n-----\n","import tocRegistry from \"./../../../src/utils/toc-registry.js\";\nstatic tocRegistry.set(\"../../node_modules/marko/docs/why-is-marko-fast.md\", \"<ul class=\\\"toc toc-level1\\\"><li><ul class=\\\"toc toc-level2\\\"><li><a href=\\\"#multiple-compilation-outputs\\\">Multiple Compilation Outputs</a><ul class=\\\"toc toc-level3\\\"><li><a href=\\\"#compiled-for-the-server\\\">Compiled for the server</a></li><li><a href=\\\"#compiled-for-the-browser\\\">Compiled for the browser</a></li></ul></li><li><a href=\\\"#modular-runtime\\\">Modular Runtime</a></li><li><a href=\\\"#high-performance-server-side-rendering\\\">High performance server-side rendering</a></li><li><a href=\\\"#compile-time-optimization-of-static-sub-trees\\\">Compile-time optimization of static sub-trees</a></li><li><a href=\\\"#compile-time-optimization-of-static-attributes\\\">Compile-time optimization of static attributes</a></li><li><a href=\\\"#smart-compiler\\\">Smart compiler</a></li><li><a href=\\\"#event-delegation\\\">Event delegation</a></li></ul></li></ul>\");\n-----\n<h1 id=\"why-is-marko-fast\"><a name=\"why-is-marko-fast\" class=\"anchor\" href=\"#why-is-marko-fast\"><span class=\"header-link\"></span></a>Why is Marko Fast?</h1><a href=\"https://medium.com/@psteeleidem/why-is-marko-fast-a20796cb8ae3\">\n  <img src=\"https://user-images.githubusercontent.com/1958812/28104838-d0182f48-6691-11e7-808d-d1ae2d0fed6d.png\" alt=\"Marko logo\" width=\"100%\" />\n</a><br />\n\n<p>You can find the original <a href=\"https://medium.com/@psteeleidem/why-is-marko-fast-a20796cb8ae3\">&quot;Why is Marko Fast?&quot; article here</a>!</p>\n<p>At eBay we are using <a href=\"/\">Marko</a> to render over a billion\nrequests every day and this has required us to finely tune Marko, our open\nsource UI library. We have heavily optimized Marko for fast rendering, <a href=\"http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/\">advanced\nperformance\ntechniques</a>\nand to achieve a minimal page weight (~10kb gzipped). Performance is only one\nconcern because we have also had to scale Marko to support development across\nhundreds of teams in a way that allows developers to efficiently create\nmaintainable and robust web apps.</p>\n<p>We have created <a href=\"https://github.com/marko-js/isomorphic-ui-benchmarks\">our own\nbenchmarks</a> and we have\n<a href=\"https://github.com/raxjs/server-side-rendering-comparison/pull/11\">added Marko to other\nbenchmarks</a>,\nbut benchmarks cannot always be trusted. While we make every effort to be fair\nwith our benchmarks, what matters most is performance in real world applications\nas opposed to focusing on micro benchmarks. This is one reason that the V8 team\nhas switched to <a href=\"https://v8project.blogspot.com/2016/12/how-v8-measures-real-world-performance.html\">a new methodology to measure and understand real-world\nJavaScript\nperformance</a>.</p>\n<p>Similarly, we’ve taken a look at how our developers are <em>actually</em> writing their\nMarko components and have found patterns that could be further optimized.\nInstead of focusing on benchmarks in this article, I want to focus on the\ndetails of optimizations that we have applied to Marko.</p>\n<h3 id=\"multiple-compilation-outputs\"><a name=\"multiple-compilation-outputs\" class=\"anchor\" href=\"#multiple-compilation-outputs\"><span class=\"header-link\"></span></a>Multiple Compilation Outputs</h3><p>Marko is an isomorphic UI library that runs on both the server and in the\nbrowser. As <a href=\"https://medium.com/@mlrawlings\">Michael Rawlings</a> mentioned in\n“<a href=\"https://hackernoon.com/server-side-rendering-shootout-with-marko-preact-rax-react-and-vue-25e1ae17800f\">Server-side Rendering\nShootout</a>”,\nwhen rendering on the server, Marko renders directly to a string representation\nof the document (HTML) that can be sent as the HTTP response.</p>\n<p>When rendering in the browser, an HTML string would have to be parsed in order\nto update the DOM. For this reason, Marko compiles a view to a program that\nrenders directly to a virtual document (VDOM) tree that can be used to\nefficiently update the real DOM when targeting the browser.</p>\n<p>Given the following template:</p>\n<code-block lang=\"marko\" lines=\"\"><div>Hello &#36;{input.name}!</div></code-block><h4 id=\"compiled-for-the-server\"><a name=\"compiled-for-the-server\" class=\"anchor\" href=\"#compiled-for-the-server\"><span class=\"header-link\"></span></a>Compiled for the server</h4><p>The compiled output is optimized for streaming HTML output on the server:</p>\n<code-block lang=\"js\" lines=\"\">var marko_template = require(\"marko/html\").t(__filename),\n  marko_helpers = require(\"marko/runtime/html/helpers\"),\n  marko_escapeXml = marko_helpers.x;\n\nfunction render(input, out) {\n  out.w(\"<div>Hello \" + marko_escapeXml(input.name) + \"!</div>\");\n}</code-block><h4 id=\"compiled-for-the-browser\"><a name=\"compiled-for-the-browser\" class=\"anchor\" href=\"#compiled-for-the-browser\"><span class=\"header-link\"></span></a>Compiled for the browser</h4><code-block lang=\"js\" lines=\"\">var marko_template = require(\"marko/vdom\").t(__filename);\n\nfunction render(input, out) {\n  out\n    .e(\"DIV\", null, 3)\n    .t(\"Hello \")\n    .t(input.name)\n    .t(\"!\");\n}</code-block><p>The compiled output is optimized for virtual DOM rendering in the browser:</p>\n<h3 id=\"modular-runtime\"><a name=\"modular-runtime\" class=\"anchor\" href=\"#modular-runtime\"><span class=\"header-link\"></span></a>Modular Runtime</h3><p>The Marko runtime is not distributed as a single JavaScript file. Instead, the\nMarko compiler generates a JavaScript module that will only import the parts of\nthe runtime that are actually needed. This allows us to add new features to\nMarko without bloating existing applications. For example, given the following\ntemplate:</p>\n<code-block lang=\"marko\" lines=\"\">&#36; var color = 'red';\n<div style={backgroundColor: color}></div></code-block><p>In the above example, extra runtime code is needed to render the <code>style</code> attribute\nbased on the JavaScript object that is provided. The compiled code that imports\nthe <code>styleAttr</code> helper is shown below:</p>\n<code-block lang=\"js\" lines=\"\">var marko_styleAttr = require(\"marko/runtime/vdom/helper-styleAttr\");\n\nfunction render(input, out) {\n  var color = \"red\";\n  out.e(\n    \"DIV\",\n    {\n      style: marko_styleAttr({\n        backgroundColor: color\n      })\n    },\n    0,\n    4\n  );\n}</code-block><h3 id=\"high-performance-server-side-rendering\"><a name=\"high-performance-server-side-rendering\" class=\"anchor\" href=\"#high-performance-server-side-rendering\"><span class=\"header-link\"></span></a>High performance server-side rendering</h3><p>Compared to solutions based on JSX that exclusively do virtual DOM rendering,\nMarko has a huge advantage for server-side rendering. When rendering to a\nvirtual DOM tree on the server it’s a two-step process to render HTML:</p>\n<ul>\n<li>First pass to produce an entire virtual DOM tree in memory</li>\n<li>Second pass to serialize the virtual DOM tree to an HTML string that can then be\nsent over the wire (this requires traversing the entire tree structure)</li>\n</ul>\n<p>In contrast, Marko renders directly to an HTML stream in a single pass. There is\nno intermediate tree data structure.</p>\n<h3 id=\"compile-time-optimization-of-static-sub-trees\"><a name=\"compile-time-optimization-of-static-sub-trees\" class=\"anchor\" href=\"#compile-time-optimization-of-static-sub-trees\"><span class=\"header-link\"></span></a>Compile-time optimization of static sub-trees</h3><p>Given the following template:</p>\n<code-block lang=\"marko\" lines=\"\"><div>This is a <strong>static</strong> node</div></code-block><p>Marko will recognize that the template fragment produces the same output every\ntime and it will thus create the virtual DOM node once as shown in the following\ncompiled output:</p>\n<code-block lang=\"js\" lines=\"\">var marko_node0 = marko_createElement(\"DIV\", null, 3, ...)\n  .t(\"This is a \")\n  .e(\"STRONG\", null, 1)\n    .t(\"static\")\n  .t(\" node\");\n\nfunction render(input, out) {\n  out.n(marko_node0);\n}</code-block><p>Rendering a static sub-tree has virtually zero cost. In addition, Marko will\nskip diffing/patching static sub-trees.</p>\n<p>Similarly, on the server, Marko will merge static parts of the template into a\nsingle string:</p>\n<code-block lang=\"js\" lines=\"\">function render(input, out) {\n  out.w(\"<div>This is a <strong>static</strong> node</div>\");\n}</code-block><h3 id=\"compile-time-optimization-of-static-attributes\"><a name=\"compile-time-optimization-of-static-attributes\" class=\"anchor\" href=\"#compile-time-optimization-of-static-attributes\"><span class=\"header-link\"></span></a>Compile-time optimization of static attributes</h3><p>Marko will also optimize static attributes on dynamic elements.</p>\n<p>Given the following template:</p>\n<code-block lang=\"marko\" lines=\"\"><div.hello>Hello &#36;{input.name}!</div></code-block><p>Marko will produce the following compiled output:</p>\n<code-block lang=\"js\" lines=\"\">var marko_attrs0 = {\n  class: \"hello\"\n};\n\nfunction render(input, out) {\n  out\n    .e(\"DIV\", marko_attrs0, 3)\n    .t(\"Hello \")\n    .t(input.name)\n    .t(\"!\");\n}</code-block><p>Notice that the attributes object is only created once and it is used for every\nrender. In addition, no diffing/patching will happen for static attributes.</p>\n<h3 id=\"smart-compiler\"><a name=\"smart-compiler\" class=\"anchor\" href=\"#smart-compiler\"><span class=\"header-link\"></span></a>Smart compiler</h3><p>With Marko we favor doing as much at compile-time as possible. This has made our\ncompiler more complex, but it gives us significant gains at runtime. We have\n~90% code coverage and over 2,000 tests to ensure that the compiler is working\ncorrectly. In addition, in many cases the Marko compiler provides hints to the\nruntime for a given template so that the runtime can optimize for specific\npatterns. For example, Marko recognizes if an HTML element only has <code>class</code>/<code>id</code>/<code>style</code> defined\nand the runtime optimizes for these virtual DOM nodes when doing\ndiffing/patching (the Marko compiler generates code that flags simple virtual\nDOM nodes for targeted diffing/patching logic).</p>\n<h3 id=\"event-delegation\"><a name=\"event-delegation\" class=\"anchor\" href=\"#event-delegation\"><span class=\"header-link\"></span></a>Event delegation</h3><p>If you are building a UI component you will likely need to write code to handle\nvarious DOM events (<code>click</code>, <code>submit</code>, etc.). It is common for developers to write code that\nadds DOM event listeners using <code>dom.addEventListener(...)</code> or using a library such as jQuery. You can still\ndo that when building UI components using Marko, but there is overhead in\nattaching listeners when lots of components are being initialized. Instead,\nMarko recommends using declarative event binding as shown below:</p>\n<code-block lang=\"marko\" lines=\"\"><button type=\"button\" on-click(\"handleClick\")>\n  Click Me\n</button></code-block><p>When using declarative event binding, no DOM event listeners are actually\nattached for events that bubble. Instead, Marko attaches a single listener on\nthe root DOM element of the page for each DOM event that bubbles (done at\nstartup). When Marko receives an event at the root it handles delegating the\nevent to the appropriate components that are interested in that event. This is\ndone by looking at the <code>event.target</code> property to see where the event originated and then\nwalking up the tree to find components that need to be notified. As a result,\nthere is slightly more work that is done when a DOM event is captured at the\nroot, but this approach uses much less memory and reduces the amount of work\nthat is done during initialization. The extra overhead of delegating events to\ncomponents will not be noticeable so it is a very beneficial optimization.</p>\n<p><em>Cover image credit: <a href=\"https://thenounproject.com/search/?q=superhero&amp;i=690775\">Superhero by Gan Khoon Lay from the Noun Project</a></em></p>\n\n-----\n","<a.edit-on-github href=`https://github.com/${input.repo}/blob/master/${input.repoPath}`>\n    EDIT <img src=\"./github.svg\"/>\n</a>\n\nstyle {\n    .edit-on-github {\n        display:flex;\n        justify-content:center;\n        align-items:center;\n        position: absolute;\n        top:0.25em; right:0;\n        font-size: 0.8em;\n        color:#a4a6a8;\n        font-weight:600;\n    }\n\n    .edit-on-github img {\n        margin-left:0.5em;\n        height:1.2em;\n        filter:contrast(0) brightness(1.25);\n    }\n}\n","export default \"/assets/d7fca0b8.svg\";","import getContributors from \"./get-contributors\";\n\n$ var editPath = `https://github.com/${input.repo}/blob/master/${input.repoPath}`;\n\nstyle {\n    .contributors {\n        display: flex;\n        flex-direction:row;\n        flex-wrap:wrap;\n    }\n    .contributors .contributor {\n        display:flex;\n        flex-direction:column;\n        width:4em;\n        margin:1em;\n        align-items:center;\n        text-decoration:none;\n    }\n    .contributors .photo {\n        width:4em;\n        height:4em;\n        border-radius:0.2rem;\n        box-shadow:0 0 0.2em #c9cbcd;\n    }\n    .contributors .name {\n        width:150%;\n        text-align:center;\n        font-size:0.5em;\n        color:#595b5d;\n        margin-top:0.2rem;\n    }\n    .contributors .you .photo {\n        display: flex;\n        align-items:center;\n        justify-content:center;\n        background:#09d;\n    }\n    .contributors .you .icon {\n        font-size:2em;\n        color:#fff;\n        margin-top: -0.15em;\n    }\n}\n\n<await(getContributors(input.repo, input.repoPath))>\n    <@then|contributors|>\n        <h2 id=\"contributors\">\n            <a name=\"contributors\" class=\"anchor\" href=\"#contributors\">\n                <span class=\"header-link\"/>\n            </a>\n            Contributors\n        </h2>\n        <p>\n            Helpful? You can thank these awesome people! You can also\n            <a href=editPath>\n                edit this doc\n            </a>\n            if you see any issues or want to improve it.\n        </p>\n        <div.contributors>\n            <for|contributor| of=contributors>\n                <a.contributor href=contributor.profile>\n                    <img.photo src=contributor.photo/>\n                    <span.name>${contributor.username}</span>\n                </a>\n            </for>\n            <a.contributor.you href=editPath>\n                <div.photo>\n                    <span class=\"icon\">+</span>\n                </div>\n                <span.name>You?</span>\n            </a>\n        </div>\n    </@then>\n</await>\n","const gh = require(\"gh-got\");\n\nmodule.exports = function getContributorsForFile(repo, repoFilePath) {\n  var contributors = {};\n\n  return gh(`repos/${repo}/commits?path=${repoFilePath}`)\n    .then(res => {\n      res.body.forEach(contribution => {\n        var author = contribution.author || contribution.commit.author;\n        if (author) {\n          contributors[author.login] = {\n            username: author.login,\n            photo: author.avatar_url,\n            profile: author.html_url,\n            commits: `https://github.com/${repo}/commits?path=${repoFilePath}&author=${author.login}`\n          };\n        }\n      });\n      return Object.keys(contributors)\n        .sort()\n        .map(k => contributors[k]);\n    })\n    .catch(err => {\n      var message =\n        (err.response && err.response.body && err.response.body.message) || \"\";\n      if (err.statusCode === 403 && /rate limit/i.test(message)) {\n        console.error(\n          \"GitHub API rate limit exceeded.  You can set the GITHUB_TOKEN environment variable for a higher limit. https://github.com/settings/tokens\"\n        );\n        if (process.env.NODE_ENV === \"production\") process.exit(1);\n      } else {\n        throw err;\n      }\n    });\n};\n","module.exports = require(\"marko/dist/core-tags/core/await/renderer.js\");","import formatSlug from '../../../../../utils/format-slug';\n\n<h1>${input.title}</h1>\n<doc-list ...input/>\n\n<macro|{ title, docs }| name=\"doc-list\">\n    <ul>\n        <for|doc| of=docs>\n            <li>\n                <if(typeof doc === 'object')>\n                    <a href=`/docs/${formatSlug(title)}-${formatSlug(doc.title)}-overview/`>${doc.title}</a>\n                    <doc-list ...doc/>\n                </if>\n                <else>\n                    <a href=`/docs/${formatSlug(doc)}/`>${doc}</a>\n                </else>\n            </li>\n        </for>\n    </ul>\n</macro>","module.exports = require(\"@babel/runtime/helpers/interopRequireDefault\");","global.BROWSER_ENVS = [{ \n                  env: \"production\", \n                  test: null \n                }]","\n\nimport $$index from \"/home/dpiercey/dev/github/marko/website/node_modules/@marko/build/dist/files/dir-index.marko\";\nimport page__index from \"/home/dpiercey/dev/github/marko/website/src/pages/index/index.marko\";\nimport page__try$online__index from \"/home/dpiercey/dev/github/marko/website/src/pages/try-online/index.marko\";\nimport page__docs__$name__index from \"/home/dpiercey/dev/github/marko/website/src/pages/docs/:name/index.marko\";\n\nfunction getRoute(url) {\n  const normalized = url.replace(/^\\/|(\\/|(\\/index)?(\\.marko|\\.html)?)$/g, '');\n  const pathParts = normalized === '' ? [] : normalized.split('/');\n\n  if ('/' + normalized !== url) {\n    return {\n      redirect:true,\n      path: '/' + normalized\n    }\n  }\n\n  const params = {};\n\n  const part_0 = pathParts[0];\n  if (part_0 === undefined) {\n    return { params, template:page__index };\n  } else if (part_0 === \"docs\") {\n    const part_1 = pathParts[1];\n    if (true) {\n      params[\"name\"] = part_1;\n      const part_2 = pathParts[2];\n      if (part_2 === undefined) {\n        return { params, template:page__docs__$name__index };\n      }\n    } else if (part_1 === undefined) {\n      return { template:$$index, params:{ dirs:[\":name\"], files:[] } };\n    }\n  } else if (part_0 === \"try-online\") {\n    const part_1 = pathParts[1];\n    if (part_1 === undefined) {\n      return { params, template:page__try$online__index };\n    }\n  }\n}\n\nglobal.GET_ROUTE = getRoute;\n","const _marko_template = _t(__filename);\n\nexport default _marko_template;\nimport template from \"./dir-index.marko\";\nimport manifest from \"./../../../../../__MARKO_WEBPACK__MANIFEST.js\";\n\nfunction renderAssets() {\n  const assets = this.___assets;\n  const nonce = this.global.cspNonce;\n  this.___renderAssets = this.___assets = undefined;\n  this.flush = this.___flush;\n  this.end = this.___end;\n\n  if (assets) {\n    if (assets.js) {\n      const nonceAttr = nonce ? ` nonce=${JSON.stringify(nonce)}` : \"\";\n      assets.js.forEach(js => {\n        this.write(`<script src=${JSON.stringify(__webpack_public_path__ + js)}${nonceAttr} async></script>`);\n      });\n    }\n\n    if (assets.css) {\n      assets.css.forEach(css => {\n        this.write(`<link rel=\"stylesheet\" href=${JSON.stringify(__webpack_public_path__ + css)}>`);\n      });\n    }\n  }\n}\n\nfunction outFlushOverride() {\n  this.___renderAssets();\n\n  this.flush();\n}\n\nfunction outEndOverride(data, encoding, callback) {\n  this.___renderAssets();\n\n  this.end(data, encoding, callback);\n}\n\nimport _marko_tag from \"marko/dist/runtime/helpers/render-tag\";\nimport _initComponents from \"../../../../marko/src/core-tags/components/init-components-tag.js\";\nimport _awaitReorderer from \"../../../../marko/src/core-tags/core/await/reorderer-renderer.js\";\nimport _marko_renderer from \"marko/dist/runtime/components/renderer\";\nimport { t as _t } from \"marko/dist/runtime/html\";\nconst _marko_componentType = \"i0YD5PPK\",\n      _marko_component = {};\n_marko_template._ = _marko_renderer(function (input, out, _component, component, state) {\n  out.___flush = out.flush;\n  out.___end = out.end;\n  out.___renderAssets = renderAssets;\n  out.___assets = manifest.getAssets(\"dir-index_e54i\", out.global.buildName);\n  out.flush = outFlushOverride;\n  out.end = outEndOverride;\n\n  _marko_tag(template, input, out, _component, \"0\");\n\n  _marko_tag(_initComponents, {}, out, _component, \"1\");\n\n  _marko_tag(_awaitReorderer, {}, out, _component, \"2\");\n}, {\n  t: _marko_componentType,\n  i: true\n}, _marko_component);\n_marko_template.meta = {\n  id: _marko_componentType,\n  tags: [\"./dir-index.marko\", \"../../../../marko/src/core-tags/components/init-components-tag.js\", \"../../../../marko/src/core-tags/core/await/reorderer-renderer.js\"]\n};","module.exports = require(\"warp10\");","var code;\nvar fs = require(\"fs\");\n\nexports.isSupported = true;\n\nexports.getCode = function() {\n  if (!code) {\n    code = fs.readFileSync(\n      require.resolve(\"./client-reorder-runtime.min.js\"),\n      \"utf8\"\n    );\n  }\n  return code;\n};\n","module.exports = require(\"fs\");","export default \"/assets/48ab9fa0.png\";","export default \"/assets/2a0575bc.png\";","export default \"/assets/cfe41324.png\";","export default \"/assets/7ef48393.jpg\";","export default \"/assets/23543a4b.png\";","export default \"/assets/8417b02f.jpg\";","export default \"/assets/27d3f004.png\";","export default \"/assets/fe927cb8.png\";","export default \"/assets/e09a72d8.png\";","export default \"/assets/6f575a15.png\";","export default \"/assets/386103d5.png\";","export default \"/assets/df7d59e3.png\";","export default \"/assets/c38a020c.png\";","module.exports = require(\"gh-got\");","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.routes = exports.assets = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nconst getRoute = global.GET_ROUTE;\nconst browserEnvs = global.BROWSER_ENVS;\n\nconst assets = process.env.NODE_ENV === \"production\" && require(\"connect-gzip-static\")( // eslint-disable-next-line\n_path.default.join(__non_webpack_require__.resolve(\".\"), \"..\", \"assets\"), {\n  maxAge: 31536000\n});\n\nexports.assets = assets;\n\nconst routes = global.MARKO_MIDDLEWARE || ((req, res, notFound) => {\n  res.setHeader(\"content-type\", \"text/html\");\n  const [pathname, query] = req.url.split(\"?\");\n  const route = getRoute(pathname);\n\n  if (route) {\n    if (route.redirect) {\n      res.statusCode = 301;\n      res.setHeader(\"location\", route.path);\n      res.end(`Redirecting to <a href=${JSON.stringify(route.path)}>${route.path}</a>`);\n    } else {\n      const userAgent = req.headers[\"user-agent\"] || \"\";\n      route.template.render({\n        $global: {\n          buildName: `Browser-${browserEnvs.find(({\n            test\n          }) => !test || test.test(userAgent)).env}`\n        },\n        params: route.params,\n        query,\n        pathname\n      }, res);\n    }\n  } else {\n    notFound();\n  }\n});\n\nexports.routes = routes;","module.exports = require(\"connect-gzip-static\");","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _http = _interopRequireDefault(require(\"http\"));\n\nvar _middleware = require(\"./middleware\");\n\nconst PORT = process.env.PORT || global.PORT;\nconst assetsMatch = /^\\/assets\\//;\n\n_http.default.createServer((req, res) => {\n  if (assetsMatch.test(req.url)) {\n    req.url = req.url.slice(7);\n    (0, _middleware.assets)(req, res, notFound);\n  } else {\n    (0, _middleware.routes)(req, res, notFound);\n  }\n\n  function notFound() {\n    res.end(\"Not Found\");\n  }\n}).listen(PORT);","module.exports = require(\"http\");"],"sourceRoot":""}